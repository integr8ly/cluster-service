// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/rds"
	"sync"
)

// Ensure, that rdsClientMock does implement rdsClient.
// If this is not the case, regenerate this file with moq.
var _ rdsClient = &rdsClientMock{}

// rdsClientMock is a mock implementation of rdsClient.
//
// 	func TestSomethingThatUsesrdsClient(t *testing.T) {
//
// 		// make and configure a mocked rdsClient
// 		mockedrdsClient := &rdsClientMock{
// 			AddRoleToDBClusterFunc: func(addRoleToDBClusterInput *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error) {
// 				panic("mock out the AddRoleToDBCluster method")
// 			},
// 			AddRoleToDBClusterRequestFunc: func(addRoleToDBClusterInput *rds.AddRoleToDBClusterInput) (*request.Request, *rds.AddRoleToDBClusterOutput) {
// 				panic("mock out the AddRoleToDBClusterRequest method")
// 			},
// 			AddRoleToDBClusterWithContextFunc: func(contextMoqParam context.Context, addRoleToDBClusterInput *rds.AddRoleToDBClusterInput, options ...request.Option) (*rds.AddRoleToDBClusterOutput, error) {
// 				panic("mock out the AddRoleToDBClusterWithContext method")
// 			},
// 			AddRoleToDBInstanceFunc: func(addRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error) {
// 				panic("mock out the AddRoleToDBInstance method")
// 			},
// 			AddRoleToDBInstanceRequestFunc: func(addRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput) (*request.Request, *rds.AddRoleToDBInstanceOutput) {
// 				panic("mock out the AddRoleToDBInstanceRequest method")
// 			},
// 			AddRoleToDBInstanceWithContextFunc: func(contextMoqParam context.Context, addRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput, options ...request.Option) (*rds.AddRoleToDBInstanceOutput, error) {
// 				panic("mock out the AddRoleToDBInstanceWithContext method")
// 			},
// 			AddSourceIdentifierToSubscriptionFunc: func(addSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
// 				panic("mock out the AddSourceIdentifierToSubscription method")
// 			},
// 			AddSourceIdentifierToSubscriptionRequestFunc: func(addSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput) (*request.Request, *rds.AddSourceIdentifierToSubscriptionOutput) {
// 				panic("mock out the AddSourceIdentifierToSubscriptionRequest method")
// 			},
// 			AddSourceIdentifierToSubscriptionWithContextFunc: func(contextMoqParam context.Context, addSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput, options ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
// 				panic("mock out the AddSourceIdentifierToSubscriptionWithContext method")
// 			},
// 			AddTagsToResourceFunc: func(addTagsToResourceInput *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error) {
// 				panic("mock out the AddTagsToResource method")
// 			},
// 			AddTagsToResourceRequestFunc: func(addTagsToResourceInput *rds.AddTagsToResourceInput) (*request.Request, *rds.AddTagsToResourceOutput) {
// 				panic("mock out the AddTagsToResourceRequest method")
// 			},
// 			AddTagsToResourceWithContextFunc: func(contextMoqParam context.Context, addTagsToResourceInput *rds.AddTagsToResourceInput, options ...request.Option) (*rds.AddTagsToResourceOutput, error) {
// 				panic("mock out the AddTagsToResourceWithContext method")
// 			},
// 			ApplyPendingMaintenanceActionFunc: func(applyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error) {
// 				panic("mock out the ApplyPendingMaintenanceAction method")
// 			},
// 			ApplyPendingMaintenanceActionRequestFunc: func(applyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput) (*request.Request, *rds.ApplyPendingMaintenanceActionOutput) {
// 				panic("mock out the ApplyPendingMaintenanceActionRequest method")
// 			},
// 			ApplyPendingMaintenanceActionWithContextFunc: func(contextMoqParam context.Context, applyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput, options ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error) {
// 				panic("mock out the ApplyPendingMaintenanceActionWithContext method")
// 			},
// 			AuthorizeDBSecurityGroupIngressFunc: func(authorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
// 				panic("mock out the AuthorizeDBSecurityGroupIngress method")
// 			},
// 			AuthorizeDBSecurityGroupIngressRequestFunc: func(authorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput) (*request.Request, *rds.AuthorizeDBSecurityGroupIngressOutput) {
// 				panic("mock out the AuthorizeDBSecurityGroupIngressRequest method")
// 			},
// 			AuthorizeDBSecurityGroupIngressWithContextFunc: func(contextMoqParam context.Context, authorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput, options ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
// 				panic("mock out the AuthorizeDBSecurityGroupIngressWithContext method")
// 			},
// 			BacktrackDBClusterFunc: func(backtrackDBClusterInput *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error) {
// 				panic("mock out the BacktrackDBCluster method")
// 			},
// 			BacktrackDBClusterRequestFunc: func(backtrackDBClusterInput *rds.BacktrackDBClusterInput) (*request.Request, *rds.BacktrackDBClusterOutput) {
// 				panic("mock out the BacktrackDBClusterRequest method")
// 			},
// 			BacktrackDBClusterWithContextFunc: func(contextMoqParam context.Context, backtrackDBClusterInput *rds.BacktrackDBClusterInput, options ...request.Option) (*rds.BacktrackDBClusterOutput, error) {
// 				panic("mock out the BacktrackDBClusterWithContext method")
// 			},
// 			CancelExportTaskFunc: func(cancelExportTaskInput *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error) {
// 				panic("mock out the CancelExportTask method")
// 			},
// 			CancelExportTaskRequestFunc: func(cancelExportTaskInput *rds.CancelExportTaskInput) (*request.Request, *rds.CancelExportTaskOutput) {
// 				panic("mock out the CancelExportTaskRequest method")
// 			},
// 			CancelExportTaskWithContextFunc: func(contextMoqParam context.Context, cancelExportTaskInput *rds.CancelExportTaskInput, options ...request.Option) (*rds.CancelExportTaskOutput, error) {
// 				panic("mock out the CancelExportTaskWithContext method")
// 			},
// 			CopyDBClusterParameterGroupFunc: func(copyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error) {
// 				panic("mock out the CopyDBClusterParameterGroup method")
// 			},
// 			CopyDBClusterParameterGroupRequestFunc: func(copyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput) (*request.Request, *rds.CopyDBClusterParameterGroupOutput) {
// 				panic("mock out the CopyDBClusterParameterGroupRequest method")
// 			},
// 			CopyDBClusterParameterGroupWithContextFunc: func(contextMoqParam context.Context, copyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput, options ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error) {
// 				panic("mock out the CopyDBClusterParameterGroupWithContext method")
// 			},
// 			CopyDBClusterSnapshotFunc: func(copyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error) {
// 				panic("mock out the CopyDBClusterSnapshot method")
// 			},
// 			CopyDBClusterSnapshotRequestFunc: func(copyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput) (*request.Request, *rds.CopyDBClusterSnapshotOutput) {
// 				panic("mock out the CopyDBClusterSnapshotRequest method")
// 			},
// 			CopyDBClusterSnapshotWithContextFunc: func(contextMoqParam context.Context, copyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput, options ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error) {
// 				panic("mock out the CopyDBClusterSnapshotWithContext method")
// 			},
// 			CopyDBParameterGroupFunc: func(copyDBParameterGroupInput *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error) {
// 				panic("mock out the CopyDBParameterGroup method")
// 			},
// 			CopyDBParameterGroupRequestFunc: func(copyDBParameterGroupInput *rds.CopyDBParameterGroupInput) (*request.Request, *rds.CopyDBParameterGroupOutput) {
// 				panic("mock out the CopyDBParameterGroupRequest method")
// 			},
// 			CopyDBParameterGroupWithContextFunc: func(contextMoqParam context.Context, copyDBParameterGroupInput *rds.CopyDBParameterGroupInput, options ...request.Option) (*rds.CopyDBParameterGroupOutput, error) {
// 				panic("mock out the CopyDBParameterGroupWithContext method")
// 			},
// 			CopyDBSnapshotFunc: func(copyDBSnapshotInput *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error) {
// 				panic("mock out the CopyDBSnapshot method")
// 			},
// 			CopyDBSnapshotRequestFunc: func(copyDBSnapshotInput *rds.CopyDBSnapshotInput) (*request.Request, *rds.CopyDBSnapshotOutput) {
// 				panic("mock out the CopyDBSnapshotRequest method")
// 			},
// 			CopyDBSnapshotWithContextFunc: func(contextMoqParam context.Context, copyDBSnapshotInput *rds.CopyDBSnapshotInput, options ...request.Option) (*rds.CopyDBSnapshotOutput, error) {
// 				panic("mock out the CopyDBSnapshotWithContext method")
// 			},
// 			CopyOptionGroupFunc: func(copyOptionGroupInput *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error) {
// 				panic("mock out the CopyOptionGroup method")
// 			},
// 			CopyOptionGroupRequestFunc: func(copyOptionGroupInput *rds.CopyOptionGroupInput) (*request.Request, *rds.CopyOptionGroupOutput) {
// 				panic("mock out the CopyOptionGroupRequest method")
// 			},
// 			CopyOptionGroupWithContextFunc: func(contextMoqParam context.Context, copyOptionGroupInput *rds.CopyOptionGroupInput, options ...request.Option) (*rds.CopyOptionGroupOutput, error) {
// 				panic("mock out the CopyOptionGroupWithContext method")
// 			},
// 			CreateCustomDBEngineVersionFunc: func(createCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput) (*rds.CreateCustomDBEngineVersionOutput, error) {
// 				panic("mock out the CreateCustomDBEngineVersion method")
// 			},
// 			CreateCustomDBEngineVersionRequestFunc: func(createCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput) (*request.Request, *rds.CreateCustomDBEngineVersionOutput) {
// 				panic("mock out the CreateCustomDBEngineVersionRequest method")
// 			},
// 			CreateCustomDBEngineVersionWithContextFunc: func(contextMoqParam context.Context, createCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput, options ...request.Option) (*rds.CreateCustomDBEngineVersionOutput, error) {
// 				panic("mock out the CreateCustomDBEngineVersionWithContext method")
// 			},
// 			CreateDBClusterFunc: func(createDBClusterInput *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error) {
// 				panic("mock out the CreateDBCluster method")
// 			},
// 			CreateDBClusterEndpointFunc: func(createDBClusterEndpointInput *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error) {
// 				panic("mock out the CreateDBClusterEndpoint method")
// 			},
// 			CreateDBClusterEndpointRequestFunc: func(createDBClusterEndpointInput *rds.CreateDBClusterEndpointInput) (*request.Request, *rds.CreateDBClusterEndpointOutput) {
// 				panic("mock out the CreateDBClusterEndpointRequest method")
// 			},
// 			CreateDBClusterEndpointWithContextFunc: func(contextMoqParam context.Context, createDBClusterEndpointInput *rds.CreateDBClusterEndpointInput, options ...request.Option) (*rds.CreateDBClusterEndpointOutput, error) {
// 				panic("mock out the CreateDBClusterEndpointWithContext method")
// 			},
// 			CreateDBClusterParameterGroupFunc: func(createDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error) {
// 				panic("mock out the CreateDBClusterParameterGroup method")
// 			},
// 			CreateDBClusterParameterGroupRequestFunc: func(createDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput) (*request.Request, *rds.CreateDBClusterParameterGroupOutput) {
// 				panic("mock out the CreateDBClusterParameterGroupRequest method")
// 			},
// 			CreateDBClusterParameterGroupWithContextFunc: func(contextMoqParam context.Context, createDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput, options ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error) {
// 				panic("mock out the CreateDBClusterParameterGroupWithContext method")
// 			},
// 			CreateDBClusterRequestFunc: func(createDBClusterInput *rds.CreateDBClusterInput) (*request.Request, *rds.CreateDBClusterOutput) {
// 				panic("mock out the CreateDBClusterRequest method")
// 			},
// 			CreateDBClusterSnapshotFunc: func(createDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error) {
// 				panic("mock out the CreateDBClusterSnapshot method")
// 			},
// 			CreateDBClusterSnapshotRequestFunc: func(createDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput) (*request.Request, *rds.CreateDBClusterSnapshotOutput) {
// 				panic("mock out the CreateDBClusterSnapshotRequest method")
// 			},
// 			CreateDBClusterSnapshotWithContextFunc: func(contextMoqParam context.Context, createDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput, options ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error) {
// 				panic("mock out the CreateDBClusterSnapshotWithContext method")
// 			},
// 			CreateDBClusterWithContextFunc: func(contextMoqParam context.Context, createDBClusterInput *rds.CreateDBClusterInput, options ...request.Option) (*rds.CreateDBClusterOutput, error) {
// 				panic("mock out the CreateDBClusterWithContext method")
// 			},
// 			CreateDBInstanceFunc: func(createDBInstanceInput *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error) {
// 				panic("mock out the CreateDBInstance method")
// 			},
// 			CreateDBInstanceReadReplicaFunc: func(createDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error) {
// 				panic("mock out the CreateDBInstanceReadReplica method")
// 			},
// 			CreateDBInstanceReadReplicaRequestFunc: func(createDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput) (*request.Request, *rds.CreateDBInstanceReadReplicaOutput) {
// 				panic("mock out the CreateDBInstanceReadReplicaRequest method")
// 			},
// 			CreateDBInstanceReadReplicaWithContextFunc: func(contextMoqParam context.Context, createDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput, options ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error) {
// 				panic("mock out the CreateDBInstanceReadReplicaWithContext method")
// 			},
// 			CreateDBInstanceRequestFunc: func(createDBInstanceInput *rds.CreateDBInstanceInput) (*request.Request, *rds.CreateDBInstanceOutput) {
// 				panic("mock out the CreateDBInstanceRequest method")
// 			},
// 			CreateDBInstanceWithContextFunc: func(contextMoqParam context.Context, createDBInstanceInput *rds.CreateDBInstanceInput, options ...request.Option) (*rds.CreateDBInstanceOutput, error) {
// 				panic("mock out the CreateDBInstanceWithContext method")
// 			},
// 			CreateDBParameterGroupFunc: func(createDBParameterGroupInput *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error) {
// 				panic("mock out the CreateDBParameterGroup method")
// 			},
// 			CreateDBParameterGroupRequestFunc: func(createDBParameterGroupInput *rds.CreateDBParameterGroupInput) (*request.Request, *rds.CreateDBParameterGroupOutput) {
// 				panic("mock out the CreateDBParameterGroupRequest method")
// 			},
// 			CreateDBParameterGroupWithContextFunc: func(contextMoqParam context.Context, createDBParameterGroupInput *rds.CreateDBParameterGroupInput, options ...request.Option) (*rds.CreateDBParameterGroupOutput, error) {
// 				panic("mock out the CreateDBParameterGroupWithContext method")
// 			},
// 			CreateDBProxyFunc: func(createDBProxyInput *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error) {
// 				panic("mock out the CreateDBProxy method")
// 			},
// 			CreateDBProxyEndpointFunc: func(createDBProxyEndpointInput *rds.CreateDBProxyEndpointInput) (*rds.CreateDBProxyEndpointOutput, error) {
// 				panic("mock out the CreateDBProxyEndpoint method")
// 			},
// 			CreateDBProxyEndpointRequestFunc: func(createDBProxyEndpointInput *rds.CreateDBProxyEndpointInput) (*request.Request, *rds.CreateDBProxyEndpointOutput) {
// 				panic("mock out the CreateDBProxyEndpointRequest method")
// 			},
// 			CreateDBProxyEndpointWithContextFunc: func(contextMoqParam context.Context, createDBProxyEndpointInput *rds.CreateDBProxyEndpointInput, options ...request.Option) (*rds.CreateDBProxyEndpointOutput, error) {
// 				panic("mock out the CreateDBProxyEndpointWithContext method")
// 			},
// 			CreateDBProxyRequestFunc: func(createDBProxyInput *rds.CreateDBProxyInput) (*request.Request, *rds.CreateDBProxyOutput) {
// 				panic("mock out the CreateDBProxyRequest method")
// 			},
// 			CreateDBProxyWithContextFunc: func(contextMoqParam context.Context, createDBProxyInput *rds.CreateDBProxyInput, options ...request.Option) (*rds.CreateDBProxyOutput, error) {
// 				panic("mock out the CreateDBProxyWithContext method")
// 			},
// 			CreateDBSecurityGroupFunc: func(createDBSecurityGroupInput *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error) {
// 				panic("mock out the CreateDBSecurityGroup method")
// 			},
// 			CreateDBSecurityGroupRequestFunc: func(createDBSecurityGroupInput *rds.CreateDBSecurityGroupInput) (*request.Request, *rds.CreateDBSecurityGroupOutput) {
// 				panic("mock out the CreateDBSecurityGroupRequest method")
// 			},
// 			CreateDBSecurityGroupWithContextFunc: func(contextMoqParam context.Context, createDBSecurityGroupInput *rds.CreateDBSecurityGroupInput, options ...request.Option) (*rds.CreateDBSecurityGroupOutput, error) {
// 				panic("mock out the CreateDBSecurityGroupWithContext method")
// 			},
// 			CreateDBSnapshotFunc: func(createDBSnapshotInput *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error) {
// 				panic("mock out the CreateDBSnapshot method")
// 			},
// 			CreateDBSnapshotRequestFunc: func(createDBSnapshotInput *rds.CreateDBSnapshotInput) (*request.Request, *rds.CreateDBSnapshotOutput) {
// 				panic("mock out the CreateDBSnapshotRequest method")
// 			},
// 			CreateDBSnapshotWithContextFunc: func(contextMoqParam context.Context, createDBSnapshotInput *rds.CreateDBSnapshotInput, options ...request.Option) (*rds.CreateDBSnapshotOutput, error) {
// 				panic("mock out the CreateDBSnapshotWithContext method")
// 			},
// 			CreateDBSubnetGroupFunc: func(createDBSubnetGroupInput *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error) {
// 				panic("mock out the CreateDBSubnetGroup method")
// 			},
// 			CreateDBSubnetGroupRequestFunc: func(createDBSubnetGroupInput *rds.CreateDBSubnetGroupInput) (*request.Request, *rds.CreateDBSubnetGroupOutput) {
// 				panic("mock out the CreateDBSubnetGroupRequest method")
// 			},
// 			CreateDBSubnetGroupWithContextFunc: func(contextMoqParam context.Context, createDBSubnetGroupInput *rds.CreateDBSubnetGroupInput, options ...request.Option) (*rds.CreateDBSubnetGroupOutput, error) {
// 				panic("mock out the CreateDBSubnetGroupWithContext method")
// 			},
// 			CreateEventSubscriptionFunc: func(createEventSubscriptionInput *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error) {
// 				panic("mock out the CreateEventSubscription method")
// 			},
// 			CreateEventSubscriptionRequestFunc: func(createEventSubscriptionInput *rds.CreateEventSubscriptionInput) (*request.Request, *rds.CreateEventSubscriptionOutput) {
// 				panic("mock out the CreateEventSubscriptionRequest method")
// 			},
// 			CreateEventSubscriptionWithContextFunc: func(contextMoqParam context.Context, createEventSubscriptionInput *rds.CreateEventSubscriptionInput, options ...request.Option) (*rds.CreateEventSubscriptionOutput, error) {
// 				panic("mock out the CreateEventSubscriptionWithContext method")
// 			},
// 			CreateGlobalClusterFunc: func(createGlobalClusterInput *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error) {
// 				panic("mock out the CreateGlobalCluster method")
// 			},
// 			CreateGlobalClusterRequestFunc: func(createGlobalClusterInput *rds.CreateGlobalClusterInput) (*request.Request, *rds.CreateGlobalClusterOutput) {
// 				panic("mock out the CreateGlobalClusterRequest method")
// 			},
// 			CreateGlobalClusterWithContextFunc: func(contextMoqParam context.Context, createGlobalClusterInput *rds.CreateGlobalClusterInput, options ...request.Option) (*rds.CreateGlobalClusterOutput, error) {
// 				panic("mock out the CreateGlobalClusterWithContext method")
// 			},
// 			CreateOptionGroupFunc: func(createOptionGroupInput *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error) {
// 				panic("mock out the CreateOptionGroup method")
// 			},
// 			CreateOptionGroupRequestFunc: func(createOptionGroupInput *rds.CreateOptionGroupInput) (*request.Request, *rds.CreateOptionGroupOutput) {
// 				panic("mock out the CreateOptionGroupRequest method")
// 			},
// 			CreateOptionGroupWithContextFunc: func(contextMoqParam context.Context, createOptionGroupInput *rds.CreateOptionGroupInput, options ...request.Option) (*rds.CreateOptionGroupOutput, error) {
// 				panic("mock out the CreateOptionGroupWithContext method")
// 			},
// 			DeleteCustomDBEngineVersionFunc: func(deleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput) (*rds.DeleteCustomDBEngineVersionOutput, error) {
// 				panic("mock out the DeleteCustomDBEngineVersion method")
// 			},
// 			DeleteCustomDBEngineVersionRequestFunc: func(deleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput) (*request.Request, *rds.DeleteCustomDBEngineVersionOutput) {
// 				panic("mock out the DeleteCustomDBEngineVersionRequest method")
// 			},
// 			DeleteCustomDBEngineVersionWithContextFunc: func(contextMoqParam context.Context, deleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput, options ...request.Option) (*rds.DeleteCustomDBEngineVersionOutput, error) {
// 				panic("mock out the DeleteCustomDBEngineVersionWithContext method")
// 			},
// 			DeleteDBClusterFunc: func(deleteDBClusterInput *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error) {
// 				panic("mock out the DeleteDBCluster method")
// 			},
// 			DeleteDBClusterEndpointFunc: func(deleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error) {
// 				panic("mock out the DeleteDBClusterEndpoint method")
// 			},
// 			DeleteDBClusterEndpointRequestFunc: func(deleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput) (*request.Request, *rds.DeleteDBClusterEndpointOutput) {
// 				panic("mock out the DeleteDBClusterEndpointRequest method")
// 			},
// 			DeleteDBClusterEndpointWithContextFunc: func(contextMoqParam context.Context, deleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput, options ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error) {
// 				panic("mock out the DeleteDBClusterEndpointWithContext method")
// 			},
// 			DeleteDBClusterParameterGroupFunc: func(deleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error) {
// 				panic("mock out the DeleteDBClusterParameterGroup method")
// 			},
// 			DeleteDBClusterParameterGroupRequestFunc: func(deleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput) (*request.Request, *rds.DeleteDBClusterParameterGroupOutput) {
// 				panic("mock out the DeleteDBClusterParameterGroupRequest method")
// 			},
// 			DeleteDBClusterParameterGroupWithContextFunc: func(contextMoqParam context.Context, deleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput, options ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error) {
// 				panic("mock out the DeleteDBClusterParameterGroupWithContext method")
// 			},
// 			DeleteDBClusterRequestFunc: func(deleteDBClusterInput *rds.DeleteDBClusterInput) (*request.Request, *rds.DeleteDBClusterOutput) {
// 				panic("mock out the DeleteDBClusterRequest method")
// 			},
// 			DeleteDBClusterSnapshotFunc: func(deleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error) {
// 				panic("mock out the DeleteDBClusterSnapshot method")
// 			},
// 			DeleteDBClusterSnapshotRequestFunc: func(deleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput) (*request.Request, *rds.DeleteDBClusterSnapshotOutput) {
// 				panic("mock out the DeleteDBClusterSnapshotRequest method")
// 			},
// 			DeleteDBClusterSnapshotWithContextFunc: func(contextMoqParam context.Context, deleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput, options ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error) {
// 				panic("mock out the DeleteDBClusterSnapshotWithContext method")
// 			},
// 			DeleteDBClusterWithContextFunc: func(contextMoqParam context.Context, deleteDBClusterInput *rds.DeleteDBClusterInput, options ...request.Option) (*rds.DeleteDBClusterOutput, error) {
// 				panic("mock out the DeleteDBClusterWithContext method")
// 			},
// 			DeleteDBInstanceFunc: func(deleteDBInstanceInput *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error) {
// 				panic("mock out the DeleteDBInstance method")
// 			},
// 			DeleteDBInstanceAutomatedBackupFunc: func(deleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
// 				panic("mock out the DeleteDBInstanceAutomatedBackup method")
// 			},
// 			DeleteDBInstanceAutomatedBackupRequestFunc: func(deleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput) (*request.Request, *rds.DeleteDBInstanceAutomatedBackupOutput) {
// 				panic("mock out the DeleteDBInstanceAutomatedBackupRequest method")
// 			},
// 			DeleteDBInstanceAutomatedBackupWithContextFunc: func(contextMoqParam context.Context, deleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput, options ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
// 				panic("mock out the DeleteDBInstanceAutomatedBackupWithContext method")
// 			},
// 			DeleteDBInstanceRequestFunc: func(deleteDBInstanceInput *rds.DeleteDBInstanceInput) (*request.Request, *rds.DeleteDBInstanceOutput) {
// 				panic("mock out the DeleteDBInstanceRequest method")
// 			},
// 			DeleteDBInstanceWithContextFunc: func(contextMoqParam context.Context, deleteDBInstanceInput *rds.DeleteDBInstanceInput, options ...request.Option) (*rds.DeleteDBInstanceOutput, error) {
// 				panic("mock out the DeleteDBInstanceWithContext method")
// 			},
// 			DeleteDBParameterGroupFunc: func(deleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error) {
// 				panic("mock out the DeleteDBParameterGroup method")
// 			},
// 			DeleteDBParameterGroupRequestFunc: func(deleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput) (*request.Request, *rds.DeleteDBParameterGroupOutput) {
// 				panic("mock out the DeleteDBParameterGroupRequest method")
// 			},
// 			DeleteDBParameterGroupWithContextFunc: func(contextMoqParam context.Context, deleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput, options ...request.Option) (*rds.DeleteDBParameterGroupOutput, error) {
// 				panic("mock out the DeleteDBParameterGroupWithContext method")
// 			},
// 			DeleteDBProxyFunc: func(deleteDBProxyInput *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error) {
// 				panic("mock out the DeleteDBProxy method")
// 			},
// 			DeleteDBProxyEndpointFunc: func(deleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput) (*rds.DeleteDBProxyEndpointOutput, error) {
// 				panic("mock out the DeleteDBProxyEndpoint method")
// 			},
// 			DeleteDBProxyEndpointRequestFunc: func(deleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput) (*request.Request, *rds.DeleteDBProxyEndpointOutput) {
// 				panic("mock out the DeleteDBProxyEndpointRequest method")
// 			},
// 			DeleteDBProxyEndpointWithContextFunc: func(contextMoqParam context.Context, deleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput, options ...request.Option) (*rds.DeleteDBProxyEndpointOutput, error) {
// 				panic("mock out the DeleteDBProxyEndpointWithContext method")
// 			},
// 			DeleteDBProxyRequestFunc: func(deleteDBProxyInput *rds.DeleteDBProxyInput) (*request.Request, *rds.DeleteDBProxyOutput) {
// 				panic("mock out the DeleteDBProxyRequest method")
// 			},
// 			DeleteDBProxyWithContextFunc: func(contextMoqParam context.Context, deleteDBProxyInput *rds.DeleteDBProxyInput, options ...request.Option) (*rds.DeleteDBProxyOutput, error) {
// 				panic("mock out the DeleteDBProxyWithContext method")
// 			},
// 			DeleteDBSecurityGroupFunc: func(deleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error) {
// 				panic("mock out the DeleteDBSecurityGroup method")
// 			},
// 			DeleteDBSecurityGroupRequestFunc: func(deleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput) (*request.Request, *rds.DeleteDBSecurityGroupOutput) {
// 				panic("mock out the DeleteDBSecurityGroupRequest method")
// 			},
// 			DeleteDBSecurityGroupWithContextFunc: func(contextMoqParam context.Context, deleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput, options ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error) {
// 				panic("mock out the DeleteDBSecurityGroupWithContext method")
// 			},
// 			DeleteDBSnapshotFunc: func(deleteDBSnapshotInput *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error) {
// 				panic("mock out the DeleteDBSnapshot method")
// 			},
// 			DeleteDBSnapshotRequestFunc: func(deleteDBSnapshotInput *rds.DeleteDBSnapshotInput) (*request.Request, *rds.DeleteDBSnapshotOutput) {
// 				panic("mock out the DeleteDBSnapshotRequest method")
// 			},
// 			DeleteDBSnapshotWithContextFunc: func(contextMoqParam context.Context, deleteDBSnapshotInput *rds.DeleteDBSnapshotInput, options ...request.Option) (*rds.DeleteDBSnapshotOutput, error) {
// 				panic("mock out the DeleteDBSnapshotWithContext method")
// 			},
// 			DeleteDBSubnetGroupFunc: func(deleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error) {
// 				panic("mock out the DeleteDBSubnetGroup method")
// 			},
// 			DeleteDBSubnetGroupRequestFunc: func(deleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput) (*request.Request, *rds.DeleteDBSubnetGroupOutput) {
// 				panic("mock out the DeleteDBSubnetGroupRequest method")
// 			},
// 			DeleteDBSubnetGroupWithContextFunc: func(contextMoqParam context.Context, deleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput, options ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error) {
// 				panic("mock out the DeleteDBSubnetGroupWithContext method")
// 			},
// 			DeleteEventSubscriptionFunc: func(deleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error) {
// 				panic("mock out the DeleteEventSubscription method")
// 			},
// 			DeleteEventSubscriptionRequestFunc: func(deleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput) (*request.Request, *rds.DeleteEventSubscriptionOutput) {
// 				panic("mock out the DeleteEventSubscriptionRequest method")
// 			},
// 			DeleteEventSubscriptionWithContextFunc: func(contextMoqParam context.Context, deleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput, options ...request.Option) (*rds.DeleteEventSubscriptionOutput, error) {
// 				panic("mock out the DeleteEventSubscriptionWithContext method")
// 			},
// 			DeleteGlobalClusterFunc: func(deleteGlobalClusterInput *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error) {
// 				panic("mock out the DeleteGlobalCluster method")
// 			},
// 			DeleteGlobalClusterRequestFunc: func(deleteGlobalClusterInput *rds.DeleteGlobalClusterInput) (*request.Request, *rds.DeleteGlobalClusterOutput) {
// 				panic("mock out the DeleteGlobalClusterRequest method")
// 			},
// 			DeleteGlobalClusterWithContextFunc: func(contextMoqParam context.Context, deleteGlobalClusterInput *rds.DeleteGlobalClusterInput, options ...request.Option) (*rds.DeleteGlobalClusterOutput, error) {
// 				panic("mock out the DeleteGlobalClusterWithContext method")
// 			},
// 			DeleteOptionGroupFunc: func(deleteOptionGroupInput *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error) {
// 				panic("mock out the DeleteOptionGroup method")
// 			},
// 			DeleteOptionGroupRequestFunc: func(deleteOptionGroupInput *rds.DeleteOptionGroupInput) (*request.Request, *rds.DeleteOptionGroupOutput) {
// 				panic("mock out the DeleteOptionGroupRequest method")
// 			},
// 			DeleteOptionGroupWithContextFunc: func(contextMoqParam context.Context, deleteOptionGroupInput *rds.DeleteOptionGroupInput, options ...request.Option) (*rds.DeleteOptionGroupOutput, error) {
// 				panic("mock out the DeleteOptionGroupWithContext method")
// 			},
// 			DeregisterDBProxyTargetsFunc: func(deregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error) {
// 				panic("mock out the DeregisterDBProxyTargets method")
// 			},
// 			DeregisterDBProxyTargetsRequestFunc: func(deregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput) (*request.Request, *rds.DeregisterDBProxyTargetsOutput) {
// 				panic("mock out the DeregisterDBProxyTargetsRequest method")
// 			},
// 			DeregisterDBProxyTargetsWithContextFunc: func(contextMoqParam context.Context, deregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput, options ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error) {
// 				panic("mock out the DeregisterDBProxyTargetsWithContext method")
// 			},
// 			DescribeAccountAttributesFunc: func(describeAccountAttributesInput *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error) {
// 				panic("mock out the DescribeAccountAttributes method")
// 			},
// 			DescribeAccountAttributesRequestFunc: func(describeAccountAttributesInput *rds.DescribeAccountAttributesInput) (*request.Request, *rds.DescribeAccountAttributesOutput) {
// 				panic("mock out the DescribeAccountAttributesRequest method")
// 			},
// 			DescribeAccountAttributesWithContextFunc: func(contextMoqParam context.Context, describeAccountAttributesInput *rds.DescribeAccountAttributesInput, options ...request.Option) (*rds.DescribeAccountAttributesOutput, error) {
// 				panic("mock out the DescribeAccountAttributesWithContext method")
// 			},
// 			DescribeCertificatesFunc: func(describeCertificatesInput *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error) {
// 				panic("mock out the DescribeCertificates method")
// 			},
// 			DescribeCertificatesPagesFunc: func(describeCertificatesInput *rds.DescribeCertificatesInput, fn func(*rds.DescribeCertificatesOutput, bool) bool) error {
// 				panic("mock out the DescribeCertificatesPages method")
// 			},
// 			DescribeCertificatesPagesWithContextFunc: func(contextMoqParam context.Context, describeCertificatesInput *rds.DescribeCertificatesInput, fn func(*rds.DescribeCertificatesOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeCertificatesPagesWithContext method")
// 			},
// 			DescribeCertificatesRequestFunc: func(describeCertificatesInput *rds.DescribeCertificatesInput) (*request.Request, *rds.DescribeCertificatesOutput) {
// 				panic("mock out the DescribeCertificatesRequest method")
// 			},
// 			DescribeCertificatesWithContextFunc: func(contextMoqParam context.Context, describeCertificatesInput *rds.DescribeCertificatesInput, options ...request.Option) (*rds.DescribeCertificatesOutput, error) {
// 				panic("mock out the DescribeCertificatesWithContext method")
// 			},
// 			DescribeDBClusterBacktracksFunc: func(describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error) {
// 				panic("mock out the DescribeDBClusterBacktracks method")
// 			},
// 			DescribeDBClusterBacktracksPagesFunc: func(describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput, fn func(*rds.DescribeDBClusterBacktracksOutput, bool) bool) error {
// 				panic("mock out the DescribeDBClusterBacktracksPages method")
// 			},
// 			DescribeDBClusterBacktracksPagesWithContextFunc: func(contextMoqParam context.Context, describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput, fn func(*rds.DescribeDBClusterBacktracksOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBClusterBacktracksPagesWithContext method")
// 			},
// 			DescribeDBClusterBacktracksRequestFunc: func(describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput) (*request.Request, *rds.DescribeDBClusterBacktracksOutput) {
// 				panic("mock out the DescribeDBClusterBacktracksRequest method")
// 			},
// 			DescribeDBClusterBacktracksWithContextFunc: func(contextMoqParam context.Context, describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput, options ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error) {
// 				panic("mock out the DescribeDBClusterBacktracksWithContext method")
// 			},
// 			DescribeDBClusterEndpointsFunc: func(describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error) {
// 				panic("mock out the DescribeDBClusterEndpoints method")
// 			},
// 			DescribeDBClusterEndpointsPagesFunc: func(describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput, fn func(*rds.DescribeDBClusterEndpointsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBClusterEndpointsPages method")
// 			},
// 			DescribeDBClusterEndpointsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput, fn func(*rds.DescribeDBClusterEndpointsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBClusterEndpointsPagesWithContext method")
// 			},
// 			DescribeDBClusterEndpointsRequestFunc: func(describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput) (*request.Request, *rds.DescribeDBClusterEndpointsOutput) {
// 				panic("mock out the DescribeDBClusterEndpointsRequest method")
// 			},
// 			DescribeDBClusterEndpointsWithContextFunc: func(contextMoqParam context.Context, describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput, options ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error) {
// 				panic("mock out the DescribeDBClusterEndpointsWithContext method")
// 			},
// 			DescribeDBClusterParameterGroupsFunc: func(describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
// 				panic("mock out the DescribeDBClusterParameterGroups method")
// 			},
// 			DescribeDBClusterParameterGroupsPagesFunc: func(describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput, fn func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBClusterParameterGroupsPages method")
// 			},
// 			DescribeDBClusterParameterGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput, fn func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBClusterParameterGroupsPagesWithContext method")
// 			},
// 			DescribeDBClusterParameterGroupsRequestFunc: func(describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput) (*request.Request, *rds.DescribeDBClusterParameterGroupsOutput) {
// 				panic("mock out the DescribeDBClusterParameterGroupsRequest method")
// 			},
// 			DescribeDBClusterParameterGroupsWithContextFunc: func(contextMoqParam context.Context, describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput, options ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
// 				panic("mock out the DescribeDBClusterParameterGroupsWithContext method")
// 			},
// 			DescribeDBClusterParametersFunc: func(describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error) {
// 				panic("mock out the DescribeDBClusterParameters method")
// 			},
// 			DescribeDBClusterParametersPagesFunc: func(describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput, fn func(*rds.DescribeDBClusterParametersOutput, bool) bool) error {
// 				panic("mock out the DescribeDBClusterParametersPages method")
// 			},
// 			DescribeDBClusterParametersPagesWithContextFunc: func(contextMoqParam context.Context, describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput, fn func(*rds.DescribeDBClusterParametersOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBClusterParametersPagesWithContext method")
// 			},
// 			DescribeDBClusterParametersRequestFunc: func(describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput) (*request.Request, *rds.DescribeDBClusterParametersOutput) {
// 				panic("mock out the DescribeDBClusterParametersRequest method")
// 			},
// 			DescribeDBClusterParametersWithContextFunc: func(contextMoqParam context.Context, describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput, options ...request.Option) (*rds.DescribeDBClusterParametersOutput, error) {
// 				panic("mock out the DescribeDBClusterParametersWithContext method")
// 			},
// 			DescribeDBClusterSnapshotAttributesFunc: func(describeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
// 				panic("mock out the DescribeDBClusterSnapshotAttributes method")
// 			},
// 			DescribeDBClusterSnapshotAttributesRequestFunc: func(describeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *rds.DescribeDBClusterSnapshotAttributesOutput) {
// 				panic("mock out the DescribeDBClusterSnapshotAttributesRequest method")
// 			},
// 			DescribeDBClusterSnapshotAttributesWithContextFunc: func(contextMoqParam context.Context, describeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput, options ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
// 				panic("mock out the DescribeDBClusterSnapshotAttributesWithContext method")
// 			},
// 			DescribeDBClusterSnapshotsFunc: func(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error) {
// 				panic("mock out the DescribeDBClusterSnapshots method")
// 			},
// 			DescribeDBClusterSnapshotsPagesFunc: func(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, fn func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBClusterSnapshotsPages method")
// 			},
// 			DescribeDBClusterSnapshotsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, fn func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBClusterSnapshotsPagesWithContext method")
// 			},
// 			DescribeDBClusterSnapshotsRequestFunc: func(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) (*request.Request, *rds.DescribeDBClusterSnapshotsOutput) {
// 				panic("mock out the DescribeDBClusterSnapshotsRequest method")
// 			},
// 			DescribeDBClusterSnapshotsWithContextFunc: func(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, options ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error) {
// 				panic("mock out the DescribeDBClusterSnapshotsWithContext method")
// 			},
// 			DescribeDBClustersFunc: func(describeDBClustersInput *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error) {
// 				panic("mock out the DescribeDBClusters method")
// 			},
// 			DescribeDBClustersPagesFunc: func(describeDBClustersInput *rds.DescribeDBClustersInput, fn func(*rds.DescribeDBClustersOutput, bool) bool) error {
// 				panic("mock out the DescribeDBClustersPages method")
// 			},
// 			DescribeDBClustersPagesWithContextFunc: func(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, fn func(*rds.DescribeDBClustersOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBClustersPagesWithContext method")
// 			},
// 			DescribeDBClustersRequestFunc: func(describeDBClustersInput *rds.DescribeDBClustersInput) (*request.Request, *rds.DescribeDBClustersOutput) {
// 				panic("mock out the DescribeDBClustersRequest method")
// 			},
// 			DescribeDBClustersWithContextFunc: func(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, options ...request.Option) (*rds.DescribeDBClustersOutput, error) {
// 				panic("mock out the DescribeDBClustersWithContext method")
// 			},
// 			DescribeDBEngineVersionsFunc: func(describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error) {
// 				panic("mock out the DescribeDBEngineVersions method")
// 			},
// 			DescribeDBEngineVersionsPagesFunc: func(describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput, fn func(*rds.DescribeDBEngineVersionsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBEngineVersionsPages method")
// 			},
// 			DescribeDBEngineVersionsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput, fn func(*rds.DescribeDBEngineVersionsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBEngineVersionsPagesWithContext method")
// 			},
// 			DescribeDBEngineVersionsRequestFunc: func(describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput) (*request.Request, *rds.DescribeDBEngineVersionsOutput) {
// 				panic("mock out the DescribeDBEngineVersionsRequest method")
// 			},
// 			DescribeDBEngineVersionsWithContextFunc: func(contextMoqParam context.Context, describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput, options ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error) {
// 				panic("mock out the DescribeDBEngineVersionsWithContext method")
// 			},
// 			DescribeDBInstanceAutomatedBackupsFunc: func(describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
// 				panic("mock out the DescribeDBInstanceAutomatedBackups method")
// 			},
// 			DescribeDBInstanceAutomatedBackupsPagesFunc: func(describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput, fn func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBInstanceAutomatedBackupsPages method")
// 			},
// 			DescribeDBInstanceAutomatedBackupsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput, fn func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBInstanceAutomatedBackupsPagesWithContext method")
// 			},
// 			DescribeDBInstanceAutomatedBackupsRequestFunc: func(describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput) (*request.Request, *rds.DescribeDBInstanceAutomatedBackupsOutput) {
// 				panic("mock out the DescribeDBInstanceAutomatedBackupsRequest method")
// 			},
// 			DescribeDBInstanceAutomatedBackupsWithContextFunc: func(contextMoqParam context.Context, describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput, options ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
// 				panic("mock out the DescribeDBInstanceAutomatedBackupsWithContext method")
// 			},
// 			DescribeDBInstancesFunc: func(describeDBInstancesInput *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error) {
// 				panic("mock out the DescribeDBInstances method")
// 			},
// 			DescribeDBInstancesPagesFunc: func(describeDBInstancesInput *rds.DescribeDBInstancesInput, fn func(*rds.DescribeDBInstancesOutput, bool) bool) error {
// 				panic("mock out the DescribeDBInstancesPages method")
// 			},
// 			DescribeDBInstancesPagesWithContextFunc: func(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, fn func(*rds.DescribeDBInstancesOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBInstancesPagesWithContext method")
// 			},
// 			DescribeDBInstancesRequestFunc: func(describeDBInstancesInput *rds.DescribeDBInstancesInput) (*request.Request, *rds.DescribeDBInstancesOutput) {
// 				panic("mock out the DescribeDBInstancesRequest method")
// 			},
// 			DescribeDBInstancesWithContextFunc: func(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, options ...request.Option) (*rds.DescribeDBInstancesOutput, error) {
// 				panic("mock out the DescribeDBInstancesWithContext method")
// 			},
// 			DescribeDBLogFilesFunc: func(describeDBLogFilesInput *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error) {
// 				panic("mock out the DescribeDBLogFiles method")
// 			},
// 			DescribeDBLogFilesPagesFunc: func(describeDBLogFilesInput *rds.DescribeDBLogFilesInput, fn func(*rds.DescribeDBLogFilesOutput, bool) bool) error {
// 				panic("mock out the DescribeDBLogFilesPages method")
// 			},
// 			DescribeDBLogFilesPagesWithContextFunc: func(contextMoqParam context.Context, describeDBLogFilesInput *rds.DescribeDBLogFilesInput, fn func(*rds.DescribeDBLogFilesOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBLogFilesPagesWithContext method")
// 			},
// 			DescribeDBLogFilesRequestFunc: func(describeDBLogFilesInput *rds.DescribeDBLogFilesInput) (*request.Request, *rds.DescribeDBLogFilesOutput) {
// 				panic("mock out the DescribeDBLogFilesRequest method")
// 			},
// 			DescribeDBLogFilesWithContextFunc: func(contextMoqParam context.Context, describeDBLogFilesInput *rds.DescribeDBLogFilesInput, options ...request.Option) (*rds.DescribeDBLogFilesOutput, error) {
// 				panic("mock out the DescribeDBLogFilesWithContext method")
// 			},
// 			DescribeDBParameterGroupsFunc: func(describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error) {
// 				panic("mock out the DescribeDBParameterGroups method")
// 			},
// 			DescribeDBParameterGroupsPagesFunc: func(describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput, fn func(*rds.DescribeDBParameterGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBParameterGroupsPages method")
// 			},
// 			DescribeDBParameterGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput, fn func(*rds.DescribeDBParameterGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBParameterGroupsPagesWithContext method")
// 			},
// 			DescribeDBParameterGroupsRequestFunc: func(describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput) (*request.Request, *rds.DescribeDBParameterGroupsOutput) {
// 				panic("mock out the DescribeDBParameterGroupsRequest method")
// 			},
// 			DescribeDBParameterGroupsWithContextFunc: func(contextMoqParam context.Context, describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput, options ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error) {
// 				panic("mock out the DescribeDBParameterGroupsWithContext method")
// 			},
// 			DescribeDBParametersFunc: func(describeDBParametersInput *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error) {
// 				panic("mock out the DescribeDBParameters method")
// 			},
// 			DescribeDBParametersPagesFunc: func(describeDBParametersInput *rds.DescribeDBParametersInput, fn func(*rds.DescribeDBParametersOutput, bool) bool) error {
// 				panic("mock out the DescribeDBParametersPages method")
// 			},
// 			DescribeDBParametersPagesWithContextFunc: func(contextMoqParam context.Context, describeDBParametersInput *rds.DescribeDBParametersInput, fn func(*rds.DescribeDBParametersOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBParametersPagesWithContext method")
// 			},
// 			DescribeDBParametersRequestFunc: func(describeDBParametersInput *rds.DescribeDBParametersInput) (*request.Request, *rds.DescribeDBParametersOutput) {
// 				panic("mock out the DescribeDBParametersRequest method")
// 			},
// 			DescribeDBParametersWithContextFunc: func(contextMoqParam context.Context, describeDBParametersInput *rds.DescribeDBParametersInput, options ...request.Option) (*rds.DescribeDBParametersOutput, error) {
// 				panic("mock out the DescribeDBParametersWithContext method")
// 			},
// 			DescribeDBProxiesFunc: func(describeDBProxiesInput *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error) {
// 				panic("mock out the DescribeDBProxies method")
// 			},
// 			DescribeDBProxiesPagesFunc: func(describeDBProxiesInput *rds.DescribeDBProxiesInput, fn func(*rds.DescribeDBProxiesOutput, bool) bool) error {
// 				panic("mock out the DescribeDBProxiesPages method")
// 			},
// 			DescribeDBProxiesPagesWithContextFunc: func(contextMoqParam context.Context, describeDBProxiesInput *rds.DescribeDBProxiesInput, fn func(*rds.DescribeDBProxiesOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBProxiesPagesWithContext method")
// 			},
// 			DescribeDBProxiesRequestFunc: func(describeDBProxiesInput *rds.DescribeDBProxiesInput) (*request.Request, *rds.DescribeDBProxiesOutput) {
// 				panic("mock out the DescribeDBProxiesRequest method")
// 			},
// 			DescribeDBProxiesWithContextFunc: func(contextMoqParam context.Context, describeDBProxiesInput *rds.DescribeDBProxiesInput, options ...request.Option) (*rds.DescribeDBProxiesOutput, error) {
// 				panic("mock out the DescribeDBProxiesWithContext method")
// 			},
// 			DescribeDBProxyEndpointsFunc: func(describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput) (*rds.DescribeDBProxyEndpointsOutput, error) {
// 				panic("mock out the DescribeDBProxyEndpoints method")
// 			},
// 			DescribeDBProxyEndpointsPagesFunc: func(describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput, fn func(*rds.DescribeDBProxyEndpointsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBProxyEndpointsPages method")
// 			},
// 			DescribeDBProxyEndpointsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput, fn func(*rds.DescribeDBProxyEndpointsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBProxyEndpointsPagesWithContext method")
// 			},
// 			DescribeDBProxyEndpointsRequestFunc: func(describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput) (*request.Request, *rds.DescribeDBProxyEndpointsOutput) {
// 				panic("mock out the DescribeDBProxyEndpointsRequest method")
// 			},
// 			DescribeDBProxyEndpointsWithContextFunc: func(contextMoqParam context.Context, describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput, options ...request.Option) (*rds.DescribeDBProxyEndpointsOutput, error) {
// 				panic("mock out the DescribeDBProxyEndpointsWithContext method")
// 			},
// 			DescribeDBProxyTargetGroupsFunc: func(describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
// 				panic("mock out the DescribeDBProxyTargetGroups method")
// 			},
// 			DescribeDBProxyTargetGroupsPagesFunc: func(describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput, fn func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBProxyTargetGroupsPages method")
// 			},
// 			DescribeDBProxyTargetGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput, fn func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBProxyTargetGroupsPagesWithContext method")
// 			},
// 			DescribeDBProxyTargetGroupsRequestFunc: func(describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput) (*request.Request, *rds.DescribeDBProxyTargetGroupsOutput) {
// 				panic("mock out the DescribeDBProxyTargetGroupsRequest method")
// 			},
// 			DescribeDBProxyTargetGroupsWithContextFunc: func(contextMoqParam context.Context, describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput, options ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
// 				panic("mock out the DescribeDBProxyTargetGroupsWithContext method")
// 			},
// 			DescribeDBProxyTargetsFunc: func(describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error) {
// 				panic("mock out the DescribeDBProxyTargets method")
// 			},
// 			DescribeDBProxyTargetsPagesFunc: func(describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput, fn func(*rds.DescribeDBProxyTargetsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBProxyTargetsPages method")
// 			},
// 			DescribeDBProxyTargetsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput, fn func(*rds.DescribeDBProxyTargetsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBProxyTargetsPagesWithContext method")
// 			},
// 			DescribeDBProxyTargetsRequestFunc: func(describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput) (*request.Request, *rds.DescribeDBProxyTargetsOutput) {
// 				panic("mock out the DescribeDBProxyTargetsRequest method")
// 			},
// 			DescribeDBProxyTargetsWithContextFunc: func(contextMoqParam context.Context, describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput, options ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error) {
// 				panic("mock out the DescribeDBProxyTargetsWithContext method")
// 			},
// 			DescribeDBSecurityGroupsFunc: func(describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error) {
// 				panic("mock out the DescribeDBSecurityGroups method")
// 			},
// 			DescribeDBSecurityGroupsPagesFunc: func(describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput, fn func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBSecurityGroupsPages method")
// 			},
// 			DescribeDBSecurityGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput, fn func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBSecurityGroupsPagesWithContext method")
// 			},
// 			DescribeDBSecurityGroupsRequestFunc: func(describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput) (*request.Request, *rds.DescribeDBSecurityGroupsOutput) {
// 				panic("mock out the DescribeDBSecurityGroupsRequest method")
// 			},
// 			DescribeDBSecurityGroupsWithContextFunc: func(contextMoqParam context.Context, describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput, options ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error) {
// 				panic("mock out the DescribeDBSecurityGroupsWithContext method")
// 			},
// 			DescribeDBSnapshotAttributesFunc: func(describeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error) {
// 				panic("mock out the DescribeDBSnapshotAttributes method")
// 			},
// 			DescribeDBSnapshotAttributesRequestFunc: func(describeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput) (*request.Request, *rds.DescribeDBSnapshotAttributesOutput) {
// 				panic("mock out the DescribeDBSnapshotAttributesRequest method")
// 			},
// 			DescribeDBSnapshotAttributesWithContextFunc: func(contextMoqParam context.Context, describeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput, options ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error) {
// 				panic("mock out the DescribeDBSnapshotAttributesWithContext method")
// 			},
// 			DescribeDBSnapshotsFunc: func(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error) {
// 				panic("mock out the DescribeDBSnapshots method")
// 			},
// 			DescribeDBSnapshotsPagesFunc: func(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, fn func(*rds.DescribeDBSnapshotsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBSnapshotsPages method")
// 			},
// 			DescribeDBSnapshotsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, fn func(*rds.DescribeDBSnapshotsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBSnapshotsPagesWithContext method")
// 			},
// 			DescribeDBSnapshotsRequestFunc: func(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) (*request.Request, *rds.DescribeDBSnapshotsOutput) {
// 				panic("mock out the DescribeDBSnapshotsRequest method")
// 			},
// 			DescribeDBSnapshotsWithContextFunc: func(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, options ...request.Option) (*rds.DescribeDBSnapshotsOutput, error) {
// 				panic("mock out the DescribeDBSnapshotsWithContext method")
// 			},
// 			DescribeDBSubnetGroupsFunc: func(describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error) {
// 				panic("mock out the DescribeDBSubnetGroups method")
// 			},
// 			DescribeDBSubnetGroupsPagesFunc: func(describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput, fn func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeDBSubnetGroupsPages method")
// 			},
// 			DescribeDBSubnetGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput, fn func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeDBSubnetGroupsPagesWithContext method")
// 			},
// 			DescribeDBSubnetGroupsRequestFunc: func(describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput) (*request.Request, *rds.DescribeDBSubnetGroupsOutput) {
// 				panic("mock out the DescribeDBSubnetGroupsRequest method")
// 			},
// 			DescribeDBSubnetGroupsWithContextFunc: func(contextMoqParam context.Context, describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput, options ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error) {
// 				panic("mock out the DescribeDBSubnetGroupsWithContext method")
// 			},
// 			DescribeEngineDefaultClusterParametersFunc: func(describeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
// 				panic("mock out the DescribeEngineDefaultClusterParameters method")
// 			},
// 			DescribeEngineDefaultClusterParametersRequestFunc: func(describeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput) (*request.Request, *rds.DescribeEngineDefaultClusterParametersOutput) {
// 				panic("mock out the DescribeEngineDefaultClusterParametersRequest method")
// 			},
// 			DescribeEngineDefaultClusterParametersWithContextFunc: func(contextMoqParam context.Context, describeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput, options ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
// 				panic("mock out the DescribeEngineDefaultClusterParametersWithContext method")
// 			},
// 			DescribeEngineDefaultParametersFunc: func(describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error) {
// 				panic("mock out the DescribeEngineDefaultParameters method")
// 			},
// 			DescribeEngineDefaultParametersPagesFunc: func(describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput, fn func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) error {
// 				panic("mock out the DescribeEngineDefaultParametersPages method")
// 			},
// 			DescribeEngineDefaultParametersPagesWithContextFunc: func(contextMoqParam context.Context, describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput, fn func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeEngineDefaultParametersPagesWithContext method")
// 			},
// 			DescribeEngineDefaultParametersRequestFunc: func(describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput) (*request.Request, *rds.DescribeEngineDefaultParametersOutput) {
// 				panic("mock out the DescribeEngineDefaultParametersRequest method")
// 			},
// 			DescribeEngineDefaultParametersWithContextFunc: func(contextMoqParam context.Context, describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput, options ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error) {
// 				panic("mock out the DescribeEngineDefaultParametersWithContext method")
// 			},
// 			DescribeEventCategoriesFunc: func(describeEventCategoriesInput *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error) {
// 				panic("mock out the DescribeEventCategories method")
// 			},
// 			DescribeEventCategoriesRequestFunc: func(describeEventCategoriesInput *rds.DescribeEventCategoriesInput) (*request.Request, *rds.DescribeEventCategoriesOutput) {
// 				panic("mock out the DescribeEventCategoriesRequest method")
// 			},
// 			DescribeEventCategoriesWithContextFunc: func(contextMoqParam context.Context, describeEventCategoriesInput *rds.DescribeEventCategoriesInput, options ...request.Option) (*rds.DescribeEventCategoriesOutput, error) {
// 				panic("mock out the DescribeEventCategoriesWithContext method")
// 			},
// 			DescribeEventSubscriptionsFunc: func(describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error) {
// 				panic("mock out the DescribeEventSubscriptions method")
// 			},
// 			DescribeEventSubscriptionsPagesFunc: func(describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput, fn func(*rds.DescribeEventSubscriptionsOutput, bool) bool) error {
// 				panic("mock out the DescribeEventSubscriptionsPages method")
// 			},
// 			DescribeEventSubscriptionsPagesWithContextFunc: func(contextMoqParam context.Context, describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput, fn func(*rds.DescribeEventSubscriptionsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeEventSubscriptionsPagesWithContext method")
// 			},
// 			DescribeEventSubscriptionsRequestFunc: func(describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput) (*request.Request, *rds.DescribeEventSubscriptionsOutput) {
// 				panic("mock out the DescribeEventSubscriptionsRequest method")
// 			},
// 			DescribeEventSubscriptionsWithContextFunc: func(contextMoqParam context.Context, describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput, options ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error) {
// 				panic("mock out the DescribeEventSubscriptionsWithContext method")
// 			},
// 			DescribeEventsFunc: func(describeEventsInput *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error) {
// 				panic("mock out the DescribeEvents method")
// 			},
// 			DescribeEventsPagesFunc: func(describeEventsInput *rds.DescribeEventsInput, fn func(*rds.DescribeEventsOutput, bool) bool) error {
// 				panic("mock out the DescribeEventsPages method")
// 			},
// 			DescribeEventsPagesWithContextFunc: func(contextMoqParam context.Context, describeEventsInput *rds.DescribeEventsInput, fn func(*rds.DescribeEventsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeEventsPagesWithContext method")
// 			},
// 			DescribeEventsRequestFunc: func(describeEventsInput *rds.DescribeEventsInput) (*request.Request, *rds.DescribeEventsOutput) {
// 				panic("mock out the DescribeEventsRequest method")
// 			},
// 			DescribeEventsWithContextFunc: func(contextMoqParam context.Context, describeEventsInput *rds.DescribeEventsInput, options ...request.Option) (*rds.DescribeEventsOutput, error) {
// 				panic("mock out the DescribeEventsWithContext method")
// 			},
// 			DescribeExportTasksFunc: func(describeExportTasksInput *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error) {
// 				panic("mock out the DescribeExportTasks method")
// 			},
// 			DescribeExportTasksPagesFunc: func(describeExportTasksInput *rds.DescribeExportTasksInput, fn func(*rds.DescribeExportTasksOutput, bool) bool) error {
// 				panic("mock out the DescribeExportTasksPages method")
// 			},
// 			DescribeExportTasksPagesWithContextFunc: func(contextMoqParam context.Context, describeExportTasksInput *rds.DescribeExportTasksInput, fn func(*rds.DescribeExportTasksOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeExportTasksPagesWithContext method")
// 			},
// 			DescribeExportTasksRequestFunc: func(describeExportTasksInput *rds.DescribeExportTasksInput) (*request.Request, *rds.DescribeExportTasksOutput) {
// 				panic("mock out the DescribeExportTasksRequest method")
// 			},
// 			DescribeExportTasksWithContextFunc: func(contextMoqParam context.Context, describeExportTasksInput *rds.DescribeExportTasksInput, options ...request.Option) (*rds.DescribeExportTasksOutput, error) {
// 				panic("mock out the DescribeExportTasksWithContext method")
// 			},
// 			DescribeGlobalClustersFunc: func(describeGlobalClustersInput *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error) {
// 				panic("mock out the DescribeGlobalClusters method")
// 			},
// 			DescribeGlobalClustersPagesFunc: func(describeGlobalClustersInput *rds.DescribeGlobalClustersInput, fn func(*rds.DescribeGlobalClustersOutput, bool) bool) error {
// 				panic("mock out the DescribeGlobalClustersPages method")
// 			},
// 			DescribeGlobalClustersPagesWithContextFunc: func(contextMoqParam context.Context, describeGlobalClustersInput *rds.DescribeGlobalClustersInput, fn func(*rds.DescribeGlobalClustersOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeGlobalClustersPagesWithContext method")
// 			},
// 			DescribeGlobalClustersRequestFunc: func(describeGlobalClustersInput *rds.DescribeGlobalClustersInput) (*request.Request, *rds.DescribeGlobalClustersOutput) {
// 				panic("mock out the DescribeGlobalClustersRequest method")
// 			},
// 			DescribeGlobalClustersWithContextFunc: func(contextMoqParam context.Context, describeGlobalClustersInput *rds.DescribeGlobalClustersInput, options ...request.Option) (*rds.DescribeGlobalClustersOutput, error) {
// 				panic("mock out the DescribeGlobalClustersWithContext method")
// 			},
// 			DescribeOptionGroupOptionsFunc: func(describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error) {
// 				panic("mock out the DescribeOptionGroupOptions method")
// 			},
// 			DescribeOptionGroupOptionsPagesFunc: func(describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput, fn func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) error {
// 				panic("mock out the DescribeOptionGroupOptionsPages method")
// 			},
// 			DescribeOptionGroupOptionsPagesWithContextFunc: func(contextMoqParam context.Context, describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput, fn func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeOptionGroupOptionsPagesWithContext method")
// 			},
// 			DescribeOptionGroupOptionsRequestFunc: func(describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput) (*request.Request, *rds.DescribeOptionGroupOptionsOutput) {
// 				panic("mock out the DescribeOptionGroupOptionsRequest method")
// 			},
// 			DescribeOptionGroupOptionsWithContextFunc: func(contextMoqParam context.Context, describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput, options ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error) {
// 				panic("mock out the DescribeOptionGroupOptionsWithContext method")
// 			},
// 			DescribeOptionGroupsFunc: func(describeOptionGroupsInput *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error) {
// 				panic("mock out the DescribeOptionGroups method")
// 			},
// 			DescribeOptionGroupsPagesFunc: func(describeOptionGroupsInput *rds.DescribeOptionGroupsInput, fn func(*rds.DescribeOptionGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeOptionGroupsPages method")
// 			},
// 			DescribeOptionGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeOptionGroupsInput *rds.DescribeOptionGroupsInput, fn func(*rds.DescribeOptionGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeOptionGroupsPagesWithContext method")
// 			},
// 			DescribeOptionGroupsRequestFunc: func(describeOptionGroupsInput *rds.DescribeOptionGroupsInput) (*request.Request, *rds.DescribeOptionGroupsOutput) {
// 				panic("mock out the DescribeOptionGroupsRequest method")
// 			},
// 			DescribeOptionGroupsWithContextFunc: func(contextMoqParam context.Context, describeOptionGroupsInput *rds.DescribeOptionGroupsInput, options ...request.Option) (*rds.DescribeOptionGroupsOutput, error) {
// 				panic("mock out the DescribeOptionGroupsWithContext method")
// 			},
// 			DescribeOrderableDBInstanceOptionsFunc: func(describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
// 				panic("mock out the DescribeOrderableDBInstanceOptions method")
// 			},
// 			DescribeOrderableDBInstanceOptionsPagesFunc: func(describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput, fn func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error {
// 				panic("mock out the DescribeOrderableDBInstanceOptionsPages method")
// 			},
// 			DescribeOrderableDBInstanceOptionsPagesWithContextFunc: func(contextMoqParam context.Context, describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput, fn func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeOrderableDBInstanceOptionsPagesWithContext method")
// 			},
// 			DescribeOrderableDBInstanceOptionsRequestFunc: func(describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *rds.DescribeOrderableDBInstanceOptionsOutput) {
// 				panic("mock out the DescribeOrderableDBInstanceOptionsRequest method")
// 			},
// 			DescribeOrderableDBInstanceOptionsWithContextFunc: func(contextMoqParam context.Context, describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput, options ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
// 				panic("mock out the DescribeOrderableDBInstanceOptionsWithContext method")
// 			},
// 			DescribePendingMaintenanceActionsFunc: func(describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error) {
// 				panic("mock out the DescribePendingMaintenanceActions method")
// 			},
// 			DescribePendingMaintenanceActionsPagesFunc: func(describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput, fn func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool) error {
// 				panic("mock out the DescribePendingMaintenanceActionsPages method")
// 			},
// 			DescribePendingMaintenanceActionsPagesWithContextFunc: func(contextMoqParam context.Context, describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput, fn func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribePendingMaintenanceActionsPagesWithContext method")
// 			},
// 			DescribePendingMaintenanceActionsRequestFunc: func(describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput) (*request.Request, *rds.DescribePendingMaintenanceActionsOutput) {
// 				panic("mock out the DescribePendingMaintenanceActionsRequest method")
// 			},
// 			DescribePendingMaintenanceActionsWithContextFunc: func(contextMoqParam context.Context, describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput, options ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error) {
// 				panic("mock out the DescribePendingMaintenanceActionsWithContext method")
// 			},
// 			DescribeReservedDBInstancesFunc: func(describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error) {
// 				panic("mock out the DescribeReservedDBInstances method")
// 			},
// 			DescribeReservedDBInstancesOfferingsFunc: func(describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
// 				panic("mock out the DescribeReservedDBInstancesOfferings method")
// 			},
// 			DescribeReservedDBInstancesOfferingsPagesFunc: func(describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput, fn func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) error {
// 				panic("mock out the DescribeReservedDBInstancesOfferingsPages method")
// 			},
// 			DescribeReservedDBInstancesOfferingsPagesWithContextFunc: func(contextMoqParam context.Context, describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput, fn func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeReservedDBInstancesOfferingsPagesWithContext method")
// 			},
// 			DescribeReservedDBInstancesOfferingsRequestFunc: func(describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput) (*request.Request, *rds.DescribeReservedDBInstancesOfferingsOutput) {
// 				panic("mock out the DescribeReservedDBInstancesOfferingsRequest method")
// 			},
// 			DescribeReservedDBInstancesOfferingsWithContextFunc: func(contextMoqParam context.Context, describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput, options ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
// 				panic("mock out the DescribeReservedDBInstancesOfferingsWithContext method")
// 			},
// 			DescribeReservedDBInstancesPagesFunc: func(describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput, fn func(*rds.DescribeReservedDBInstancesOutput, bool) bool) error {
// 				panic("mock out the DescribeReservedDBInstancesPages method")
// 			},
// 			DescribeReservedDBInstancesPagesWithContextFunc: func(contextMoqParam context.Context, describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput, fn func(*rds.DescribeReservedDBInstancesOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeReservedDBInstancesPagesWithContext method")
// 			},
// 			DescribeReservedDBInstancesRequestFunc: func(describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput) (*request.Request, *rds.DescribeReservedDBInstancesOutput) {
// 				panic("mock out the DescribeReservedDBInstancesRequest method")
// 			},
// 			DescribeReservedDBInstancesWithContextFunc: func(contextMoqParam context.Context, describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput, options ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error) {
// 				panic("mock out the DescribeReservedDBInstancesWithContext method")
// 			},
// 			DescribeSourceRegionsFunc: func(describeSourceRegionsInput *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error) {
// 				panic("mock out the DescribeSourceRegions method")
// 			},
// 			DescribeSourceRegionsPagesFunc: func(describeSourceRegionsInput *rds.DescribeSourceRegionsInput, fn func(*rds.DescribeSourceRegionsOutput, bool) bool) error {
// 				panic("mock out the DescribeSourceRegionsPages method")
// 			},
// 			DescribeSourceRegionsPagesWithContextFunc: func(contextMoqParam context.Context, describeSourceRegionsInput *rds.DescribeSourceRegionsInput, fn func(*rds.DescribeSourceRegionsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeSourceRegionsPagesWithContext method")
// 			},
// 			DescribeSourceRegionsRequestFunc: func(describeSourceRegionsInput *rds.DescribeSourceRegionsInput) (*request.Request, *rds.DescribeSourceRegionsOutput) {
// 				panic("mock out the DescribeSourceRegionsRequest method")
// 			},
// 			DescribeSourceRegionsWithContextFunc: func(contextMoqParam context.Context, describeSourceRegionsInput *rds.DescribeSourceRegionsInput, options ...request.Option) (*rds.DescribeSourceRegionsOutput, error) {
// 				panic("mock out the DescribeSourceRegionsWithContext method")
// 			},
// 			DescribeValidDBInstanceModificationsFunc: func(describeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
// 				panic("mock out the DescribeValidDBInstanceModifications method")
// 			},
// 			DescribeValidDBInstanceModificationsRequestFunc: func(describeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput) (*request.Request, *rds.DescribeValidDBInstanceModificationsOutput) {
// 				panic("mock out the DescribeValidDBInstanceModificationsRequest method")
// 			},
// 			DescribeValidDBInstanceModificationsWithContextFunc: func(contextMoqParam context.Context, describeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput, options ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
// 				panic("mock out the DescribeValidDBInstanceModificationsWithContext method")
// 			},
// 			DownloadDBLogFilePortionFunc: func(downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error) {
// 				panic("mock out the DownloadDBLogFilePortion method")
// 			},
// 			DownloadDBLogFilePortionPagesFunc: func(downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput, fn func(*rds.DownloadDBLogFilePortionOutput, bool) bool) error {
// 				panic("mock out the DownloadDBLogFilePortionPages method")
// 			},
// 			DownloadDBLogFilePortionPagesWithContextFunc: func(contextMoqParam context.Context, downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput, fn func(*rds.DownloadDBLogFilePortionOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DownloadDBLogFilePortionPagesWithContext method")
// 			},
// 			DownloadDBLogFilePortionRequestFunc: func(downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput) (*request.Request, *rds.DownloadDBLogFilePortionOutput) {
// 				panic("mock out the DownloadDBLogFilePortionRequest method")
// 			},
// 			DownloadDBLogFilePortionWithContextFunc: func(contextMoqParam context.Context, downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput, options ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error) {
// 				panic("mock out the DownloadDBLogFilePortionWithContext method")
// 			},
// 			FailoverDBClusterFunc: func(failoverDBClusterInput *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error) {
// 				panic("mock out the FailoverDBCluster method")
// 			},
// 			FailoverDBClusterRequestFunc: func(failoverDBClusterInput *rds.FailoverDBClusterInput) (*request.Request, *rds.FailoverDBClusterOutput) {
// 				panic("mock out the FailoverDBClusterRequest method")
// 			},
// 			FailoverDBClusterWithContextFunc: func(contextMoqParam context.Context, failoverDBClusterInput *rds.FailoverDBClusterInput, options ...request.Option) (*rds.FailoverDBClusterOutput, error) {
// 				panic("mock out the FailoverDBClusterWithContext method")
// 			},
// 			FailoverGlobalClusterFunc: func(failoverGlobalClusterInput *rds.FailoverGlobalClusterInput) (*rds.FailoverGlobalClusterOutput, error) {
// 				panic("mock out the FailoverGlobalCluster method")
// 			},
// 			FailoverGlobalClusterRequestFunc: func(failoverGlobalClusterInput *rds.FailoverGlobalClusterInput) (*request.Request, *rds.FailoverGlobalClusterOutput) {
// 				panic("mock out the FailoverGlobalClusterRequest method")
// 			},
// 			FailoverGlobalClusterWithContextFunc: func(contextMoqParam context.Context, failoverGlobalClusterInput *rds.FailoverGlobalClusterInput, options ...request.Option) (*rds.FailoverGlobalClusterOutput, error) {
// 				panic("mock out the FailoverGlobalClusterWithContext method")
// 			},
// 			ListTagsForResourceFunc: func(listTagsForResourceInput *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error) {
// 				panic("mock out the ListTagsForResource method")
// 			},
// 			ListTagsForResourceRequestFunc: func(listTagsForResourceInput *rds.ListTagsForResourceInput) (*request.Request, *rds.ListTagsForResourceOutput) {
// 				panic("mock out the ListTagsForResourceRequest method")
// 			},
// 			ListTagsForResourceWithContextFunc: func(contextMoqParam context.Context, listTagsForResourceInput *rds.ListTagsForResourceInput, options ...request.Option) (*rds.ListTagsForResourceOutput, error) {
// 				panic("mock out the ListTagsForResourceWithContext method")
// 			},
// 			ModifyActivityStreamFunc: func(modifyActivityStreamInput *rds.ModifyActivityStreamInput) (*rds.ModifyActivityStreamOutput, error) {
// 				panic("mock out the ModifyActivityStream method")
// 			},
// 			ModifyActivityStreamRequestFunc: func(modifyActivityStreamInput *rds.ModifyActivityStreamInput) (*request.Request, *rds.ModifyActivityStreamOutput) {
// 				panic("mock out the ModifyActivityStreamRequest method")
// 			},
// 			ModifyActivityStreamWithContextFunc: func(contextMoqParam context.Context, modifyActivityStreamInput *rds.ModifyActivityStreamInput, options ...request.Option) (*rds.ModifyActivityStreamOutput, error) {
// 				panic("mock out the ModifyActivityStreamWithContext method")
// 			},
// 			ModifyCertificatesFunc: func(modifyCertificatesInput *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error) {
// 				panic("mock out the ModifyCertificates method")
// 			},
// 			ModifyCertificatesRequestFunc: func(modifyCertificatesInput *rds.ModifyCertificatesInput) (*request.Request, *rds.ModifyCertificatesOutput) {
// 				panic("mock out the ModifyCertificatesRequest method")
// 			},
// 			ModifyCertificatesWithContextFunc: func(contextMoqParam context.Context, modifyCertificatesInput *rds.ModifyCertificatesInput, options ...request.Option) (*rds.ModifyCertificatesOutput, error) {
// 				panic("mock out the ModifyCertificatesWithContext method")
// 			},
// 			ModifyCurrentDBClusterCapacityFunc: func(modifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
// 				panic("mock out the ModifyCurrentDBClusterCapacity method")
// 			},
// 			ModifyCurrentDBClusterCapacityRequestFunc: func(modifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput) (*request.Request, *rds.ModifyCurrentDBClusterCapacityOutput) {
// 				panic("mock out the ModifyCurrentDBClusterCapacityRequest method")
// 			},
// 			ModifyCurrentDBClusterCapacityWithContextFunc: func(contextMoqParam context.Context, modifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput, options ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
// 				panic("mock out the ModifyCurrentDBClusterCapacityWithContext method")
// 			},
// 			ModifyCustomDBEngineVersionFunc: func(modifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput) (*rds.ModifyCustomDBEngineVersionOutput, error) {
// 				panic("mock out the ModifyCustomDBEngineVersion method")
// 			},
// 			ModifyCustomDBEngineVersionRequestFunc: func(modifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput) (*request.Request, *rds.ModifyCustomDBEngineVersionOutput) {
// 				panic("mock out the ModifyCustomDBEngineVersionRequest method")
// 			},
// 			ModifyCustomDBEngineVersionWithContextFunc: func(contextMoqParam context.Context, modifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput, options ...request.Option) (*rds.ModifyCustomDBEngineVersionOutput, error) {
// 				panic("mock out the ModifyCustomDBEngineVersionWithContext method")
// 			},
// 			ModifyDBClusterFunc: func(modifyDBClusterInput *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error) {
// 				panic("mock out the ModifyDBCluster method")
// 			},
// 			ModifyDBClusterEndpointFunc: func(modifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error) {
// 				panic("mock out the ModifyDBClusterEndpoint method")
// 			},
// 			ModifyDBClusterEndpointRequestFunc: func(modifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput) (*request.Request, *rds.ModifyDBClusterEndpointOutput) {
// 				panic("mock out the ModifyDBClusterEndpointRequest method")
// 			},
// 			ModifyDBClusterEndpointWithContextFunc: func(contextMoqParam context.Context, modifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput, options ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error) {
// 				panic("mock out the ModifyDBClusterEndpointWithContext method")
// 			},
// 			ModifyDBClusterParameterGroupFunc: func(modifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
// 				panic("mock out the ModifyDBClusterParameterGroup method")
// 			},
// 			ModifyDBClusterParameterGroupRequestFunc: func(modifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage) {
// 				panic("mock out the ModifyDBClusterParameterGroupRequest method")
// 			},
// 			ModifyDBClusterParameterGroupWithContextFunc: func(contextMoqParam context.Context, modifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput, options ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
// 				panic("mock out the ModifyDBClusterParameterGroupWithContext method")
// 			},
// 			ModifyDBClusterRequestFunc: func(modifyDBClusterInput *rds.ModifyDBClusterInput) (*request.Request, *rds.ModifyDBClusterOutput) {
// 				panic("mock out the ModifyDBClusterRequest method")
// 			},
// 			ModifyDBClusterSnapshotAttributeFunc: func(modifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
// 				panic("mock out the ModifyDBClusterSnapshotAttribute method")
// 			},
// 			ModifyDBClusterSnapshotAttributeRequestFunc: func(modifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *rds.ModifyDBClusterSnapshotAttributeOutput) {
// 				panic("mock out the ModifyDBClusterSnapshotAttributeRequest method")
// 			},
// 			ModifyDBClusterSnapshotAttributeWithContextFunc: func(contextMoqParam context.Context, modifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput, options ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
// 				panic("mock out the ModifyDBClusterSnapshotAttributeWithContext method")
// 			},
// 			ModifyDBClusterWithContextFunc: func(contextMoqParam context.Context, modifyDBClusterInput *rds.ModifyDBClusterInput, options ...request.Option) (*rds.ModifyDBClusterOutput, error) {
// 				panic("mock out the ModifyDBClusterWithContext method")
// 			},
// 			ModifyDBInstanceFunc: func(modifyDBInstanceInput *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error) {
// 				panic("mock out the ModifyDBInstance method")
// 			},
// 			ModifyDBInstanceRequestFunc: func(modifyDBInstanceInput *rds.ModifyDBInstanceInput) (*request.Request, *rds.ModifyDBInstanceOutput) {
// 				panic("mock out the ModifyDBInstanceRequest method")
// 			},
// 			ModifyDBInstanceWithContextFunc: func(contextMoqParam context.Context, modifyDBInstanceInput *rds.ModifyDBInstanceInput, options ...request.Option) (*rds.ModifyDBInstanceOutput, error) {
// 				panic("mock out the ModifyDBInstanceWithContext method")
// 			},
// 			ModifyDBParameterGroupFunc: func(modifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
// 				panic("mock out the ModifyDBParameterGroup method")
// 			},
// 			ModifyDBParameterGroupRequestFunc: func(modifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage) {
// 				panic("mock out the ModifyDBParameterGroupRequest method")
// 			},
// 			ModifyDBParameterGroupWithContextFunc: func(contextMoqParam context.Context, modifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput, options ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
// 				panic("mock out the ModifyDBParameterGroupWithContext method")
// 			},
// 			ModifyDBProxyFunc: func(modifyDBProxyInput *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error) {
// 				panic("mock out the ModifyDBProxy method")
// 			},
// 			ModifyDBProxyEndpointFunc: func(modifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput) (*rds.ModifyDBProxyEndpointOutput, error) {
// 				panic("mock out the ModifyDBProxyEndpoint method")
// 			},
// 			ModifyDBProxyEndpointRequestFunc: func(modifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput) (*request.Request, *rds.ModifyDBProxyEndpointOutput) {
// 				panic("mock out the ModifyDBProxyEndpointRequest method")
// 			},
// 			ModifyDBProxyEndpointWithContextFunc: func(contextMoqParam context.Context, modifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput, options ...request.Option) (*rds.ModifyDBProxyEndpointOutput, error) {
// 				panic("mock out the ModifyDBProxyEndpointWithContext method")
// 			},
// 			ModifyDBProxyRequestFunc: func(modifyDBProxyInput *rds.ModifyDBProxyInput) (*request.Request, *rds.ModifyDBProxyOutput) {
// 				panic("mock out the ModifyDBProxyRequest method")
// 			},
// 			ModifyDBProxyTargetGroupFunc: func(modifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error) {
// 				panic("mock out the ModifyDBProxyTargetGroup method")
// 			},
// 			ModifyDBProxyTargetGroupRequestFunc: func(modifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput) (*request.Request, *rds.ModifyDBProxyTargetGroupOutput) {
// 				panic("mock out the ModifyDBProxyTargetGroupRequest method")
// 			},
// 			ModifyDBProxyTargetGroupWithContextFunc: func(contextMoqParam context.Context, modifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput, options ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error) {
// 				panic("mock out the ModifyDBProxyTargetGroupWithContext method")
// 			},
// 			ModifyDBProxyWithContextFunc: func(contextMoqParam context.Context, modifyDBProxyInput *rds.ModifyDBProxyInput, options ...request.Option) (*rds.ModifyDBProxyOutput, error) {
// 				panic("mock out the ModifyDBProxyWithContext method")
// 			},
// 			ModifyDBSnapshotFunc: func(modifyDBSnapshotInput *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error) {
// 				panic("mock out the ModifyDBSnapshot method")
// 			},
// 			ModifyDBSnapshotAttributeFunc: func(modifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error) {
// 				panic("mock out the ModifyDBSnapshotAttribute method")
// 			},
// 			ModifyDBSnapshotAttributeRequestFunc: func(modifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput) (*request.Request, *rds.ModifyDBSnapshotAttributeOutput) {
// 				panic("mock out the ModifyDBSnapshotAttributeRequest method")
// 			},
// 			ModifyDBSnapshotAttributeWithContextFunc: func(contextMoqParam context.Context, modifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput, options ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error) {
// 				panic("mock out the ModifyDBSnapshotAttributeWithContext method")
// 			},
// 			ModifyDBSnapshotRequestFunc: func(modifyDBSnapshotInput *rds.ModifyDBSnapshotInput) (*request.Request, *rds.ModifyDBSnapshotOutput) {
// 				panic("mock out the ModifyDBSnapshotRequest method")
// 			},
// 			ModifyDBSnapshotWithContextFunc: func(contextMoqParam context.Context, modifyDBSnapshotInput *rds.ModifyDBSnapshotInput, options ...request.Option) (*rds.ModifyDBSnapshotOutput, error) {
// 				panic("mock out the ModifyDBSnapshotWithContext method")
// 			},
// 			ModifyDBSubnetGroupFunc: func(modifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error) {
// 				panic("mock out the ModifyDBSubnetGroup method")
// 			},
// 			ModifyDBSubnetGroupRequestFunc: func(modifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput) (*request.Request, *rds.ModifyDBSubnetGroupOutput) {
// 				panic("mock out the ModifyDBSubnetGroupRequest method")
// 			},
// 			ModifyDBSubnetGroupWithContextFunc: func(contextMoqParam context.Context, modifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput, options ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error) {
// 				panic("mock out the ModifyDBSubnetGroupWithContext method")
// 			},
// 			ModifyEventSubscriptionFunc: func(modifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error) {
// 				panic("mock out the ModifyEventSubscription method")
// 			},
// 			ModifyEventSubscriptionRequestFunc: func(modifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput) (*request.Request, *rds.ModifyEventSubscriptionOutput) {
// 				panic("mock out the ModifyEventSubscriptionRequest method")
// 			},
// 			ModifyEventSubscriptionWithContextFunc: func(contextMoqParam context.Context, modifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput, options ...request.Option) (*rds.ModifyEventSubscriptionOutput, error) {
// 				panic("mock out the ModifyEventSubscriptionWithContext method")
// 			},
// 			ModifyGlobalClusterFunc: func(modifyGlobalClusterInput *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error) {
// 				panic("mock out the ModifyGlobalCluster method")
// 			},
// 			ModifyGlobalClusterRequestFunc: func(modifyGlobalClusterInput *rds.ModifyGlobalClusterInput) (*request.Request, *rds.ModifyGlobalClusterOutput) {
// 				panic("mock out the ModifyGlobalClusterRequest method")
// 			},
// 			ModifyGlobalClusterWithContextFunc: func(contextMoqParam context.Context, modifyGlobalClusterInput *rds.ModifyGlobalClusterInput, options ...request.Option) (*rds.ModifyGlobalClusterOutput, error) {
// 				panic("mock out the ModifyGlobalClusterWithContext method")
// 			},
// 			ModifyOptionGroupFunc: func(modifyOptionGroupInput *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error) {
// 				panic("mock out the ModifyOptionGroup method")
// 			},
// 			ModifyOptionGroupRequestFunc: func(modifyOptionGroupInput *rds.ModifyOptionGroupInput) (*request.Request, *rds.ModifyOptionGroupOutput) {
// 				panic("mock out the ModifyOptionGroupRequest method")
// 			},
// 			ModifyOptionGroupWithContextFunc: func(contextMoqParam context.Context, modifyOptionGroupInput *rds.ModifyOptionGroupInput, options ...request.Option) (*rds.ModifyOptionGroupOutput, error) {
// 				panic("mock out the ModifyOptionGroupWithContext method")
// 			},
// 			PromoteReadReplicaFunc: func(promoteReadReplicaInput *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error) {
// 				panic("mock out the PromoteReadReplica method")
// 			},
// 			PromoteReadReplicaDBClusterFunc: func(promoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error) {
// 				panic("mock out the PromoteReadReplicaDBCluster method")
// 			},
// 			PromoteReadReplicaDBClusterRequestFunc: func(promoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput) (*request.Request, *rds.PromoteReadReplicaDBClusterOutput) {
// 				panic("mock out the PromoteReadReplicaDBClusterRequest method")
// 			},
// 			PromoteReadReplicaDBClusterWithContextFunc: func(contextMoqParam context.Context, promoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput, options ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error) {
// 				panic("mock out the PromoteReadReplicaDBClusterWithContext method")
// 			},
// 			PromoteReadReplicaRequestFunc: func(promoteReadReplicaInput *rds.PromoteReadReplicaInput) (*request.Request, *rds.PromoteReadReplicaOutput) {
// 				panic("mock out the PromoteReadReplicaRequest method")
// 			},
// 			PromoteReadReplicaWithContextFunc: func(contextMoqParam context.Context, promoteReadReplicaInput *rds.PromoteReadReplicaInput, options ...request.Option) (*rds.PromoteReadReplicaOutput, error) {
// 				panic("mock out the PromoteReadReplicaWithContext method")
// 			},
// 			PurchaseReservedDBInstancesOfferingFunc: func(purchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
// 				panic("mock out the PurchaseReservedDBInstancesOffering method")
// 			},
// 			PurchaseReservedDBInstancesOfferingRequestFunc: func(purchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput) (*request.Request, *rds.PurchaseReservedDBInstancesOfferingOutput) {
// 				panic("mock out the PurchaseReservedDBInstancesOfferingRequest method")
// 			},
// 			PurchaseReservedDBInstancesOfferingWithContextFunc: func(contextMoqParam context.Context, purchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput, options ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
// 				panic("mock out the PurchaseReservedDBInstancesOfferingWithContext method")
// 			},
// 			RebootDBClusterFunc: func(rebootDBClusterInput *rds.RebootDBClusterInput) (*rds.RebootDBClusterOutput, error) {
// 				panic("mock out the RebootDBCluster method")
// 			},
// 			RebootDBClusterRequestFunc: func(rebootDBClusterInput *rds.RebootDBClusterInput) (*request.Request, *rds.RebootDBClusterOutput) {
// 				panic("mock out the RebootDBClusterRequest method")
// 			},
// 			RebootDBClusterWithContextFunc: func(contextMoqParam context.Context, rebootDBClusterInput *rds.RebootDBClusterInput, options ...request.Option) (*rds.RebootDBClusterOutput, error) {
// 				panic("mock out the RebootDBClusterWithContext method")
// 			},
// 			RebootDBInstanceFunc: func(rebootDBInstanceInput *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error) {
// 				panic("mock out the RebootDBInstance method")
// 			},
// 			RebootDBInstanceRequestFunc: func(rebootDBInstanceInput *rds.RebootDBInstanceInput) (*request.Request, *rds.RebootDBInstanceOutput) {
// 				panic("mock out the RebootDBInstanceRequest method")
// 			},
// 			RebootDBInstanceWithContextFunc: func(contextMoqParam context.Context, rebootDBInstanceInput *rds.RebootDBInstanceInput, options ...request.Option) (*rds.RebootDBInstanceOutput, error) {
// 				panic("mock out the RebootDBInstanceWithContext method")
// 			},
// 			RegisterDBProxyTargetsFunc: func(registerDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error) {
// 				panic("mock out the RegisterDBProxyTargets method")
// 			},
// 			RegisterDBProxyTargetsRequestFunc: func(registerDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput) (*request.Request, *rds.RegisterDBProxyTargetsOutput) {
// 				panic("mock out the RegisterDBProxyTargetsRequest method")
// 			},
// 			RegisterDBProxyTargetsWithContextFunc: func(contextMoqParam context.Context, registerDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput, options ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error) {
// 				panic("mock out the RegisterDBProxyTargetsWithContext method")
// 			},
// 			RemoveFromGlobalClusterFunc: func(removeFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error) {
// 				panic("mock out the RemoveFromGlobalCluster method")
// 			},
// 			RemoveFromGlobalClusterRequestFunc: func(removeFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput) (*request.Request, *rds.RemoveFromGlobalClusterOutput) {
// 				panic("mock out the RemoveFromGlobalClusterRequest method")
// 			},
// 			RemoveFromGlobalClusterWithContextFunc: func(contextMoqParam context.Context, removeFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput, options ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error) {
// 				panic("mock out the RemoveFromGlobalClusterWithContext method")
// 			},
// 			RemoveRoleFromDBClusterFunc: func(removeRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error) {
// 				panic("mock out the RemoveRoleFromDBCluster method")
// 			},
// 			RemoveRoleFromDBClusterRequestFunc: func(removeRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput) (*request.Request, *rds.RemoveRoleFromDBClusterOutput) {
// 				panic("mock out the RemoveRoleFromDBClusterRequest method")
// 			},
// 			RemoveRoleFromDBClusterWithContextFunc: func(contextMoqParam context.Context, removeRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput, options ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error) {
// 				panic("mock out the RemoveRoleFromDBClusterWithContext method")
// 			},
// 			RemoveRoleFromDBInstanceFunc: func(removeRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error) {
// 				panic("mock out the RemoveRoleFromDBInstance method")
// 			},
// 			RemoveRoleFromDBInstanceRequestFunc: func(removeRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput) (*request.Request, *rds.RemoveRoleFromDBInstanceOutput) {
// 				panic("mock out the RemoveRoleFromDBInstanceRequest method")
// 			},
// 			RemoveRoleFromDBInstanceWithContextFunc: func(contextMoqParam context.Context, removeRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput, options ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error) {
// 				panic("mock out the RemoveRoleFromDBInstanceWithContext method")
// 			},
// 			RemoveSourceIdentifierFromSubscriptionFunc: func(removeSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
// 				panic("mock out the RemoveSourceIdentifierFromSubscription method")
// 			},
// 			RemoveSourceIdentifierFromSubscriptionRequestFunc: func(removeSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput) (*request.Request, *rds.RemoveSourceIdentifierFromSubscriptionOutput) {
// 				panic("mock out the RemoveSourceIdentifierFromSubscriptionRequest method")
// 			},
// 			RemoveSourceIdentifierFromSubscriptionWithContextFunc: func(contextMoqParam context.Context, removeSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput, options ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
// 				panic("mock out the RemoveSourceIdentifierFromSubscriptionWithContext method")
// 			},
// 			RemoveTagsFromResourceFunc: func(removeTagsFromResourceInput *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error) {
// 				panic("mock out the RemoveTagsFromResource method")
// 			},
// 			RemoveTagsFromResourceRequestFunc: func(removeTagsFromResourceInput *rds.RemoveTagsFromResourceInput) (*request.Request, *rds.RemoveTagsFromResourceOutput) {
// 				panic("mock out the RemoveTagsFromResourceRequest method")
// 			},
// 			RemoveTagsFromResourceWithContextFunc: func(contextMoqParam context.Context, removeTagsFromResourceInput *rds.RemoveTagsFromResourceInput, options ...request.Option) (*rds.RemoveTagsFromResourceOutput, error) {
// 				panic("mock out the RemoveTagsFromResourceWithContext method")
// 			},
// 			ResetDBClusterParameterGroupFunc: func(resetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
// 				panic("mock out the ResetDBClusterParameterGroup method")
// 			},
// 			ResetDBClusterParameterGroupRequestFunc: func(resetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage) {
// 				panic("mock out the ResetDBClusterParameterGroupRequest method")
// 			},
// 			ResetDBClusterParameterGroupWithContextFunc: func(contextMoqParam context.Context, resetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput, options ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
// 				panic("mock out the ResetDBClusterParameterGroupWithContext method")
// 			},
// 			ResetDBParameterGroupFunc: func(resetDBParameterGroupInput *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
// 				panic("mock out the ResetDBParameterGroup method")
// 			},
// 			ResetDBParameterGroupRequestFunc: func(resetDBParameterGroupInput *rds.ResetDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage) {
// 				panic("mock out the ResetDBParameterGroupRequest method")
// 			},
// 			ResetDBParameterGroupWithContextFunc: func(contextMoqParam context.Context, resetDBParameterGroupInput *rds.ResetDBParameterGroupInput, options ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
// 				panic("mock out the ResetDBParameterGroupWithContext method")
// 			},
// 			RestoreDBClusterFromS3Func: func(restoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error) {
// 				panic("mock out the RestoreDBClusterFromS3 method")
// 			},
// 			RestoreDBClusterFromS3RequestFunc: func(restoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input) (*request.Request, *rds.RestoreDBClusterFromS3Output) {
// 				panic("mock out the RestoreDBClusterFromS3Request method")
// 			},
// 			RestoreDBClusterFromS3WithContextFunc: func(contextMoqParam context.Context, restoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input, options ...request.Option) (*rds.RestoreDBClusterFromS3Output, error) {
// 				panic("mock out the RestoreDBClusterFromS3WithContext method")
// 			},
// 			RestoreDBClusterFromSnapshotFunc: func(restoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
// 				panic("mock out the RestoreDBClusterFromSnapshot method")
// 			},
// 			RestoreDBClusterFromSnapshotRequestFunc: func(restoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput) (*request.Request, *rds.RestoreDBClusterFromSnapshotOutput) {
// 				panic("mock out the RestoreDBClusterFromSnapshotRequest method")
// 			},
// 			RestoreDBClusterFromSnapshotWithContextFunc: func(contextMoqParam context.Context, restoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput, options ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
// 				panic("mock out the RestoreDBClusterFromSnapshotWithContext method")
// 			},
// 			RestoreDBClusterToPointInTimeFunc: func(restoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
// 				panic("mock out the RestoreDBClusterToPointInTime method")
// 			},
// 			RestoreDBClusterToPointInTimeRequestFunc: func(restoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput) (*request.Request, *rds.RestoreDBClusterToPointInTimeOutput) {
// 				panic("mock out the RestoreDBClusterToPointInTimeRequest method")
// 			},
// 			RestoreDBClusterToPointInTimeWithContextFunc: func(contextMoqParam context.Context, restoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput, options ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
// 				panic("mock out the RestoreDBClusterToPointInTimeWithContext method")
// 			},
// 			RestoreDBInstanceFromDBSnapshotFunc: func(restoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
// 				panic("mock out the RestoreDBInstanceFromDBSnapshot method")
// 			},
// 			RestoreDBInstanceFromDBSnapshotRequestFunc: func(restoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput) (*request.Request, *rds.RestoreDBInstanceFromDBSnapshotOutput) {
// 				panic("mock out the RestoreDBInstanceFromDBSnapshotRequest method")
// 			},
// 			RestoreDBInstanceFromDBSnapshotWithContextFunc: func(contextMoqParam context.Context, restoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput, options ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
// 				panic("mock out the RestoreDBInstanceFromDBSnapshotWithContext method")
// 			},
// 			RestoreDBInstanceFromS3Func: func(restoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error) {
// 				panic("mock out the RestoreDBInstanceFromS3 method")
// 			},
// 			RestoreDBInstanceFromS3RequestFunc: func(restoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input) (*request.Request, *rds.RestoreDBInstanceFromS3Output) {
// 				panic("mock out the RestoreDBInstanceFromS3Request method")
// 			},
// 			RestoreDBInstanceFromS3WithContextFunc: func(contextMoqParam context.Context, restoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input, options ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error) {
// 				panic("mock out the RestoreDBInstanceFromS3WithContext method")
// 			},
// 			RestoreDBInstanceToPointInTimeFunc: func(restoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
// 				panic("mock out the RestoreDBInstanceToPointInTime method")
// 			},
// 			RestoreDBInstanceToPointInTimeRequestFunc: func(restoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput) (*request.Request, *rds.RestoreDBInstanceToPointInTimeOutput) {
// 				panic("mock out the RestoreDBInstanceToPointInTimeRequest method")
// 			},
// 			RestoreDBInstanceToPointInTimeWithContextFunc: func(contextMoqParam context.Context, restoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput, options ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
// 				panic("mock out the RestoreDBInstanceToPointInTimeWithContext method")
// 			},
// 			RevokeDBSecurityGroupIngressFunc: func(revokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
// 				panic("mock out the RevokeDBSecurityGroupIngress method")
// 			},
// 			RevokeDBSecurityGroupIngressRequestFunc: func(revokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput) (*request.Request, *rds.RevokeDBSecurityGroupIngressOutput) {
// 				panic("mock out the RevokeDBSecurityGroupIngressRequest method")
// 			},
// 			RevokeDBSecurityGroupIngressWithContextFunc: func(contextMoqParam context.Context, revokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput, options ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
// 				panic("mock out the RevokeDBSecurityGroupIngressWithContext method")
// 			},
// 			StartActivityStreamFunc: func(startActivityStreamInput *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error) {
// 				panic("mock out the StartActivityStream method")
// 			},
// 			StartActivityStreamRequestFunc: func(startActivityStreamInput *rds.StartActivityStreamInput) (*request.Request, *rds.StartActivityStreamOutput) {
// 				panic("mock out the StartActivityStreamRequest method")
// 			},
// 			StartActivityStreamWithContextFunc: func(contextMoqParam context.Context, startActivityStreamInput *rds.StartActivityStreamInput, options ...request.Option) (*rds.StartActivityStreamOutput, error) {
// 				panic("mock out the StartActivityStreamWithContext method")
// 			},
// 			StartDBClusterFunc: func(startDBClusterInput *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error) {
// 				panic("mock out the StartDBCluster method")
// 			},
// 			StartDBClusterRequestFunc: func(startDBClusterInput *rds.StartDBClusterInput) (*request.Request, *rds.StartDBClusterOutput) {
// 				panic("mock out the StartDBClusterRequest method")
// 			},
// 			StartDBClusterWithContextFunc: func(contextMoqParam context.Context, startDBClusterInput *rds.StartDBClusterInput, options ...request.Option) (*rds.StartDBClusterOutput, error) {
// 				panic("mock out the StartDBClusterWithContext method")
// 			},
// 			StartDBInstanceFunc: func(startDBInstanceInput *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error) {
// 				panic("mock out the StartDBInstance method")
// 			},
// 			StartDBInstanceAutomatedBackupsReplicationFunc: func(startDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput) (*rds.StartDBInstanceAutomatedBackupsReplicationOutput, error) {
// 				panic("mock out the StartDBInstanceAutomatedBackupsReplication method")
// 			},
// 			StartDBInstanceAutomatedBackupsReplicationRequestFunc: func(startDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput) (*request.Request, *rds.StartDBInstanceAutomatedBackupsReplicationOutput) {
// 				panic("mock out the StartDBInstanceAutomatedBackupsReplicationRequest method")
// 			},
// 			StartDBInstanceAutomatedBackupsReplicationWithContextFunc: func(contextMoqParam context.Context, startDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput, options ...request.Option) (*rds.StartDBInstanceAutomatedBackupsReplicationOutput, error) {
// 				panic("mock out the StartDBInstanceAutomatedBackupsReplicationWithContext method")
// 			},
// 			StartDBInstanceRequestFunc: func(startDBInstanceInput *rds.StartDBInstanceInput) (*request.Request, *rds.StartDBInstanceOutput) {
// 				panic("mock out the StartDBInstanceRequest method")
// 			},
// 			StartDBInstanceWithContextFunc: func(contextMoqParam context.Context, startDBInstanceInput *rds.StartDBInstanceInput, options ...request.Option) (*rds.StartDBInstanceOutput, error) {
// 				panic("mock out the StartDBInstanceWithContext method")
// 			},
// 			StartExportTaskFunc: func(startExportTaskInput *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error) {
// 				panic("mock out the StartExportTask method")
// 			},
// 			StartExportTaskRequestFunc: func(startExportTaskInput *rds.StartExportTaskInput) (*request.Request, *rds.StartExportTaskOutput) {
// 				panic("mock out the StartExportTaskRequest method")
// 			},
// 			StartExportTaskWithContextFunc: func(contextMoqParam context.Context, startExportTaskInput *rds.StartExportTaskInput, options ...request.Option) (*rds.StartExportTaskOutput, error) {
// 				panic("mock out the StartExportTaskWithContext method")
// 			},
// 			StopActivityStreamFunc: func(stopActivityStreamInput *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error) {
// 				panic("mock out the StopActivityStream method")
// 			},
// 			StopActivityStreamRequestFunc: func(stopActivityStreamInput *rds.StopActivityStreamInput) (*request.Request, *rds.StopActivityStreamOutput) {
// 				panic("mock out the StopActivityStreamRequest method")
// 			},
// 			StopActivityStreamWithContextFunc: func(contextMoqParam context.Context, stopActivityStreamInput *rds.StopActivityStreamInput, options ...request.Option) (*rds.StopActivityStreamOutput, error) {
// 				panic("mock out the StopActivityStreamWithContext method")
// 			},
// 			StopDBClusterFunc: func(stopDBClusterInput *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error) {
// 				panic("mock out the StopDBCluster method")
// 			},
// 			StopDBClusterRequestFunc: func(stopDBClusterInput *rds.StopDBClusterInput) (*request.Request, *rds.StopDBClusterOutput) {
// 				panic("mock out the StopDBClusterRequest method")
// 			},
// 			StopDBClusterWithContextFunc: func(contextMoqParam context.Context, stopDBClusterInput *rds.StopDBClusterInput, options ...request.Option) (*rds.StopDBClusterOutput, error) {
// 				panic("mock out the StopDBClusterWithContext method")
// 			},
// 			StopDBInstanceFunc: func(stopDBInstanceInput *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error) {
// 				panic("mock out the StopDBInstance method")
// 			},
// 			StopDBInstanceAutomatedBackupsReplicationFunc: func(stopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput) (*rds.StopDBInstanceAutomatedBackupsReplicationOutput, error) {
// 				panic("mock out the StopDBInstanceAutomatedBackupsReplication method")
// 			},
// 			StopDBInstanceAutomatedBackupsReplicationRequestFunc: func(stopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput) (*request.Request, *rds.StopDBInstanceAutomatedBackupsReplicationOutput) {
// 				panic("mock out the StopDBInstanceAutomatedBackupsReplicationRequest method")
// 			},
// 			StopDBInstanceAutomatedBackupsReplicationWithContextFunc: func(contextMoqParam context.Context, stopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput, options ...request.Option) (*rds.StopDBInstanceAutomatedBackupsReplicationOutput, error) {
// 				panic("mock out the StopDBInstanceAutomatedBackupsReplicationWithContext method")
// 			},
// 			StopDBInstanceRequestFunc: func(stopDBInstanceInput *rds.StopDBInstanceInput) (*request.Request, *rds.StopDBInstanceOutput) {
// 				panic("mock out the StopDBInstanceRequest method")
// 			},
// 			StopDBInstanceWithContextFunc: func(contextMoqParam context.Context, stopDBInstanceInput *rds.StopDBInstanceInput, options ...request.Option) (*rds.StopDBInstanceOutput, error) {
// 				panic("mock out the StopDBInstanceWithContext method")
// 			},
// 			SwitchoverReadReplicaFunc: func(switchoverReadReplicaInput *rds.SwitchoverReadReplicaInput) (*rds.SwitchoverReadReplicaOutput, error) {
// 				panic("mock out the SwitchoverReadReplica method")
// 			},
// 			SwitchoverReadReplicaRequestFunc: func(switchoverReadReplicaInput *rds.SwitchoverReadReplicaInput) (*request.Request, *rds.SwitchoverReadReplicaOutput) {
// 				panic("mock out the SwitchoverReadReplicaRequest method")
// 			},
// 			SwitchoverReadReplicaWithContextFunc: func(contextMoqParam context.Context, switchoverReadReplicaInput *rds.SwitchoverReadReplicaInput, options ...request.Option) (*rds.SwitchoverReadReplicaOutput, error) {
// 				panic("mock out the SwitchoverReadReplicaWithContext method")
// 			},
// 			WaitUntilDBClusterAvailableFunc: func(describeDBClustersInput *rds.DescribeDBClustersInput) error {
// 				panic("mock out the WaitUntilDBClusterAvailable method")
// 			},
// 			WaitUntilDBClusterAvailableWithContextFunc: func(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilDBClusterAvailableWithContext method")
// 			},
// 			WaitUntilDBClusterDeletedFunc: func(describeDBClustersInput *rds.DescribeDBClustersInput) error {
// 				panic("mock out the WaitUntilDBClusterDeleted method")
// 			},
// 			WaitUntilDBClusterDeletedWithContextFunc: func(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilDBClusterDeletedWithContext method")
// 			},
// 			WaitUntilDBClusterSnapshotAvailableFunc: func(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) error {
// 				panic("mock out the WaitUntilDBClusterSnapshotAvailable method")
// 			},
// 			WaitUntilDBClusterSnapshotAvailableWithContextFunc: func(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilDBClusterSnapshotAvailableWithContext method")
// 			},
// 			WaitUntilDBClusterSnapshotDeletedFunc: func(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) error {
// 				panic("mock out the WaitUntilDBClusterSnapshotDeleted method")
// 			},
// 			WaitUntilDBClusterSnapshotDeletedWithContextFunc: func(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilDBClusterSnapshotDeletedWithContext method")
// 			},
// 			WaitUntilDBInstanceAvailableFunc: func(describeDBInstancesInput *rds.DescribeDBInstancesInput) error {
// 				panic("mock out the WaitUntilDBInstanceAvailable method")
// 			},
// 			WaitUntilDBInstanceAvailableWithContextFunc: func(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilDBInstanceAvailableWithContext method")
// 			},
// 			WaitUntilDBInstanceDeletedFunc: func(describeDBInstancesInput *rds.DescribeDBInstancesInput) error {
// 				panic("mock out the WaitUntilDBInstanceDeleted method")
// 			},
// 			WaitUntilDBInstanceDeletedWithContextFunc: func(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilDBInstanceDeletedWithContext method")
// 			},
// 			WaitUntilDBSnapshotAvailableFunc: func(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) error {
// 				panic("mock out the WaitUntilDBSnapshotAvailable method")
// 			},
// 			WaitUntilDBSnapshotAvailableWithContextFunc: func(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilDBSnapshotAvailableWithContext method")
// 			},
// 			WaitUntilDBSnapshotDeletedFunc: func(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) error {
// 				panic("mock out the WaitUntilDBSnapshotDeleted method")
// 			},
// 			WaitUntilDBSnapshotDeletedWithContextFunc: func(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilDBSnapshotDeletedWithContext method")
// 			},
// 		}
//
// 		// use mockedrdsClient in code that requires rdsClient
// 		// and then make assertions.
//
// 	}
type rdsClientMock struct {
	// AddRoleToDBClusterFunc mocks the AddRoleToDBCluster method.
	AddRoleToDBClusterFunc func(addRoleToDBClusterInput *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error)

	// AddRoleToDBClusterRequestFunc mocks the AddRoleToDBClusterRequest method.
	AddRoleToDBClusterRequestFunc func(addRoleToDBClusterInput *rds.AddRoleToDBClusterInput) (*request.Request, *rds.AddRoleToDBClusterOutput)

	// AddRoleToDBClusterWithContextFunc mocks the AddRoleToDBClusterWithContext method.
	AddRoleToDBClusterWithContextFunc func(contextMoqParam context.Context, addRoleToDBClusterInput *rds.AddRoleToDBClusterInput, options ...request.Option) (*rds.AddRoleToDBClusterOutput, error)

	// AddRoleToDBInstanceFunc mocks the AddRoleToDBInstance method.
	AddRoleToDBInstanceFunc func(addRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error)

	// AddRoleToDBInstanceRequestFunc mocks the AddRoleToDBInstanceRequest method.
	AddRoleToDBInstanceRequestFunc func(addRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput) (*request.Request, *rds.AddRoleToDBInstanceOutput)

	// AddRoleToDBInstanceWithContextFunc mocks the AddRoleToDBInstanceWithContext method.
	AddRoleToDBInstanceWithContextFunc func(contextMoqParam context.Context, addRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput, options ...request.Option) (*rds.AddRoleToDBInstanceOutput, error)

	// AddSourceIdentifierToSubscriptionFunc mocks the AddSourceIdentifierToSubscription method.
	AddSourceIdentifierToSubscriptionFunc func(addSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error)

	// AddSourceIdentifierToSubscriptionRequestFunc mocks the AddSourceIdentifierToSubscriptionRequest method.
	AddSourceIdentifierToSubscriptionRequestFunc func(addSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput) (*request.Request, *rds.AddSourceIdentifierToSubscriptionOutput)

	// AddSourceIdentifierToSubscriptionWithContextFunc mocks the AddSourceIdentifierToSubscriptionWithContext method.
	AddSourceIdentifierToSubscriptionWithContextFunc func(contextMoqParam context.Context, addSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput, options ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error)

	// AddTagsToResourceFunc mocks the AddTagsToResource method.
	AddTagsToResourceFunc func(addTagsToResourceInput *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error)

	// AddTagsToResourceRequestFunc mocks the AddTagsToResourceRequest method.
	AddTagsToResourceRequestFunc func(addTagsToResourceInput *rds.AddTagsToResourceInput) (*request.Request, *rds.AddTagsToResourceOutput)

	// AddTagsToResourceWithContextFunc mocks the AddTagsToResourceWithContext method.
	AddTagsToResourceWithContextFunc func(contextMoqParam context.Context, addTagsToResourceInput *rds.AddTagsToResourceInput, options ...request.Option) (*rds.AddTagsToResourceOutput, error)

	// ApplyPendingMaintenanceActionFunc mocks the ApplyPendingMaintenanceAction method.
	ApplyPendingMaintenanceActionFunc func(applyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error)

	// ApplyPendingMaintenanceActionRequestFunc mocks the ApplyPendingMaintenanceActionRequest method.
	ApplyPendingMaintenanceActionRequestFunc func(applyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput) (*request.Request, *rds.ApplyPendingMaintenanceActionOutput)

	// ApplyPendingMaintenanceActionWithContextFunc mocks the ApplyPendingMaintenanceActionWithContext method.
	ApplyPendingMaintenanceActionWithContextFunc func(contextMoqParam context.Context, applyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput, options ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error)

	// AuthorizeDBSecurityGroupIngressFunc mocks the AuthorizeDBSecurityGroupIngress method.
	AuthorizeDBSecurityGroupIngressFunc func(authorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)

	// AuthorizeDBSecurityGroupIngressRequestFunc mocks the AuthorizeDBSecurityGroupIngressRequest method.
	AuthorizeDBSecurityGroupIngressRequestFunc func(authorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput) (*request.Request, *rds.AuthorizeDBSecurityGroupIngressOutput)

	// AuthorizeDBSecurityGroupIngressWithContextFunc mocks the AuthorizeDBSecurityGroupIngressWithContext method.
	AuthorizeDBSecurityGroupIngressWithContextFunc func(contextMoqParam context.Context, authorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput, options ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error)

	// BacktrackDBClusterFunc mocks the BacktrackDBCluster method.
	BacktrackDBClusterFunc func(backtrackDBClusterInput *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error)

	// BacktrackDBClusterRequestFunc mocks the BacktrackDBClusterRequest method.
	BacktrackDBClusterRequestFunc func(backtrackDBClusterInput *rds.BacktrackDBClusterInput) (*request.Request, *rds.BacktrackDBClusterOutput)

	// BacktrackDBClusterWithContextFunc mocks the BacktrackDBClusterWithContext method.
	BacktrackDBClusterWithContextFunc func(contextMoqParam context.Context, backtrackDBClusterInput *rds.BacktrackDBClusterInput, options ...request.Option) (*rds.BacktrackDBClusterOutput, error)

	// CancelExportTaskFunc mocks the CancelExportTask method.
	CancelExportTaskFunc func(cancelExportTaskInput *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error)

	// CancelExportTaskRequestFunc mocks the CancelExportTaskRequest method.
	CancelExportTaskRequestFunc func(cancelExportTaskInput *rds.CancelExportTaskInput) (*request.Request, *rds.CancelExportTaskOutput)

	// CancelExportTaskWithContextFunc mocks the CancelExportTaskWithContext method.
	CancelExportTaskWithContextFunc func(contextMoqParam context.Context, cancelExportTaskInput *rds.CancelExportTaskInput, options ...request.Option) (*rds.CancelExportTaskOutput, error)

	// CopyDBClusterParameterGroupFunc mocks the CopyDBClusterParameterGroup method.
	CopyDBClusterParameterGroupFunc func(copyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error)

	// CopyDBClusterParameterGroupRequestFunc mocks the CopyDBClusterParameterGroupRequest method.
	CopyDBClusterParameterGroupRequestFunc func(copyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput) (*request.Request, *rds.CopyDBClusterParameterGroupOutput)

	// CopyDBClusterParameterGroupWithContextFunc mocks the CopyDBClusterParameterGroupWithContext method.
	CopyDBClusterParameterGroupWithContextFunc func(contextMoqParam context.Context, copyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput, options ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error)

	// CopyDBClusterSnapshotFunc mocks the CopyDBClusterSnapshot method.
	CopyDBClusterSnapshotFunc func(copyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error)

	// CopyDBClusterSnapshotRequestFunc mocks the CopyDBClusterSnapshotRequest method.
	CopyDBClusterSnapshotRequestFunc func(copyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput) (*request.Request, *rds.CopyDBClusterSnapshotOutput)

	// CopyDBClusterSnapshotWithContextFunc mocks the CopyDBClusterSnapshotWithContext method.
	CopyDBClusterSnapshotWithContextFunc func(contextMoqParam context.Context, copyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput, options ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error)

	// CopyDBParameterGroupFunc mocks the CopyDBParameterGroup method.
	CopyDBParameterGroupFunc func(copyDBParameterGroupInput *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error)

	// CopyDBParameterGroupRequestFunc mocks the CopyDBParameterGroupRequest method.
	CopyDBParameterGroupRequestFunc func(copyDBParameterGroupInput *rds.CopyDBParameterGroupInput) (*request.Request, *rds.CopyDBParameterGroupOutput)

	// CopyDBParameterGroupWithContextFunc mocks the CopyDBParameterGroupWithContext method.
	CopyDBParameterGroupWithContextFunc func(contextMoqParam context.Context, copyDBParameterGroupInput *rds.CopyDBParameterGroupInput, options ...request.Option) (*rds.CopyDBParameterGroupOutput, error)

	// CopyDBSnapshotFunc mocks the CopyDBSnapshot method.
	CopyDBSnapshotFunc func(copyDBSnapshotInput *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error)

	// CopyDBSnapshotRequestFunc mocks the CopyDBSnapshotRequest method.
	CopyDBSnapshotRequestFunc func(copyDBSnapshotInput *rds.CopyDBSnapshotInput) (*request.Request, *rds.CopyDBSnapshotOutput)

	// CopyDBSnapshotWithContextFunc mocks the CopyDBSnapshotWithContext method.
	CopyDBSnapshotWithContextFunc func(contextMoqParam context.Context, copyDBSnapshotInput *rds.CopyDBSnapshotInput, options ...request.Option) (*rds.CopyDBSnapshotOutput, error)

	// CopyOptionGroupFunc mocks the CopyOptionGroup method.
	CopyOptionGroupFunc func(copyOptionGroupInput *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error)

	// CopyOptionGroupRequestFunc mocks the CopyOptionGroupRequest method.
	CopyOptionGroupRequestFunc func(copyOptionGroupInput *rds.CopyOptionGroupInput) (*request.Request, *rds.CopyOptionGroupOutput)

	// CopyOptionGroupWithContextFunc mocks the CopyOptionGroupWithContext method.
	CopyOptionGroupWithContextFunc func(contextMoqParam context.Context, copyOptionGroupInput *rds.CopyOptionGroupInput, options ...request.Option) (*rds.CopyOptionGroupOutput, error)

	// CreateCustomDBEngineVersionFunc mocks the CreateCustomDBEngineVersion method.
	CreateCustomDBEngineVersionFunc func(createCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput) (*rds.CreateCustomDBEngineVersionOutput, error)

	// CreateCustomDBEngineVersionRequestFunc mocks the CreateCustomDBEngineVersionRequest method.
	CreateCustomDBEngineVersionRequestFunc func(createCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput) (*request.Request, *rds.CreateCustomDBEngineVersionOutput)

	// CreateCustomDBEngineVersionWithContextFunc mocks the CreateCustomDBEngineVersionWithContext method.
	CreateCustomDBEngineVersionWithContextFunc func(contextMoqParam context.Context, createCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput, options ...request.Option) (*rds.CreateCustomDBEngineVersionOutput, error)

	// CreateDBClusterFunc mocks the CreateDBCluster method.
	CreateDBClusterFunc func(createDBClusterInput *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error)

	// CreateDBClusterEndpointFunc mocks the CreateDBClusterEndpoint method.
	CreateDBClusterEndpointFunc func(createDBClusterEndpointInput *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error)

	// CreateDBClusterEndpointRequestFunc mocks the CreateDBClusterEndpointRequest method.
	CreateDBClusterEndpointRequestFunc func(createDBClusterEndpointInput *rds.CreateDBClusterEndpointInput) (*request.Request, *rds.CreateDBClusterEndpointOutput)

	// CreateDBClusterEndpointWithContextFunc mocks the CreateDBClusterEndpointWithContext method.
	CreateDBClusterEndpointWithContextFunc func(contextMoqParam context.Context, createDBClusterEndpointInput *rds.CreateDBClusterEndpointInput, options ...request.Option) (*rds.CreateDBClusterEndpointOutput, error)

	// CreateDBClusterParameterGroupFunc mocks the CreateDBClusterParameterGroup method.
	CreateDBClusterParameterGroupFunc func(createDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error)

	// CreateDBClusterParameterGroupRequestFunc mocks the CreateDBClusterParameterGroupRequest method.
	CreateDBClusterParameterGroupRequestFunc func(createDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput) (*request.Request, *rds.CreateDBClusterParameterGroupOutput)

	// CreateDBClusterParameterGroupWithContextFunc mocks the CreateDBClusterParameterGroupWithContext method.
	CreateDBClusterParameterGroupWithContextFunc func(contextMoqParam context.Context, createDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput, options ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error)

	// CreateDBClusterRequestFunc mocks the CreateDBClusterRequest method.
	CreateDBClusterRequestFunc func(createDBClusterInput *rds.CreateDBClusterInput) (*request.Request, *rds.CreateDBClusterOutput)

	// CreateDBClusterSnapshotFunc mocks the CreateDBClusterSnapshot method.
	CreateDBClusterSnapshotFunc func(createDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error)

	// CreateDBClusterSnapshotRequestFunc mocks the CreateDBClusterSnapshotRequest method.
	CreateDBClusterSnapshotRequestFunc func(createDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput) (*request.Request, *rds.CreateDBClusterSnapshotOutput)

	// CreateDBClusterSnapshotWithContextFunc mocks the CreateDBClusterSnapshotWithContext method.
	CreateDBClusterSnapshotWithContextFunc func(contextMoqParam context.Context, createDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput, options ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error)

	// CreateDBClusterWithContextFunc mocks the CreateDBClusterWithContext method.
	CreateDBClusterWithContextFunc func(contextMoqParam context.Context, createDBClusterInput *rds.CreateDBClusterInput, options ...request.Option) (*rds.CreateDBClusterOutput, error)

	// CreateDBInstanceFunc mocks the CreateDBInstance method.
	CreateDBInstanceFunc func(createDBInstanceInput *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error)

	// CreateDBInstanceReadReplicaFunc mocks the CreateDBInstanceReadReplica method.
	CreateDBInstanceReadReplicaFunc func(createDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error)

	// CreateDBInstanceReadReplicaRequestFunc mocks the CreateDBInstanceReadReplicaRequest method.
	CreateDBInstanceReadReplicaRequestFunc func(createDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput) (*request.Request, *rds.CreateDBInstanceReadReplicaOutput)

	// CreateDBInstanceReadReplicaWithContextFunc mocks the CreateDBInstanceReadReplicaWithContext method.
	CreateDBInstanceReadReplicaWithContextFunc func(contextMoqParam context.Context, createDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput, options ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error)

	// CreateDBInstanceRequestFunc mocks the CreateDBInstanceRequest method.
	CreateDBInstanceRequestFunc func(createDBInstanceInput *rds.CreateDBInstanceInput) (*request.Request, *rds.CreateDBInstanceOutput)

	// CreateDBInstanceWithContextFunc mocks the CreateDBInstanceWithContext method.
	CreateDBInstanceWithContextFunc func(contextMoqParam context.Context, createDBInstanceInput *rds.CreateDBInstanceInput, options ...request.Option) (*rds.CreateDBInstanceOutput, error)

	// CreateDBParameterGroupFunc mocks the CreateDBParameterGroup method.
	CreateDBParameterGroupFunc func(createDBParameterGroupInput *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error)

	// CreateDBParameterGroupRequestFunc mocks the CreateDBParameterGroupRequest method.
	CreateDBParameterGroupRequestFunc func(createDBParameterGroupInput *rds.CreateDBParameterGroupInput) (*request.Request, *rds.CreateDBParameterGroupOutput)

	// CreateDBParameterGroupWithContextFunc mocks the CreateDBParameterGroupWithContext method.
	CreateDBParameterGroupWithContextFunc func(contextMoqParam context.Context, createDBParameterGroupInput *rds.CreateDBParameterGroupInput, options ...request.Option) (*rds.CreateDBParameterGroupOutput, error)

	// CreateDBProxyFunc mocks the CreateDBProxy method.
	CreateDBProxyFunc func(createDBProxyInput *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error)

	// CreateDBProxyEndpointFunc mocks the CreateDBProxyEndpoint method.
	CreateDBProxyEndpointFunc func(createDBProxyEndpointInput *rds.CreateDBProxyEndpointInput) (*rds.CreateDBProxyEndpointOutput, error)

	// CreateDBProxyEndpointRequestFunc mocks the CreateDBProxyEndpointRequest method.
	CreateDBProxyEndpointRequestFunc func(createDBProxyEndpointInput *rds.CreateDBProxyEndpointInput) (*request.Request, *rds.CreateDBProxyEndpointOutput)

	// CreateDBProxyEndpointWithContextFunc mocks the CreateDBProxyEndpointWithContext method.
	CreateDBProxyEndpointWithContextFunc func(contextMoqParam context.Context, createDBProxyEndpointInput *rds.CreateDBProxyEndpointInput, options ...request.Option) (*rds.CreateDBProxyEndpointOutput, error)

	// CreateDBProxyRequestFunc mocks the CreateDBProxyRequest method.
	CreateDBProxyRequestFunc func(createDBProxyInput *rds.CreateDBProxyInput) (*request.Request, *rds.CreateDBProxyOutput)

	// CreateDBProxyWithContextFunc mocks the CreateDBProxyWithContext method.
	CreateDBProxyWithContextFunc func(contextMoqParam context.Context, createDBProxyInput *rds.CreateDBProxyInput, options ...request.Option) (*rds.CreateDBProxyOutput, error)

	// CreateDBSecurityGroupFunc mocks the CreateDBSecurityGroup method.
	CreateDBSecurityGroupFunc func(createDBSecurityGroupInput *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error)

	// CreateDBSecurityGroupRequestFunc mocks the CreateDBSecurityGroupRequest method.
	CreateDBSecurityGroupRequestFunc func(createDBSecurityGroupInput *rds.CreateDBSecurityGroupInput) (*request.Request, *rds.CreateDBSecurityGroupOutput)

	// CreateDBSecurityGroupWithContextFunc mocks the CreateDBSecurityGroupWithContext method.
	CreateDBSecurityGroupWithContextFunc func(contextMoqParam context.Context, createDBSecurityGroupInput *rds.CreateDBSecurityGroupInput, options ...request.Option) (*rds.CreateDBSecurityGroupOutput, error)

	// CreateDBSnapshotFunc mocks the CreateDBSnapshot method.
	CreateDBSnapshotFunc func(createDBSnapshotInput *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error)

	// CreateDBSnapshotRequestFunc mocks the CreateDBSnapshotRequest method.
	CreateDBSnapshotRequestFunc func(createDBSnapshotInput *rds.CreateDBSnapshotInput) (*request.Request, *rds.CreateDBSnapshotOutput)

	// CreateDBSnapshotWithContextFunc mocks the CreateDBSnapshotWithContext method.
	CreateDBSnapshotWithContextFunc func(contextMoqParam context.Context, createDBSnapshotInput *rds.CreateDBSnapshotInput, options ...request.Option) (*rds.CreateDBSnapshotOutput, error)

	// CreateDBSubnetGroupFunc mocks the CreateDBSubnetGroup method.
	CreateDBSubnetGroupFunc func(createDBSubnetGroupInput *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error)

	// CreateDBSubnetGroupRequestFunc mocks the CreateDBSubnetGroupRequest method.
	CreateDBSubnetGroupRequestFunc func(createDBSubnetGroupInput *rds.CreateDBSubnetGroupInput) (*request.Request, *rds.CreateDBSubnetGroupOutput)

	// CreateDBSubnetGroupWithContextFunc mocks the CreateDBSubnetGroupWithContext method.
	CreateDBSubnetGroupWithContextFunc func(contextMoqParam context.Context, createDBSubnetGroupInput *rds.CreateDBSubnetGroupInput, options ...request.Option) (*rds.CreateDBSubnetGroupOutput, error)

	// CreateEventSubscriptionFunc mocks the CreateEventSubscription method.
	CreateEventSubscriptionFunc func(createEventSubscriptionInput *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error)

	// CreateEventSubscriptionRequestFunc mocks the CreateEventSubscriptionRequest method.
	CreateEventSubscriptionRequestFunc func(createEventSubscriptionInput *rds.CreateEventSubscriptionInput) (*request.Request, *rds.CreateEventSubscriptionOutput)

	// CreateEventSubscriptionWithContextFunc mocks the CreateEventSubscriptionWithContext method.
	CreateEventSubscriptionWithContextFunc func(contextMoqParam context.Context, createEventSubscriptionInput *rds.CreateEventSubscriptionInput, options ...request.Option) (*rds.CreateEventSubscriptionOutput, error)

	// CreateGlobalClusterFunc mocks the CreateGlobalCluster method.
	CreateGlobalClusterFunc func(createGlobalClusterInput *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error)

	// CreateGlobalClusterRequestFunc mocks the CreateGlobalClusterRequest method.
	CreateGlobalClusterRequestFunc func(createGlobalClusterInput *rds.CreateGlobalClusterInput) (*request.Request, *rds.CreateGlobalClusterOutput)

	// CreateGlobalClusterWithContextFunc mocks the CreateGlobalClusterWithContext method.
	CreateGlobalClusterWithContextFunc func(contextMoqParam context.Context, createGlobalClusterInput *rds.CreateGlobalClusterInput, options ...request.Option) (*rds.CreateGlobalClusterOutput, error)

	// CreateOptionGroupFunc mocks the CreateOptionGroup method.
	CreateOptionGroupFunc func(createOptionGroupInput *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error)

	// CreateOptionGroupRequestFunc mocks the CreateOptionGroupRequest method.
	CreateOptionGroupRequestFunc func(createOptionGroupInput *rds.CreateOptionGroupInput) (*request.Request, *rds.CreateOptionGroupOutput)

	// CreateOptionGroupWithContextFunc mocks the CreateOptionGroupWithContext method.
	CreateOptionGroupWithContextFunc func(contextMoqParam context.Context, createOptionGroupInput *rds.CreateOptionGroupInput, options ...request.Option) (*rds.CreateOptionGroupOutput, error)

	// DeleteCustomDBEngineVersionFunc mocks the DeleteCustomDBEngineVersion method.
	DeleteCustomDBEngineVersionFunc func(deleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput) (*rds.DeleteCustomDBEngineVersionOutput, error)

	// DeleteCustomDBEngineVersionRequestFunc mocks the DeleteCustomDBEngineVersionRequest method.
	DeleteCustomDBEngineVersionRequestFunc func(deleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput) (*request.Request, *rds.DeleteCustomDBEngineVersionOutput)

	// DeleteCustomDBEngineVersionWithContextFunc mocks the DeleteCustomDBEngineVersionWithContext method.
	DeleteCustomDBEngineVersionWithContextFunc func(contextMoqParam context.Context, deleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput, options ...request.Option) (*rds.DeleteCustomDBEngineVersionOutput, error)

	// DeleteDBClusterFunc mocks the DeleteDBCluster method.
	DeleteDBClusterFunc func(deleteDBClusterInput *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error)

	// DeleteDBClusterEndpointFunc mocks the DeleteDBClusterEndpoint method.
	DeleteDBClusterEndpointFunc func(deleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error)

	// DeleteDBClusterEndpointRequestFunc mocks the DeleteDBClusterEndpointRequest method.
	DeleteDBClusterEndpointRequestFunc func(deleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput) (*request.Request, *rds.DeleteDBClusterEndpointOutput)

	// DeleteDBClusterEndpointWithContextFunc mocks the DeleteDBClusterEndpointWithContext method.
	DeleteDBClusterEndpointWithContextFunc func(contextMoqParam context.Context, deleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput, options ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error)

	// DeleteDBClusterParameterGroupFunc mocks the DeleteDBClusterParameterGroup method.
	DeleteDBClusterParameterGroupFunc func(deleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error)

	// DeleteDBClusterParameterGroupRequestFunc mocks the DeleteDBClusterParameterGroupRequest method.
	DeleteDBClusterParameterGroupRequestFunc func(deleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput) (*request.Request, *rds.DeleteDBClusterParameterGroupOutput)

	// DeleteDBClusterParameterGroupWithContextFunc mocks the DeleteDBClusterParameterGroupWithContext method.
	DeleteDBClusterParameterGroupWithContextFunc func(contextMoqParam context.Context, deleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput, options ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error)

	// DeleteDBClusterRequestFunc mocks the DeleteDBClusterRequest method.
	DeleteDBClusterRequestFunc func(deleteDBClusterInput *rds.DeleteDBClusterInput) (*request.Request, *rds.DeleteDBClusterOutput)

	// DeleteDBClusterSnapshotFunc mocks the DeleteDBClusterSnapshot method.
	DeleteDBClusterSnapshotFunc func(deleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error)

	// DeleteDBClusterSnapshotRequestFunc mocks the DeleteDBClusterSnapshotRequest method.
	DeleteDBClusterSnapshotRequestFunc func(deleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput) (*request.Request, *rds.DeleteDBClusterSnapshotOutput)

	// DeleteDBClusterSnapshotWithContextFunc mocks the DeleteDBClusterSnapshotWithContext method.
	DeleteDBClusterSnapshotWithContextFunc func(contextMoqParam context.Context, deleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput, options ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error)

	// DeleteDBClusterWithContextFunc mocks the DeleteDBClusterWithContext method.
	DeleteDBClusterWithContextFunc func(contextMoqParam context.Context, deleteDBClusterInput *rds.DeleteDBClusterInput, options ...request.Option) (*rds.DeleteDBClusterOutput, error)

	// DeleteDBInstanceFunc mocks the DeleteDBInstance method.
	DeleteDBInstanceFunc func(deleteDBInstanceInput *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error)

	// DeleteDBInstanceAutomatedBackupFunc mocks the DeleteDBInstanceAutomatedBackup method.
	DeleteDBInstanceAutomatedBackupFunc func(deleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)

	// DeleteDBInstanceAutomatedBackupRequestFunc mocks the DeleteDBInstanceAutomatedBackupRequest method.
	DeleteDBInstanceAutomatedBackupRequestFunc func(deleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput) (*request.Request, *rds.DeleteDBInstanceAutomatedBackupOutput)

	// DeleteDBInstanceAutomatedBackupWithContextFunc mocks the DeleteDBInstanceAutomatedBackupWithContext method.
	DeleteDBInstanceAutomatedBackupWithContextFunc func(contextMoqParam context.Context, deleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput, options ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error)

	// DeleteDBInstanceRequestFunc mocks the DeleteDBInstanceRequest method.
	DeleteDBInstanceRequestFunc func(deleteDBInstanceInput *rds.DeleteDBInstanceInput) (*request.Request, *rds.DeleteDBInstanceOutput)

	// DeleteDBInstanceWithContextFunc mocks the DeleteDBInstanceWithContext method.
	DeleteDBInstanceWithContextFunc func(contextMoqParam context.Context, deleteDBInstanceInput *rds.DeleteDBInstanceInput, options ...request.Option) (*rds.DeleteDBInstanceOutput, error)

	// DeleteDBParameterGroupFunc mocks the DeleteDBParameterGroup method.
	DeleteDBParameterGroupFunc func(deleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error)

	// DeleteDBParameterGroupRequestFunc mocks the DeleteDBParameterGroupRequest method.
	DeleteDBParameterGroupRequestFunc func(deleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput) (*request.Request, *rds.DeleteDBParameterGroupOutput)

	// DeleteDBParameterGroupWithContextFunc mocks the DeleteDBParameterGroupWithContext method.
	DeleteDBParameterGroupWithContextFunc func(contextMoqParam context.Context, deleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput, options ...request.Option) (*rds.DeleteDBParameterGroupOutput, error)

	// DeleteDBProxyFunc mocks the DeleteDBProxy method.
	DeleteDBProxyFunc func(deleteDBProxyInput *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error)

	// DeleteDBProxyEndpointFunc mocks the DeleteDBProxyEndpoint method.
	DeleteDBProxyEndpointFunc func(deleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput) (*rds.DeleteDBProxyEndpointOutput, error)

	// DeleteDBProxyEndpointRequestFunc mocks the DeleteDBProxyEndpointRequest method.
	DeleteDBProxyEndpointRequestFunc func(deleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput) (*request.Request, *rds.DeleteDBProxyEndpointOutput)

	// DeleteDBProxyEndpointWithContextFunc mocks the DeleteDBProxyEndpointWithContext method.
	DeleteDBProxyEndpointWithContextFunc func(contextMoqParam context.Context, deleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput, options ...request.Option) (*rds.DeleteDBProxyEndpointOutput, error)

	// DeleteDBProxyRequestFunc mocks the DeleteDBProxyRequest method.
	DeleteDBProxyRequestFunc func(deleteDBProxyInput *rds.DeleteDBProxyInput) (*request.Request, *rds.DeleteDBProxyOutput)

	// DeleteDBProxyWithContextFunc mocks the DeleteDBProxyWithContext method.
	DeleteDBProxyWithContextFunc func(contextMoqParam context.Context, deleteDBProxyInput *rds.DeleteDBProxyInput, options ...request.Option) (*rds.DeleteDBProxyOutput, error)

	// DeleteDBSecurityGroupFunc mocks the DeleteDBSecurityGroup method.
	DeleteDBSecurityGroupFunc func(deleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error)

	// DeleteDBSecurityGroupRequestFunc mocks the DeleteDBSecurityGroupRequest method.
	DeleteDBSecurityGroupRequestFunc func(deleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput) (*request.Request, *rds.DeleteDBSecurityGroupOutput)

	// DeleteDBSecurityGroupWithContextFunc mocks the DeleteDBSecurityGroupWithContext method.
	DeleteDBSecurityGroupWithContextFunc func(contextMoqParam context.Context, deleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput, options ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error)

	// DeleteDBSnapshotFunc mocks the DeleteDBSnapshot method.
	DeleteDBSnapshotFunc func(deleteDBSnapshotInput *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error)

	// DeleteDBSnapshotRequestFunc mocks the DeleteDBSnapshotRequest method.
	DeleteDBSnapshotRequestFunc func(deleteDBSnapshotInput *rds.DeleteDBSnapshotInput) (*request.Request, *rds.DeleteDBSnapshotOutput)

	// DeleteDBSnapshotWithContextFunc mocks the DeleteDBSnapshotWithContext method.
	DeleteDBSnapshotWithContextFunc func(contextMoqParam context.Context, deleteDBSnapshotInput *rds.DeleteDBSnapshotInput, options ...request.Option) (*rds.DeleteDBSnapshotOutput, error)

	// DeleteDBSubnetGroupFunc mocks the DeleteDBSubnetGroup method.
	DeleteDBSubnetGroupFunc func(deleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error)

	// DeleteDBSubnetGroupRequestFunc mocks the DeleteDBSubnetGroupRequest method.
	DeleteDBSubnetGroupRequestFunc func(deleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput) (*request.Request, *rds.DeleteDBSubnetGroupOutput)

	// DeleteDBSubnetGroupWithContextFunc mocks the DeleteDBSubnetGroupWithContext method.
	DeleteDBSubnetGroupWithContextFunc func(contextMoqParam context.Context, deleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput, options ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error)

	// DeleteEventSubscriptionFunc mocks the DeleteEventSubscription method.
	DeleteEventSubscriptionFunc func(deleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error)

	// DeleteEventSubscriptionRequestFunc mocks the DeleteEventSubscriptionRequest method.
	DeleteEventSubscriptionRequestFunc func(deleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput) (*request.Request, *rds.DeleteEventSubscriptionOutput)

	// DeleteEventSubscriptionWithContextFunc mocks the DeleteEventSubscriptionWithContext method.
	DeleteEventSubscriptionWithContextFunc func(contextMoqParam context.Context, deleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput, options ...request.Option) (*rds.DeleteEventSubscriptionOutput, error)

	// DeleteGlobalClusterFunc mocks the DeleteGlobalCluster method.
	DeleteGlobalClusterFunc func(deleteGlobalClusterInput *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error)

	// DeleteGlobalClusterRequestFunc mocks the DeleteGlobalClusterRequest method.
	DeleteGlobalClusterRequestFunc func(deleteGlobalClusterInput *rds.DeleteGlobalClusterInput) (*request.Request, *rds.DeleteGlobalClusterOutput)

	// DeleteGlobalClusterWithContextFunc mocks the DeleteGlobalClusterWithContext method.
	DeleteGlobalClusterWithContextFunc func(contextMoqParam context.Context, deleteGlobalClusterInput *rds.DeleteGlobalClusterInput, options ...request.Option) (*rds.DeleteGlobalClusterOutput, error)

	// DeleteOptionGroupFunc mocks the DeleteOptionGroup method.
	DeleteOptionGroupFunc func(deleteOptionGroupInput *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error)

	// DeleteOptionGroupRequestFunc mocks the DeleteOptionGroupRequest method.
	DeleteOptionGroupRequestFunc func(deleteOptionGroupInput *rds.DeleteOptionGroupInput) (*request.Request, *rds.DeleteOptionGroupOutput)

	// DeleteOptionGroupWithContextFunc mocks the DeleteOptionGroupWithContext method.
	DeleteOptionGroupWithContextFunc func(contextMoqParam context.Context, deleteOptionGroupInput *rds.DeleteOptionGroupInput, options ...request.Option) (*rds.DeleteOptionGroupOutput, error)

	// DeregisterDBProxyTargetsFunc mocks the DeregisterDBProxyTargets method.
	DeregisterDBProxyTargetsFunc func(deregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error)

	// DeregisterDBProxyTargetsRequestFunc mocks the DeregisterDBProxyTargetsRequest method.
	DeregisterDBProxyTargetsRequestFunc func(deregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput) (*request.Request, *rds.DeregisterDBProxyTargetsOutput)

	// DeregisterDBProxyTargetsWithContextFunc mocks the DeregisterDBProxyTargetsWithContext method.
	DeregisterDBProxyTargetsWithContextFunc func(contextMoqParam context.Context, deregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput, options ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error)

	// DescribeAccountAttributesFunc mocks the DescribeAccountAttributes method.
	DescribeAccountAttributesFunc func(describeAccountAttributesInput *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error)

	// DescribeAccountAttributesRequestFunc mocks the DescribeAccountAttributesRequest method.
	DescribeAccountAttributesRequestFunc func(describeAccountAttributesInput *rds.DescribeAccountAttributesInput) (*request.Request, *rds.DescribeAccountAttributesOutput)

	// DescribeAccountAttributesWithContextFunc mocks the DescribeAccountAttributesWithContext method.
	DescribeAccountAttributesWithContextFunc func(contextMoqParam context.Context, describeAccountAttributesInput *rds.DescribeAccountAttributesInput, options ...request.Option) (*rds.DescribeAccountAttributesOutput, error)

	// DescribeCertificatesFunc mocks the DescribeCertificates method.
	DescribeCertificatesFunc func(describeCertificatesInput *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error)

	// DescribeCertificatesPagesFunc mocks the DescribeCertificatesPages method.
	DescribeCertificatesPagesFunc func(describeCertificatesInput *rds.DescribeCertificatesInput, fn func(*rds.DescribeCertificatesOutput, bool) bool) error

	// DescribeCertificatesPagesWithContextFunc mocks the DescribeCertificatesPagesWithContext method.
	DescribeCertificatesPagesWithContextFunc func(contextMoqParam context.Context, describeCertificatesInput *rds.DescribeCertificatesInput, fn func(*rds.DescribeCertificatesOutput, bool) bool, options ...request.Option) error

	// DescribeCertificatesRequestFunc mocks the DescribeCertificatesRequest method.
	DescribeCertificatesRequestFunc func(describeCertificatesInput *rds.DescribeCertificatesInput) (*request.Request, *rds.DescribeCertificatesOutput)

	// DescribeCertificatesWithContextFunc mocks the DescribeCertificatesWithContext method.
	DescribeCertificatesWithContextFunc func(contextMoqParam context.Context, describeCertificatesInput *rds.DescribeCertificatesInput, options ...request.Option) (*rds.DescribeCertificatesOutput, error)

	// DescribeDBClusterBacktracksFunc mocks the DescribeDBClusterBacktracks method.
	DescribeDBClusterBacktracksFunc func(describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error)

	// DescribeDBClusterBacktracksPagesFunc mocks the DescribeDBClusterBacktracksPages method.
	DescribeDBClusterBacktracksPagesFunc func(describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput, fn func(*rds.DescribeDBClusterBacktracksOutput, bool) bool) error

	// DescribeDBClusterBacktracksPagesWithContextFunc mocks the DescribeDBClusterBacktracksPagesWithContext method.
	DescribeDBClusterBacktracksPagesWithContextFunc func(contextMoqParam context.Context, describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput, fn func(*rds.DescribeDBClusterBacktracksOutput, bool) bool, options ...request.Option) error

	// DescribeDBClusterBacktracksRequestFunc mocks the DescribeDBClusterBacktracksRequest method.
	DescribeDBClusterBacktracksRequestFunc func(describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput) (*request.Request, *rds.DescribeDBClusterBacktracksOutput)

	// DescribeDBClusterBacktracksWithContextFunc mocks the DescribeDBClusterBacktracksWithContext method.
	DescribeDBClusterBacktracksWithContextFunc func(contextMoqParam context.Context, describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput, options ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error)

	// DescribeDBClusterEndpointsFunc mocks the DescribeDBClusterEndpoints method.
	DescribeDBClusterEndpointsFunc func(describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error)

	// DescribeDBClusterEndpointsPagesFunc mocks the DescribeDBClusterEndpointsPages method.
	DescribeDBClusterEndpointsPagesFunc func(describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput, fn func(*rds.DescribeDBClusterEndpointsOutput, bool) bool) error

	// DescribeDBClusterEndpointsPagesWithContextFunc mocks the DescribeDBClusterEndpointsPagesWithContext method.
	DescribeDBClusterEndpointsPagesWithContextFunc func(contextMoqParam context.Context, describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput, fn func(*rds.DescribeDBClusterEndpointsOutput, bool) bool, options ...request.Option) error

	// DescribeDBClusterEndpointsRequestFunc mocks the DescribeDBClusterEndpointsRequest method.
	DescribeDBClusterEndpointsRequestFunc func(describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput) (*request.Request, *rds.DescribeDBClusterEndpointsOutput)

	// DescribeDBClusterEndpointsWithContextFunc mocks the DescribeDBClusterEndpointsWithContext method.
	DescribeDBClusterEndpointsWithContextFunc func(contextMoqParam context.Context, describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput, options ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error)

	// DescribeDBClusterParameterGroupsFunc mocks the DescribeDBClusterParameterGroups method.
	DescribeDBClusterParameterGroupsFunc func(describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error)

	// DescribeDBClusterParameterGroupsPagesFunc mocks the DescribeDBClusterParameterGroupsPages method.
	DescribeDBClusterParameterGroupsPagesFunc func(describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput, fn func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool) error

	// DescribeDBClusterParameterGroupsPagesWithContextFunc mocks the DescribeDBClusterParameterGroupsPagesWithContext method.
	DescribeDBClusterParameterGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput, fn func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeDBClusterParameterGroupsRequestFunc mocks the DescribeDBClusterParameterGroupsRequest method.
	DescribeDBClusterParameterGroupsRequestFunc func(describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput) (*request.Request, *rds.DescribeDBClusterParameterGroupsOutput)

	// DescribeDBClusterParameterGroupsWithContextFunc mocks the DescribeDBClusterParameterGroupsWithContext method.
	DescribeDBClusterParameterGroupsWithContextFunc func(contextMoqParam context.Context, describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput, options ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error)

	// DescribeDBClusterParametersFunc mocks the DescribeDBClusterParameters method.
	DescribeDBClusterParametersFunc func(describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error)

	// DescribeDBClusterParametersPagesFunc mocks the DescribeDBClusterParametersPages method.
	DescribeDBClusterParametersPagesFunc func(describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput, fn func(*rds.DescribeDBClusterParametersOutput, bool) bool) error

	// DescribeDBClusterParametersPagesWithContextFunc mocks the DescribeDBClusterParametersPagesWithContext method.
	DescribeDBClusterParametersPagesWithContextFunc func(contextMoqParam context.Context, describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput, fn func(*rds.DescribeDBClusterParametersOutput, bool) bool, options ...request.Option) error

	// DescribeDBClusterParametersRequestFunc mocks the DescribeDBClusterParametersRequest method.
	DescribeDBClusterParametersRequestFunc func(describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput) (*request.Request, *rds.DescribeDBClusterParametersOutput)

	// DescribeDBClusterParametersWithContextFunc mocks the DescribeDBClusterParametersWithContext method.
	DescribeDBClusterParametersWithContextFunc func(contextMoqParam context.Context, describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput, options ...request.Option) (*rds.DescribeDBClusterParametersOutput, error)

	// DescribeDBClusterSnapshotAttributesFunc mocks the DescribeDBClusterSnapshotAttributes method.
	DescribeDBClusterSnapshotAttributesFunc func(describeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)

	// DescribeDBClusterSnapshotAttributesRequestFunc mocks the DescribeDBClusterSnapshotAttributesRequest method.
	DescribeDBClusterSnapshotAttributesRequestFunc func(describeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *rds.DescribeDBClusterSnapshotAttributesOutput)

	// DescribeDBClusterSnapshotAttributesWithContextFunc mocks the DescribeDBClusterSnapshotAttributesWithContext method.
	DescribeDBClusterSnapshotAttributesWithContextFunc func(contextMoqParam context.Context, describeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput, options ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error)

	// DescribeDBClusterSnapshotsFunc mocks the DescribeDBClusterSnapshots method.
	DescribeDBClusterSnapshotsFunc func(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error)

	// DescribeDBClusterSnapshotsPagesFunc mocks the DescribeDBClusterSnapshotsPages method.
	DescribeDBClusterSnapshotsPagesFunc func(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, fn func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool) error

	// DescribeDBClusterSnapshotsPagesWithContextFunc mocks the DescribeDBClusterSnapshotsPagesWithContext method.
	DescribeDBClusterSnapshotsPagesWithContextFunc func(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, fn func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool, options ...request.Option) error

	// DescribeDBClusterSnapshotsRequestFunc mocks the DescribeDBClusterSnapshotsRequest method.
	DescribeDBClusterSnapshotsRequestFunc func(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) (*request.Request, *rds.DescribeDBClusterSnapshotsOutput)

	// DescribeDBClusterSnapshotsWithContextFunc mocks the DescribeDBClusterSnapshotsWithContext method.
	DescribeDBClusterSnapshotsWithContextFunc func(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, options ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error)

	// DescribeDBClustersFunc mocks the DescribeDBClusters method.
	DescribeDBClustersFunc func(describeDBClustersInput *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error)

	// DescribeDBClustersPagesFunc mocks the DescribeDBClustersPages method.
	DescribeDBClustersPagesFunc func(describeDBClustersInput *rds.DescribeDBClustersInput, fn func(*rds.DescribeDBClustersOutput, bool) bool) error

	// DescribeDBClustersPagesWithContextFunc mocks the DescribeDBClustersPagesWithContext method.
	DescribeDBClustersPagesWithContextFunc func(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, fn func(*rds.DescribeDBClustersOutput, bool) bool, options ...request.Option) error

	// DescribeDBClustersRequestFunc mocks the DescribeDBClustersRequest method.
	DescribeDBClustersRequestFunc func(describeDBClustersInput *rds.DescribeDBClustersInput) (*request.Request, *rds.DescribeDBClustersOutput)

	// DescribeDBClustersWithContextFunc mocks the DescribeDBClustersWithContext method.
	DescribeDBClustersWithContextFunc func(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, options ...request.Option) (*rds.DescribeDBClustersOutput, error)

	// DescribeDBEngineVersionsFunc mocks the DescribeDBEngineVersions method.
	DescribeDBEngineVersionsFunc func(describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error)

	// DescribeDBEngineVersionsPagesFunc mocks the DescribeDBEngineVersionsPages method.
	DescribeDBEngineVersionsPagesFunc func(describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput, fn func(*rds.DescribeDBEngineVersionsOutput, bool) bool) error

	// DescribeDBEngineVersionsPagesWithContextFunc mocks the DescribeDBEngineVersionsPagesWithContext method.
	DescribeDBEngineVersionsPagesWithContextFunc func(contextMoqParam context.Context, describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput, fn func(*rds.DescribeDBEngineVersionsOutput, bool) bool, options ...request.Option) error

	// DescribeDBEngineVersionsRequestFunc mocks the DescribeDBEngineVersionsRequest method.
	DescribeDBEngineVersionsRequestFunc func(describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput) (*request.Request, *rds.DescribeDBEngineVersionsOutput)

	// DescribeDBEngineVersionsWithContextFunc mocks the DescribeDBEngineVersionsWithContext method.
	DescribeDBEngineVersionsWithContextFunc func(contextMoqParam context.Context, describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput, options ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error)

	// DescribeDBInstanceAutomatedBackupsFunc mocks the DescribeDBInstanceAutomatedBackups method.
	DescribeDBInstanceAutomatedBackupsFunc func(describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)

	// DescribeDBInstanceAutomatedBackupsPagesFunc mocks the DescribeDBInstanceAutomatedBackupsPages method.
	DescribeDBInstanceAutomatedBackupsPagesFunc func(describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput, fn func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) error

	// DescribeDBInstanceAutomatedBackupsPagesWithContextFunc mocks the DescribeDBInstanceAutomatedBackupsPagesWithContext method.
	DescribeDBInstanceAutomatedBackupsPagesWithContextFunc func(contextMoqParam context.Context, describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput, fn func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, options ...request.Option) error

	// DescribeDBInstanceAutomatedBackupsRequestFunc mocks the DescribeDBInstanceAutomatedBackupsRequest method.
	DescribeDBInstanceAutomatedBackupsRequestFunc func(describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput) (*request.Request, *rds.DescribeDBInstanceAutomatedBackupsOutput)

	// DescribeDBInstanceAutomatedBackupsWithContextFunc mocks the DescribeDBInstanceAutomatedBackupsWithContext method.
	DescribeDBInstanceAutomatedBackupsWithContextFunc func(contextMoqParam context.Context, describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput, options ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error)

	// DescribeDBInstancesFunc mocks the DescribeDBInstances method.
	DescribeDBInstancesFunc func(describeDBInstancesInput *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error)

	// DescribeDBInstancesPagesFunc mocks the DescribeDBInstancesPages method.
	DescribeDBInstancesPagesFunc func(describeDBInstancesInput *rds.DescribeDBInstancesInput, fn func(*rds.DescribeDBInstancesOutput, bool) bool) error

	// DescribeDBInstancesPagesWithContextFunc mocks the DescribeDBInstancesPagesWithContext method.
	DescribeDBInstancesPagesWithContextFunc func(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, fn func(*rds.DescribeDBInstancesOutput, bool) bool, options ...request.Option) error

	// DescribeDBInstancesRequestFunc mocks the DescribeDBInstancesRequest method.
	DescribeDBInstancesRequestFunc func(describeDBInstancesInput *rds.DescribeDBInstancesInput) (*request.Request, *rds.DescribeDBInstancesOutput)

	// DescribeDBInstancesWithContextFunc mocks the DescribeDBInstancesWithContext method.
	DescribeDBInstancesWithContextFunc func(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, options ...request.Option) (*rds.DescribeDBInstancesOutput, error)

	// DescribeDBLogFilesFunc mocks the DescribeDBLogFiles method.
	DescribeDBLogFilesFunc func(describeDBLogFilesInput *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error)

	// DescribeDBLogFilesPagesFunc mocks the DescribeDBLogFilesPages method.
	DescribeDBLogFilesPagesFunc func(describeDBLogFilesInput *rds.DescribeDBLogFilesInput, fn func(*rds.DescribeDBLogFilesOutput, bool) bool) error

	// DescribeDBLogFilesPagesWithContextFunc mocks the DescribeDBLogFilesPagesWithContext method.
	DescribeDBLogFilesPagesWithContextFunc func(contextMoqParam context.Context, describeDBLogFilesInput *rds.DescribeDBLogFilesInput, fn func(*rds.DescribeDBLogFilesOutput, bool) bool, options ...request.Option) error

	// DescribeDBLogFilesRequestFunc mocks the DescribeDBLogFilesRequest method.
	DescribeDBLogFilesRequestFunc func(describeDBLogFilesInput *rds.DescribeDBLogFilesInput) (*request.Request, *rds.DescribeDBLogFilesOutput)

	// DescribeDBLogFilesWithContextFunc mocks the DescribeDBLogFilesWithContext method.
	DescribeDBLogFilesWithContextFunc func(contextMoqParam context.Context, describeDBLogFilesInput *rds.DescribeDBLogFilesInput, options ...request.Option) (*rds.DescribeDBLogFilesOutput, error)

	// DescribeDBParameterGroupsFunc mocks the DescribeDBParameterGroups method.
	DescribeDBParameterGroupsFunc func(describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error)

	// DescribeDBParameterGroupsPagesFunc mocks the DescribeDBParameterGroupsPages method.
	DescribeDBParameterGroupsPagesFunc func(describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput, fn func(*rds.DescribeDBParameterGroupsOutput, bool) bool) error

	// DescribeDBParameterGroupsPagesWithContextFunc mocks the DescribeDBParameterGroupsPagesWithContext method.
	DescribeDBParameterGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput, fn func(*rds.DescribeDBParameterGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeDBParameterGroupsRequestFunc mocks the DescribeDBParameterGroupsRequest method.
	DescribeDBParameterGroupsRequestFunc func(describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput) (*request.Request, *rds.DescribeDBParameterGroupsOutput)

	// DescribeDBParameterGroupsWithContextFunc mocks the DescribeDBParameterGroupsWithContext method.
	DescribeDBParameterGroupsWithContextFunc func(contextMoqParam context.Context, describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput, options ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error)

	// DescribeDBParametersFunc mocks the DescribeDBParameters method.
	DescribeDBParametersFunc func(describeDBParametersInput *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error)

	// DescribeDBParametersPagesFunc mocks the DescribeDBParametersPages method.
	DescribeDBParametersPagesFunc func(describeDBParametersInput *rds.DescribeDBParametersInput, fn func(*rds.DescribeDBParametersOutput, bool) bool) error

	// DescribeDBParametersPagesWithContextFunc mocks the DescribeDBParametersPagesWithContext method.
	DescribeDBParametersPagesWithContextFunc func(contextMoqParam context.Context, describeDBParametersInput *rds.DescribeDBParametersInput, fn func(*rds.DescribeDBParametersOutput, bool) bool, options ...request.Option) error

	// DescribeDBParametersRequestFunc mocks the DescribeDBParametersRequest method.
	DescribeDBParametersRequestFunc func(describeDBParametersInput *rds.DescribeDBParametersInput) (*request.Request, *rds.DescribeDBParametersOutput)

	// DescribeDBParametersWithContextFunc mocks the DescribeDBParametersWithContext method.
	DescribeDBParametersWithContextFunc func(contextMoqParam context.Context, describeDBParametersInput *rds.DescribeDBParametersInput, options ...request.Option) (*rds.DescribeDBParametersOutput, error)

	// DescribeDBProxiesFunc mocks the DescribeDBProxies method.
	DescribeDBProxiesFunc func(describeDBProxiesInput *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error)

	// DescribeDBProxiesPagesFunc mocks the DescribeDBProxiesPages method.
	DescribeDBProxiesPagesFunc func(describeDBProxiesInput *rds.DescribeDBProxiesInput, fn func(*rds.DescribeDBProxiesOutput, bool) bool) error

	// DescribeDBProxiesPagesWithContextFunc mocks the DescribeDBProxiesPagesWithContext method.
	DescribeDBProxiesPagesWithContextFunc func(contextMoqParam context.Context, describeDBProxiesInput *rds.DescribeDBProxiesInput, fn func(*rds.DescribeDBProxiesOutput, bool) bool, options ...request.Option) error

	// DescribeDBProxiesRequestFunc mocks the DescribeDBProxiesRequest method.
	DescribeDBProxiesRequestFunc func(describeDBProxiesInput *rds.DescribeDBProxiesInput) (*request.Request, *rds.DescribeDBProxiesOutput)

	// DescribeDBProxiesWithContextFunc mocks the DescribeDBProxiesWithContext method.
	DescribeDBProxiesWithContextFunc func(contextMoqParam context.Context, describeDBProxiesInput *rds.DescribeDBProxiesInput, options ...request.Option) (*rds.DescribeDBProxiesOutput, error)

	// DescribeDBProxyEndpointsFunc mocks the DescribeDBProxyEndpoints method.
	DescribeDBProxyEndpointsFunc func(describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput) (*rds.DescribeDBProxyEndpointsOutput, error)

	// DescribeDBProxyEndpointsPagesFunc mocks the DescribeDBProxyEndpointsPages method.
	DescribeDBProxyEndpointsPagesFunc func(describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput, fn func(*rds.DescribeDBProxyEndpointsOutput, bool) bool) error

	// DescribeDBProxyEndpointsPagesWithContextFunc mocks the DescribeDBProxyEndpointsPagesWithContext method.
	DescribeDBProxyEndpointsPagesWithContextFunc func(contextMoqParam context.Context, describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput, fn func(*rds.DescribeDBProxyEndpointsOutput, bool) bool, options ...request.Option) error

	// DescribeDBProxyEndpointsRequestFunc mocks the DescribeDBProxyEndpointsRequest method.
	DescribeDBProxyEndpointsRequestFunc func(describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput) (*request.Request, *rds.DescribeDBProxyEndpointsOutput)

	// DescribeDBProxyEndpointsWithContextFunc mocks the DescribeDBProxyEndpointsWithContext method.
	DescribeDBProxyEndpointsWithContextFunc func(contextMoqParam context.Context, describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput, options ...request.Option) (*rds.DescribeDBProxyEndpointsOutput, error)

	// DescribeDBProxyTargetGroupsFunc mocks the DescribeDBProxyTargetGroups method.
	DescribeDBProxyTargetGroupsFunc func(describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error)

	// DescribeDBProxyTargetGroupsPagesFunc mocks the DescribeDBProxyTargetGroupsPages method.
	DescribeDBProxyTargetGroupsPagesFunc func(describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput, fn func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) error

	// DescribeDBProxyTargetGroupsPagesWithContextFunc mocks the DescribeDBProxyTargetGroupsPagesWithContext method.
	DescribeDBProxyTargetGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput, fn func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeDBProxyTargetGroupsRequestFunc mocks the DescribeDBProxyTargetGroupsRequest method.
	DescribeDBProxyTargetGroupsRequestFunc func(describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput) (*request.Request, *rds.DescribeDBProxyTargetGroupsOutput)

	// DescribeDBProxyTargetGroupsWithContextFunc mocks the DescribeDBProxyTargetGroupsWithContext method.
	DescribeDBProxyTargetGroupsWithContextFunc func(contextMoqParam context.Context, describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput, options ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error)

	// DescribeDBProxyTargetsFunc mocks the DescribeDBProxyTargets method.
	DescribeDBProxyTargetsFunc func(describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error)

	// DescribeDBProxyTargetsPagesFunc mocks the DescribeDBProxyTargetsPages method.
	DescribeDBProxyTargetsPagesFunc func(describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput, fn func(*rds.DescribeDBProxyTargetsOutput, bool) bool) error

	// DescribeDBProxyTargetsPagesWithContextFunc mocks the DescribeDBProxyTargetsPagesWithContext method.
	DescribeDBProxyTargetsPagesWithContextFunc func(contextMoqParam context.Context, describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput, fn func(*rds.DescribeDBProxyTargetsOutput, bool) bool, options ...request.Option) error

	// DescribeDBProxyTargetsRequestFunc mocks the DescribeDBProxyTargetsRequest method.
	DescribeDBProxyTargetsRequestFunc func(describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput) (*request.Request, *rds.DescribeDBProxyTargetsOutput)

	// DescribeDBProxyTargetsWithContextFunc mocks the DescribeDBProxyTargetsWithContext method.
	DescribeDBProxyTargetsWithContextFunc func(contextMoqParam context.Context, describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput, options ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error)

	// DescribeDBSecurityGroupsFunc mocks the DescribeDBSecurityGroups method.
	DescribeDBSecurityGroupsFunc func(describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error)

	// DescribeDBSecurityGroupsPagesFunc mocks the DescribeDBSecurityGroupsPages method.
	DescribeDBSecurityGroupsPagesFunc func(describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput, fn func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) error

	// DescribeDBSecurityGroupsPagesWithContextFunc mocks the DescribeDBSecurityGroupsPagesWithContext method.
	DescribeDBSecurityGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput, fn func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeDBSecurityGroupsRequestFunc mocks the DescribeDBSecurityGroupsRequest method.
	DescribeDBSecurityGroupsRequestFunc func(describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput) (*request.Request, *rds.DescribeDBSecurityGroupsOutput)

	// DescribeDBSecurityGroupsWithContextFunc mocks the DescribeDBSecurityGroupsWithContext method.
	DescribeDBSecurityGroupsWithContextFunc func(contextMoqParam context.Context, describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput, options ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error)

	// DescribeDBSnapshotAttributesFunc mocks the DescribeDBSnapshotAttributes method.
	DescribeDBSnapshotAttributesFunc func(describeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error)

	// DescribeDBSnapshotAttributesRequestFunc mocks the DescribeDBSnapshotAttributesRequest method.
	DescribeDBSnapshotAttributesRequestFunc func(describeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput) (*request.Request, *rds.DescribeDBSnapshotAttributesOutput)

	// DescribeDBSnapshotAttributesWithContextFunc mocks the DescribeDBSnapshotAttributesWithContext method.
	DescribeDBSnapshotAttributesWithContextFunc func(contextMoqParam context.Context, describeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput, options ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error)

	// DescribeDBSnapshotsFunc mocks the DescribeDBSnapshots method.
	DescribeDBSnapshotsFunc func(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error)

	// DescribeDBSnapshotsPagesFunc mocks the DescribeDBSnapshotsPages method.
	DescribeDBSnapshotsPagesFunc func(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, fn func(*rds.DescribeDBSnapshotsOutput, bool) bool) error

	// DescribeDBSnapshotsPagesWithContextFunc mocks the DescribeDBSnapshotsPagesWithContext method.
	DescribeDBSnapshotsPagesWithContextFunc func(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, fn func(*rds.DescribeDBSnapshotsOutput, bool) bool, options ...request.Option) error

	// DescribeDBSnapshotsRequestFunc mocks the DescribeDBSnapshotsRequest method.
	DescribeDBSnapshotsRequestFunc func(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) (*request.Request, *rds.DescribeDBSnapshotsOutput)

	// DescribeDBSnapshotsWithContextFunc mocks the DescribeDBSnapshotsWithContext method.
	DescribeDBSnapshotsWithContextFunc func(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, options ...request.Option) (*rds.DescribeDBSnapshotsOutput, error)

	// DescribeDBSubnetGroupsFunc mocks the DescribeDBSubnetGroups method.
	DescribeDBSubnetGroupsFunc func(describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error)

	// DescribeDBSubnetGroupsPagesFunc mocks the DescribeDBSubnetGroupsPages method.
	DescribeDBSubnetGroupsPagesFunc func(describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput, fn func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) error

	// DescribeDBSubnetGroupsPagesWithContextFunc mocks the DescribeDBSubnetGroupsPagesWithContext method.
	DescribeDBSubnetGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput, fn func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeDBSubnetGroupsRequestFunc mocks the DescribeDBSubnetGroupsRequest method.
	DescribeDBSubnetGroupsRequestFunc func(describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput) (*request.Request, *rds.DescribeDBSubnetGroupsOutput)

	// DescribeDBSubnetGroupsWithContextFunc mocks the DescribeDBSubnetGroupsWithContext method.
	DescribeDBSubnetGroupsWithContextFunc func(contextMoqParam context.Context, describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput, options ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error)

	// DescribeEngineDefaultClusterParametersFunc mocks the DescribeEngineDefaultClusterParameters method.
	DescribeEngineDefaultClusterParametersFunc func(describeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error)

	// DescribeEngineDefaultClusterParametersRequestFunc mocks the DescribeEngineDefaultClusterParametersRequest method.
	DescribeEngineDefaultClusterParametersRequestFunc func(describeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput) (*request.Request, *rds.DescribeEngineDefaultClusterParametersOutput)

	// DescribeEngineDefaultClusterParametersWithContextFunc mocks the DescribeEngineDefaultClusterParametersWithContext method.
	DescribeEngineDefaultClusterParametersWithContextFunc func(contextMoqParam context.Context, describeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput, options ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error)

	// DescribeEngineDefaultParametersFunc mocks the DescribeEngineDefaultParameters method.
	DescribeEngineDefaultParametersFunc func(describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error)

	// DescribeEngineDefaultParametersPagesFunc mocks the DescribeEngineDefaultParametersPages method.
	DescribeEngineDefaultParametersPagesFunc func(describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput, fn func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) error

	// DescribeEngineDefaultParametersPagesWithContextFunc mocks the DescribeEngineDefaultParametersPagesWithContext method.
	DescribeEngineDefaultParametersPagesWithContextFunc func(contextMoqParam context.Context, describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput, fn func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, options ...request.Option) error

	// DescribeEngineDefaultParametersRequestFunc mocks the DescribeEngineDefaultParametersRequest method.
	DescribeEngineDefaultParametersRequestFunc func(describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput) (*request.Request, *rds.DescribeEngineDefaultParametersOutput)

	// DescribeEngineDefaultParametersWithContextFunc mocks the DescribeEngineDefaultParametersWithContext method.
	DescribeEngineDefaultParametersWithContextFunc func(contextMoqParam context.Context, describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput, options ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error)

	// DescribeEventCategoriesFunc mocks the DescribeEventCategories method.
	DescribeEventCategoriesFunc func(describeEventCategoriesInput *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error)

	// DescribeEventCategoriesRequestFunc mocks the DescribeEventCategoriesRequest method.
	DescribeEventCategoriesRequestFunc func(describeEventCategoriesInput *rds.DescribeEventCategoriesInput) (*request.Request, *rds.DescribeEventCategoriesOutput)

	// DescribeEventCategoriesWithContextFunc mocks the DescribeEventCategoriesWithContext method.
	DescribeEventCategoriesWithContextFunc func(contextMoqParam context.Context, describeEventCategoriesInput *rds.DescribeEventCategoriesInput, options ...request.Option) (*rds.DescribeEventCategoriesOutput, error)

	// DescribeEventSubscriptionsFunc mocks the DescribeEventSubscriptions method.
	DescribeEventSubscriptionsFunc func(describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error)

	// DescribeEventSubscriptionsPagesFunc mocks the DescribeEventSubscriptionsPages method.
	DescribeEventSubscriptionsPagesFunc func(describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput, fn func(*rds.DescribeEventSubscriptionsOutput, bool) bool) error

	// DescribeEventSubscriptionsPagesWithContextFunc mocks the DescribeEventSubscriptionsPagesWithContext method.
	DescribeEventSubscriptionsPagesWithContextFunc func(contextMoqParam context.Context, describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput, fn func(*rds.DescribeEventSubscriptionsOutput, bool) bool, options ...request.Option) error

	// DescribeEventSubscriptionsRequestFunc mocks the DescribeEventSubscriptionsRequest method.
	DescribeEventSubscriptionsRequestFunc func(describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput) (*request.Request, *rds.DescribeEventSubscriptionsOutput)

	// DescribeEventSubscriptionsWithContextFunc mocks the DescribeEventSubscriptionsWithContext method.
	DescribeEventSubscriptionsWithContextFunc func(contextMoqParam context.Context, describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput, options ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error)

	// DescribeEventsFunc mocks the DescribeEvents method.
	DescribeEventsFunc func(describeEventsInput *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error)

	// DescribeEventsPagesFunc mocks the DescribeEventsPages method.
	DescribeEventsPagesFunc func(describeEventsInput *rds.DescribeEventsInput, fn func(*rds.DescribeEventsOutput, bool) bool) error

	// DescribeEventsPagesWithContextFunc mocks the DescribeEventsPagesWithContext method.
	DescribeEventsPagesWithContextFunc func(contextMoqParam context.Context, describeEventsInput *rds.DescribeEventsInput, fn func(*rds.DescribeEventsOutput, bool) bool, options ...request.Option) error

	// DescribeEventsRequestFunc mocks the DescribeEventsRequest method.
	DescribeEventsRequestFunc func(describeEventsInput *rds.DescribeEventsInput) (*request.Request, *rds.DescribeEventsOutput)

	// DescribeEventsWithContextFunc mocks the DescribeEventsWithContext method.
	DescribeEventsWithContextFunc func(contextMoqParam context.Context, describeEventsInput *rds.DescribeEventsInput, options ...request.Option) (*rds.DescribeEventsOutput, error)

	// DescribeExportTasksFunc mocks the DescribeExportTasks method.
	DescribeExportTasksFunc func(describeExportTasksInput *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error)

	// DescribeExportTasksPagesFunc mocks the DescribeExportTasksPages method.
	DescribeExportTasksPagesFunc func(describeExportTasksInput *rds.DescribeExportTasksInput, fn func(*rds.DescribeExportTasksOutput, bool) bool) error

	// DescribeExportTasksPagesWithContextFunc mocks the DescribeExportTasksPagesWithContext method.
	DescribeExportTasksPagesWithContextFunc func(contextMoqParam context.Context, describeExportTasksInput *rds.DescribeExportTasksInput, fn func(*rds.DescribeExportTasksOutput, bool) bool, options ...request.Option) error

	// DescribeExportTasksRequestFunc mocks the DescribeExportTasksRequest method.
	DescribeExportTasksRequestFunc func(describeExportTasksInput *rds.DescribeExportTasksInput) (*request.Request, *rds.DescribeExportTasksOutput)

	// DescribeExportTasksWithContextFunc mocks the DescribeExportTasksWithContext method.
	DescribeExportTasksWithContextFunc func(contextMoqParam context.Context, describeExportTasksInput *rds.DescribeExportTasksInput, options ...request.Option) (*rds.DescribeExportTasksOutput, error)

	// DescribeGlobalClustersFunc mocks the DescribeGlobalClusters method.
	DescribeGlobalClustersFunc func(describeGlobalClustersInput *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error)

	// DescribeGlobalClustersPagesFunc mocks the DescribeGlobalClustersPages method.
	DescribeGlobalClustersPagesFunc func(describeGlobalClustersInput *rds.DescribeGlobalClustersInput, fn func(*rds.DescribeGlobalClustersOutput, bool) bool) error

	// DescribeGlobalClustersPagesWithContextFunc mocks the DescribeGlobalClustersPagesWithContext method.
	DescribeGlobalClustersPagesWithContextFunc func(contextMoqParam context.Context, describeGlobalClustersInput *rds.DescribeGlobalClustersInput, fn func(*rds.DescribeGlobalClustersOutput, bool) bool, options ...request.Option) error

	// DescribeGlobalClustersRequestFunc mocks the DescribeGlobalClustersRequest method.
	DescribeGlobalClustersRequestFunc func(describeGlobalClustersInput *rds.DescribeGlobalClustersInput) (*request.Request, *rds.DescribeGlobalClustersOutput)

	// DescribeGlobalClustersWithContextFunc mocks the DescribeGlobalClustersWithContext method.
	DescribeGlobalClustersWithContextFunc func(contextMoqParam context.Context, describeGlobalClustersInput *rds.DescribeGlobalClustersInput, options ...request.Option) (*rds.DescribeGlobalClustersOutput, error)

	// DescribeOptionGroupOptionsFunc mocks the DescribeOptionGroupOptions method.
	DescribeOptionGroupOptionsFunc func(describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error)

	// DescribeOptionGroupOptionsPagesFunc mocks the DescribeOptionGroupOptionsPages method.
	DescribeOptionGroupOptionsPagesFunc func(describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput, fn func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) error

	// DescribeOptionGroupOptionsPagesWithContextFunc mocks the DescribeOptionGroupOptionsPagesWithContext method.
	DescribeOptionGroupOptionsPagesWithContextFunc func(contextMoqParam context.Context, describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput, fn func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, options ...request.Option) error

	// DescribeOptionGroupOptionsRequestFunc mocks the DescribeOptionGroupOptionsRequest method.
	DescribeOptionGroupOptionsRequestFunc func(describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput) (*request.Request, *rds.DescribeOptionGroupOptionsOutput)

	// DescribeOptionGroupOptionsWithContextFunc mocks the DescribeOptionGroupOptionsWithContext method.
	DescribeOptionGroupOptionsWithContextFunc func(contextMoqParam context.Context, describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput, options ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error)

	// DescribeOptionGroupsFunc mocks the DescribeOptionGroups method.
	DescribeOptionGroupsFunc func(describeOptionGroupsInput *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error)

	// DescribeOptionGroupsPagesFunc mocks the DescribeOptionGroupsPages method.
	DescribeOptionGroupsPagesFunc func(describeOptionGroupsInput *rds.DescribeOptionGroupsInput, fn func(*rds.DescribeOptionGroupsOutput, bool) bool) error

	// DescribeOptionGroupsPagesWithContextFunc mocks the DescribeOptionGroupsPagesWithContext method.
	DescribeOptionGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeOptionGroupsInput *rds.DescribeOptionGroupsInput, fn func(*rds.DescribeOptionGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeOptionGroupsRequestFunc mocks the DescribeOptionGroupsRequest method.
	DescribeOptionGroupsRequestFunc func(describeOptionGroupsInput *rds.DescribeOptionGroupsInput) (*request.Request, *rds.DescribeOptionGroupsOutput)

	// DescribeOptionGroupsWithContextFunc mocks the DescribeOptionGroupsWithContext method.
	DescribeOptionGroupsWithContextFunc func(contextMoqParam context.Context, describeOptionGroupsInput *rds.DescribeOptionGroupsInput, options ...request.Option) (*rds.DescribeOptionGroupsOutput, error)

	// DescribeOrderableDBInstanceOptionsFunc mocks the DescribeOrderableDBInstanceOptions method.
	DescribeOrderableDBInstanceOptionsFunc func(describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)

	// DescribeOrderableDBInstanceOptionsPagesFunc mocks the DescribeOrderableDBInstanceOptionsPages method.
	DescribeOrderableDBInstanceOptionsPagesFunc func(describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput, fn func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error

	// DescribeOrderableDBInstanceOptionsPagesWithContextFunc mocks the DescribeOrderableDBInstanceOptionsPagesWithContext method.
	DescribeOrderableDBInstanceOptionsPagesWithContextFunc func(contextMoqParam context.Context, describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput, fn func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, options ...request.Option) error

	// DescribeOrderableDBInstanceOptionsRequestFunc mocks the DescribeOrderableDBInstanceOptionsRequest method.
	DescribeOrderableDBInstanceOptionsRequestFunc func(describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *rds.DescribeOrderableDBInstanceOptionsOutput)

	// DescribeOrderableDBInstanceOptionsWithContextFunc mocks the DescribeOrderableDBInstanceOptionsWithContext method.
	DescribeOrderableDBInstanceOptionsWithContextFunc func(contextMoqParam context.Context, describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput, options ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error)

	// DescribePendingMaintenanceActionsFunc mocks the DescribePendingMaintenanceActions method.
	DescribePendingMaintenanceActionsFunc func(describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error)

	// DescribePendingMaintenanceActionsPagesFunc mocks the DescribePendingMaintenanceActionsPages method.
	DescribePendingMaintenanceActionsPagesFunc func(describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput, fn func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool) error

	// DescribePendingMaintenanceActionsPagesWithContextFunc mocks the DescribePendingMaintenanceActionsPagesWithContext method.
	DescribePendingMaintenanceActionsPagesWithContextFunc func(contextMoqParam context.Context, describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput, fn func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool, options ...request.Option) error

	// DescribePendingMaintenanceActionsRequestFunc mocks the DescribePendingMaintenanceActionsRequest method.
	DescribePendingMaintenanceActionsRequestFunc func(describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput) (*request.Request, *rds.DescribePendingMaintenanceActionsOutput)

	// DescribePendingMaintenanceActionsWithContextFunc mocks the DescribePendingMaintenanceActionsWithContext method.
	DescribePendingMaintenanceActionsWithContextFunc func(contextMoqParam context.Context, describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput, options ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error)

	// DescribeReservedDBInstancesFunc mocks the DescribeReservedDBInstances method.
	DescribeReservedDBInstancesFunc func(describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error)

	// DescribeReservedDBInstancesOfferingsFunc mocks the DescribeReservedDBInstancesOfferings method.
	DescribeReservedDBInstancesOfferingsFunc func(describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)

	// DescribeReservedDBInstancesOfferingsPagesFunc mocks the DescribeReservedDBInstancesOfferingsPages method.
	DescribeReservedDBInstancesOfferingsPagesFunc func(describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput, fn func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) error

	// DescribeReservedDBInstancesOfferingsPagesWithContextFunc mocks the DescribeReservedDBInstancesOfferingsPagesWithContext method.
	DescribeReservedDBInstancesOfferingsPagesWithContextFunc func(contextMoqParam context.Context, describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput, fn func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, options ...request.Option) error

	// DescribeReservedDBInstancesOfferingsRequestFunc mocks the DescribeReservedDBInstancesOfferingsRequest method.
	DescribeReservedDBInstancesOfferingsRequestFunc func(describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput) (*request.Request, *rds.DescribeReservedDBInstancesOfferingsOutput)

	// DescribeReservedDBInstancesOfferingsWithContextFunc mocks the DescribeReservedDBInstancesOfferingsWithContext method.
	DescribeReservedDBInstancesOfferingsWithContextFunc func(contextMoqParam context.Context, describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput, options ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error)

	// DescribeReservedDBInstancesPagesFunc mocks the DescribeReservedDBInstancesPages method.
	DescribeReservedDBInstancesPagesFunc func(describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput, fn func(*rds.DescribeReservedDBInstancesOutput, bool) bool) error

	// DescribeReservedDBInstancesPagesWithContextFunc mocks the DescribeReservedDBInstancesPagesWithContext method.
	DescribeReservedDBInstancesPagesWithContextFunc func(contextMoqParam context.Context, describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput, fn func(*rds.DescribeReservedDBInstancesOutput, bool) bool, options ...request.Option) error

	// DescribeReservedDBInstancesRequestFunc mocks the DescribeReservedDBInstancesRequest method.
	DescribeReservedDBInstancesRequestFunc func(describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput) (*request.Request, *rds.DescribeReservedDBInstancesOutput)

	// DescribeReservedDBInstancesWithContextFunc mocks the DescribeReservedDBInstancesWithContext method.
	DescribeReservedDBInstancesWithContextFunc func(contextMoqParam context.Context, describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput, options ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error)

	// DescribeSourceRegionsFunc mocks the DescribeSourceRegions method.
	DescribeSourceRegionsFunc func(describeSourceRegionsInput *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error)

	// DescribeSourceRegionsPagesFunc mocks the DescribeSourceRegionsPages method.
	DescribeSourceRegionsPagesFunc func(describeSourceRegionsInput *rds.DescribeSourceRegionsInput, fn func(*rds.DescribeSourceRegionsOutput, bool) bool) error

	// DescribeSourceRegionsPagesWithContextFunc mocks the DescribeSourceRegionsPagesWithContext method.
	DescribeSourceRegionsPagesWithContextFunc func(contextMoqParam context.Context, describeSourceRegionsInput *rds.DescribeSourceRegionsInput, fn func(*rds.DescribeSourceRegionsOutput, bool) bool, options ...request.Option) error

	// DescribeSourceRegionsRequestFunc mocks the DescribeSourceRegionsRequest method.
	DescribeSourceRegionsRequestFunc func(describeSourceRegionsInput *rds.DescribeSourceRegionsInput) (*request.Request, *rds.DescribeSourceRegionsOutput)

	// DescribeSourceRegionsWithContextFunc mocks the DescribeSourceRegionsWithContext method.
	DescribeSourceRegionsWithContextFunc func(contextMoqParam context.Context, describeSourceRegionsInput *rds.DescribeSourceRegionsInput, options ...request.Option) (*rds.DescribeSourceRegionsOutput, error)

	// DescribeValidDBInstanceModificationsFunc mocks the DescribeValidDBInstanceModifications method.
	DescribeValidDBInstanceModificationsFunc func(describeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error)

	// DescribeValidDBInstanceModificationsRequestFunc mocks the DescribeValidDBInstanceModificationsRequest method.
	DescribeValidDBInstanceModificationsRequestFunc func(describeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput) (*request.Request, *rds.DescribeValidDBInstanceModificationsOutput)

	// DescribeValidDBInstanceModificationsWithContextFunc mocks the DescribeValidDBInstanceModificationsWithContext method.
	DescribeValidDBInstanceModificationsWithContextFunc func(contextMoqParam context.Context, describeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput, options ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error)

	// DownloadDBLogFilePortionFunc mocks the DownloadDBLogFilePortion method.
	DownloadDBLogFilePortionFunc func(downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error)

	// DownloadDBLogFilePortionPagesFunc mocks the DownloadDBLogFilePortionPages method.
	DownloadDBLogFilePortionPagesFunc func(downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput, fn func(*rds.DownloadDBLogFilePortionOutput, bool) bool) error

	// DownloadDBLogFilePortionPagesWithContextFunc mocks the DownloadDBLogFilePortionPagesWithContext method.
	DownloadDBLogFilePortionPagesWithContextFunc func(contextMoqParam context.Context, downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput, fn func(*rds.DownloadDBLogFilePortionOutput, bool) bool, options ...request.Option) error

	// DownloadDBLogFilePortionRequestFunc mocks the DownloadDBLogFilePortionRequest method.
	DownloadDBLogFilePortionRequestFunc func(downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput) (*request.Request, *rds.DownloadDBLogFilePortionOutput)

	// DownloadDBLogFilePortionWithContextFunc mocks the DownloadDBLogFilePortionWithContext method.
	DownloadDBLogFilePortionWithContextFunc func(contextMoqParam context.Context, downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput, options ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error)

	// FailoverDBClusterFunc mocks the FailoverDBCluster method.
	FailoverDBClusterFunc func(failoverDBClusterInput *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error)

	// FailoverDBClusterRequestFunc mocks the FailoverDBClusterRequest method.
	FailoverDBClusterRequestFunc func(failoverDBClusterInput *rds.FailoverDBClusterInput) (*request.Request, *rds.FailoverDBClusterOutput)

	// FailoverDBClusterWithContextFunc mocks the FailoverDBClusterWithContext method.
	FailoverDBClusterWithContextFunc func(contextMoqParam context.Context, failoverDBClusterInput *rds.FailoverDBClusterInput, options ...request.Option) (*rds.FailoverDBClusterOutput, error)

	// FailoverGlobalClusterFunc mocks the FailoverGlobalCluster method.
	FailoverGlobalClusterFunc func(failoverGlobalClusterInput *rds.FailoverGlobalClusterInput) (*rds.FailoverGlobalClusterOutput, error)

	// FailoverGlobalClusterRequestFunc mocks the FailoverGlobalClusterRequest method.
	FailoverGlobalClusterRequestFunc func(failoverGlobalClusterInput *rds.FailoverGlobalClusterInput) (*request.Request, *rds.FailoverGlobalClusterOutput)

	// FailoverGlobalClusterWithContextFunc mocks the FailoverGlobalClusterWithContext method.
	FailoverGlobalClusterWithContextFunc func(contextMoqParam context.Context, failoverGlobalClusterInput *rds.FailoverGlobalClusterInput, options ...request.Option) (*rds.FailoverGlobalClusterOutput, error)

	// ListTagsForResourceFunc mocks the ListTagsForResource method.
	ListTagsForResourceFunc func(listTagsForResourceInput *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error)

	// ListTagsForResourceRequestFunc mocks the ListTagsForResourceRequest method.
	ListTagsForResourceRequestFunc func(listTagsForResourceInput *rds.ListTagsForResourceInput) (*request.Request, *rds.ListTagsForResourceOutput)

	// ListTagsForResourceWithContextFunc mocks the ListTagsForResourceWithContext method.
	ListTagsForResourceWithContextFunc func(contextMoqParam context.Context, listTagsForResourceInput *rds.ListTagsForResourceInput, options ...request.Option) (*rds.ListTagsForResourceOutput, error)

	// ModifyActivityStreamFunc mocks the ModifyActivityStream method.
	ModifyActivityStreamFunc func(modifyActivityStreamInput *rds.ModifyActivityStreamInput) (*rds.ModifyActivityStreamOutput, error)

	// ModifyActivityStreamRequestFunc mocks the ModifyActivityStreamRequest method.
	ModifyActivityStreamRequestFunc func(modifyActivityStreamInput *rds.ModifyActivityStreamInput) (*request.Request, *rds.ModifyActivityStreamOutput)

	// ModifyActivityStreamWithContextFunc mocks the ModifyActivityStreamWithContext method.
	ModifyActivityStreamWithContextFunc func(contextMoqParam context.Context, modifyActivityStreamInput *rds.ModifyActivityStreamInput, options ...request.Option) (*rds.ModifyActivityStreamOutput, error)

	// ModifyCertificatesFunc mocks the ModifyCertificates method.
	ModifyCertificatesFunc func(modifyCertificatesInput *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error)

	// ModifyCertificatesRequestFunc mocks the ModifyCertificatesRequest method.
	ModifyCertificatesRequestFunc func(modifyCertificatesInput *rds.ModifyCertificatesInput) (*request.Request, *rds.ModifyCertificatesOutput)

	// ModifyCertificatesWithContextFunc mocks the ModifyCertificatesWithContext method.
	ModifyCertificatesWithContextFunc func(contextMoqParam context.Context, modifyCertificatesInput *rds.ModifyCertificatesInput, options ...request.Option) (*rds.ModifyCertificatesOutput, error)

	// ModifyCurrentDBClusterCapacityFunc mocks the ModifyCurrentDBClusterCapacity method.
	ModifyCurrentDBClusterCapacityFunc func(modifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error)

	// ModifyCurrentDBClusterCapacityRequestFunc mocks the ModifyCurrentDBClusterCapacityRequest method.
	ModifyCurrentDBClusterCapacityRequestFunc func(modifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput) (*request.Request, *rds.ModifyCurrentDBClusterCapacityOutput)

	// ModifyCurrentDBClusterCapacityWithContextFunc mocks the ModifyCurrentDBClusterCapacityWithContext method.
	ModifyCurrentDBClusterCapacityWithContextFunc func(contextMoqParam context.Context, modifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput, options ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error)

	// ModifyCustomDBEngineVersionFunc mocks the ModifyCustomDBEngineVersion method.
	ModifyCustomDBEngineVersionFunc func(modifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput) (*rds.ModifyCustomDBEngineVersionOutput, error)

	// ModifyCustomDBEngineVersionRequestFunc mocks the ModifyCustomDBEngineVersionRequest method.
	ModifyCustomDBEngineVersionRequestFunc func(modifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput) (*request.Request, *rds.ModifyCustomDBEngineVersionOutput)

	// ModifyCustomDBEngineVersionWithContextFunc mocks the ModifyCustomDBEngineVersionWithContext method.
	ModifyCustomDBEngineVersionWithContextFunc func(contextMoqParam context.Context, modifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput, options ...request.Option) (*rds.ModifyCustomDBEngineVersionOutput, error)

	// ModifyDBClusterFunc mocks the ModifyDBCluster method.
	ModifyDBClusterFunc func(modifyDBClusterInput *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error)

	// ModifyDBClusterEndpointFunc mocks the ModifyDBClusterEndpoint method.
	ModifyDBClusterEndpointFunc func(modifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error)

	// ModifyDBClusterEndpointRequestFunc mocks the ModifyDBClusterEndpointRequest method.
	ModifyDBClusterEndpointRequestFunc func(modifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput) (*request.Request, *rds.ModifyDBClusterEndpointOutput)

	// ModifyDBClusterEndpointWithContextFunc mocks the ModifyDBClusterEndpointWithContext method.
	ModifyDBClusterEndpointWithContextFunc func(contextMoqParam context.Context, modifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput, options ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error)

	// ModifyDBClusterParameterGroupFunc mocks the ModifyDBClusterParameterGroup method.
	ModifyDBClusterParameterGroupFunc func(modifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error)

	// ModifyDBClusterParameterGroupRequestFunc mocks the ModifyDBClusterParameterGroupRequest method.
	ModifyDBClusterParameterGroupRequestFunc func(modifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage)

	// ModifyDBClusterParameterGroupWithContextFunc mocks the ModifyDBClusterParameterGroupWithContext method.
	ModifyDBClusterParameterGroupWithContextFunc func(contextMoqParam context.Context, modifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput, options ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error)

	// ModifyDBClusterRequestFunc mocks the ModifyDBClusterRequest method.
	ModifyDBClusterRequestFunc func(modifyDBClusterInput *rds.ModifyDBClusterInput) (*request.Request, *rds.ModifyDBClusterOutput)

	// ModifyDBClusterSnapshotAttributeFunc mocks the ModifyDBClusterSnapshotAttribute method.
	ModifyDBClusterSnapshotAttributeFunc func(modifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)

	// ModifyDBClusterSnapshotAttributeRequestFunc mocks the ModifyDBClusterSnapshotAttributeRequest method.
	ModifyDBClusterSnapshotAttributeRequestFunc func(modifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *rds.ModifyDBClusterSnapshotAttributeOutput)

	// ModifyDBClusterSnapshotAttributeWithContextFunc mocks the ModifyDBClusterSnapshotAttributeWithContext method.
	ModifyDBClusterSnapshotAttributeWithContextFunc func(contextMoqParam context.Context, modifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput, options ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error)

	// ModifyDBClusterWithContextFunc mocks the ModifyDBClusterWithContext method.
	ModifyDBClusterWithContextFunc func(contextMoqParam context.Context, modifyDBClusterInput *rds.ModifyDBClusterInput, options ...request.Option) (*rds.ModifyDBClusterOutput, error)

	// ModifyDBInstanceFunc mocks the ModifyDBInstance method.
	ModifyDBInstanceFunc func(modifyDBInstanceInput *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error)

	// ModifyDBInstanceRequestFunc mocks the ModifyDBInstanceRequest method.
	ModifyDBInstanceRequestFunc func(modifyDBInstanceInput *rds.ModifyDBInstanceInput) (*request.Request, *rds.ModifyDBInstanceOutput)

	// ModifyDBInstanceWithContextFunc mocks the ModifyDBInstanceWithContext method.
	ModifyDBInstanceWithContextFunc func(contextMoqParam context.Context, modifyDBInstanceInput *rds.ModifyDBInstanceInput, options ...request.Option) (*rds.ModifyDBInstanceOutput, error)

	// ModifyDBParameterGroupFunc mocks the ModifyDBParameterGroup method.
	ModifyDBParameterGroupFunc func(modifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error)

	// ModifyDBParameterGroupRequestFunc mocks the ModifyDBParameterGroupRequest method.
	ModifyDBParameterGroupRequestFunc func(modifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage)

	// ModifyDBParameterGroupWithContextFunc mocks the ModifyDBParameterGroupWithContext method.
	ModifyDBParameterGroupWithContextFunc func(contextMoqParam context.Context, modifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput, options ...request.Option) (*rds.DBParameterGroupNameMessage, error)

	// ModifyDBProxyFunc mocks the ModifyDBProxy method.
	ModifyDBProxyFunc func(modifyDBProxyInput *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error)

	// ModifyDBProxyEndpointFunc mocks the ModifyDBProxyEndpoint method.
	ModifyDBProxyEndpointFunc func(modifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput) (*rds.ModifyDBProxyEndpointOutput, error)

	// ModifyDBProxyEndpointRequestFunc mocks the ModifyDBProxyEndpointRequest method.
	ModifyDBProxyEndpointRequestFunc func(modifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput) (*request.Request, *rds.ModifyDBProxyEndpointOutput)

	// ModifyDBProxyEndpointWithContextFunc mocks the ModifyDBProxyEndpointWithContext method.
	ModifyDBProxyEndpointWithContextFunc func(contextMoqParam context.Context, modifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput, options ...request.Option) (*rds.ModifyDBProxyEndpointOutput, error)

	// ModifyDBProxyRequestFunc mocks the ModifyDBProxyRequest method.
	ModifyDBProxyRequestFunc func(modifyDBProxyInput *rds.ModifyDBProxyInput) (*request.Request, *rds.ModifyDBProxyOutput)

	// ModifyDBProxyTargetGroupFunc mocks the ModifyDBProxyTargetGroup method.
	ModifyDBProxyTargetGroupFunc func(modifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error)

	// ModifyDBProxyTargetGroupRequestFunc mocks the ModifyDBProxyTargetGroupRequest method.
	ModifyDBProxyTargetGroupRequestFunc func(modifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput) (*request.Request, *rds.ModifyDBProxyTargetGroupOutput)

	// ModifyDBProxyTargetGroupWithContextFunc mocks the ModifyDBProxyTargetGroupWithContext method.
	ModifyDBProxyTargetGroupWithContextFunc func(contextMoqParam context.Context, modifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput, options ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error)

	// ModifyDBProxyWithContextFunc mocks the ModifyDBProxyWithContext method.
	ModifyDBProxyWithContextFunc func(contextMoqParam context.Context, modifyDBProxyInput *rds.ModifyDBProxyInput, options ...request.Option) (*rds.ModifyDBProxyOutput, error)

	// ModifyDBSnapshotFunc mocks the ModifyDBSnapshot method.
	ModifyDBSnapshotFunc func(modifyDBSnapshotInput *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error)

	// ModifyDBSnapshotAttributeFunc mocks the ModifyDBSnapshotAttribute method.
	ModifyDBSnapshotAttributeFunc func(modifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error)

	// ModifyDBSnapshotAttributeRequestFunc mocks the ModifyDBSnapshotAttributeRequest method.
	ModifyDBSnapshotAttributeRequestFunc func(modifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput) (*request.Request, *rds.ModifyDBSnapshotAttributeOutput)

	// ModifyDBSnapshotAttributeWithContextFunc mocks the ModifyDBSnapshotAttributeWithContext method.
	ModifyDBSnapshotAttributeWithContextFunc func(contextMoqParam context.Context, modifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput, options ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error)

	// ModifyDBSnapshotRequestFunc mocks the ModifyDBSnapshotRequest method.
	ModifyDBSnapshotRequestFunc func(modifyDBSnapshotInput *rds.ModifyDBSnapshotInput) (*request.Request, *rds.ModifyDBSnapshotOutput)

	// ModifyDBSnapshotWithContextFunc mocks the ModifyDBSnapshotWithContext method.
	ModifyDBSnapshotWithContextFunc func(contextMoqParam context.Context, modifyDBSnapshotInput *rds.ModifyDBSnapshotInput, options ...request.Option) (*rds.ModifyDBSnapshotOutput, error)

	// ModifyDBSubnetGroupFunc mocks the ModifyDBSubnetGroup method.
	ModifyDBSubnetGroupFunc func(modifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error)

	// ModifyDBSubnetGroupRequestFunc mocks the ModifyDBSubnetGroupRequest method.
	ModifyDBSubnetGroupRequestFunc func(modifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput) (*request.Request, *rds.ModifyDBSubnetGroupOutput)

	// ModifyDBSubnetGroupWithContextFunc mocks the ModifyDBSubnetGroupWithContext method.
	ModifyDBSubnetGroupWithContextFunc func(contextMoqParam context.Context, modifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput, options ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error)

	// ModifyEventSubscriptionFunc mocks the ModifyEventSubscription method.
	ModifyEventSubscriptionFunc func(modifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error)

	// ModifyEventSubscriptionRequestFunc mocks the ModifyEventSubscriptionRequest method.
	ModifyEventSubscriptionRequestFunc func(modifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput) (*request.Request, *rds.ModifyEventSubscriptionOutput)

	// ModifyEventSubscriptionWithContextFunc mocks the ModifyEventSubscriptionWithContext method.
	ModifyEventSubscriptionWithContextFunc func(contextMoqParam context.Context, modifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput, options ...request.Option) (*rds.ModifyEventSubscriptionOutput, error)

	// ModifyGlobalClusterFunc mocks the ModifyGlobalCluster method.
	ModifyGlobalClusterFunc func(modifyGlobalClusterInput *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error)

	// ModifyGlobalClusterRequestFunc mocks the ModifyGlobalClusterRequest method.
	ModifyGlobalClusterRequestFunc func(modifyGlobalClusterInput *rds.ModifyGlobalClusterInput) (*request.Request, *rds.ModifyGlobalClusterOutput)

	// ModifyGlobalClusterWithContextFunc mocks the ModifyGlobalClusterWithContext method.
	ModifyGlobalClusterWithContextFunc func(contextMoqParam context.Context, modifyGlobalClusterInput *rds.ModifyGlobalClusterInput, options ...request.Option) (*rds.ModifyGlobalClusterOutput, error)

	// ModifyOptionGroupFunc mocks the ModifyOptionGroup method.
	ModifyOptionGroupFunc func(modifyOptionGroupInput *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error)

	// ModifyOptionGroupRequestFunc mocks the ModifyOptionGroupRequest method.
	ModifyOptionGroupRequestFunc func(modifyOptionGroupInput *rds.ModifyOptionGroupInput) (*request.Request, *rds.ModifyOptionGroupOutput)

	// ModifyOptionGroupWithContextFunc mocks the ModifyOptionGroupWithContext method.
	ModifyOptionGroupWithContextFunc func(contextMoqParam context.Context, modifyOptionGroupInput *rds.ModifyOptionGroupInput, options ...request.Option) (*rds.ModifyOptionGroupOutput, error)

	// PromoteReadReplicaFunc mocks the PromoteReadReplica method.
	PromoteReadReplicaFunc func(promoteReadReplicaInput *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error)

	// PromoteReadReplicaDBClusterFunc mocks the PromoteReadReplicaDBCluster method.
	PromoteReadReplicaDBClusterFunc func(promoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error)

	// PromoteReadReplicaDBClusterRequestFunc mocks the PromoteReadReplicaDBClusterRequest method.
	PromoteReadReplicaDBClusterRequestFunc func(promoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput) (*request.Request, *rds.PromoteReadReplicaDBClusterOutput)

	// PromoteReadReplicaDBClusterWithContextFunc mocks the PromoteReadReplicaDBClusterWithContext method.
	PromoteReadReplicaDBClusterWithContextFunc func(contextMoqParam context.Context, promoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput, options ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error)

	// PromoteReadReplicaRequestFunc mocks the PromoteReadReplicaRequest method.
	PromoteReadReplicaRequestFunc func(promoteReadReplicaInput *rds.PromoteReadReplicaInput) (*request.Request, *rds.PromoteReadReplicaOutput)

	// PromoteReadReplicaWithContextFunc mocks the PromoteReadReplicaWithContext method.
	PromoteReadReplicaWithContextFunc func(contextMoqParam context.Context, promoteReadReplicaInput *rds.PromoteReadReplicaInput, options ...request.Option) (*rds.PromoteReadReplicaOutput, error)

	// PurchaseReservedDBInstancesOfferingFunc mocks the PurchaseReservedDBInstancesOffering method.
	PurchaseReservedDBInstancesOfferingFunc func(purchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)

	// PurchaseReservedDBInstancesOfferingRequestFunc mocks the PurchaseReservedDBInstancesOfferingRequest method.
	PurchaseReservedDBInstancesOfferingRequestFunc func(purchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput) (*request.Request, *rds.PurchaseReservedDBInstancesOfferingOutput)

	// PurchaseReservedDBInstancesOfferingWithContextFunc mocks the PurchaseReservedDBInstancesOfferingWithContext method.
	PurchaseReservedDBInstancesOfferingWithContextFunc func(contextMoqParam context.Context, purchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput, options ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error)

	// RebootDBClusterFunc mocks the RebootDBCluster method.
	RebootDBClusterFunc func(rebootDBClusterInput *rds.RebootDBClusterInput) (*rds.RebootDBClusterOutput, error)

	// RebootDBClusterRequestFunc mocks the RebootDBClusterRequest method.
	RebootDBClusterRequestFunc func(rebootDBClusterInput *rds.RebootDBClusterInput) (*request.Request, *rds.RebootDBClusterOutput)

	// RebootDBClusterWithContextFunc mocks the RebootDBClusterWithContext method.
	RebootDBClusterWithContextFunc func(contextMoqParam context.Context, rebootDBClusterInput *rds.RebootDBClusterInput, options ...request.Option) (*rds.RebootDBClusterOutput, error)

	// RebootDBInstanceFunc mocks the RebootDBInstance method.
	RebootDBInstanceFunc func(rebootDBInstanceInput *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error)

	// RebootDBInstanceRequestFunc mocks the RebootDBInstanceRequest method.
	RebootDBInstanceRequestFunc func(rebootDBInstanceInput *rds.RebootDBInstanceInput) (*request.Request, *rds.RebootDBInstanceOutput)

	// RebootDBInstanceWithContextFunc mocks the RebootDBInstanceWithContext method.
	RebootDBInstanceWithContextFunc func(contextMoqParam context.Context, rebootDBInstanceInput *rds.RebootDBInstanceInput, options ...request.Option) (*rds.RebootDBInstanceOutput, error)

	// RegisterDBProxyTargetsFunc mocks the RegisterDBProxyTargets method.
	RegisterDBProxyTargetsFunc func(registerDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error)

	// RegisterDBProxyTargetsRequestFunc mocks the RegisterDBProxyTargetsRequest method.
	RegisterDBProxyTargetsRequestFunc func(registerDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput) (*request.Request, *rds.RegisterDBProxyTargetsOutput)

	// RegisterDBProxyTargetsWithContextFunc mocks the RegisterDBProxyTargetsWithContext method.
	RegisterDBProxyTargetsWithContextFunc func(contextMoqParam context.Context, registerDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput, options ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error)

	// RemoveFromGlobalClusterFunc mocks the RemoveFromGlobalCluster method.
	RemoveFromGlobalClusterFunc func(removeFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error)

	// RemoveFromGlobalClusterRequestFunc mocks the RemoveFromGlobalClusterRequest method.
	RemoveFromGlobalClusterRequestFunc func(removeFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput) (*request.Request, *rds.RemoveFromGlobalClusterOutput)

	// RemoveFromGlobalClusterWithContextFunc mocks the RemoveFromGlobalClusterWithContext method.
	RemoveFromGlobalClusterWithContextFunc func(contextMoqParam context.Context, removeFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput, options ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error)

	// RemoveRoleFromDBClusterFunc mocks the RemoveRoleFromDBCluster method.
	RemoveRoleFromDBClusterFunc func(removeRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error)

	// RemoveRoleFromDBClusterRequestFunc mocks the RemoveRoleFromDBClusterRequest method.
	RemoveRoleFromDBClusterRequestFunc func(removeRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput) (*request.Request, *rds.RemoveRoleFromDBClusterOutput)

	// RemoveRoleFromDBClusterWithContextFunc mocks the RemoveRoleFromDBClusterWithContext method.
	RemoveRoleFromDBClusterWithContextFunc func(contextMoqParam context.Context, removeRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput, options ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error)

	// RemoveRoleFromDBInstanceFunc mocks the RemoveRoleFromDBInstance method.
	RemoveRoleFromDBInstanceFunc func(removeRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error)

	// RemoveRoleFromDBInstanceRequestFunc mocks the RemoveRoleFromDBInstanceRequest method.
	RemoveRoleFromDBInstanceRequestFunc func(removeRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput) (*request.Request, *rds.RemoveRoleFromDBInstanceOutput)

	// RemoveRoleFromDBInstanceWithContextFunc mocks the RemoveRoleFromDBInstanceWithContext method.
	RemoveRoleFromDBInstanceWithContextFunc func(contextMoqParam context.Context, removeRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput, options ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error)

	// RemoveSourceIdentifierFromSubscriptionFunc mocks the RemoveSourceIdentifierFromSubscription method.
	RemoveSourceIdentifierFromSubscriptionFunc func(removeSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)

	// RemoveSourceIdentifierFromSubscriptionRequestFunc mocks the RemoveSourceIdentifierFromSubscriptionRequest method.
	RemoveSourceIdentifierFromSubscriptionRequestFunc func(removeSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput) (*request.Request, *rds.RemoveSourceIdentifierFromSubscriptionOutput)

	// RemoveSourceIdentifierFromSubscriptionWithContextFunc mocks the RemoveSourceIdentifierFromSubscriptionWithContext method.
	RemoveSourceIdentifierFromSubscriptionWithContextFunc func(contextMoqParam context.Context, removeSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput, options ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error)

	// RemoveTagsFromResourceFunc mocks the RemoveTagsFromResource method.
	RemoveTagsFromResourceFunc func(removeTagsFromResourceInput *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error)

	// RemoveTagsFromResourceRequestFunc mocks the RemoveTagsFromResourceRequest method.
	RemoveTagsFromResourceRequestFunc func(removeTagsFromResourceInput *rds.RemoveTagsFromResourceInput) (*request.Request, *rds.RemoveTagsFromResourceOutput)

	// RemoveTagsFromResourceWithContextFunc mocks the RemoveTagsFromResourceWithContext method.
	RemoveTagsFromResourceWithContextFunc func(contextMoqParam context.Context, removeTagsFromResourceInput *rds.RemoveTagsFromResourceInput, options ...request.Option) (*rds.RemoveTagsFromResourceOutput, error)

	// ResetDBClusterParameterGroupFunc mocks the ResetDBClusterParameterGroup method.
	ResetDBClusterParameterGroupFunc func(resetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error)

	// ResetDBClusterParameterGroupRequestFunc mocks the ResetDBClusterParameterGroupRequest method.
	ResetDBClusterParameterGroupRequestFunc func(resetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage)

	// ResetDBClusterParameterGroupWithContextFunc mocks the ResetDBClusterParameterGroupWithContext method.
	ResetDBClusterParameterGroupWithContextFunc func(contextMoqParam context.Context, resetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput, options ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error)

	// ResetDBParameterGroupFunc mocks the ResetDBParameterGroup method.
	ResetDBParameterGroupFunc func(resetDBParameterGroupInput *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error)

	// ResetDBParameterGroupRequestFunc mocks the ResetDBParameterGroupRequest method.
	ResetDBParameterGroupRequestFunc func(resetDBParameterGroupInput *rds.ResetDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage)

	// ResetDBParameterGroupWithContextFunc mocks the ResetDBParameterGroupWithContext method.
	ResetDBParameterGroupWithContextFunc func(contextMoqParam context.Context, resetDBParameterGroupInput *rds.ResetDBParameterGroupInput, options ...request.Option) (*rds.DBParameterGroupNameMessage, error)

	// RestoreDBClusterFromS3Func mocks the RestoreDBClusterFromS3 method.
	RestoreDBClusterFromS3Func func(restoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error)

	// RestoreDBClusterFromS3RequestFunc mocks the RestoreDBClusterFromS3Request method.
	RestoreDBClusterFromS3RequestFunc func(restoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input) (*request.Request, *rds.RestoreDBClusterFromS3Output)

	// RestoreDBClusterFromS3WithContextFunc mocks the RestoreDBClusterFromS3WithContext method.
	RestoreDBClusterFromS3WithContextFunc func(contextMoqParam context.Context, restoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input, options ...request.Option) (*rds.RestoreDBClusterFromS3Output, error)

	// RestoreDBClusterFromSnapshotFunc mocks the RestoreDBClusterFromSnapshot method.
	RestoreDBClusterFromSnapshotFunc func(restoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error)

	// RestoreDBClusterFromSnapshotRequestFunc mocks the RestoreDBClusterFromSnapshotRequest method.
	RestoreDBClusterFromSnapshotRequestFunc func(restoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput) (*request.Request, *rds.RestoreDBClusterFromSnapshotOutput)

	// RestoreDBClusterFromSnapshotWithContextFunc mocks the RestoreDBClusterFromSnapshotWithContext method.
	RestoreDBClusterFromSnapshotWithContextFunc func(contextMoqParam context.Context, restoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput, options ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error)

	// RestoreDBClusterToPointInTimeFunc mocks the RestoreDBClusterToPointInTime method.
	RestoreDBClusterToPointInTimeFunc func(restoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error)

	// RestoreDBClusterToPointInTimeRequestFunc mocks the RestoreDBClusterToPointInTimeRequest method.
	RestoreDBClusterToPointInTimeRequestFunc func(restoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput) (*request.Request, *rds.RestoreDBClusterToPointInTimeOutput)

	// RestoreDBClusterToPointInTimeWithContextFunc mocks the RestoreDBClusterToPointInTimeWithContext method.
	RestoreDBClusterToPointInTimeWithContextFunc func(contextMoqParam context.Context, restoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput, options ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error)

	// RestoreDBInstanceFromDBSnapshotFunc mocks the RestoreDBInstanceFromDBSnapshot method.
	RestoreDBInstanceFromDBSnapshotFunc func(restoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)

	// RestoreDBInstanceFromDBSnapshotRequestFunc mocks the RestoreDBInstanceFromDBSnapshotRequest method.
	RestoreDBInstanceFromDBSnapshotRequestFunc func(restoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput) (*request.Request, *rds.RestoreDBInstanceFromDBSnapshotOutput)

	// RestoreDBInstanceFromDBSnapshotWithContextFunc mocks the RestoreDBInstanceFromDBSnapshotWithContext method.
	RestoreDBInstanceFromDBSnapshotWithContextFunc func(contextMoqParam context.Context, restoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput, options ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error)

	// RestoreDBInstanceFromS3Func mocks the RestoreDBInstanceFromS3 method.
	RestoreDBInstanceFromS3Func func(restoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error)

	// RestoreDBInstanceFromS3RequestFunc mocks the RestoreDBInstanceFromS3Request method.
	RestoreDBInstanceFromS3RequestFunc func(restoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input) (*request.Request, *rds.RestoreDBInstanceFromS3Output)

	// RestoreDBInstanceFromS3WithContextFunc mocks the RestoreDBInstanceFromS3WithContext method.
	RestoreDBInstanceFromS3WithContextFunc func(contextMoqParam context.Context, restoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input, options ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error)

	// RestoreDBInstanceToPointInTimeFunc mocks the RestoreDBInstanceToPointInTime method.
	RestoreDBInstanceToPointInTimeFunc func(restoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error)

	// RestoreDBInstanceToPointInTimeRequestFunc mocks the RestoreDBInstanceToPointInTimeRequest method.
	RestoreDBInstanceToPointInTimeRequestFunc func(restoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput) (*request.Request, *rds.RestoreDBInstanceToPointInTimeOutput)

	// RestoreDBInstanceToPointInTimeWithContextFunc mocks the RestoreDBInstanceToPointInTimeWithContext method.
	RestoreDBInstanceToPointInTimeWithContextFunc func(contextMoqParam context.Context, restoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput, options ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error)

	// RevokeDBSecurityGroupIngressFunc mocks the RevokeDBSecurityGroupIngress method.
	RevokeDBSecurityGroupIngressFunc func(revokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error)

	// RevokeDBSecurityGroupIngressRequestFunc mocks the RevokeDBSecurityGroupIngressRequest method.
	RevokeDBSecurityGroupIngressRequestFunc func(revokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput) (*request.Request, *rds.RevokeDBSecurityGroupIngressOutput)

	// RevokeDBSecurityGroupIngressWithContextFunc mocks the RevokeDBSecurityGroupIngressWithContext method.
	RevokeDBSecurityGroupIngressWithContextFunc func(contextMoqParam context.Context, revokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput, options ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error)

	// StartActivityStreamFunc mocks the StartActivityStream method.
	StartActivityStreamFunc func(startActivityStreamInput *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error)

	// StartActivityStreamRequestFunc mocks the StartActivityStreamRequest method.
	StartActivityStreamRequestFunc func(startActivityStreamInput *rds.StartActivityStreamInput) (*request.Request, *rds.StartActivityStreamOutput)

	// StartActivityStreamWithContextFunc mocks the StartActivityStreamWithContext method.
	StartActivityStreamWithContextFunc func(contextMoqParam context.Context, startActivityStreamInput *rds.StartActivityStreamInput, options ...request.Option) (*rds.StartActivityStreamOutput, error)

	// StartDBClusterFunc mocks the StartDBCluster method.
	StartDBClusterFunc func(startDBClusterInput *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error)

	// StartDBClusterRequestFunc mocks the StartDBClusterRequest method.
	StartDBClusterRequestFunc func(startDBClusterInput *rds.StartDBClusterInput) (*request.Request, *rds.StartDBClusterOutput)

	// StartDBClusterWithContextFunc mocks the StartDBClusterWithContext method.
	StartDBClusterWithContextFunc func(contextMoqParam context.Context, startDBClusterInput *rds.StartDBClusterInput, options ...request.Option) (*rds.StartDBClusterOutput, error)

	// StartDBInstanceFunc mocks the StartDBInstance method.
	StartDBInstanceFunc func(startDBInstanceInput *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error)

	// StartDBInstanceAutomatedBackupsReplicationFunc mocks the StartDBInstanceAutomatedBackupsReplication method.
	StartDBInstanceAutomatedBackupsReplicationFunc func(startDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput) (*rds.StartDBInstanceAutomatedBackupsReplicationOutput, error)

	// StartDBInstanceAutomatedBackupsReplicationRequestFunc mocks the StartDBInstanceAutomatedBackupsReplicationRequest method.
	StartDBInstanceAutomatedBackupsReplicationRequestFunc func(startDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput) (*request.Request, *rds.StartDBInstanceAutomatedBackupsReplicationOutput)

	// StartDBInstanceAutomatedBackupsReplicationWithContextFunc mocks the StartDBInstanceAutomatedBackupsReplicationWithContext method.
	StartDBInstanceAutomatedBackupsReplicationWithContextFunc func(contextMoqParam context.Context, startDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput, options ...request.Option) (*rds.StartDBInstanceAutomatedBackupsReplicationOutput, error)

	// StartDBInstanceRequestFunc mocks the StartDBInstanceRequest method.
	StartDBInstanceRequestFunc func(startDBInstanceInput *rds.StartDBInstanceInput) (*request.Request, *rds.StartDBInstanceOutput)

	// StartDBInstanceWithContextFunc mocks the StartDBInstanceWithContext method.
	StartDBInstanceWithContextFunc func(contextMoqParam context.Context, startDBInstanceInput *rds.StartDBInstanceInput, options ...request.Option) (*rds.StartDBInstanceOutput, error)

	// StartExportTaskFunc mocks the StartExportTask method.
	StartExportTaskFunc func(startExportTaskInput *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error)

	// StartExportTaskRequestFunc mocks the StartExportTaskRequest method.
	StartExportTaskRequestFunc func(startExportTaskInput *rds.StartExportTaskInput) (*request.Request, *rds.StartExportTaskOutput)

	// StartExportTaskWithContextFunc mocks the StartExportTaskWithContext method.
	StartExportTaskWithContextFunc func(contextMoqParam context.Context, startExportTaskInput *rds.StartExportTaskInput, options ...request.Option) (*rds.StartExportTaskOutput, error)

	// StopActivityStreamFunc mocks the StopActivityStream method.
	StopActivityStreamFunc func(stopActivityStreamInput *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error)

	// StopActivityStreamRequestFunc mocks the StopActivityStreamRequest method.
	StopActivityStreamRequestFunc func(stopActivityStreamInput *rds.StopActivityStreamInput) (*request.Request, *rds.StopActivityStreamOutput)

	// StopActivityStreamWithContextFunc mocks the StopActivityStreamWithContext method.
	StopActivityStreamWithContextFunc func(contextMoqParam context.Context, stopActivityStreamInput *rds.StopActivityStreamInput, options ...request.Option) (*rds.StopActivityStreamOutput, error)

	// StopDBClusterFunc mocks the StopDBCluster method.
	StopDBClusterFunc func(stopDBClusterInput *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error)

	// StopDBClusterRequestFunc mocks the StopDBClusterRequest method.
	StopDBClusterRequestFunc func(stopDBClusterInput *rds.StopDBClusterInput) (*request.Request, *rds.StopDBClusterOutput)

	// StopDBClusterWithContextFunc mocks the StopDBClusterWithContext method.
	StopDBClusterWithContextFunc func(contextMoqParam context.Context, stopDBClusterInput *rds.StopDBClusterInput, options ...request.Option) (*rds.StopDBClusterOutput, error)

	// StopDBInstanceFunc mocks the StopDBInstance method.
	StopDBInstanceFunc func(stopDBInstanceInput *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error)

	// StopDBInstanceAutomatedBackupsReplicationFunc mocks the StopDBInstanceAutomatedBackupsReplication method.
	StopDBInstanceAutomatedBackupsReplicationFunc func(stopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput) (*rds.StopDBInstanceAutomatedBackupsReplicationOutput, error)

	// StopDBInstanceAutomatedBackupsReplicationRequestFunc mocks the StopDBInstanceAutomatedBackupsReplicationRequest method.
	StopDBInstanceAutomatedBackupsReplicationRequestFunc func(stopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput) (*request.Request, *rds.StopDBInstanceAutomatedBackupsReplicationOutput)

	// StopDBInstanceAutomatedBackupsReplicationWithContextFunc mocks the StopDBInstanceAutomatedBackupsReplicationWithContext method.
	StopDBInstanceAutomatedBackupsReplicationWithContextFunc func(contextMoqParam context.Context, stopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput, options ...request.Option) (*rds.StopDBInstanceAutomatedBackupsReplicationOutput, error)

	// StopDBInstanceRequestFunc mocks the StopDBInstanceRequest method.
	StopDBInstanceRequestFunc func(stopDBInstanceInput *rds.StopDBInstanceInput) (*request.Request, *rds.StopDBInstanceOutput)

	// StopDBInstanceWithContextFunc mocks the StopDBInstanceWithContext method.
	StopDBInstanceWithContextFunc func(contextMoqParam context.Context, stopDBInstanceInput *rds.StopDBInstanceInput, options ...request.Option) (*rds.StopDBInstanceOutput, error)

	// SwitchoverReadReplicaFunc mocks the SwitchoverReadReplica method.
	SwitchoverReadReplicaFunc func(switchoverReadReplicaInput *rds.SwitchoverReadReplicaInput) (*rds.SwitchoverReadReplicaOutput, error)

	// SwitchoverReadReplicaRequestFunc mocks the SwitchoverReadReplicaRequest method.
	SwitchoverReadReplicaRequestFunc func(switchoverReadReplicaInput *rds.SwitchoverReadReplicaInput) (*request.Request, *rds.SwitchoverReadReplicaOutput)

	// SwitchoverReadReplicaWithContextFunc mocks the SwitchoverReadReplicaWithContext method.
	SwitchoverReadReplicaWithContextFunc func(contextMoqParam context.Context, switchoverReadReplicaInput *rds.SwitchoverReadReplicaInput, options ...request.Option) (*rds.SwitchoverReadReplicaOutput, error)

	// WaitUntilDBClusterAvailableFunc mocks the WaitUntilDBClusterAvailable method.
	WaitUntilDBClusterAvailableFunc func(describeDBClustersInput *rds.DescribeDBClustersInput) error

	// WaitUntilDBClusterAvailableWithContextFunc mocks the WaitUntilDBClusterAvailableWithContext method.
	WaitUntilDBClusterAvailableWithContextFunc func(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilDBClusterDeletedFunc mocks the WaitUntilDBClusterDeleted method.
	WaitUntilDBClusterDeletedFunc func(describeDBClustersInput *rds.DescribeDBClustersInput) error

	// WaitUntilDBClusterDeletedWithContextFunc mocks the WaitUntilDBClusterDeletedWithContext method.
	WaitUntilDBClusterDeletedWithContextFunc func(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilDBClusterSnapshotAvailableFunc mocks the WaitUntilDBClusterSnapshotAvailable method.
	WaitUntilDBClusterSnapshotAvailableFunc func(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) error

	// WaitUntilDBClusterSnapshotAvailableWithContextFunc mocks the WaitUntilDBClusterSnapshotAvailableWithContext method.
	WaitUntilDBClusterSnapshotAvailableWithContextFunc func(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilDBClusterSnapshotDeletedFunc mocks the WaitUntilDBClusterSnapshotDeleted method.
	WaitUntilDBClusterSnapshotDeletedFunc func(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) error

	// WaitUntilDBClusterSnapshotDeletedWithContextFunc mocks the WaitUntilDBClusterSnapshotDeletedWithContext method.
	WaitUntilDBClusterSnapshotDeletedWithContextFunc func(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilDBInstanceAvailableFunc mocks the WaitUntilDBInstanceAvailable method.
	WaitUntilDBInstanceAvailableFunc func(describeDBInstancesInput *rds.DescribeDBInstancesInput) error

	// WaitUntilDBInstanceAvailableWithContextFunc mocks the WaitUntilDBInstanceAvailableWithContext method.
	WaitUntilDBInstanceAvailableWithContextFunc func(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilDBInstanceDeletedFunc mocks the WaitUntilDBInstanceDeleted method.
	WaitUntilDBInstanceDeletedFunc func(describeDBInstancesInput *rds.DescribeDBInstancesInput) error

	// WaitUntilDBInstanceDeletedWithContextFunc mocks the WaitUntilDBInstanceDeletedWithContext method.
	WaitUntilDBInstanceDeletedWithContextFunc func(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilDBSnapshotAvailableFunc mocks the WaitUntilDBSnapshotAvailable method.
	WaitUntilDBSnapshotAvailableFunc func(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) error

	// WaitUntilDBSnapshotAvailableWithContextFunc mocks the WaitUntilDBSnapshotAvailableWithContext method.
	WaitUntilDBSnapshotAvailableWithContextFunc func(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilDBSnapshotDeletedFunc mocks the WaitUntilDBSnapshotDeleted method.
	WaitUntilDBSnapshotDeletedFunc func(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) error

	// WaitUntilDBSnapshotDeletedWithContextFunc mocks the WaitUntilDBSnapshotDeletedWithContext method.
	WaitUntilDBSnapshotDeletedWithContextFunc func(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, waiterOptions ...request.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// AddRoleToDBCluster holds details about calls to the AddRoleToDBCluster method.
		AddRoleToDBCluster []struct {
			// AddRoleToDBClusterInput is the addRoleToDBClusterInput argument value.
			AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
		}
		// AddRoleToDBClusterRequest holds details about calls to the AddRoleToDBClusterRequest method.
		AddRoleToDBClusterRequest []struct {
			// AddRoleToDBClusterInput is the addRoleToDBClusterInput argument value.
			AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
		}
		// AddRoleToDBClusterWithContext holds details about calls to the AddRoleToDBClusterWithContext method.
		AddRoleToDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AddRoleToDBClusterInput is the addRoleToDBClusterInput argument value.
			AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AddRoleToDBInstance holds details about calls to the AddRoleToDBInstance method.
		AddRoleToDBInstance []struct {
			// AddRoleToDBInstanceInput is the addRoleToDBInstanceInput argument value.
			AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
		}
		// AddRoleToDBInstanceRequest holds details about calls to the AddRoleToDBInstanceRequest method.
		AddRoleToDBInstanceRequest []struct {
			// AddRoleToDBInstanceInput is the addRoleToDBInstanceInput argument value.
			AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
		}
		// AddRoleToDBInstanceWithContext holds details about calls to the AddRoleToDBInstanceWithContext method.
		AddRoleToDBInstanceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AddRoleToDBInstanceInput is the addRoleToDBInstanceInput argument value.
			AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AddSourceIdentifierToSubscription holds details about calls to the AddSourceIdentifierToSubscription method.
		AddSourceIdentifierToSubscription []struct {
			// AddSourceIdentifierToSubscriptionInput is the addSourceIdentifierToSubscriptionInput argument value.
			AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
		}
		// AddSourceIdentifierToSubscriptionRequest holds details about calls to the AddSourceIdentifierToSubscriptionRequest method.
		AddSourceIdentifierToSubscriptionRequest []struct {
			// AddSourceIdentifierToSubscriptionInput is the addSourceIdentifierToSubscriptionInput argument value.
			AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
		}
		// AddSourceIdentifierToSubscriptionWithContext holds details about calls to the AddSourceIdentifierToSubscriptionWithContext method.
		AddSourceIdentifierToSubscriptionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AddSourceIdentifierToSubscriptionInput is the addSourceIdentifierToSubscriptionInput argument value.
			AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AddTagsToResource holds details about calls to the AddTagsToResource method.
		AddTagsToResource []struct {
			// AddTagsToResourceInput is the addTagsToResourceInput argument value.
			AddTagsToResourceInput *rds.AddTagsToResourceInput
		}
		// AddTagsToResourceRequest holds details about calls to the AddTagsToResourceRequest method.
		AddTagsToResourceRequest []struct {
			// AddTagsToResourceInput is the addTagsToResourceInput argument value.
			AddTagsToResourceInput *rds.AddTagsToResourceInput
		}
		// AddTagsToResourceWithContext holds details about calls to the AddTagsToResourceWithContext method.
		AddTagsToResourceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AddTagsToResourceInput is the addTagsToResourceInput argument value.
			AddTagsToResourceInput *rds.AddTagsToResourceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ApplyPendingMaintenanceAction holds details about calls to the ApplyPendingMaintenanceAction method.
		ApplyPendingMaintenanceAction []struct {
			// ApplyPendingMaintenanceActionInput is the applyPendingMaintenanceActionInput argument value.
			ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
		}
		// ApplyPendingMaintenanceActionRequest holds details about calls to the ApplyPendingMaintenanceActionRequest method.
		ApplyPendingMaintenanceActionRequest []struct {
			// ApplyPendingMaintenanceActionInput is the applyPendingMaintenanceActionInput argument value.
			ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
		}
		// ApplyPendingMaintenanceActionWithContext holds details about calls to the ApplyPendingMaintenanceActionWithContext method.
		ApplyPendingMaintenanceActionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ApplyPendingMaintenanceActionInput is the applyPendingMaintenanceActionInput argument value.
			ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AuthorizeDBSecurityGroupIngress holds details about calls to the AuthorizeDBSecurityGroupIngress method.
		AuthorizeDBSecurityGroupIngress []struct {
			// AuthorizeDBSecurityGroupIngressInput is the authorizeDBSecurityGroupIngressInput argument value.
			AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
		}
		// AuthorizeDBSecurityGroupIngressRequest holds details about calls to the AuthorizeDBSecurityGroupIngressRequest method.
		AuthorizeDBSecurityGroupIngressRequest []struct {
			// AuthorizeDBSecurityGroupIngressInput is the authorizeDBSecurityGroupIngressInput argument value.
			AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
		}
		// AuthorizeDBSecurityGroupIngressWithContext holds details about calls to the AuthorizeDBSecurityGroupIngressWithContext method.
		AuthorizeDBSecurityGroupIngressWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AuthorizeDBSecurityGroupIngressInput is the authorizeDBSecurityGroupIngressInput argument value.
			AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
			// Options is the options argument value.
			Options []request.Option
		}
		// BacktrackDBCluster holds details about calls to the BacktrackDBCluster method.
		BacktrackDBCluster []struct {
			// BacktrackDBClusterInput is the backtrackDBClusterInput argument value.
			BacktrackDBClusterInput *rds.BacktrackDBClusterInput
		}
		// BacktrackDBClusterRequest holds details about calls to the BacktrackDBClusterRequest method.
		BacktrackDBClusterRequest []struct {
			// BacktrackDBClusterInput is the backtrackDBClusterInput argument value.
			BacktrackDBClusterInput *rds.BacktrackDBClusterInput
		}
		// BacktrackDBClusterWithContext holds details about calls to the BacktrackDBClusterWithContext method.
		BacktrackDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// BacktrackDBClusterInput is the backtrackDBClusterInput argument value.
			BacktrackDBClusterInput *rds.BacktrackDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CancelExportTask holds details about calls to the CancelExportTask method.
		CancelExportTask []struct {
			// CancelExportTaskInput is the cancelExportTaskInput argument value.
			CancelExportTaskInput *rds.CancelExportTaskInput
		}
		// CancelExportTaskRequest holds details about calls to the CancelExportTaskRequest method.
		CancelExportTaskRequest []struct {
			// CancelExportTaskInput is the cancelExportTaskInput argument value.
			CancelExportTaskInput *rds.CancelExportTaskInput
		}
		// CancelExportTaskWithContext holds details about calls to the CancelExportTaskWithContext method.
		CancelExportTaskWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CancelExportTaskInput is the cancelExportTaskInput argument value.
			CancelExportTaskInput *rds.CancelExportTaskInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CopyDBClusterParameterGroup holds details about calls to the CopyDBClusterParameterGroup method.
		CopyDBClusterParameterGroup []struct {
			// CopyDBClusterParameterGroupInput is the copyDBClusterParameterGroupInput argument value.
			CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
		}
		// CopyDBClusterParameterGroupRequest holds details about calls to the CopyDBClusterParameterGroupRequest method.
		CopyDBClusterParameterGroupRequest []struct {
			// CopyDBClusterParameterGroupInput is the copyDBClusterParameterGroupInput argument value.
			CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
		}
		// CopyDBClusterParameterGroupWithContext holds details about calls to the CopyDBClusterParameterGroupWithContext method.
		CopyDBClusterParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CopyDBClusterParameterGroupInput is the copyDBClusterParameterGroupInput argument value.
			CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CopyDBClusterSnapshot holds details about calls to the CopyDBClusterSnapshot method.
		CopyDBClusterSnapshot []struct {
			// CopyDBClusterSnapshotInput is the copyDBClusterSnapshotInput argument value.
			CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
		}
		// CopyDBClusterSnapshotRequest holds details about calls to the CopyDBClusterSnapshotRequest method.
		CopyDBClusterSnapshotRequest []struct {
			// CopyDBClusterSnapshotInput is the copyDBClusterSnapshotInput argument value.
			CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
		}
		// CopyDBClusterSnapshotWithContext holds details about calls to the CopyDBClusterSnapshotWithContext method.
		CopyDBClusterSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CopyDBClusterSnapshotInput is the copyDBClusterSnapshotInput argument value.
			CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CopyDBParameterGroup holds details about calls to the CopyDBParameterGroup method.
		CopyDBParameterGroup []struct {
			// CopyDBParameterGroupInput is the copyDBParameterGroupInput argument value.
			CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
		}
		// CopyDBParameterGroupRequest holds details about calls to the CopyDBParameterGroupRequest method.
		CopyDBParameterGroupRequest []struct {
			// CopyDBParameterGroupInput is the copyDBParameterGroupInput argument value.
			CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
		}
		// CopyDBParameterGroupWithContext holds details about calls to the CopyDBParameterGroupWithContext method.
		CopyDBParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CopyDBParameterGroupInput is the copyDBParameterGroupInput argument value.
			CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CopyDBSnapshot holds details about calls to the CopyDBSnapshot method.
		CopyDBSnapshot []struct {
			// CopyDBSnapshotInput is the copyDBSnapshotInput argument value.
			CopyDBSnapshotInput *rds.CopyDBSnapshotInput
		}
		// CopyDBSnapshotRequest holds details about calls to the CopyDBSnapshotRequest method.
		CopyDBSnapshotRequest []struct {
			// CopyDBSnapshotInput is the copyDBSnapshotInput argument value.
			CopyDBSnapshotInput *rds.CopyDBSnapshotInput
		}
		// CopyDBSnapshotWithContext holds details about calls to the CopyDBSnapshotWithContext method.
		CopyDBSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CopyDBSnapshotInput is the copyDBSnapshotInput argument value.
			CopyDBSnapshotInput *rds.CopyDBSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CopyOptionGroup holds details about calls to the CopyOptionGroup method.
		CopyOptionGroup []struct {
			// CopyOptionGroupInput is the copyOptionGroupInput argument value.
			CopyOptionGroupInput *rds.CopyOptionGroupInput
		}
		// CopyOptionGroupRequest holds details about calls to the CopyOptionGroupRequest method.
		CopyOptionGroupRequest []struct {
			// CopyOptionGroupInput is the copyOptionGroupInput argument value.
			CopyOptionGroupInput *rds.CopyOptionGroupInput
		}
		// CopyOptionGroupWithContext holds details about calls to the CopyOptionGroupWithContext method.
		CopyOptionGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CopyOptionGroupInput is the copyOptionGroupInput argument value.
			CopyOptionGroupInput *rds.CopyOptionGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateCustomDBEngineVersion holds details about calls to the CreateCustomDBEngineVersion method.
		CreateCustomDBEngineVersion []struct {
			// CreateCustomDBEngineVersionInput is the createCustomDBEngineVersionInput argument value.
			CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
		}
		// CreateCustomDBEngineVersionRequest holds details about calls to the CreateCustomDBEngineVersionRequest method.
		CreateCustomDBEngineVersionRequest []struct {
			// CreateCustomDBEngineVersionInput is the createCustomDBEngineVersionInput argument value.
			CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
		}
		// CreateCustomDBEngineVersionWithContext holds details about calls to the CreateCustomDBEngineVersionWithContext method.
		CreateCustomDBEngineVersionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateCustomDBEngineVersionInput is the createCustomDBEngineVersionInput argument value.
			CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBCluster holds details about calls to the CreateDBCluster method.
		CreateDBCluster []struct {
			// CreateDBClusterInput is the createDBClusterInput argument value.
			CreateDBClusterInput *rds.CreateDBClusterInput
		}
		// CreateDBClusterEndpoint holds details about calls to the CreateDBClusterEndpoint method.
		CreateDBClusterEndpoint []struct {
			// CreateDBClusterEndpointInput is the createDBClusterEndpointInput argument value.
			CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
		}
		// CreateDBClusterEndpointRequest holds details about calls to the CreateDBClusterEndpointRequest method.
		CreateDBClusterEndpointRequest []struct {
			// CreateDBClusterEndpointInput is the createDBClusterEndpointInput argument value.
			CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
		}
		// CreateDBClusterEndpointWithContext holds details about calls to the CreateDBClusterEndpointWithContext method.
		CreateDBClusterEndpointWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBClusterEndpointInput is the createDBClusterEndpointInput argument value.
			CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBClusterParameterGroup holds details about calls to the CreateDBClusterParameterGroup method.
		CreateDBClusterParameterGroup []struct {
			// CreateDBClusterParameterGroupInput is the createDBClusterParameterGroupInput argument value.
			CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
		}
		// CreateDBClusterParameterGroupRequest holds details about calls to the CreateDBClusterParameterGroupRequest method.
		CreateDBClusterParameterGroupRequest []struct {
			// CreateDBClusterParameterGroupInput is the createDBClusterParameterGroupInput argument value.
			CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
		}
		// CreateDBClusterParameterGroupWithContext holds details about calls to the CreateDBClusterParameterGroupWithContext method.
		CreateDBClusterParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBClusterParameterGroupInput is the createDBClusterParameterGroupInput argument value.
			CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBClusterRequest holds details about calls to the CreateDBClusterRequest method.
		CreateDBClusterRequest []struct {
			// CreateDBClusterInput is the createDBClusterInput argument value.
			CreateDBClusterInput *rds.CreateDBClusterInput
		}
		// CreateDBClusterSnapshot holds details about calls to the CreateDBClusterSnapshot method.
		CreateDBClusterSnapshot []struct {
			// CreateDBClusterSnapshotInput is the createDBClusterSnapshotInput argument value.
			CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
		}
		// CreateDBClusterSnapshotRequest holds details about calls to the CreateDBClusterSnapshotRequest method.
		CreateDBClusterSnapshotRequest []struct {
			// CreateDBClusterSnapshotInput is the createDBClusterSnapshotInput argument value.
			CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
		}
		// CreateDBClusterSnapshotWithContext holds details about calls to the CreateDBClusterSnapshotWithContext method.
		CreateDBClusterSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBClusterSnapshotInput is the createDBClusterSnapshotInput argument value.
			CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBClusterWithContext holds details about calls to the CreateDBClusterWithContext method.
		CreateDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBClusterInput is the createDBClusterInput argument value.
			CreateDBClusterInput *rds.CreateDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBInstance holds details about calls to the CreateDBInstance method.
		CreateDBInstance []struct {
			// CreateDBInstanceInput is the createDBInstanceInput argument value.
			CreateDBInstanceInput *rds.CreateDBInstanceInput
		}
		// CreateDBInstanceReadReplica holds details about calls to the CreateDBInstanceReadReplica method.
		CreateDBInstanceReadReplica []struct {
			// CreateDBInstanceReadReplicaInput is the createDBInstanceReadReplicaInput argument value.
			CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
		}
		// CreateDBInstanceReadReplicaRequest holds details about calls to the CreateDBInstanceReadReplicaRequest method.
		CreateDBInstanceReadReplicaRequest []struct {
			// CreateDBInstanceReadReplicaInput is the createDBInstanceReadReplicaInput argument value.
			CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
		}
		// CreateDBInstanceReadReplicaWithContext holds details about calls to the CreateDBInstanceReadReplicaWithContext method.
		CreateDBInstanceReadReplicaWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBInstanceReadReplicaInput is the createDBInstanceReadReplicaInput argument value.
			CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBInstanceRequest holds details about calls to the CreateDBInstanceRequest method.
		CreateDBInstanceRequest []struct {
			// CreateDBInstanceInput is the createDBInstanceInput argument value.
			CreateDBInstanceInput *rds.CreateDBInstanceInput
		}
		// CreateDBInstanceWithContext holds details about calls to the CreateDBInstanceWithContext method.
		CreateDBInstanceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBInstanceInput is the createDBInstanceInput argument value.
			CreateDBInstanceInput *rds.CreateDBInstanceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBParameterGroup holds details about calls to the CreateDBParameterGroup method.
		CreateDBParameterGroup []struct {
			// CreateDBParameterGroupInput is the createDBParameterGroupInput argument value.
			CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
		}
		// CreateDBParameterGroupRequest holds details about calls to the CreateDBParameterGroupRequest method.
		CreateDBParameterGroupRequest []struct {
			// CreateDBParameterGroupInput is the createDBParameterGroupInput argument value.
			CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
		}
		// CreateDBParameterGroupWithContext holds details about calls to the CreateDBParameterGroupWithContext method.
		CreateDBParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBParameterGroupInput is the createDBParameterGroupInput argument value.
			CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBProxy holds details about calls to the CreateDBProxy method.
		CreateDBProxy []struct {
			// CreateDBProxyInput is the createDBProxyInput argument value.
			CreateDBProxyInput *rds.CreateDBProxyInput
		}
		// CreateDBProxyEndpoint holds details about calls to the CreateDBProxyEndpoint method.
		CreateDBProxyEndpoint []struct {
			// CreateDBProxyEndpointInput is the createDBProxyEndpointInput argument value.
			CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
		}
		// CreateDBProxyEndpointRequest holds details about calls to the CreateDBProxyEndpointRequest method.
		CreateDBProxyEndpointRequest []struct {
			// CreateDBProxyEndpointInput is the createDBProxyEndpointInput argument value.
			CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
		}
		// CreateDBProxyEndpointWithContext holds details about calls to the CreateDBProxyEndpointWithContext method.
		CreateDBProxyEndpointWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBProxyEndpointInput is the createDBProxyEndpointInput argument value.
			CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBProxyRequest holds details about calls to the CreateDBProxyRequest method.
		CreateDBProxyRequest []struct {
			// CreateDBProxyInput is the createDBProxyInput argument value.
			CreateDBProxyInput *rds.CreateDBProxyInput
		}
		// CreateDBProxyWithContext holds details about calls to the CreateDBProxyWithContext method.
		CreateDBProxyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBProxyInput is the createDBProxyInput argument value.
			CreateDBProxyInput *rds.CreateDBProxyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBSecurityGroup holds details about calls to the CreateDBSecurityGroup method.
		CreateDBSecurityGroup []struct {
			// CreateDBSecurityGroupInput is the createDBSecurityGroupInput argument value.
			CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
		}
		// CreateDBSecurityGroupRequest holds details about calls to the CreateDBSecurityGroupRequest method.
		CreateDBSecurityGroupRequest []struct {
			// CreateDBSecurityGroupInput is the createDBSecurityGroupInput argument value.
			CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
		}
		// CreateDBSecurityGroupWithContext holds details about calls to the CreateDBSecurityGroupWithContext method.
		CreateDBSecurityGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBSecurityGroupInput is the createDBSecurityGroupInput argument value.
			CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBSnapshot holds details about calls to the CreateDBSnapshot method.
		CreateDBSnapshot []struct {
			// CreateDBSnapshotInput is the createDBSnapshotInput argument value.
			CreateDBSnapshotInput *rds.CreateDBSnapshotInput
		}
		// CreateDBSnapshotRequest holds details about calls to the CreateDBSnapshotRequest method.
		CreateDBSnapshotRequest []struct {
			// CreateDBSnapshotInput is the createDBSnapshotInput argument value.
			CreateDBSnapshotInput *rds.CreateDBSnapshotInput
		}
		// CreateDBSnapshotWithContext holds details about calls to the CreateDBSnapshotWithContext method.
		CreateDBSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBSnapshotInput is the createDBSnapshotInput argument value.
			CreateDBSnapshotInput *rds.CreateDBSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateDBSubnetGroup holds details about calls to the CreateDBSubnetGroup method.
		CreateDBSubnetGroup []struct {
			// CreateDBSubnetGroupInput is the createDBSubnetGroupInput argument value.
			CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
		}
		// CreateDBSubnetGroupRequest holds details about calls to the CreateDBSubnetGroupRequest method.
		CreateDBSubnetGroupRequest []struct {
			// CreateDBSubnetGroupInput is the createDBSubnetGroupInput argument value.
			CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
		}
		// CreateDBSubnetGroupWithContext holds details about calls to the CreateDBSubnetGroupWithContext method.
		CreateDBSubnetGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateDBSubnetGroupInput is the createDBSubnetGroupInput argument value.
			CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateEventSubscription holds details about calls to the CreateEventSubscription method.
		CreateEventSubscription []struct {
			// CreateEventSubscriptionInput is the createEventSubscriptionInput argument value.
			CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
		}
		// CreateEventSubscriptionRequest holds details about calls to the CreateEventSubscriptionRequest method.
		CreateEventSubscriptionRequest []struct {
			// CreateEventSubscriptionInput is the createEventSubscriptionInput argument value.
			CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
		}
		// CreateEventSubscriptionWithContext holds details about calls to the CreateEventSubscriptionWithContext method.
		CreateEventSubscriptionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateEventSubscriptionInput is the createEventSubscriptionInput argument value.
			CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateGlobalCluster holds details about calls to the CreateGlobalCluster method.
		CreateGlobalCluster []struct {
			// CreateGlobalClusterInput is the createGlobalClusterInput argument value.
			CreateGlobalClusterInput *rds.CreateGlobalClusterInput
		}
		// CreateGlobalClusterRequest holds details about calls to the CreateGlobalClusterRequest method.
		CreateGlobalClusterRequest []struct {
			// CreateGlobalClusterInput is the createGlobalClusterInput argument value.
			CreateGlobalClusterInput *rds.CreateGlobalClusterInput
		}
		// CreateGlobalClusterWithContext holds details about calls to the CreateGlobalClusterWithContext method.
		CreateGlobalClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateGlobalClusterInput is the createGlobalClusterInput argument value.
			CreateGlobalClusterInput *rds.CreateGlobalClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateOptionGroup holds details about calls to the CreateOptionGroup method.
		CreateOptionGroup []struct {
			// CreateOptionGroupInput is the createOptionGroupInput argument value.
			CreateOptionGroupInput *rds.CreateOptionGroupInput
		}
		// CreateOptionGroupRequest holds details about calls to the CreateOptionGroupRequest method.
		CreateOptionGroupRequest []struct {
			// CreateOptionGroupInput is the createOptionGroupInput argument value.
			CreateOptionGroupInput *rds.CreateOptionGroupInput
		}
		// CreateOptionGroupWithContext holds details about calls to the CreateOptionGroupWithContext method.
		CreateOptionGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateOptionGroupInput is the createOptionGroupInput argument value.
			CreateOptionGroupInput *rds.CreateOptionGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteCustomDBEngineVersion holds details about calls to the DeleteCustomDBEngineVersion method.
		DeleteCustomDBEngineVersion []struct {
			// DeleteCustomDBEngineVersionInput is the deleteCustomDBEngineVersionInput argument value.
			DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
		}
		// DeleteCustomDBEngineVersionRequest holds details about calls to the DeleteCustomDBEngineVersionRequest method.
		DeleteCustomDBEngineVersionRequest []struct {
			// DeleteCustomDBEngineVersionInput is the deleteCustomDBEngineVersionInput argument value.
			DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
		}
		// DeleteCustomDBEngineVersionWithContext holds details about calls to the DeleteCustomDBEngineVersionWithContext method.
		DeleteCustomDBEngineVersionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteCustomDBEngineVersionInput is the deleteCustomDBEngineVersionInput argument value.
			DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBCluster holds details about calls to the DeleteDBCluster method.
		DeleteDBCluster []struct {
			// DeleteDBClusterInput is the deleteDBClusterInput argument value.
			DeleteDBClusterInput *rds.DeleteDBClusterInput
		}
		// DeleteDBClusterEndpoint holds details about calls to the DeleteDBClusterEndpoint method.
		DeleteDBClusterEndpoint []struct {
			// DeleteDBClusterEndpointInput is the deleteDBClusterEndpointInput argument value.
			DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
		}
		// DeleteDBClusterEndpointRequest holds details about calls to the DeleteDBClusterEndpointRequest method.
		DeleteDBClusterEndpointRequest []struct {
			// DeleteDBClusterEndpointInput is the deleteDBClusterEndpointInput argument value.
			DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
		}
		// DeleteDBClusterEndpointWithContext holds details about calls to the DeleteDBClusterEndpointWithContext method.
		DeleteDBClusterEndpointWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBClusterEndpointInput is the deleteDBClusterEndpointInput argument value.
			DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBClusterParameterGroup holds details about calls to the DeleteDBClusterParameterGroup method.
		DeleteDBClusterParameterGroup []struct {
			// DeleteDBClusterParameterGroupInput is the deleteDBClusterParameterGroupInput argument value.
			DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
		}
		// DeleteDBClusterParameterGroupRequest holds details about calls to the DeleteDBClusterParameterGroupRequest method.
		DeleteDBClusterParameterGroupRequest []struct {
			// DeleteDBClusterParameterGroupInput is the deleteDBClusterParameterGroupInput argument value.
			DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
		}
		// DeleteDBClusterParameterGroupWithContext holds details about calls to the DeleteDBClusterParameterGroupWithContext method.
		DeleteDBClusterParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBClusterParameterGroupInput is the deleteDBClusterParameterGroupInput argument value.
			DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBClusterRequest holds details about calls to the DeleteDBClusterRequest method.
		DeleteDBClusterRequest []struct {
			// DeleteDBClusterInput is the deleteDBClusterInput argument value.
			DeleteDBClusterInput *rds.DeleteDBClusterInput
		}
		// DeleteDBClusterSnapshot holds details about calls to the DeleteDBClusterSnapshot method.
		DeleteDBClusterSnapshot []struct {
			// DeleteDBClusterSnapshotInput is the deleteDBClusterSnapshotInput argument value.
			DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
		}
		// DeleteDBClusterSnapshotRequest holds details about calls to the DeleteDBClusterSnapshotRequest method.
		DeleteDBClusterSnapshotRequest []struct {
			// DeleteDBClusterSnapshotInput is the deleteDBClusterSnapshotInput argument value.
			DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
		}
		// DeleteDBClusterSnapshotWithContext holds details about calls to the DeleteDBClusterSnapshotWithContext method.
		DeleteDBClusterSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBClusterSnapshotInput is the deleteDBClusterSnapshotInput argument value.
			DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBClusterWithContext holds details about calls to the DeleteDBClusterWithContext method.
		DeleteDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBClusterInput is the deleteDBClusterInput argument value.
			DeleteDBClusterInput *rds.DeleteDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBInstance holds details about calls to the DeleteDBInstance method.
		DeleteDBInstance []struct {
			// DeleteDBInstanceInput is the deleteDBInstanceInput argument value.
			DeleteDBInstanceInput *rds.DeleteDBInstanceInput
		}
		// DeleteDBInstanceAutomatedBackup holds details about calls to the DeleteDBInstanceAutomatedBackup method.
		DeleteDBInstanceAutomatedBackup []struct {
			// DeleteDBInstanceAutomatedBackupInput is the deleteDBInstanceAutomatedBackupInput argument value.
			DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
		}
		// DeleteDBInstanceAutomatedBackupRequest holds details about calls to the DeleteDBInstanceAutomatedBackupRequest method.
		DeleteDBInstanceAutomatedBackupRequest []struct {
			// DeleteDBInstanceAutomatedBackupInput is the deleteDBInstanceAutomatedBackupInput argument value.
			DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
		}
		// DeleteDBInstanceAutomatedBackupWithContext holds details about calls to the DeleteDBInstanceAutomatedBackupWithContext method.
		DeleteDBInstanceAutomatedBackupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBInstanceAutomatedBackupInput is the deleteDBInstanceAutomatedBackupInput argument value.
			DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBInstanceRequest holds details about calls to the DeleteDBInstanceRequest method.
		DeleteDBInstanceRequest []struct {
			// DeleteDBInstanceInput is the deleteDBInstanceInput argument value.
			DeleteDBInstanceInput *rds.DeleteDBInstanceInput
		}
		// DeleteDBInstanceWithContext holds details about calls to the DeleteDBInstanceWithContext method.
		DeleteDBInstanceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBInstanceInput is the deleteDBInstanceInput argument value.
			DeleteDBInstanceInput *rds.DeleteDBInstanceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBParameterGroup holds details about calls to the DeleteDBParameterGroup method.
		DeleteDBParameterGroup []struct {
			// DeleteDBParameterGroupInput is the deleteDBParameterGroupInput argument value.
			DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
		}
		// DeleteDBParameterGroupRequest holds details about calls to the DeleteDBParameterGroupRequest method.
		DeleteDBParameterGroupRequest []struct {
			// DeleteDBParameterGroupInput is the deleteDBParameterGroupInput argument value.
			DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
		}
		// DeleteDBParameterGroupWithContext holds details about calls to the DeleteDBParameterGroupWithContext method.
		DeleteDBParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBParameterGroupInput is the deleteDBParameterGroupInput argument value.
			DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBProxy holds details about calls to the DeleteDBProxy method.
		DeleteDBProxy []struct {
			// DeleteDBProxyInput is the deleteDBProxyInput argument value.
			DeleteDBProxyInput *rds.DeleteDBProxyInput
		}
		// DeleteDBProxyEndpoint holds details about calls to the DeleteDBProxyEndpoint method.
		DeleteDBProxyEndpoint []struct {
			// DeleteDBProxyEndpointInput is the deleteDBProxyEndpointInput argument value.
			DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
		}
		// DeleteDBProxyEndpointRequest holds details about calls to the DeleteDBProxyEndpointRequest method.
		DeleteDBProxyEndpointRequest []struct {
			// DeleteDBProxyEndpointInput is the deleteDBProxyEndpointInput argument value.
			DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
		}
		// DeleteDBProxyEndpointWithContext holds details about calls to the DeleteDBProxyEndpointWithContext method.
		DeleteDBProxyEndpointWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBProxyEndpointInput is the deleteDBProxyEndpointInput argument value.
			DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBProxyRequest holds details about calls to the DeleteDBProxyRequest method.
		DeleteDBProxyRequest []struct {
			// DeleteDBProxyInput is the deleteDBProxyInput argument value.
			DeleteDBProxyInput *rds.DeleteDBProxyInput
		}
		// DeleteDBProxyWithContext holds details about calls to the DeleteDBProxyWithContext method.
		DeleteDBProxyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBProxyInput is the deleteDBProxyInput argument value.
			DeleteDBProxyInput *rds.DeleteDBProxyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBSecurityGroup holds details about calls to the DeleteDBSecurityGroup method.
		DeleteDBSecurityGroup []struct {
			// DeleteDBSecurityGroupInput is the deleteDBSecurityGroupInput argument value.
			DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
		}
		// DeleteDBSecurityGroupRequest holds details about calls to the DeleteDBSecurityGroupRequest method.
		DeleteDBSecurityGroupRequest []struct {
			// DeleteDBSecurityGroupInput is the deleteDBSecurityGroupInput argument value.
			DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
		}
		// DeleteDBSecurityGroupWithContext holds details about calls to the DeleteDBSecurityGroupWithContext method.
		DeleteDBSecurityGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBSecurityGroupInput is the deleteDBSecurityGroupInput argument value.
			DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBSnapshot holds details about calls to the DeleteDBSnapshot method.
		DeleteDBSnapshot []struct {
			// DeleteDBSnapshotInput is the deleteDBSnapshotInput argument value.
			DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
		}
		// DeleteDBSnapshotRequest holds details about calls to the DeleteDBSnapshotRequest method.
		DeleteDBSnapshotRequest []struct {
			// DeleteDBSnapshotInput is the deleteDBSnapshotInput argument value.
			DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
		}
		// DeleteDBSnapshotWithContext holds details about calls to the DeleteDBSnapshotWithContext method.
		DeleteDBSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBSnapshotInput is the deleteDBSnapshotInput argument value.
			DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteDBSubnetGroup holds details about calls to the DeleteDBSubnetGroup method.
		DeleteDBSubnetGroup []struct {
			// DeleteDBSubnetGroupInput is the deleteDBSubnetGroupInput argument value.
			DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
		}
		// DeleteDBSubnetGroupRequest holds details about calls to the DeleteDBSubnetGroupRequest method.
		DeleteDBSubnetGroupRequest []struct {
			// DeleteDBSubnetGroupInput is the deleteDBSubnetGroupInput argument value.
			DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
		}
		// DeleteDBSubnetGroupWithContext holds details about calls to the DeleteDBSubnetGroupWithContext method.
		DeleteDBSubnetGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteDBSubnetGroupInput is the deleteDBSubnetGroupInput argument value.
			DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteEventSubscription holds details about calls to the DeleteEventSubscription method.
		DeleteEventSubscription []struct {
			// DeleteEventSubscriptionInput is the deleteEventSubscriptionInput argument value.
			DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
		}
		// DeleteEventSubscriptionRequest holds details about calls to the DeleteEventSubscriptionRequest method.
		DeleteEventSubscriptionRequest []struct {
			// DeleteEventSubscriptionInput is the deleteEventSubscriptionInput argument value.
			DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
		}
		// DeleteEventSubscriptionWithContext holds details about calls to the DeleteEventSubscriptionWithContext method.
		DeleteEventSubscriptionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteEventSubscriptionInput is the deleteEventSubscriptionInput argument value.
			DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteGlobalCluster holds details about calls to the DeleteGlobalCluster method.
		DeleteGlobalCluster []struct {
			// DeleteGlobalClusterInput is the deleteGlobalClusterInput argument value.
			DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
		}
		// DeleteGlobalClusterRequest holds details about calls to the DeleteGlobalClusterRequest method.
		DeleteGlobalClusterRequest []struct {
			// DeleteGlobalClusterInput is the deleteGlobalClusterInput argument value.
			DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
		}
		// DeleteGlobalClusterWithContext holds details about calls to the DeleteGlobalClusterWithContext method.
		DeleteGlobalClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteGlobalClusterInput is the deleteGlobalClusterInput argument value.
			DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteOptionGroup holds details about calls to the DeleteOptionGroup method.
		DeleteOptionGroup []struct {
			// DeleteOptionGroupInput is the deleteOptionGroupInput argument value.
			DeleteOptionGroupInput *rds.DeleteOptionGroupInput
		}
		// DeleteOptionGroupRequest holds details about calls to the DeleteOptionGroupRequest method.
		DeleteOptionGroupRequest []struct {
			// DeleteOptionGroupInput is the deleteOptionGroupInput argument value.
			DeleteOptionGroupInput *rds.DeleteOptionGroupInput
		}
		// DeleteOptionGroupWithContext holds details about calls to the DeleteOptionGroupWithContext method.
		DeleteOptionGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteOptionGroupInput is the deleteOptionGroupInput argument value.
			DeleteOptionGroupInput *rds.DeleteOptionGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeregisterDBProxyTargets holds details about calls to the DeregisterDBProxyTargets method.
		DeregisterDBProxyTargets []struct {
			// DeregisterDBProxyTargetsInput is the deregisterDBProxyTargetsInput argument value.
			DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
		}
		// DeregisterDBProxyTargetsRequest holds details about calls to the DeregisterDBProxyTargetsRequest method.
		DeregisterDBProxyTargetsRequest []struct {
			// DeregisterDBProxyTargetsInput is the deregisterDBProxyTargetsInput argument value.
			DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
		}
		// DeregisterDBProxyTargetsWithContext holds details about calls to the DeregisterDBProxyTargetsWithContext method.
		DeregisterDBProxyTargetsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeregisterDBProxyTargetsInput is the deregisterDBProxyTargetsInput argument value.
			DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeAccountAttributes holds details about calls to the DescribeAccountAttributes method.
		DescribeAccountAttributes []struct {
			// DescribeAccountAttributesInput is the describeAccountAttributesInput argument value.
			DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
		}
		// DescribeAccountAttributesRequest holds details about calls to the DescribeAccountAttributesRequest method.
		DescribeAccountAttributesRequest []struct {
			// DescribeAccountAttributesInput is the describeAccountAttributesInput argument value.
			DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
		}
		// DescribeAccountAttributesWithContext holds details about calls to the DescribeAccountAttributesWithContext method.
		DescribeAccountAttributesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeAccountAttributesInput is the describeAccountAttributesInput argument value.
			DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCertificates holds details about calls to the DescribeCertificates method.
		DescribeCertificates []struct {
			// DescribeCertificatesInput is the describeCertificatesInput argument value.
			DescribeCertificatesInput *rds.DescribeCertificatesInput
		}
		// DescribeCertificatesPages holds details about calls to the DescribeCertificatesPages method.
		DescribeCertificatesPages []struct {
			// DescribeCertificatesInput is the describeCertificatesInput argument value.
			DescribeCertificatesInput *rds.DescribeCertificatesInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeCertificatesOutput, bool) bool
		}
		// DescribeCertificatesPagesWithContext holds details about calls to the DescribeCertificatesPagesWithContext method.
		DescribeCertificatesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCertificatesInput is the describeCertificatesInput argument value.
			DescribeCertificatesInput *rds.DescribeCertificatesInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeCertificatesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCertificatesRequest holds details about calls to the DescribeCertificatesRequest method.
		DescribeCertificatesRequest []struct {
			// DescribeCertificatesInput is the describeCertificatesInput argument value.
			DescribeCertificatesInput *rds.DescribeCertificatesInput
		}
		// DescribeCertificatesWithContext holds details about calls to the DescribeCertificatesWithContext method.
		DescribeCertificatesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCertificatesInput is the describeCertificatesInput argument value.
			DescribeCertificatesInput *rds.DescribeCertificatesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterBacktracks holds details about calls to the DescribeDBClusterBacktracks method.
		DescribeDBClusterBacktracks []struct {
			// DescribeDBClusterBacktracksInput is the describeDBClusterBacktracksInput argument value.
			DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
		}
		// DescribeDBClusterBacktracksPages holds details about calls to the DescribeDBClusterBacktracksPages method.
		DescribeDBClusterBacktracksPages []struct {
			// DescribeDBClusterBacktracksInput is the describeDBClusterBacktracksInput argument value.
			DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
		}
		// DescribeDBClusterBacktracksPagesWithContext holds details about calls to the DescribeDBClusterBacktracksPagesWithContext method.
		DescribeDBClusterBacktracksPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterBacktracksInput is the describeDBClusterBacktracksInput argument value.
			DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterBacktracksRequest holds details about calls to the DescribeDBClusterBacktracksRequest method.
		DescribeDBClusterBacktracksRequest []struct {
			// DescribeDBClusterBacktracksInput is the describeDBClusterBacktracksInput argument value.
			DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
		}
		// DescribeDBClusterBacktracksWithContext holds details about calls to the DescribeDBClusterBacktracksWithContext method.
		DescribeDBClusterBacktracksWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterBacktracksInput is the describeDBClusterBacktracksInput argument value.
			DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterEndpoints holds details about calls to the DescribeDBClusterEndpoints method.
		DescribeDBClusterEndpoints []struct {
			// DescribeDBClusterEndpointsInput is the describeDBClusterEndpointsInput argument value.
			DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
		}
		// DescribeDBClusterEndpointsPages holds details about calls to the DescribeDBClusterEndpointsPages method.
		DescribeDBClusterEndpointsPages []struct {
			// DescribeDBClusterEndpointsInput is the describeDBClusterEndpointsInput argument value.
			DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
		}
		// DescribeDBClusterEndpointsPagesWithContext holds details about calls to the DescribeDBClusterEndpointsPagesWithContext method.
		DescribeDBClusterEndpointsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterEndpointsInput is the describeDBClusterEndpointsInput argument value.
			DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterEndpointsRequest holds details about calls to the DescribeDBClusterEndpointsRequest method.
		DescribeDBClusterEndpointsRequest []struct {
			// DescribeDBClusterEndpointsInput is the describeDBClusterEndpointsInput argument value.
			DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
		}
		// DescribeDBClusterEndpointsWithContext holds details about calls to the DescribeDBClusterEndpointsWithContext method.
		DescribeDBClusterEndpointsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterEndpointsInput is the describeDBClusterEndpointsInput argument value.
			DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterParameterGroups holds details about calls to the DescribeDBClusterParameterGroups method.
		DescribeDBClusterParameterGroups []struct {
			// DescribeDBClusterParameterGroupsInput is the describeDBClusterParameterGroupsInput argument value.
			DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
		}
		// DescribeDBClusterParameterGroupsPages holds details about calls to the DescribeDBClusterParameterGroupsPages method.
		DescribeDBClusterParameterGroupsPages []struct {
			// DescribeDBClusterParameterGroupsInput is the describeDBClusterParameterGroupsInput argument value.
			DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
		}
		// DescribeDBClusterParameterGroupsPagesWithContext holds details about calls to the DescribeDBClusterParameterGroupsPagesWithContext method.
		DescribeDBClusterParameterGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterParameterGroupsInput is the describeDBClusterParameterGroupsInput argument value.
			DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterParameterGroupsRequest holds details about calls to the DescribeDBClusterParameterGroupsRequest method.
		DescribeDBClusterParameterGroupsRequest []struct {
			// DescribeDBClusterParameterGroupsInput is the describeDBClusterParameterGroupsInput argument value.
			DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
		}
		// DescribeDBClusterParameterGroupsWithContext holds details about calls to the DescribeDBClusterParameterGroupsWithContext method.
		DescribeDBClusterParameterGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterParameterGroupsInput is the describeDBClusterParameterGroupsInput argument value.
			DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterParameters holds details about calls to the DescribeDBClusterParameters method.
		DescribeDBClusterParameters []struct {
			// DescribeDBClusterParametersInput is the describeDBClusterParametersInput argument value.
			DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
		}
		// DescribeDBClusterParametersPages holds details about calls to the DescribeDBClusterParametersPages method.
		DescribeDBClusterParametersPages []struct {
			// DescribeDBClusterParametersInput is the describeDBClusterParametersInput argument value.
			DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClusterParametersOutput, bool) bool
		}
		// DescribeDBClusterParametersPagesWithContext holds details about calls to the DescribeDBClusterParametersPagesWithContext method.
		DescribeDBClusterParametersPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterParametersInput is the describeDBClusterParametersInput argument value.
			DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClusterParametersOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterParametersRequest holds details about calls to the DescribeDBClusterParametersRequest method.
		DescribeDBClusterParametersRequest []struct {
			// DescribeDBClusterParametersInput is the describeDBClusterParametersInput argument value.
			DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
		}
		// DescribeDBClusterParametersWithContext holds details about calls to the DescribeDBClusterParametersWithContext method.
		DescribeDBClusterParametersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterParametersInput is the describeDBClusterParametersInput argument value.
			DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterSnapshotAttributes holds details about calls to the DescribeDBClusterSnapshotAttributes method.
		DescribeDBClusterSnapshotAttributes []struct {
			// DescribeDBClusterSnapshotAttributesInput is the describeDBClusterSnapshotAttributesInput argument value.
			DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
		}
		// DescribeDBClusterSnapshotAttributesRequest holds details about calls to the DescribeDBClusterSnapshotAttributesRequest method.
		DescribeDBClusterSnapshotAttributesRequest []struct {
			// DescribeDBClusterSnapshotAttributesInput is the describeDBClusterSnapshotAttributesInput argument value.
			DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
		}
		// DescribeDBClusterSnapshotAttributesWithContext holds details about calls to the DescribeDBClusterSnapshotAttributesWithContext method.
		DescribeDBClusterSnapshotAttributesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterSnapshotAttributesInput is the describeDBClusterSnapshotAttributesInput argument value.
			DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterSnapshots holds details about calls to the DescribeDBClusterSnapshots method.
		DescribeDBClusterSnapshots []struct {
			// DescribeDBClusterSnapshotsInput is the describeDBClusterSnapshotsInput argument value.
			DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		}
		// DescribeDBClusterSnapshotsPages holds details about calls to the DescribeDBClusterSnapshotsPages method.
		DescribeDBClusterSnapshotsPages []struct {
			// DescribeDBClusterSnapshotsInput is the describeDBClusterSnapshotsInput argument value.
			DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
		}
		// DescribeDBClusterSnapshotsPagesWithContext holds details about calls to the DescribeDBClusterSnapshotsPagesWithContext method.
		DescribeDBClusterSnapshotsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterSnapshotsInput is the describeDBClusterSnapshotsInput argument value.
			DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusterSnapshotsRequest holds details about calls to the DescribeDBClusterSnapshotsRequest method.
		DescribeDBClusterSnapshotsRequest []struct {
			// DescribeDBClusterSnapshotsInput is the describeDBClusterSnapshotsInput argument value.
			DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		}
		// DescribeDBClusterSnapshotsWithContext holds details about calls to the DescribeDBClusterSnapshotsWithContext method.
		DescribeDBClusterSnapshotsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterSnapshotsInput is the describeDBClusterSnapshotsInput argument value.
			DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClusters holds details about calls to the DescribeDBClusters method.
		DescribeDBClusters []struct {
			// DescribeDBClustersInput is the describeDBClustersInput argument value.
			DescribeDBClustersInput *rds.DescribeDBClustersInput
		}
		// DescribeDBClustersPages holds details about calls to the DescribeDBClustersPages method.
		DescribeDBClustersPages []struct {
			// DescribeDBClustersInput is the describeDBClustersInput argument value.
			DescribeDBClustersInput *rds.DescribeDBClustersInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClustersOutput, bool) bool
		}
		// DescribeDBClustersPagesWithContext holds details about calls to the DescribeDBClustersPagesWithContext method.
		DescribeDBClustersPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClustersInput is the describeDBClustersInput argument value.
			DescribeDBClustersInput *rds.DescribeDBClustersInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBClustersOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBClustersRequest holds details about calls to the DescribeDBClustersRequest method.
		DescribeDBClustersRequest []struct {
			// DescribeDBClustersInput is the describeDBClustersInput argument value.
			DescribeDBClustersInput *rds.DescribeDBClustersInput
		}
		// DescribeDBClustersWithContext holds details about calls to the DescribeDBClustersWithContext method.
		DescribeDBClustersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClustersInput is the describeDBClustersInput argument value.
			DescribeDBClustersInput *rds.DescribeDBClustersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBEngineVersions holds details about calls to the DescribeDBEngineVersions method.
		DescribeDBEngineVersions []struct {
			// DescribeDBEngineVersionsInput is the describeDBEngineVersionsInput argument value.
			DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
		}
		// DescribeDBEngineVersionsPages holds details about calls to the DescribeDBEngineVersionsPages method.
		DescribeDBEngineVersionsPages []struct {
			// DescribeDBEngineVersionsInput is the describeDBEngineVersionsInput argument value.
			DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBEngineVersionsOutput, bool) bool
		}
		// DescribeDBEngineVersionsPagesWithContext holds details about calls to the DescribeDBEngineVersionsPagesWithContext method.
		DescribeDBEngineVersionsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBEngineVersionsInput is the describeDBEngineVersionsInput argument value.
			DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBEngineVersionsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBEngineVersionsRequest holds details about calls to the DescribeDBEngineVersionsRequest method.
		DescribeDBEngineVersionsRequest []struct {
			// DescribeDBEngineVersionsInput is the describeDBEngineVersionsInput argument value.
			DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
		}
		// DescribeDBEngineVersionsWithContext holds details about calls to the DescribeDBEngineVersionsWithContext method.
		DescribeDBEngineVersionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBEngineVersionsInput is the describeDBEngineVersionsInput argument value.
			DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBInstanceAutomatedBackups holds details about calls to the DescribeDBInstanceAutomatedBackups method.
		DescribeDBInstanceAutomatedBackups []struct {
			// DescribeDBInstanceAutomatedBackupsInput is the describeDBInstanceAutomatedBackupsInput argument value.
			DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
		}
		// DescribeDBInstanceAutomatedBackupsPages holds details about calls to the DescribeDBInstanceAutomatedBackupsPages method.
		DescribeDBInstanceAutomatedBackupsPages []struct {
			// DescribeDBInstanceAutomatedBackupsInput is the describeDBInstanceAutomatedBackupsInput argument value.
			DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
		}
		// DescribeDBInstanceAutomatedBackupsPagesWithContext holds details about calls to the DescribeDBInstanceAutomatedBackupsPagesWithContext method.
		DescribeDBInstanceAutomatedBackupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBInstanceAutomatedBackupsInput is the describeDBInstanceAutomatedBackupsInput argument value.
			DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBInstanceAutomatedBackupsRequest holds details about calls to the DescribeDBInstanceAutomatedBackupsRequest method.
		DescribeDBInstanceAutomatedBackupsRequest []struct {
			// DescribeDBInstanceAutomatedBackupsInput is the describeDBInstanceAutomatedBackupsInput argument value.
			DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
		}
		// DescribeDBInstanceAutomatedBackupsWithContext holds details about calls to the DescribeDBInstanceAutomatedBackupsWithContext method.
		DescribeDBInstanceAutomatedBackupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBInstanceAutomatedBackupsInput is the describeDBInstanceAutomatedBackupsInput argument value.
			DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBInstances holds details about calls to the DescribeDBInstances method.
		DescribeDBInstances []struct {
			// DescribeDBInstancesInput is the describeDBInstancesInput argument value.
			DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		}
		// DescribeDBInstancesPages holds details about calls to the DescribeDBInstancesPages method.
		DescribeDBInstancesPages []struct {
			// DescribeDBInstancesInput is the describeDBInstancesInput argument value.
			DescribeDBInstancesInput *rds.DescribeDBInstancesInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBInstancesOutput, bool) bool
		}
		// DescribeDBInstancesPagesWithContext holds details about calls to the DescribeDBInstancesPagesWithContext method.
		DescribeDBInstancesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBInstancesInput is the describeDBInstancesInput argument value.
			DescribeDBInstancesInput *rds.DescribeDBInstancesInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBInstancesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBInstancesRequest holds details about calls to the DescribeDBInstancesRequest method.
		DescribeDBInstancesRequest []struct {
			// DescribeDBInstancesInput is the describeDBInstancesInput argument value.
			DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		}
		// DescribeDBInstancesWithContext holds details about calls to the DescribeDBInstancesWithContext method.
		DescribeDBInstancesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBInstancesInput is the describeDBInstancesInput argument value.
			DescribeDBInstancesInput *rds.DescribeDBInstancesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBLogFiles holds details about calls to the DescribeDBLogFiles method.
		DescribeDBLogFiles []struct {
			// DescribeDBLogFilesInput is the describeDBLogFilesInput argument value.
			DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
		}
		// DescribeDBLogFilesPages holds details about calls to the DescribeDBLogFilesPages method.
		DescribeDBLogFilesPages []struct {
			// DescribeDBLogFilesInput is the describeDBLogFilesInput argument value.
			DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBLogFilesOutput, bool) bool
		}
		// DescribeDBLogFilesPagesWithContext holds details about calls to the DescribeDBLogFilesPagesWithContext method.
		DescribeDBLogFilesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBLogFilesInput is the describeDBLogFilesInput argument value.
			DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBLogFilesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBLogFilesRequest holds details about calls to the DescribeDBLogFilesRequest method.
		DescribeDBLogFilesRequest []struct {
			// DescribeDBLogFilesInput is the describeDBLogFilesInput argument value.
			DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
		}
		// DescribeDBLogFilesWithContext holds details about calls to the DescribeDBLogFilesWithContext method.
		DescribeDBLogFilesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBLogFilesInput is the describeDBLogFilesInput argument value.
			DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBParameterGroups holds details about calls to the DescribeDBParameterGroups method.
		DescribeDBParameterGroups []struct {
			// DescribeDBParameterGroupsInput is the describeDBParameterGroupsInput argument value.
			DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
		}
		// DescribeDBParameterGroupsPages holds details about calls to the DescribeDBParameterGroupsPages method.
		DescribeDBParameterGroupsPages []struct {
			// DescribeDBParameterGroupsInput is the describeDBParameterGroupsInput argument value.
			DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBParameterGroupsOutput, bool) bool
		}
		// DescribeDBParameterGroupsPagesWithContext holds details about calls to the DescribeDBParameterGroupsPagesWithContext method.
		DescribeDBParameterGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBParameterGroupsInput is the describeDBParameterGroupsInput argument value.
			DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBParameterGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBParameterGroupsRequest holds details about calls to the DescribeDBParameterGroupsRequest method.
		DescribeDBParameterGroupsRequest []struct {
			// DescribeDBParameterGroupsInput is the describeDBParameterGroupsInput argument value.
			DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
		}
		// DescribeDBParameterGroupsWithContext holds details about calls to the DescribeDBParameterGroupsWithContext method.
		DescribeDBParameterGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBParameterGroupsInput is the describeDBParameterGroupsInput argument value.
			DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBParameters holds details about calls to the DescribeDBParameters method.
		DescribeDBParameters []struct {
			// DescribeDBParametersInput is the describeDBParametersInput argument value.
			DescribeDBParametersInput *rds.DescribeDBParametersInput
		}
		// DescribeDBParametersPages holds details about calls to the DescribeDBParametersPages method.
		DescribeDBParametersPages []struct {
			// DescribeDBParametersInput is the describeDBParametersInput argument value.
			DescribeDBParametersInput *rds.DescribeDBParametersInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBParametersOutput, bool) bool
		}
		// DescribeDBParametersPagesWithContext holds details about calls to the DescribeDBParametersPagesWithContext method.
		DescribeDBParametersPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBParametersInput is the describeDBParametersInput argument value.
			DescribeDBParametersInput *rds.DescribeDBParametersInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBParametersOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBParametersRequest holds details about calls to the DescribeDBParametersRequest method.
		DescribeDBParametersRequest []struct {
			// DescribeDBParametersInput is the describeDBParametersInput argument value.
			DescribeDBParametersInput *rds.DescribeDBParametersInput
		}
		// DescribeDBParametersWithContext holds details about calls to the DescribeDBParametersWithContext method.
		DescribeDBParametersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBParametersInput is the describeDBParametersInput argument value.
			DescribeDBParametersInput *rds.DescribeDBParametersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBProxies holds details about calls to the DescribeDBProxies method.
		DescribeDBProxies []struct {
			// DescribeDBProxiesInput is the describeDBProxiesInput argument value.
			DescribeDBProxiesInput *rds.DescribeDBProxiesInput
		}
		// DescribeDBProxiesPages holds details about calls to the DescribeDBProxiesPages method.
		DescribeDBProxiesPages []struct {
			// DescribeDBProxiesInput is the describeDBProxiesInput argument value.
			DescribeDBProxiesInput *rds.DescribeDBProxiesInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBProxiesOutput, bool) bool
		}
		// DescribeDBProxiesPagesWithContext holds details about calls to the DescribeDBProxiesPagesWithContext method.
		DescribeDBProxiesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBProxiesInput is the describeDBProxiesInput argument value.
			DescribeDBProxiesInput *rds.DescribeDBProxiesInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBProxiesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBProxiesRequest holds details about calls to the DescribeDBProxiesRequest method.
		DescribeDBProxiesRequest []struct {
			// DescribeDBProxiesInput is the describeDBProxiesInput argument value.
			DescribeDBProxiesInput *rds.DescribeDBProxiesInput
		}
		// DescribeDBProxiesWithContext holds details about calls to the DescribeDBProxiesWithContext method.
		DescribeDBProxiesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBProxiesInput is the describeDBProxiesInput argument value.
			DescribeDBProxiesInput *rds.DescribeDBProxiesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBProxyEndpoints holds details about calls to the DescribeDBProxyEndpoints method.
		DescribeDBProxyEndpoints []struct {
			// DescribeDBProxyEndpointsInput is the describeDBProxyEndpointsInput argument value.
			DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
		}
		// DescribeDBProxyEndpointsPages holds details about calls to the DescribeDBProxyEndpointsPages method.
		DescribeDBProxyEndpointsPages []struct {
			// DescribeDBProxyEndpointsInput is the describeDBProxyEndpointsInput argument value.
			DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBProxyEndpointsOutput, bool) bool
		}
		// DescribeDBProxyEndpointsPagesWithContext holds details about calls to the DescribeDBProxyEndpointsPagesWithContext method.
		DescribeDBProxyEndpointsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBProxyEndpointsInput is the describeDBProxyEndpointsInput argument value.
			DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBProxyEndpointsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBProxyEndpointsRequest holds details about calls to the DescribeDBProxyEndpointsRequest method.
		DescribeDBProxyEndpointsRequest []struct {
			// DescribeDBProxyEndpointsInput is the describeDBProxyEndpointsInput argument value.
			DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
		}
		// DescribeDBProxyEndpointsWithContext holds details about calls to the DescribeDBProxyEndpointsWithContext method.
		DescribeDBProxyEndpointsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBProxyEndpointsInput is the describeDBProxyEndpointsInput argument value.
			DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBProxyTargetGroups holds details about calls to the DescribeDBProxyTargetGroups method.
		DescribeDBProxyTargetGroups []struct {
			// DescribeDBProxyTargetGroupsInput is the describeDBProxyTargetGroupsInput argument value.
			DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
		}
		// DescribeDBProxyTargetGroupsPages holds details about calls to the DescribeDBProxyTargetGroupsPages method.
		DescribeDBProxyTargetGroupsPages []struct {
			// DescribeDBProxyTargetGroupsInput is the describeDBProxyTargetGroupsInput argument value.
			DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
		}
		// DescribeDBProxyTargetGroupsPagesWithContext holds details about calls to the DescribeDBProxyTargetGroupsPagesWithContext method.
		DescribeDBProxyTargetGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBProxyTargetGroupsInput is the describeDBProxyTargetGroupsInput argument value.
			DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBProxyTargetGroupsRequest holds details about calls to the DescribeDBProxyTargetGroupsRequest method.
		DescribeDBProxyTargetGroupsRequest []struct {
			// DescribeDBProxyTargetGroupsInput is the describeDBProxyTargetGroupsInput argument value.
			DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
		}
		// DescribeDBProxyTargetGroupsWithContext holds details about calls to the DescribeDBProxyTargetGroupsWithContext method.
		DescribeDBProxyTargetGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBProxyTargetGroupsInput is the describeDBProxyTargetGroupsInput argument value.
			DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBProxyTargets holds details about calls to the DescribeDBProxyTargets method.
		DescribeDBProxyTargets []struct {
			// DescribeDBProxyTargetsInput is the describeDBProxyTargetsInput argument value.
			DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
		}
		// DescribeDBProxyTargetsPages holds details about calls to the DescribeDBProxyTargetsPages method.
		DescribeDBProxyTargetsPages []struct {
			// DescribeDBProxyTargetsInput is the describeDBProxyTargetsInput argument value.
			DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBProxyTargetsOutput, bool) bool
		}
		// DescribeDBProxyTargetsPagesWithContext holds details about calls to the DescribeDBProxyTargetsPagesWithContext method.
		DescribeDBProxyTargetsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBProxyTargetsInput is the describeDBProxyTargetsInput argument value.
			DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBProxyTargetsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBProxyTargetsRequest holds details about calls to the DescribeDBProxyTargetsRequest method.
		DescribeDBProxyTargetsRequest []struct {
			// DescribeDBProxyTargetsInput is the describeDBProxyTargetsInput argument value.
			DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
		}
		// DescribeDBProxyTargetsWithContext holds details about calls to the DescribeDBProxyTargetsWithContext method.
		DescribeDBProxyTargetsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBProxyTargetsInput is the describeDBProxyTargetsInput argument value.
			DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBSecurityGroups holds details about calls to the DescribeDBSecurityGroups method.
		DescribeDBSecurityGroups []struct {
			// DescribeDBSecurityGroupsInput is the describeDBSecurityGroupsInput argument value.
			DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
		}
		// DescribeDBSecurityGroupsPages holds details about calls to the DescribeDBSecurityGroupsPages method.
		DescribeDBSecurityGroupsPages []struct {
			// DescribeDBSecurityGroupsInput is the describeDBSecurityGroupsInput argument value.
			DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
		}
		// DescribeDBSecurityGroupsPagesWithContext holds details about calls to the DescribeDBSecurityGroupsPagesWithContext method.
		DescribeDBSecurityGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBSecurityGroupsInput is the describeDBSecurityGroupsInput argument value.
			DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBSecurityGroupsRequest holds details about calls to the DescribeDBSecurityGroupsRequest method.
		DescribeDBSecurityGroupsRequest []struct {
			// DescribeDBSecurityGroupsInput is the describeDBSecurityGroupsInput argument value.
			DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
		}
		// DescribeDBSecurityGroupsWithContext holds details about calls to the DescribeDBSecurityGroupsWithContext method.
		DescribeDBSecurityGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBSecurityGroupsInput is the describeDBSecurityGroupsInput argument value.
			DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBSnapshotAttributes holds details about calls to the DescribeDBSnapshotAttributes method.
		DescribeDBSnapshotAttributes []struct {
			// DescribeDBSnapshotAttributesInput is the describeDBSnapshotAttributesInput argument value.
			DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
		}
		// DescribeDBSnapshotAttributesRequest holds details about calls to the DescribeDBSnapshotAttributesRequest method.
		DescribeDBSnapshotAttributesRequest []struct {
			// DescribeDBSnapshotAttributesInput is the describeDBSnapshotAttributesInput argument value.
			DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
		}
		// DescribeDBSnapshotAttributesWithContext holds details about calls to the DescribeDBSnapshotAttributesWithContext method.
		DescribeDBSnapshotAttributesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBSnapshotAttributesInput is the describeDBSnapshotAttributesInput argument value.
			DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBSnapshots holds details about calls to the DescribeDBSnapshots method.
		DescribeDBSnapshots []struct {
			// DescribeDBSnapshotsInput is the describeDBSnapshotsInput argument value.
			DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		}
		// DescribeDBSnapshotsPages holds details about calls to the DescribeDBSnapshotsPages method.
		DescribeDBSnapshotsPages []struct {
			// DescribeDBSnapshotsInput is the describeDBSnapshotsInput argument value.
			DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBSnapshotsOutput, bool) bool
		}
		// DescribeDBSnapshotsPagesWithContext holds details about calls to the DescribeDBSnapshotsPagesWithContext method.
		DescribeDBSnapshotsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBSnapshotsInput is the describeDBSnapshotsInput argument value.
			DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBSnapshotsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBSnapshotsRequest holds details about calls to the DescribeDBSnapshotsRequest method.
		DescribeDBSnapshotsRequest []struct {
			// DescribeDBSnapshotsInput is the describeDBSnapshotsInput argument value.
			DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		}
		// DescribeDBSnapshotsWithContext holds details about calls to the DescribeDBSnapshotsWithContext method.
		DescribeDBSnapshotsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBSnapshotsInput is the describeDBSnapshotsInput argument value.
			DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBSubnetGroups holds details about calls to the DescribeDBSubnetGroups method.
		DescribeDBSubnetGroups []struct {
			// DescribeDBSubnetGroupsInput is the describeDBSubnetGroupsInput argument value.
			DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
		}
		// DescribeDBSubnetGroupsPages holds details about calls to the DescribeDBSubnetGroupsPages method.
		DescribeDBSubnetGroupsPages []struct {
			// DescribeDBSubnetGroupsInput is the describeDBSubnetGroupsInput argument value.
			DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
		}
		// DescribeDBSubnetGroupsPagesWithContext holds details about calls to the DescribeDBSubnetGroupsPagesWithContext method.
		DescribeDBSubnetGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBSubnetGroupsInput is the describeDBSubnetGroupsInput argument value.
			DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeDBSubnetGroupsRequest holds details about calls to the DescribeDBSubnetGroupsRequest method.
		DescribeDBSubnetGroupsRequest []struct {
			// DescribeDBSubnetGroupsInput is the describeDBSubnetGroupsInput argument value.
			DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
		}
		// DescribeDBSubnetGroupsWithContext holds details about calls to the DescribeDBSubnetGroupsWithContext method.
		DescribeDBSubnetGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBSubnetGroupsInput is the describeDBSubnetGroupsInput argument value.
			DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEngineDefaultClusterParameters holds details about calls to the DescribeEngineDefaultClusterParameters method.
		DescribeEngineDefaultClusterParameters []struct {
			// DescribeEngineDefaultClusterParametersInput is the describeEngineDefaultClusterParametersInput argument value.
			DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
		}
		// DescribeEngineDefaultClusterParametersRequest holds details about calls to the DescribeEngineDefaultClusterParametersRequest method.
		DescribeEngineDefaultClusterParametersRequest []struct {
			// DescribeEngineDefaultClusterParametersInput is the describeEngineDefaultClusterParametersInput argument value.
			DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
		}
		// DescribeEngineDefaultClusterParametersWithContext holds details about calls to the DescribeEngineDefaultClusterParametersWithContext method.
		DescribeEngineDefaultClusterParametersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEngineDefaultClusterParametersInput is the describeEngineDefaultClusterParametersInput argument value.
			DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEngineDefaultParameters holds details about calls to the DescribeEngineDefaultParameters method.
		DescribeEngineDefaultParameters []struct {
			// DescribeEngineDefaultParametersInput is the describeEngineDefaultParametersInput argument value.
			DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
		}
		// DescribeEngineDefaultParametersPages holds details about calls to the DescribeEngineDefaultParametersPages method.
		DescribeEngineDefaultParametersPages []struct {
			// DescribeEngineDefaultParametersInput is the describeEngineDefaultParametersInput argument value.
			DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
		}
		// DescribeEngineDefaultParametersPagesWithContext holds details about calls to the DescribeEngineDefaultParametersPagesWithContext method.
		DescribeEngineDefaultParametersPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEngineDefaultParametersInput is the describeEngineDefaultParametersInput argument value.
			DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEngineDefaultParametersRequest holds details about calls to the DescribeEngineDefaultParametersRequest method.
		DescribeEngineDefaultParametersRequest []struct {
			// DescribeEngineDefaultParametersInput is the describeEngineDefaultParametersInput argument value.
			DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
		}
		// DescribeEngineDefaultParametersWithContext holds details about calls to the DescribeEngineDefaultParametersWithContext method.
		DescribeEngineDefaultParametersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEngineDefaultParametersInput is the describeEngineDefaultParametersInput argument value.
			DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEventCategories holds details about calls to the DescribeEventCategories method.
		DescribeEventCategories []struct {
			// DescribeEventCategoriesInput is the describeEventCategoriesInput argument value.
			DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
		}
		// DescribeEventCategoriesRequest holds details about calls to the DescribeEventCategoriesRequest method.
		DescribeEventCategoriesRequest []struct {
			// DescribeEventCategoriesInput is the describeEventCategoriesInput argument value.
			DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
		}
		// DescribeEventCategoriesWithContext holds details about calls to the DescribeEventCategoriesWithContext method.
		DescribeEventCategoriesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEventCategoriesInput is the describeEventCategoriesInput argument value.
			DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEventSubscriptions holds details about calls to the DescribeEventSubscriptions method.
		DescribeEventSubscriptions []struct {
			// DescribeEventSubscriptionsInput is the describeEventSubscriptionsInput argument value.
			DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
		}
		// DescribeEventSubscriptionsPages holds details about calls to the DescribeEventSubscriptionsPages method.
		DescribeEventSubscriptionsPages []struct {
			// DescribeEventSubscriptionsInput is the describeEventSubscriptionsInput argument value.
			DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeEventSubscriptionsOutput, bool) bool
		}
		// DescribeEventSubscriptionsPagesWithContext holds details about calls to the DescribeEventSubscriptionsPagesWithContext method.
		DescribeEventSubscriptionsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEventSubscriptionsInput is the describeEventSubscriptionsInput argument value.
			DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeEventSubscriptionsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEventSubscriptionsRequest holds details about calls to the DescribeEventSubscriptionsRequest method.
		DescribeEventSubscriptionsRequest []struct {
			// DescribeEventSubscriptionsInput is the describeEventSubscriptionsInput argument value.
			DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
		}
		// DescribeEventSubscriptionsWithContext holds details about calls to the DescribeEventSubscriptionsWithContext method.
		DescribeEventSubscriptionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEventSubscriptionsInput is the describeEventSubscriptionsInput argument value.
			DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEvents holds details about calls to the DescribeEvents method.
		DescribeEvents []struct {
			// DescribeEventsInput is the describeEventsInput argument value.
			DescribeEventsInput *rds.DescribeEventsInput
		}
		// DescribeEventsPages holds details about calls to the DescribeEventsPages method.
		DescribeEventsPages []struct {
			// DescribeEventsInput is the describeEventsInput argument value.
			DescribeEventsInput *rds.DescribeEventsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeEventsOutput, bool) bool
		}
		// DescribeEventsPagesWithContext holds details about calls to the DescribeEventsPagesWithContext method.
		DescribeEventsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEventsInput is the describeEventsInput argument value.
			DescribeEventsInput *rds.DescribeEventsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeEventsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEventsRequest holds details about calls to the DescribeEventsRequest method.
		DescribeEventsRequest []struct {
			// DescribeEventsInput is the describeEventsInput argument value.
			DescribeEventsInput *rds.DescribeEventsInput
		}
		// DescribeEventsWithContext holds details about calls to the DescribeEventsWithContext method.
		DescribeEventsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEventsInput is the describeEventsInput argument value.
			DescribeEventsInput *rds.DescribeEventsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeExportTasks holds details about calls to the DescribeExportTasks method.
		DescribeExportTasks []struct {
			// DescribeExportTasksInput is the describeExportTasksInput argument value.
			DescribeExportTasksInput *rds.DescribeExportTasksInput
		}
		// DescribeExportTasksPages holds details about calls to the DescribeExportTasksPages method.
		DescribeExportTasksPages []struct {
			// DescribeExportTasksInput is the describeExportTasksInput argument value.
			DescribeExportTasksInput *rds.DescribeExportTasksInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeExportTasksOutput, bool) bool
		}
		// DescribeExportTasksPagesWithContext holds details about calls to the DescribeExportTasksPagesWithContext method.
		DescribeExportTasksPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeExportTasksInput is the describeExportTasksInput argument value.
			DescribeExportTasksInput *rds.DescribeExportTasksInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeExportTasksOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeExportTasksRequest holds details about calls to the DescribeExportTasksRequest method.
		DescribeExportTasksRequest []struct {
			// DescribeExportTasksInput is the describeExportTasksInput argument value.
			DescribeExportTasksInput *rds.DescribeExportTasksInput
		}
		// DescribeExportTasksWithContext holds details about calls to the DescribeExportTasksWithContext method.
		DescribeExportTasksWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeExportTasksInput is the describeExportTasksInput argument value.
			DescribeExportTasksInput *rds.DescribeExportTasksInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeGlobalClusters holds details about calls to the DescribeGlobalClusters method.
		DescribeGlobalClusters []struct {
			// DescribeGlobalClustersInput is the describeGlobalClustersInput argument value.
			DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
		}
		// DescribeGlobalClustersPages holds details about calls to the DescribeGlobalClustersPages method.
		DescribeGlobalClustersPages []struct {
			// DescribeGlobalClustersInput is the describeGlobalClustersInput argument value.
			DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeGlobalClustersOutput, bool) bool
		}
		// DescribeGlobalClustersPagesWithContext holds details about calls to the DescribeGlobalClustersPagesWithContext method.
		DescribeGlobalClustersPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeGlobalClustersInput is the describeGlobalClustersInput argument value.
			DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeGlobalClustersOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeGlobalClustersRequest holds details about calls to the DescribeGlobalClustersRequest method.
		DescribeGlobalClustersRequest []struct {
			// DescribeGlobalClustersInput is the describeGlobalClustersInput argument value.
			DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
		}
		// DescribeGlobalClustersWithContext holds details about calls to the DescribeGlobalClustersWithContext method.
		DescribeGlobalClustersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeGlobalClustersInput is the describeGlobalClustersInput argument value.
			DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeOptionGroupOptions holds details about calls to the DescribeOptionGroupOptions method.
		DescribeOptionGroupOptions []struct {
			// DescribeOptionGroupOptionsInput is the describeOptionGroupOptionsInput argument value.
			DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
		}
		// DescribeOptionGroupOptionsPages holds details about calls to the DescribeOptionGroupOptionsPages method.
		DescribeOptionGroupOptionsPages []struct {
			// DescribeOptionGroupOptionsInput is the describeOptionGroupOptionsInput argument value.
			DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
		}
		// DescribeOptionGroupOptionsPagesWithContext holds details about calls to the DescribeOptionGroupOptionsPagesWithContext method.
		DescribeOptionGroupOptionsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeOptionGroupOptionsInput is the describeOptionGroupOptionsInput argument value.
			DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeOptionGroupOptionsRequest holds details about calls to the DescribeOptionGroupOptionsRequest method.
		DescribeOptionGroupOptionsRequest []struct {
			// DescribeOptionGroupOptionsInput is the describeOptionGroupOptionsInput argument value.
			DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
		}
		// DescribeOptionGroupOptionsWithContext holds details about calls to the DescribeOptionGroupOptionsWithContext method.
		DescribeOptionGroupOptionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeOptionGroupOptionsInput is the describeOptionGroupOptionsInput argument value.
			DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeOptionGroups holds details about calls to the DescribeOptionGroups method.
		DescribeOptionGroups []struct {
			// DescribeOptionGroupsInput is the describeOptionGroupsInput argument value.
			DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
		}
		// DescribeOptionGroupsPages holds details about calls to the DescribeOptionGroupsPages method.
		DescribeOptionGroupsPages []struct {
			// DescribeOptionGroupsInput is the describeOptionGroupsInput argument value.
			DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeOptionGroupsOutput, bool) bool
		}
		// DescribeOptionGroupsPagesWithContext holds details about calls to the DescribeOptionGroupsPagesWithContext method.
		DescribeOptionGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeOptionGroupsInput is the describeOptionGroupsInput argument value.
			DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeOptionGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeOptionGroupsRequest holds details about calls to the DescribeOptionGroupsRequest method.
		DescribeOptionGroupsRequest []struct {
			// DescribeOptionGroupsInput is the describeOptionGroupsInput argument value.
			DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
		}
		// DescribeOptionGroupsWithContext holds details about calls to the DescribeOptionGroupsWithContext method.
		DescribeOptionGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeOptionGroupsInput is the describeOptionGroupsInput argument value.
			DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeOrderableDBInstanceOptions holds details about calls to the DescribeOrderableDBInstanceOptions method.
		DescribeOrderableDBInstanceOptions []struct {
			// DescribeOrderableDBInstanceOptionsInput is the describeOrderableDBInstanceOptionsInput argument value.
			DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
		}
		// DescribeOrderableDBInstanceOptionsPages holds details about calls to the DescribeOrderableDBInstanceOptionsPages method.
		DescribeOrderableDBInstanceOptionsPages []struct {
			// DescribeOrderableDBInstanceOptionsInput is the describeOrderableDBInstanceOptionsInput argument value.
			DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
		}
		// DescribeOrderableDBInstanceOptionsPagesWithContext holds details about calls to the DescribeOrderableDBInstanceOptionsPagesWithContext method.
		DescribeOrderableDBInstanceOptionsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeOrderableDBInstanceOptionsInput is the describeOrderableDBInstanceOptionsInput argument value.
			DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeOrderableDBInstanceOptionsRequest holds details about calls to the DescribeOrderableDBInstanceOptionsRequest method.
		DescribeOrderableDBInstanceOptionsRequest []struct {
			// DescribeOrderableDBInstanceOptionsInput is the describeOrderableDBInstanceOptionsInput argument value.
			DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
		}
		// DescribeOrderableDBInstanceOptionsWithContext holds details about calls to the DescribeOrderableDBInstanceOptionsWithContext method.
		DescribeOrderableDBInstanceOptionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeOrderableDBInstanceOptionsInput is the describeOrderableDBInstanceOptionsInput argument value.
			DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribePendingMaintenanceActions holds details about calls to the DescribePendingMaintenanceActions method.
		DescribePendingMaintenanceActions []struct {
			// DescribePendingMaintenanceActionsInput is the describePendingMaintenanceActionsInput argument value.
			DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
		}
		// DescribePendingMaintenanceActionsPages holds details about calls to the DescribePendingMaintenanceActionsPages method.
		DescribePendingMaintenanceActionsPages []struct {
			// DescribePendingMaintenanceActionsInput is the describePendingMaintenanceActionsInput argument value.
			DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
		}
		// DescribePendingMaintenanceActionsPagesWithContext holds details about calls to the DescribePendingMaintenanceActionsPagesWithContext method.
		DescribePendingMaintenanceActionsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribePendingMaintenanceActionsInput is the describePendingMaintenanceActionsInput argument value.
			DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribePendingMaintenanceActionsRequest holds details about calls to the DescribePendingMaintenanceActionsRequest method.
		DescribePendingMaintenanceActionsRequest []struct {
			// DescribePendingMaintenanceActionsInput is the describePendingMaintenanceActionsInput argument value.
			DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
		}
		// DescribePendingMaintenanceActionsWithContext holds details about calls to the DescribePendingMaintenanceActionsWithContext method.
		DescribePendingMaintenanceActionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribePendingMaintenanceActionsInput is the describePendingMaintenanceActionsInput argument value.
			DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeReservedDBInstances holds details about calls to the DescribeReservedDBInstances method.
		DescribeReservedDBInstances []struct {
			// DescribeReservedDBInstancesInput is the describeReservedDBInstancesInput argument value.
			DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
		}
		// DescribeReservedDBInstancesOfferings holds details about calls to the DescribeReservedDBInstancesOfferings method.
		DescribeReservedDBInstancesOfferings []struct {
			// DescribeReservedDBInstancesOfferingsInput is the describeReservedDBInstancesOfferingsInput argument value.
			DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
		}
		// DescribeReservedDBInstancesOfferingsPages holds details about calls to the DescribeReservedDBInstancesOfferingsPages method.
		DescribeReservedDBInstancesOfferingsPages []struct {
			// DescribeReservedDBInstancesOfferingsInput is the describeReservedDBInstancesOfferingsInput argument value.
			DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
		}
		// DescribeReservedDBInstancesOfferingsPagesWithContext holds details about calls to the DescribeReservedDBInstancesOfferingsPagesWithContext method.
		DescribeReservedDBInstancesOfferingsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReservedDBInstancesOfferingsInput is the describeReservedDBInstancesOfferingsInput argument value.
			DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeReservedDBInstancesOfferingsRequest holds details about calls to the DescribeReservedDBInstancesOfferingsRequest method.
		DescribeReservedDBInstancesOfferingsRequest []struct {
			// DescribeReservedDBInstancesOfferingsInput is the describeReservedDBInstancesOfferingsInput argument value.
			DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
		}
		// DescribeReservedDBInstancesOfferingsWithContext holds details about calls to the DescribeReservedDBInstancesOfferingsWithContext method.
		DescribeReservedDBInstancesOfferingsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReservedDBInstancesOfferingsInput is the describeReservedDBInstancesOfferingsInput argument value.
			DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeReservedDBInstancesPages holds details about calls to the DescribeReservedDBInstancesPages method.
		DescribeReservedDBInstancesPages []struct {
			// DescribeReservedDBInstancesInput is the describeReservedDBInstancesInput argument value.
			DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeReservedDBInstancesOutput, bool) bool
		}
		// DescribeReservedDBInstancesPagesWithContext holds details about calls to the DescribeReservedDBInstancesPagesWithContext method.
		DescribeReservedDBInstancesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReservedDBInstancesInput is the describeReservedDBInstancesInput argument value.
			DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeReservedDBInstancesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeReservedDBInstancesRequest holds details about calls to the DescribeReservedDBInstancesRequest method.
		DescribeReservedDBInstancesRequest []struct {
			// DescribeReservedDBInstancesInput is the describeReservedDBInstancesInput argument value.
			DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
		}
		// DescribeReservedDBInstancesWithContext holds details about calls to the DescribeReservedDBInstancesWithContext method.
		DescribeReservedDBInstancesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReservedDBInstancesInput is the describeReservedDBInstancesInput argument value.
			DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeSourceRegions holds details about calls to the DescribeSourceRegions method.
		DescribeSourceRegions []struct {
			// DescribeSourceRegionsInput is the describeSourceRegionsInput argument value.
			DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
		}
		// DescribeSourceRegionsPages holds details about calls to the DescribeSourceRegionsPages method.
		DescribeSourceRegionsPages []struct {
			// DescribeSourceRegionsInput is the describeSourceRegionsInput argument value.
			DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeSourceRegionsOutput, bool) bool
		}
		// DescribeSourceRegionsPagesWithContext holds details about calls to the DescribeSourceRegionsPagesWithContext method.
		DescribeSourceRegionsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeSourceRegionsInput is the describeSourceRegionsInput argument value.
			DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
			// Fn is the fn argument value.
			Fn func(*rds.DescribeSourceRegionsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeSourceRegionsRequest holds details about calls to the DescribeSourceRegionsRequest method.
		DescribeSourceRegionsRequest []struct {
			// DescribeSourceRegionsInput is the describeSourceRegionsInput argument value.
			DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
		}
		// DescribeSourceRegionsWithContext holds details about calls to the DescribeSourceRegionsWithContext method.
		DescribeSourceRegionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeSourceRegionsInput is the describeSourceRegionsInput argument value.
			DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeValidDBInstanceModifications holds details about calls to the DescribeValidDBInstanceModifications method.
		DescribeValidDBInstanceModifications []struct {
			// DescribeValidDBInstanceModificationsInput is the describeValidDBInstanceModificationsInput argument value.
			DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
		}
		// DescribeValidDBInstanceModificationsRequest holds details about calls to the DescribeValidDBInstanceModificationsRequest method.
		DescribeValidDBInstanceModificationsRequest []struct {
			// DescribeValidDBInstanceModificationsInput is the describeValidDBInstanceModificationsInput argument value.
			DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
		}
		// DescribeValidDBInstanceModificationsWithContext holds details about calls to the DescribeValidDBInstanceModificationsWithContext method.
		DescribeValidDBInstanceModificationsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeValidDBInstanceModificationsInput is the describeValidDBInstanceModificationsInput argument value.
			DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DownloadDBLogFilePortion holds details about calls to the DownloadDBLogFilePortion method.
		DownloadDBLogFilePortion []struct {
			// DownloadDBLogFilePortionInput is the downloadDBLogFilePortionInput argument value.
			DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
		}
		// DownloadDBLogFilePortionPages holds details about calls to the DownloadDBLogFilePortionPages method.
		DownloadDBLogFilePortionPages []struct {
			// DownloadDBLogFilePortionInput is the downloadDBLogFilePortionInput argument value.
			DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
			// Fn is the fn argument value.
			Fn func(*rds.DownloadDBLogFilePortionOutput, bool) bool
		}
		// DownloadDBLogFilePortionPagesWithContext holds details about calls to the DownloadDBLogFilePortionPagesWithContext method.
		DownloadDBLogFilePortionPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DownloadDBLogFilePortionInput is the downloadDBLogFilePortionInput argument value.
			DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
			// Fn is the fn argument value.
			Fn func(*rds.DownloadDBLogFilePortionOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DownloadDBLogFilePortionRequest holds details about calls to the DownloadDBLogFilePortionRequest method.
		DownloadDBLogFilePortionRequest []struct {
			// DownloadDBLogFilePortionInput is the downloadDBLogFilePortionInput argument value.
			DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
		}
		// DownloadDBLogFilePortionWithContext holds details about calls to the DownloadDBLogFilePortionWithContext method.
		DownloadDBLogFilePortionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DownloadDBLogFilePortionInput is the downloadDBLogFilePortionInput argument value.
			DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// FailoverDBCluster holds details about calls to the FailoverDBCluster method.
		FailoverDBCluster []struct {
			// FailoverDBClusterInput is the failoverDBClusterInput argument value.
			FailoverDBClusterInput *rds.FailoverDBClusterInput
		}
		// FailoverDBClusterRequest holds details about calls to the FailoverDBClusterRequest method.
		FailoverDBClusterRequest []struct {
			// FailoverDBClusterInput is the failoverDBClusterInput argument value.
			FailoverDBClusterInput *rds.FailoverDBClusterInput
		}
		// FailoverDBClusterWithContext holds details about calls to the FailoverDBClusterWithContext method.
		FailoverDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// FailoverDBClusterInput is the failoverDBClusterInput argument value.
			FailoverDBClusterInput *rds.FailoverDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// FailoverGlobalCluster holds details about calls to the FailoverGlobalCluster method.
		FailoverGlobalCluster []struct {
			// FailoverGlobalClusterInput is the failoverGlobalClusterInput argument value.
			FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
		}
		// FailoverGlobalClusterRequest holds details about calls to the FailoverGlobalClusterRequest method.
		FailoverGlobalClusterRequest []struct {
			// FailoverGlobalClusterInput is the failoverGlobalClusterInput argument value.
			FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
		}
		// FailoverGlobalClusterWithContext holds details about calls to the FailoverGlobalClusterWithContext method.
		FailoverGlobalClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// FailoverGlobalClusterInput is the failoverGlobalClusterInput argument value.
			FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListTagsForResource holds details about calls to the ListTagsForResource method.
		ListTagsForResource []struct {
			// ListTagsForResourceInput is the listTagsForResourceInput argument value.
			ListTagsForResourceInput *rds.ListTagsForResourceInput
		}
		// ListTagsForResourceRequest holds details about calls to the ListTagsForResourceRequest method.
		ListTagsForResourceRequest []struct {
			// ListTagsForResourceInput is the listTagsForResourceInput argument value.
			ListTagsForResourceInput *rds.ListTagsForResourceInput
		}
		// ListTagsForResourceWithContext holds details about calls to the ListTagsForResourceWithContext method.
		ListTagsForResourceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListTagsForResourceInput is the listTagsForResourceInput argument value.
			ListTagsForResourceInput *rds.ListTagsForResourceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyActivityStream holds details about calls to the ModifyActivityStream method.
		ModifyActivityStream []struct {
			// ModifyActivityStreamInput is the modifyActivityStreamInput argument value.
			ModifyActivityStreamInput *rds.ModifyActivityStreamInput
		}
		// ModifyActivityStreamRequest holds details about calls to the ModifyActivityStreamRequest method.
		ModifyActivityStreamRequest []struct {
			// ModifyActivityStreamInput is the modifyActivityStreamInput argument value.
			ModifyActivityStreamInput *rds.ModifyActivityStreamInput
		}
		// ModifyActivityStreamWithContext holds details about calls to the ModifyActivityStreamWithContext method.
		ModifyActivityStreamWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyActivityStreamInput is the modifyActivityStreamInput argument value.
			ModifyActivityStreamInput *rds.ModifyActivityStreamInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyCertificates holds details about calls to the ModifyCertificates method.
		ModifyCertificates []struct {
			// ModifyCertificatesInput is the modifyCertificatesInput argument value.
			ModifyCertificatesInput *rds.ModifyCertificatesInput
		}
		// ModifyCertificatesRequest holds details about calls to the ModifyCertificatesRequest method.
		ModifyCertificatesRequest []struct {
			// ModifyCertificatesInput is the modifyCertificatesInput argument value.
			ModifyCertificatesInput *rds.ModifyCertificatesInput
		}
		// ModifyCertificatesWithContext holds details about calls to the ModifyCertificatesWithContext method.
		ModifyCertificatesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyCertificatesInput is the modifyCertificatesInput argument value.
			ModifyCertificatesInput *rds.ModifyCertificatesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyCurrentDBClusterCapacity holds details about calls to the ModifyCurrentDBClusterCapacity method.
		ModifyCurrentDBClusterCapacity []struct {
			// ModifyCurrentDBClusterCapacityInput is the modifyCurrentDBClusterCapacityInput argument value.
			ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
		}
		// ModifyCurrentDBClusterCapacityRequest holds details about calls to the ModifyCurrentDBClusterCapacityRequest method.
		ModifyCurrentDBClusterCapacityRequest []struct {
			// ModifyCurrentDBClusterCapacityInput is the modifyCurrentDBClusterCapacityInput argument value.
			ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
		}
		// ModifyCurrentDBClusterCapacityWithContext holds details about calls to the ModifyCurrentDBClusterCapacityWithContext method.
		ModifyCurrentDBClusterCapacityWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyCurrentDBClusterCapacityInput is the modifyCurrentDBClusterCapacityInput argument value.
			ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyCustomDBEngineVersion holds details about calls to the ModifyCustomDBEngineVersion method.
		ModifyCustomDBEngineVersion []struct {
			// ModifyCustomDBEngineVersionInput is the modifyCustomDBEngineVersionInput argument value.
			ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
		}
		// ModifyCustomDBEngineVersionRequest holds details about calls to the ModifyCustomDBEngineVersionRequest method.
		ModifyCustomDBEngineVersionRequest []struct {
			// ModifyCustomDBEngineVersionInput is the modifyCustomDBEngineVersionInput argument value.
			ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
		}
		// ModifyCustomDBEngineVersionWithContext holds details about calls to the ModifyCustomDBEngineVersionWithContext method.
		ModifyCustomDBEngineVersionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyCustomDBEngineVersionInput is the modifyCustomDBEngineVersionInput argument value.
			ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBCluster holds details about calls to the ModifyDBCluster method.
		ModifyDBCluster []struct {
			// ModifyDBClusterInput is the modifyDBClusterInput argument value.
			ModifyDBClusterInput *rds.ModifyDBClusterInput
		}
		// ModifyDBClusterEndpoint holds details about calls to the ModifyDBClusterEndpoint method.
		ModifyDBClusterEndpoint []struct {
			// ModifyDBClusterEndpointInput is the modifyDBClusterEndpointInput argument value.
			ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
		}
		// ModifyDBClusterEndpointRequest holds details about calls to the ModifyDBClusterEndpointRequest method.
		ModifyDBClusterEndpointRequest []struct {
			// ModifyDBClusterEndpointInput is the modifyDBClusterEndpointInput argument value.
			ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
		}
		// ModifyDBClusterEndpointWithContext holds details about calls to the ModifyDBClusterEndpointWithContext method.
		ModifyDBClusterEndpointWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBClusterEndpointInput is the modifyDBClusterEndpointInput argument value.
			ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBClusterParameterGroup holds details about calls to the ModifyDBClusterParameterGroup method.
		ModifyDBClusterParameterGroup []struct {
			// ModifyDBClusterParameterGroupInput is the modifyDBClusterParameterGroupInput argument value.
			ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
		}
		// ModifyDBClusterParameterGroupRequest holds details about calls to the ModifyDBClusterParameterGroupRequest method.
		ModifyDBClusterParameterGroupRequest []struct {
			// ModifyDBClusterParameterGroupInput is the modifyDBClusterParameterGroupInput argument value.
			ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
		}
		// ModifyDBClusterParameterGroupWithContext holds details about calls to the ModifyDBClusterParameterGroupWithContext method.
		ModifyDBClusterParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBClusterParameterGroupInput is the modifyDBClusterParameterGroupInput argument value.
			ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBClusterRequest holds details about calls to the ModifyDBClusterRequest method.
		ModifyDBClusterRequest []struct {
			// ModifyDBClusterInput is the modifyDBClusterInput argument value.
			ModifyDBClusterInput *rds.ModifyDBClusterInput
		}
		// ModifyDBClusterSnapshotAttribute holds details about calls to the ModifyDBClusterSnapshotAttribute method.
		ModifyDBClusterSnapshotAttribute []struct {
			// ModifyDBClusterSnapshotAttributeInput is the modifyDBClusterSnapshotAttributeInput argument value.
			ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
		}
		// ModifyDBClusterSnapshotAttributeRequest holds details about calls to the ModifyDBClusterSnapshotAttributeRequest method.
		ModifyDBClusterSnapshotAttributeRequest []struct {
			// ModifyDBClusterSnapshotAttributeInput is the modifyDBClusterSnapshotAttributeInput argument value.
			ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
		}
		// ModifyDBClusterSnapshotAttributeWithContext holds details about calls to the ModifyDBClusterSnapshotAttributeWithContext method.
		ModifyDBClusterSnapshotAttributeWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBClusterSnapshotAttributeInput is the modifyDBClusterSnapshotAttributeInput argument value.
			ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBClusterWithContext holds details about calls to the ModifyDBClusterWithContext method.
		ModifyDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBClusterInput is the modifyDBClusterInput argument value.
			ModifyDBClusterInput *rds.ModifyDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBInstance holds details about calls to the ModifyDBInstance method.
		ModifyDBInstance []struct {
			// ModifyDBInstanceInput is the modifyDBInstanceInput argument value.
			ModifyDBInstanceInput *rds.ModifyDBInstanceInput
		}
		// ModifyDBInstanceRequest holds details about calls to the ModifyDBInstanceRequest method.
		ModifyDBInstanceRequest []struct {
			// ModifyDBInstanceInput is the modifyDBInstanceInput argument value.
			ModifyDBInstanceInput *rds.ModifyDBInstanceInput
		}
		// ModifyDBInstanceWithContext holds details about calls to the ModifyDBInstanceWithContext method.
		ModifyDBInstanceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBInstanceInput is the modifyDBInstanceInput argument value.
			ModifyDBInstanceInput *rds.ModifyDBInstanceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBParameterGroup holds details about calls to the ModifyDBParameterGroup method.
		ModifyDBParameterGroup []struct {
			// ModifyDBParameterGroupInput is the modifyDBParameterGroupInput argument value.
			ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
		}
		// ModifyDBParameterGroupRequest holds details about calls to the ModifyDBParameterGroupRequest method.
		ModifyDBParameterGroupRequest []struct {
			// ModifyDBParameterGroupInput is the modifyDBParameterGroupInput argument value.
			ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
		}
		// ModifyDBParameterGroupWithContext holds details about calls to the ModifyDBParameterGroupWithContext method.
		ModifyDBParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBParameterGroupInput is the modifyDBParameterGroupInput argument value.
			ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBProxy holds details about calls to the ModifyDBProxy method.
		ModifyDBProxy []struct {
			// ModifyDBProxyInput is the modifyDBProxyInput argument value.
			ModifyDBProxyInput *rds.ModifyDBProxyInput
		}
		// ModifyDBProxyEndpoint holds details about calls to the ModifyDBProxyEndpoint method.
		ModifyDBProxyEndpoint []struct {
			// ModifyDBProxyEndpointInput is the modifyDBProxyEndpointInput argument value.
			ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
		}
		// ModifyDBProxyEndpointRequest holds details about calls to the ModifyDBProxyEndpointRequest method.
		ModifyDBProxyEndpointRequest []struct {
			// ModifyDBProxyEndpointInput is the modifyDBProxyEndpointInput argument value.
			ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
		}
		// ModifyDBProxyEndpointWithContext holds details about calls to the ModifyDBProxyEndpointWithContext method.
		ModifyDBProxyEndpointWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBProxyEndpointInput is the modifyDBProxyEndpointInput argument value.
			ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBProxyRequest holds details about calls to the ModifyDBProxyRequest method.
		ModifyDBProxyRequest []struct {
			// ModifyDBProxyInput is the modifyDBProxyInput argument value.
			ModifyDBProxyInput *rds.ModifyDBProxyInput
		}
		// ModifyDBProxyTargetGroup holds details about calls to the ModifyDBProxyTargetGroup method.
		ModifyDBProxyTargetGroup []struct {
			// ModifyDBProxyTargetGroupInput is the modifyDBProxyTargetGroupInput argument value.
			ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
		}
		// ModifyDBProxyTargetGroupRequest holds details about calls to the ModifyDBProxyTargetGroupRequest method.
		ModifyDBProxyTargetGroupRequest []struct {
			// ModifyDBProxyTargetGroupInput is the modifyDBProxyTargetGroupInput argument value.
			ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
		}
		// ModifyDBProxyTargetGroupWithContext holds details about calls to the ModifyDBProxyTargetGroupWithContext method.
		ModifyDBProxyTargetGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBProxyTargetGroupInput is the modifyDBProxyTargetGroupInput argument value.
			ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBProxyWithContext holds details about calls to the ModifyDBProxyWithContext method.
		ModifyDBProxyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBProxyInput is the modifyDBProxyInput argument value.
			ModifyDBProxyInput *rds.ModifyDBProxyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBSnapshot holds details about calls to the ModifyDBSnapshot method.
		ModifyDBSnapshot []struct {
			// ModifyDBSnapshotInput is the modifyDBSnapshotInput argument value.
			ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
		}
		// ModifyDBSnapshotAttribute holds details about calls to the ModifyDBSnapshotAttribute method.
		ModifyDBSnapshotAttribute []struct {
			// ModifyDBSnapshotAttributeInput is the modifyDBSnapshotAttributeInput argument value.
			ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
		}
		// ModifyDBSnapshotAttributeRequest holds details about calls to the ModifyDBSnapshotAttributeRequest method.
		ModifyDBSnapshotAttributeRequest []struct {
			// ModifyDBSnapshotAttributeInput is the modifyDBSnapshotAttributeInput argument value.
			ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
		}
		// ModifyDBSnapshotAttributeWithContext holds details about calls to the ModifyDBSnapshotAttributeWithContext method.
		ModifyDBSnapshotAttributeWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBSnapshotAttributeInput is the modifyDBSnapshotAttributeInput argument value.
			ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBSnapshotRequest holds details about calls to the ModifyDBSnapshotRequest method.
		ModifyDBSnapshotRequest []struct {
			// ModifyDBSnapshotInput is the modifyDBSnapshotInput argument value.
			ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
		}
		// ModifyDBSnapshotWithContext holds details about calls to the ModifyDBSnapshotWithContext method.
		ModifyDBSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBSnapshotInput is the modifyDBSnapshotInput argument value.
			ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyDBSubnetGroup holds details about calls to the ModifyDBSubnetGroup method.
		ModifyDBSubnetGroup []struct {
			// ModifyDBSubnetGroupInput is the modifyDBSubnetGroupInput argument value.
			ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
		}
		// ModifyDBSubnetGroupRequest holds details about calls to the ModifyDBSubnetGroupRequest method.
		ModifyDBSubnetGroupRequest []struct {
			// ModifyDBSubnetGroupInput is the modifyDBSubnetGroupInput argument value.
			ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
		}
		// ModifyDBSubnetGroupWithContext holds details about calls to the ModifyDBSubnetGroupWithContext method.
		ModifyDBSubnetGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyDBSubnetGroupInput is the modifyDBSubnetGroupInput argument value.
			ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyEventSubscription holds details about calls to the ModifyEventSubscription method.
		ModifyEventSubscription []struct {
			// ModifyEventSubscriptionInput is the modifyEventSubscriptionInput argument value.
			ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
		}
		// ModifyEventSubscriptionRequest holds details about calls to the ModifyEventSubscriptionRequest method.
		ModifyEventSubscriptionRequest []struct {
			// ModifyEventSubscriptionInput is the modifyEventSubscriptionInput argument value.
			ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
		}
		// ModifyEventSubscriptionWithContext holds details about calls to the ModifyEventSubscriptionWithContext method.
		ModifyEventSubscriptionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyEventSubscriptionInput is the modifyEventSubscriptionInput argument value.
			ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyGlobalCluster holds details about calls to the ModifyGlobalCluster method.
		ModifyGlobalCluster []struct {
			// ModifyGlobalClusterInput is the modifyGlobalClusterInput argument value.
			ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
		}
		// ModifyGlobalClusterRequest holds details about calls to the ModifyGlobalClusterRequest method.
		ModifyGlobalClusterRequest []struct {
			// ModifyGlobalClusterInput is the modifyGlobalClusterInput argument value.
			ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
		}
		// ModifyGlobalClusterWithContext holds details about calls to the ModifyGlobalClusterWithContext method.
		ModifyGlobalClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyGlobalClusterInput is the modifyGlobalClusterInput argument value.
			ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyOptionGroup holds details about calls to the ModifyOptionGroup method.
		ModifyOptionGroup []struct {
			// ModifyOptionGroupInput is the modifyOptionGroupInput argument value.
			ModifyOptionGroupInput *rds.ModifyOptionGroupInput
		}
		// ModifyOptionGroupRequest holds details about calls to the ModifyOptionGroupRequest method.
		ModifyOptionGroupRequest []struct {
			// ModifyOptionGroupInput is the modifyOptionGroupInput argument value.
			ModifyOptionGroupInput *rds.ModifyOptionGroupInput
		}
		// ModifyOptionGroupWithContext holds details about calls to the ModifyOptionGroupWithContext method.
		ModifyOptionGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyOptionGroupInput is the modifyOptionGroupInput argument value.
			ModifyOptionGroupInput *rds.ModifyOptionGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PromoteReadReplica holds details about calls to the PromoteReadReplica method.
		PromoteReadReplica []struct {
			// PromoteReadReplicaInput is the promoteReadReplicaInput argument value.
			PromoteReadReplicaInput *rds.PromoteReadReplicaInput
		}
		// PromoteReadReplicaDBCluster holds details about calls to the PromoteReadReplicaDBCluster method.
		PromoteReadReplicaDBCluster []struct {
			// PromoteReadReplicaDBClusterInput is the promoteReadReplicaDBClusterInput argument value.
			PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
		}
		// PromoteReadReplicaDBClusterRequest holds details about calls to the PromoteReadReplicaDBClusterRequest method.
		PromoteReadReplicaDBClusterRequest []struct {
			// PromoteReadReplicaDBClusterInput is the promoteReadReplicaDBClusterInput argument value.
			PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
		}
		// PromoteReadReplicaDBClusterWithContext holds details about calls to the PromoteReadReplicaDBClusterWithContext method.
		PromoteReadReplicaDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PromoteReadReplicaDBClusterInput is the promoteReadReplicaDBClusterInput argument value.
			PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PromoteReadReplicaRequest holds details about calls to the PromoteReadReplicaRequest method.
		PromoteReadReplicaRequest []struct {
			// PromoteReadReplicaInput is the promoteReadReplicaInput argument value.
			PromoteReadReplicaInput *rds.PromoteReadReplicaInput
		}
		// PromoteReadReplicaWithContext holds details about calls to the PromoteReadReplicaWithContext method.
		PromoteReadReplicaWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PromoteReadReplicaInput is the promoteReadReplicaInput argument value.
			PromoteReadReplicaInput *rds.PromoteReadReplicaInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PurchaseReservedDBInstancesOffering holds details about calls to the PurchaseReservedDBInstancesOffering method.
		PurchaseReservedDBInstancesOffering []struct {
			// PurchaseReservedDBInstancesOfferingInput is the purchaseReservedDBInstancesOfferingInput argument value.
			PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
		}
		// PurchaseReservedDBInstancesOfferingRequest holds details about calls to the PurchaseReservedDBInstancesOfferingRequest method.
		PurchaseReservedDBInstancesOfferingRequest []struct {
			// PurchaseReservedDBInstancesOfferingInput is the purchaseReservedDBInstancesOfferingInput argument value.
			PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
		}
		// PurchaseReservedDBInstancesOfferingWithContext holds details about calls to the PurchaseReservedDBInstancesOfferingWithContext method.
		PurchaseReservedDBInstancesOfferingWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PurchaseReservedDBInstancesOfferingInput is the purchaseReservedDBInstancesOfferingInput argument value.
			PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RebootDBCluster holds details about calls to the RebootDBCluster method.
		RebootDBCluster []struct {
			// RebootDBClusterInput is the rebootDBClusterInput argument value.
			RebootDBClusterInput *rds.RebootDBClusterInput
		}
		// RebootDBClusterRequest holds details about calls to the RebootDBClusterRequest method.
		RebootDBClusterRequest []struct {
			// RebootDBClusterInput is the rebootDBClusterInput argument value.
			RebootDBClusterInput *rds.RebootDBClusterInput
		}
		// RebootDBClusterWithContext holds details about calls to the RebootDBClusterWithContext method.
		RebootDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RebootDBClusterInput is the rebootDBClusterInput argument value.
			RebootDBClusterInput *rds.RebootDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RebootDBInstance holds details about calls to the RebootDBInstance method.
		RebootDBInstance []struct {
			// RebootDBInstanceInput is the rebootDBInstanceInput argument value.
			RebootDBInstanceInput *rds.RebootDBInstanceInput
		}
		// RebootDBInstanceRequest holds details about calls to the RebootDBInstanceRequest method.
		RebootDBInstanceRequest []struct {
			// RebootDBInstanceInput is the rebootDBInstanceInput argument value.
			RebootDBInstanceInput *rds.RebootDBInstanceInput
		}
		// RebootDBInstanceWithContext holds details about calls to the RebootDBInstanceWithContext method.
		RebootDBInstanceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RebootDBInstanceInput is the rebootDBInstanceInput argument value.
			RebootDBInstanceInput *rds.RebootDBInstanceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RegisterDBProxyTargets holds details about calls to the RegisterDBProxyTargets method.
		RegisterDBProxyTargets []struct {
			// RegisterDBProxyTargetsInput is the registerDBProxyTargetsInput argument value.
			RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
		}
		// RegisterDBProxyTargetsRequest holds details about calls to the RegisterDBProxyTargetsRequest method.
		RegisterDBProxyTargetsRequest []struct {
			// RegisterDBProxyTargetsInput is the registerDBProxyTargetsInput argument value.
			RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
		}
		// RegisterDBProxyTargetsWithContext holds details about calls to the RegisterDBProxyTargetsWithContext method.
		RegisterDBProxyTargetsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RegisterDBProxyTargetsInput is the registerDBProxyTargetsInput argument value.
			RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemoveFromGlobalCluster holds details about calls to the RemoveFromGlobalCluster method.
		RemoveFromGlobalCluster []struct {
			// RemoveFromGlobalClusterInput is the removeFromGlobalClusterInput argument value.
			RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
		}
		// RemoveFromGlobalClusterRequest holds details about calls to the RemoveFromGlobalClusterRequest method.
		RemoveFromGlobalClusterRequest []struct {
			// RemoveFromGlobalClusterInput is the removeFromGlobalClusterInput argument value.
			RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
		}
		// RemoveFromGlobalClusterWithContext holds details about calls to the RemoveFromGlobalClusterWithContext method.
		RemoveFromGlobalClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemoveFromGlobalClusterInput is the removeFromGlobalClusterInput argument value.
			RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemoveRoleFromDBCluster holds details about calls to the RemoveRoleFromDBCluster method.
		RemoveRoleFromDBCluster []struct {
			// RemoveRoleFromDBClusterInput is the removeRoleFromDBClusterInput argument value.
			RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
		}
		// RemoveRoleFromDBClusterRequest holds details about calls to the RemoveRoleFromDBClusterRequest method.
		RemoveRoleFromDBClusterRequest []struct {
			// RemoveRoleFromDBClusterInput is the removeRoleFromDBClusterInput argument value.
			RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
		}
		// RemoveRoleFromDBClusterWithContext holds details about calls to the RemoveRoleFromDBClusterWithContext method.
		RemoveRoleFromDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemoveRoleFromDBClusterInput is the removeRoleFromDBClusterInput argument value.
			RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemoveRoleFromDBInstance holds details about calls to the RemoveRoleFromDBInstance method.
		RemoveRoleFromDBInstance []struct {
			// RemoveRoleFromDBInstanceInput is the removeRoleFromDBInstanceInput argument value.
			RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
		}
		// RemoveRoleFromDBInstanceRequest holds details about calls to the RemoveRoleFromDBInstanceRequest method.
		RemoveRoleFromDBInstanceRequest []struct {
			// RemoveRoleFromDBInstanceInput is the removeRoleFromDBInstanceInput argument value.
			RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
		}
		// RemoveRoleFromDBInstanceWithContext holds details about calls to the RemoveRoleFromDBInstanceWithContext method.
		RemoveRoleFromDBInstanceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemoveRoleFromDBInstanceInput is the removeRoleFromDBInstanceInput argument value.
			RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemoveSourceIdentifierFromSubscription holds details about calls to the RemoveSourceIdentifierFromSubscription method.
		RemoveSourceIdentifierFromSubscription []struct {
			// RemoveSourceIdentifierFromSubscriptionInput is the removeSourceIdentifierFromSubscriptionInput argument value.
			RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
		}
		// RemoveSourceIdentifierFromSubscriptionRequest holds details about calls to the RemoveSourceIdentifierFromSubscriptionRequest method.
		RemoveSourceIdentifierFromSubscriptionRequest []struct {
			// RemoveSourceIdentifierFromSubscriptionInput is the removeSourceIdentifierFromSubscriptionInput argument value.
			RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
		}
		// RemoveSourceIdentifierFromSubscriptionWithContext holds details about calls to the RemoveSourceIdentifierFromSubscriptionWithContext method.
		RemoveSourceIdentifierFromSubscriptionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemoveSourceIdentifierFromSubscriptionInput is the removeSourceIdentifierFromSubscriptionInput argument value.
			RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemoveTagsFromResource holds details about calls to the RemoveTagsFromResource method.
		RemoveTagsFromResource []struct {
			// RemoveTagsFromResourceInput is the removeTagsFromResourceInput argument value.
			RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
		}
		// RemoveTagsFromResourceRequest holds details about calls to the RemoveTagsFromResourceRequest method.
		RemoveTagsFromResourceRequest []struct {
			// RemoveTagsFromResourceInput is the removeTagsFromResourceInput argument value.
			RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
		}
		// RemoveTagsFromResourceWithContext holds details about calls to the RemoveTagsFromResourceWithContext method.
		RemoveTagsFromResourceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemoveTagsFromResourceInput is the removeTagsFromResourceInput argument value.
			RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ResetDBClusterParameterGroup holds details about calls to the ResetDBClusterParameterGroup method.
		ResetDBClusterParameterGroup []struct {
			// ResetDBClusterParameterGroupInput is the resetDBClusterParameterGroupInput argument value.
			ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
		}
		// ResetDBClusterParameterGroupRequest holds details about calls to the ResetDBClusterParameterGroupRequest method.
		ResetDBClusterParameterGroupRequest []struct {
			// ResetDBClusterParameterGroupInput is the resetDBClusterParameterGroupInput argument value.
			ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
		}
		// ResetDBClusterParameterGroupWithContext holds details about calls to the ResetDBClusterParameterGroupWithContext method.
		ResetDBClusterParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ResetDBClusterParameterGroupInput is the resetDBClusterParameterGroupInput argument value.
			ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ResetDBParameterGroup holds details about calls to the ResetDBParameterGroup method.
		ResetDBParameterGroup []struct {
			// ResetDBParameterGroupInput is the resetDBParameterGroupInput argument value.
			ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
		}
		// ResetDBParameterGroupRequest holds details about calls to the ResetDBParameterGroupRequest method.
		ResetDBParameterGroupRequest []struct {
			// ResetDBParameterGroupInput is the resetDBParameterGroupInput argument value.
			ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
		}
		// ResetDBParameterGroupWithContext holds details about calls to the ResetDBParameterGroupWithContext method.
		ResetDBParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ResetDBParameterGroupInput is the resetDBParameterGroupInput argument value.
			ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RestoreDBClusterFromS3 holds details about calls to the RestoreDBClusterFromS3 method.
		RestoreDBClusterFromS3 []struct {
			// RestoreDBClusterFromS3Input is the restoreDBClusterFromS3Input argument value.
			RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
		}
		// RestoreDBClusterFromS3Request holds details about calls to the RestoreDBClusterFromS3Request method.
		RestoreDBClusterFromS3Request []struct {
			// RestoreDBClusterFromS3Input is the restoreDBClusterFromS3Input argument value.
			RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
		}
		// RestoreDBClusterFromS3WithContext holds details about calls to the RestoreDBClusterFromS3WithContext method.
		RestoreDBClusterFromS3WithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RestoreDBClusterFromS3Input is the restoreDBClusterFromS3Input argument value.
			RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
			// Options is the options argument value.
			Options []request.Option
		}
		// RestoreDBClusterFromSnapshot holds details about calls to the RestoreDBClusterFromSnapshot method.
		RestoreDBClusterFromSnapshot []struct {
			// RestoreDBClusterFromSnapshotInput is the restoreDBClusterFromSnapshotInput argument value.
			RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
		}
		// RestoreDBClusterFromSnapshotRequest holds details about calls to the RestoreDBClusterFromSnapshotRequest method.
		RestoreDBClusterFromSnapshotRequest []struct {
			// RestoreDBClusterFromSnapshotInput is the restoreDBClusterFromSnapshotInput argument value.
			RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
		}
		// RestoreDBClusterFromSnapshotWithContext holds details about calls to the RestoreDBClusterFromSnapshotWithContext method.
		RestoreDBClusterFromSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RestoreDBClusterFromSnapshotInput is the restoreDBClusterFromSnapshotInput argument value.
			RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RestoreDBClusterToPointInTime holds details about calls to the RestoreDBClusterToPointInTime method.
		RestoreDBClusterToPointInTime []struct {
			// RestoreDBClusterToPointInTimeInput is the restoreDBClusterToPointInTimeInput argument value.
			RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
		}
		// RestoreDBClusterToPointInTimeRequest holds details about calls to the RestoreDBClusterToPointInTimeRequest method.
		RestoreDBClusterToPointInTimeRequest []struct {
			// RestoreDBClusterToPointInTimeInput is the restoreDBClusterToPointInTimeInput argument value.
			RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
		}
		// RestoreDBClusterToPointInTimeWithContext holds details about calls to the RestoreDBClusterToPointInTimeWithContext method.
		RestoreDBClusterToPointInTimeWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RestoreDBClusterToPointInTimeInput is the restoreDBClusterToPointInTimeInput argument value.
			RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RestoreDBInstanceFromDBSnapshot holds details about calls to the RestoreDBInstanceFromDBSnapshot method.
		RestoreDBInstanceFromDBSnapshot []struct {
			// RestoreDBInstanceFromDBSnapshotInput is the restoreDBInstanceFromDBSnapshotInput argument value.
			RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
		}
		// RestoreDBInstanceFromDBSnapshotRequest holds details about calls to the RestoreDBInstanceFromDBSnapshotRequest method.
		RestoreDBInstanceFromDBSnapshotRequest []struct {
			// RestoreDBInstanceFromDBSnapshotInput is the restoreDBInstanceFromDBSnapshotInput argument value.
			RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
		}
		// RestoreDBInstanceFromDBSnapshotWithContext holds details about calls to the RestoreDBInstanceFromDBSnapshotWithContext method.
		RestoreDBInstanceFromDBSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RestoreDBInstanceFromDBSnapshotInput is the restoreDBInstanceFromDBSnapshotInput argument value.
			RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RestoreDBInstanceFromS3 holds details about calls to the RestoreDBInstanceFromS3 method.
		RestoreDBInstanceFromS3 []struct {
			// RestoreDBInstanceFromS3Input is the restoreDBInstanceFromS3Input argument value.
			RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
		}
		// RestoreDBInstanceFromS3Request holds details about calls to the RestoreDBInstanceFromS3Request method.
		RestoreDBInstanceFromS3Request []struct {
			// RestoreDBInstanceFromS3Input is the restoreDBInstanceFromS3Input argument value.
			RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
		}
		// RestoreDBInstanceFromS3WithContext holds details about calls to the RestoreDBInstanceFromS3WithContext method.
		RestoreDBInstanceFromS3WithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RestoreDBInstanceFromS3Input is the restoreDBInstanceFromS3Input argument value.
			RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
			// Options is the options argument value.
			Options []request.Option
		}
		// RestoreDBInstanceToPointInTime holds details about calls to the RestoreDBInstanceToPointInTime method.
		RestoreDBInstanceToPointInTime []struct {
			// RestoreDBInstanceToPointInTimeInput is the restoreDBInstanceToPointInTimeInput argument value.
			RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
		}
		// RestoreDBInstanceToPointInTimeRequest holds details about calls to the RestoreDBInstanceToPointInTimeRequest method.
		RestoreDBInstanceToPointInTimeRequest []struct {
			// RestoreDBInstanceToPointInTimeInput is the restoreDBInstanceToPointInTimeInput argument value.
			RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
		}
		// RestoreDBInstanceToPointInTimeWithContext holds details about calls to the RestoreDBInstanceToPointInTimeWithContext method.
		RestoreDBInstanceToPointInTimeWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RestoreDBInstanceToPointInTimeInput is the restoreDBInstanceToPointInTimeInput argument value.
			RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RevokeDBSecurityGroupIngress holds details about calls to the RevokeDBSecurityGroupIngress method.
		RevokeDBSecurityGroupIngress []struct {
			// RevokeDBSecurityGroupIngressInput is the revokeDBSecurityGroupIngressInput argument value.
			RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
		}
		// RevokeDBSecurityGroupIngressRequest holds details about calls to the RevokeDBSecurityGroupIngressRequest method.
		RevokeDBSecurityGroupIngressRequest []struct {
			// RevokeDBSecurityGroupIngressInput is the revokeDBSecurityGroupIngressInput argument value.
			RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
		}
		// RevokeDBSecurityGroupIngressWithContext holds details about calls to the RevokeDBSecurityGroupIngressWithContext method.
		RevokeDBSecurityGroupIngressWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RevokeDBSecurityGroupIngressInput is the revokeDBSecurityGroupIngressInput argument value.
			RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StartActivityStream holds details about calls to the StartActivityStream method.
		StartActivityStream []struct {
			// StartActivityStreamInput is the startActivityStreamInput argument value.
			StartActivityStreamInput *rds.StartActivityStreamInput
		}
		// StartActivityStreamRequest holds details about calls to the StartActivityStreamRequest method.
		StartActivityStreamRequest []struct {
			// StartActivityStreamInput is the startActivityStreamInput argument value.
			StartActivityStreamInput *rds.StartActivityStreamInput
		}
		// StartActivityStreamWithContext holds details about calls to the StartActivityStreamWithContext method.
		StartActivityStreamWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StartActivityStreamInput is the startActivityStreamInput argument value.
			StartActivityStreamInput *rds.StartActivityStreamInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StartDBCluster holds details about calls to the StartDBCluster method.
		StartDBCluster []struct {
			// StartDBClusterInput is the startDBClusterInput argument value.
			StartDBClusterInput *rds.StartDBClusterInput
		}
		// StartDBClusterRequest holds details about calls to the StartDBClusterRequest method.
		StartDBClusterRequest []struct {
			// StartDBClusterInput is the startDBClusterInput argument value.
			StartDBClusterInput *rds.StartDBClusterInput
		}
		// StartDBClusterWithContext holds details about calls to the StartDBClusterWithContext method.
		StartDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StartDBClusterInput is the startDBClusterInput argument value.
			StartDBClusterInput *rds.StartDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StartDBInstance holds details about calls to the StartDBInstance method.
		StartDBInstance []struct {
			// StartDBInstanceInput is the startDBInstanceInput argument value.
			StartDBInstanceInput *rds.StartDBInstanceInput
		}
		// StartDBInstanceAutomatedBackupsReplication holds details about calls to the StartDBInstanceAutomatedBackupsReplication method.
		StartDBInstanceAutomatedBackupsReplication []struct {
			// StartDBInstanceAutomatedBackupsReplicationInput is the startDBInstanceAutomatedBackupsReplicationInput argument value.
			StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
		}
		// StartDBInstanceAutomatedBackupsReplicationRequest holds details about calls to the StartDBInstanceAutomatedBackupsReplicationRequest method.
		StartDBInstanceAutomatedBackupsReplicationRequest []struct {
			// StartDBInstanceAutomatedBackupsReplicationInput is the startDBInstanceAutomatedBackupsReplicationInput argument value.
			StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
		}
		// StartDBInstanceAutomatedBackupsReplicationWithContext holds details about calls to the StartDBInstanceAutomatedBackupsReplicationWithContext method.
		StartDBInstanceAutomatedBackupsReplicationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StartDBInstanceAutomatedBackupsReplicationInput is the startDBInstanceAutomatedBackupsReplicationInput argument value.
			StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StartDBInstanceRequest holds details about calls to the StartDBInstanceRequest method.
		StartDBInstanceRequest []struct {
			// StartDBInstanceInput is the startDBInstanceInput argument value.
			StartDBInstanceInput *rds.StartDBInstanceInput
		}
		// StartDBInstanceWithContext holds details about calls to the StartDBInstanceWithContext method.
		StartDBInstanceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StartDBInstanceInput is the startDBInstanceInput argument value.
			StartDBInstanceInput *rds.StartDBInstanceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StartExportTask holds details about calls to the StartExportTask method.
		StartExportTask []struct {
			// StartExportTaskInput is the startExportTaskInput argument value.
			StartExportTaskInput *rds.StartExportTaskInput
		}
		// StartExportTaskRequest holds details about calls to the StartExportTaskRequest method.
		StartExportTaskRequest []struct {
			// StartExportTaskInput is the startExportTaskInput argument value.
			StartExportTaskInput *rds.StartExportTaskInput
		}
		// StartExportTaskWithContext holds details about calls to the StartExportTaskWithContext method.
		StartExportTaskWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StartExportTaskInput is the startExportTaskInput argument value.
			StartExportTaskInput *rds.StartExportTaskInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StopActivityStream holds details about calls to the StopActivityStream method.
		StopActivityStream []struct {
			// StopActivityStreamInput is the stopActivityStreamInput argument value.
			StopActivityStreamInput *rds.StopActivityStreamInput
		}
		// StopActivityStreamRequest holds details about calls to the StopActivityStreamRequest method.
		StopActivityStreamRequest []struct {
			// StopActivityStreamInput is the stopActivityStreamInput argument value.
			StopActivityStreamInput *rds.StopActivityStreamInput
		}
		// StopActivityStreamWithContext holds details about calls to the StopActivityStreamWithContext method.
		StopActivityStreamWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StopActivityStreamInput is the stopActivityStreamInput argument value.
			StopActivityStreamInput *rds.StopActivityStreamInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StopDBCluster holds details about calls to the StopDBCluster method.
		StopDBCluster []struct {
			// StopDBClusterInput is the stopDBClusterInput argument value.
			StopDBClusterInput *rds.StopDBClusterInput
		}
		// StopDBClusterRequest holds details about calls to the StopDBClusterRequest method.
		StopDBClusterRequest []struct {
			// StopDBClusterInput is the stopDBClusterInput argument value.
			StopDBClusterInput *rds.StopDBClusterInput
		}
		// StopDBClusterWithContext holds details about calls to the StopDBClusterWithContext method.
		StopDBClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StopDBClusterInput is the stopDBClusterInput argument value.
			StopDBClusterInput *rds.StopDBClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StopDBInstance holds details about calls to the StopDBInstance method.
		StopDBInstance []struct {
			// StopDBInstanceInput is the stopDBInstanceInput argument value.
			StopDBInstanceInput *rds.StopDBInstanceInput
		}
		// StopDBInstanceAutomatedBackupsReplication holds details about calls to the StopDBInstanceAutomatedBackupsReplication method.
		StopDBInstanceAutomatedBackupsReplication []struct {
			// StopDBInstanceAutomatedBackupsReplicationInput is the stopDBInstanceAutomatedBackupsReplicationInput argument value.
			StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
		}
		// StopDBInstanceAutomatedBackupsReplicationRequest holds details about calls to the StopDBInstanceAutomatedBackupsReplicationRequest method.
		StopDBInstanceAutomatedBackupsReplicationRequest []struct {
			// StopDBInstanceAutomatedBackupsReplicationInput is the stopDBInstanceAutomatedBackupsReplicationInput argument value.
			StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
		}
		// StopDBInstanceAutomatedBackupsReplicationWithContext holds details about calls to the StopDBInstanceAutomatedBackupsReplicationWithContext method.
		StopDBInstanceAutomatedBackupsReplicationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StopDBInstanceAutomatedBackupsReplicationInput is the stopDBInstanceAutomatedBackupsReplicationInput argument value.
			StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StopDBInstanceRequest holds details about calls to the StopDBInstanceRequest method.
		StopDBInstanceRequest []struct {
			// StopDBInstanceInput is the stopDBInstanceInput argument value.
			StopDBInstanceInput *rds.StopDBInstanceInput
		}
		// StopDBInstanceWithContext holds details about calls to the StopDBInstanceWithContext method.
		StopDBInstanceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StopDBInstanceInput is the stopDBInstanceInput argument value.
			StopDBInstanceInput *rds.StopDBInstanceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// SwitchoverReadReplica holds details about calls to the SwitchoverReadReplica method.
		SwitchoverReadReplica []struct {
			// SwitchoverReadReplicaInput is the switchoverReadReplicaInput argument value.
			SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
		}
		// SwitchoverReadReplicaRequest holds details about calls to the SwitchoverReadReplicaRequest method.
		SwitchoverReadReplicaRequest []struct {
			// SwitchoverReadReplicaInput is the switchoverReadReplicaInput argument value.
			SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
		}
		// SwitchoverReadReplicaWithContext holds details about calls to the SwitchoverReadReplicaWithContext method.
		SwitchoverReadReplicaWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SwitchoverReadReplicaInput is the switchoverReadReplicaInput argument value.
			SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
			// Options is the options argument value.
			Options []request.Option
		}
		// WaitUntilDBClusterAvailable holds details about calls to the WaitUntilDBClusterAvailable method.
		WaitUntilDBClusterAvailable []struct {
			// DescribeDBClustersInput is the describeDBClustersInput argument value.
			DescribeDBClustersInput *rds.DescribeDBClustersInput
		}
		// WaitUntilDBClusterAvailableWithContext holds details about calls to the WaitUntilDBClusterAvailableWithContext method.
		WaitUntilDBClusterAvailableWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClustersInput is the describeDBClustersInput argument value.
			DescribeDBClustersInput *rds.DescribeDBClustersInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilDBClusterDeleted holds details about calls to the WaitUntilDBClusterDeleted method.
		WaitUntilDBClusterDeleted []struct {
			// DescribeDBClustersInput is the describeDBClustersInput argument value.
			DescribeDBClustersInput *rds.DescribeDBClustersInput
		}
		// WaitUntilDBClusterDeletedWithContext holds details about calls to the WaitUntilDBClusterDeletedWithContext method.
		WaitUntilDBClusterDeletedWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClustersInput is the describeDBClustersInput argument value.
			DescribeDBClustersInput *rds.DescribeDBClustersInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilDBClusterSnapshotAvailable holds details about calls to the WaitUntilDBClusterSnapshotAvailable method.
		WaitUntilDBClusterSnapshotAvailable []struct {
			// DescribeDBClusterSnapshotsInput is the describeDBClusterSnapshotsInput argument value.
			DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		}
		// WaitUntilDBClusterSnapshotAvailableWithContext holds details about calls to the WaitUntilDBClusterSnapshotAvailableWithContext method.
		WaitUntilDBClusterSnapshotAvailableWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterSnapshotsInput is the describeDBClusterSnapshotsInput argument value.
			DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilDBClusterSnapshotDeleted holds details about calls to the WaitUntilDBClusterSnapshotDeleted method.
		WaitUntilDBClusterSnapshotDeleted []struct {
			// DescribeDBClusterSnapshotsInput is the describeDBClusterSnapshotsInput argument value.
			DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		}
		// WaitUntilDBClusterSnapshotDeletedWithContext holds details about calls to the WaitUntilDBClusterSnapshotDeletedWithContext method.
		WaitUntilDBClusterSnapshotDeletedWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBClusterSnapshotsInput is the describeDBClusterSnapshotsInput argument value.
			DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilDBInstanceAvailable holds details about calls to the WaitUntilDBInstanceAvailable method.
		WaitUntilDBInstanceAvailable []struct {
			// DescribeDBInstancesInput is the describeDBInstancesInput argument value.
			DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		}
		// WaitUntilDBInstanceAvailableWithContext holds details about calls to the WaitUntilDBInstanceAvailableWithContext method.
		WaitUntilDBInstanceAvailableWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBInstancesInput is the describeDBInstancesInput argument value.
			DescribeDBInstancesInput *rds.DescribeDBInstancesInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilDBInstanceDeleted holds details about calls to the WaitUntilDBInstanceDeleted method.
		WaitUntilDBInstanceDeleted []struct {
			// DescribeDBInstancesInput is the describeDBInstancesInput argument value.
			DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		}
		// WaitUntilDBInstanceDeletedWithContext holds details about calls to the WaitUntilDBInstanceDeletedWithContext method.
		WaitUntilDBInstanceDeletedWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBInstancesInput is the describeDBInstancesInput argument value.
			DescribeDBInstancesInput *rds.DescribeDBInstancesInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilDBSnapshotAvailable holds details about calls to the WaitUntilDBSnapshotAvailable method.
		WaitUntilDBSnapshotAvailable []struct {
			// DescribeDBSnapshotsInput is the describeDBSnapshotsInput argument value.
			DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		}
		// WaitUntilDBSnapshotAvailableWithContext holds details about calls to the WaitUntilDBSnapshotAvailableWithContext method.
		WaitUntilDBSnapshotAvailableWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBSnapshotsInput is the describeDBSnapshotsInput argument value.
			DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilDBSnapshotDeleted holds details about calls to the WaitUntilDBSnapshotDeleted method.
		WaitUntilDBSnapshotDeleted []struct {
			// DescribeDBSnapshotsInput is the describeDBSnapshotsInput argument value.
			DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		}
		// WaitUntilDBSnapshotDeletedWithContext holds details about calls to the WaitUntilDBSnapshotDeletedWithContext method.
		WaitUntilDBSnapshotDeletedWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeDBSnapshotsInput is the describeDBSnapshotsInput argument value.
			DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
	}
	lockAddRoleToDBCluster                                    sync.RWMutex
	lockAddRoleToDBClusterRequest                             sync.RWMutex
	lockAddRoleToDBClusterWithContext                         sync.RWMutex
	lockAddRoleToDBInstance                                   sync.RWMutex
	lockAddRoleToDBInstanceRequest                            sync.RWMutex
	lockAddRoleToDBInstanceWithContext                        sync.RWMutex
	lockAddSourceIdentifierToSubscription                     sync.RWMutex
	lockAddSourceIdentifierToSubscriptionRequest              sync.RWMutex
	lockAddSourceIdentifierToSubscriptionWithContext          sync.RWMutex
	lockAddTagsToResource                                     sync.RWMutex
	lockAddTagsToResourceRequest                              sync.RWMutex
	lockAddTagsToResourceWithContext                          sync.RWMutex
	lockApplyPendingMaintenanceAction                         sync.RWMutex
	lockApplyPendingMaintenanceActionRequest                  sync.RWMutex
	lockApplyPendingMaintenanceActionWithContext              sync.RWMutex
	lockAuthorizeDBSecurityGroupIngress                       sync.RWMutex
	lockAuthorizeDBSecurityGroupIngressRequest                sync.RWMutex
	lockAuthorizeDBSecurityGroupIngressWithContext            sync.RWMutex
	lockBacktrackDBCluster                                    sync.RWMutex
	lockBacktrackDBClusterRequest                             sync.RWMutex
	lockBacktrackDBClusterWithContext                         sync.RWMutex
	lockCancelExportTask                                      sync.RWMutex
	lockCancelExportTaskRequest                               sync.RWMutex
	lockCancelExportTaskWithContext                           sync.RWMutex
	lockCopyDBClusterParameterGroup                           sync.RWMutex
	lockCopyDBClusterParameterGroupRequest                    sync.RWMutex
	lockCopyDBClusterParameterGroupWithContext                sync.RWMutex
	lockCopyDBClusterSnapshot                                 sync.RWMutex
	lockCopyDBClusterSnapshotRequest                          sync.RWMutex
	lockCopyDBClusterSnapshotWithContext                      sync.RWMutex
	lockCopyDBParameterGroup                                  sync.RWMutex
	lockCopyDBParameterGroupRequest                           sync.RWMutex
	lockCopyDBParameterGroupWithContext                       sync.RWMutex
	lockCopyDBSnapshot                                        sync.RWMutex
	lockCopyDBSnapshotRequest                                 sync.RWMutex
	lockCopyDBSnapshotWithContext                             sync.RWMutex
	lockCopyOptionGroup                                       sync.RWMutex
	lockCopyOptionGroupRequest                                sync.RWMutex
	lockCopyOptionGroupWithContext                            sync.RWMutex
	lockCreateCustomDBEngineVersion                           sync.RWMutex
	lockCreateCustomDBEngineVersionRequest                    sync.RWMutex
	lockCreateCustomDBEngineVersionWithContext                sync.RWMutex
	lockCreateDBCluster                                       sync.RWMutex
	lockCreateDBClusterEndpoint                               sync.RWMutex
	lockCreateDBClusterEndpointRequest                        sync.RWMutex
	lockCreateDBClusterEndpointWithContext                    sync.RWMutex
	lockCreateDBClusterParameterGroup                         sync.RWMutex
	lockCreateDBClusterParameterGroupRequest                  sync.RWMutex
	lockCreateDBClusterParameterGroupWithContext              sync.RWMutex
	lockCreateDBClusterRequest                                sync.RWMutex
	lockCreateDBClusterSnapshot                               sync.RWMutex
	lockCreateDBClusterSnapshotRequest                        sync.RWMutex
	lockCreateDBClusterSnapshotWithContext                    sync.RWMutex
	lockCreateDBClusterWithContext                            sync.RWMutex
	lockCreateDBInstance                                      sync.RWMutex
	lockCreateDBInstanceReadReplica                           sync.RWMutex
	lockCreateDBInstanceReadReplicaRequest                    sync.RWMutex
	lockCreateDBInstanceReadReplicaWithContext                sync.RWMutex
	lockCreateDBInstanceRequest                               sync.RWMutex
	lockCreateDBInstanceWithContext                           sync.RWMutex
	lockCreateDBParameterGroup                                sync.RWMutex
	lockCreateDBParameterGroupRequest                         sync.RWMutex
	lockCreateDBParameterGroupWithContext                     sync.RWMutex
	lockCreateDBProxy                                         sync.RWMutex
	lockCreateDBProxyEndpoint                                 sync.RWMutex
	lockCreateDBProxyEndpointRequest                          sync.RWMutex
	lockCreateDBProxyEndpointWithContext                      sync.RWMutex
	lockCreateDBProxyRequest                                  sync.RWMutex
	lockCreateDBProxyWithContext                              sync.RWMutex
	lockCreateDBSecurityGroup                                 sync.RWMutex
	lockCreateDBSecurityGroupRequest                          sync.RWMutex
	lockCreateDBSecurityGroupWithContext                      sync.RWMutex
	lockCreateDBSnapshot                                      sync.RWMutex
	lockCreateDBSnapshotRequest                               sync.RWMutex
	lockCreateDBSnapshotWithContext                           sync.RWMutex
	lockCreateDBSubnetGroup                                   sync.RWMutex
	lockCreateDBSubnetGroupRequest                            sync.RWMutex
	lockCreateDBSubnetGroupWithContext                        sync.RWMutex
	lockCreateEventSubscription                               sync.RWMutex
	lockCreateEventSubscriptionRequest                        sync.RWMutex
	lockCreateEventSubscriptionWithContext                    sync.RWMutex
	lockCreateGlobalCluster                                   sync.RWMutex
	lockCreateGlobalClusterRequest                            sync.RWMutex
	lockCreateGlobalClusterWithContext                        sync.RWMutex
	lockCreateOptionGroup                                     sync.RWMutex
	lockCreateOptionGroupRequest                              sync.RWMutex
	lockCreateOptionGroupWithContext                          sync.RWMutex
	lockDeleteCustomDBEngineVersion                           sync.RWMutex
	lockDeleteCustomDBEngineVersionRequest                    sync.RWMutex
	lockDeleteCustomDBEngineVersionWithContext                sync.RWMutex
	lockDeleteDBCluster                                       sync.RWMutex
	lockDeleteDBClusterEndpoint                               sync.RWMutex
	lockDeleteDBClusterEndpointRequest                        sync.RWMutex
	lockDeleteDBClusterEndpointWithContext                    sync.RWMutex
	lockDeleteDBClusterParameterGroup                         sync.RWMutex
	lockDeleteDBClusterParameterGroupRequest                  sync.RWMutex
	lockDeleteDBClusterParameterGroupWithContext              sync.RWMutex
	lockDeleteDBClusterRequest                                sync.RWMutex
	lockDeleteDBClusterSnapshot                               sync.RWMutex
	lockDeleteDBClusterSnapshotRequest                        sync.RWMutex
	lockDeleteDBClusterSnapshotWithContext                    sync.RWMutex
	lockDeleteDBClusterWithContext                            sync.RWMutex
	lockDeleteDBInstance                                      sync.RWMutex
	lockDeleteDBInstanceAutomatedBackup                       sync.RWMutex
	lockDeleteDBInstanceAutomatedBackupRequest                sync.RWMutex
	lockDeleteDBInstanceAutomatedBackupWithContext            sync.RWMutex
	lockDeleteDBInstanceRequest                               sync.RWMutex
	lockDeleteDBInstanceWithContext                           sync.RWMutex
	lockDeleteDBParameterGroup                                sync.RWMutex
	lockDeleteDBParameterGroupRequest                         sync.RWMutex
	lockDeleteDBParameterGroupWithContext                     sync.RWMutex
	lockDeleteDBProxy                                         sync.RWMutex
	lockDeleteDBProxyEndpoint                                 sync.RWMutex
	lockDeleteDBProxyEndpointRequest                          sync.RWMutex
	lockDeleteDBProxyEndpointWithContext                      sync.RWMutex
	lockDeleteDBProxyRequest                                  sync.RWMutex
	lockDeleteDBProxyWithContext                              sync.RWMutex
	lockDeleteDBSecurityGroup                                 sync.RWMutex
	lockDeleteDBSecurityGroupRequest                          sync.RWMutex
	lockDeleteDBSecurityGroupWithContext                      sync.RWMutex
	lockDeleteDBSnapshot                                      sync.RWMutex
	lockDeleteDBSnapshotRequest                               sync.RWMutex
	lockDeleteDBSnapshotWithContext                           sync.RWMutex
	lockDeleteDBSubnetGroup                                   sync.RWMutex
	lockDeleteDBSubnetGroupRequest                            sync.RWMutex
	lockDeleteDBSubnetGroupWithContext                        sync.RWMutex
	lockDeleteEventSubscription                               sync.RWMutex
	lockDeleteEventSubscriptionRequest                        sync.RWMutex
	lockDeleteEventSubscriptionWithContext                    sync.RWMutex
	lockDeleteGlobalCluster                                   sync.RWMutex
	lockDeleteGlobalClusterRequest                            sync.RWMutex
	lockDeleteGlobalClusterWithContext                        sync.RWMutex
	lockDeleteOptionGroup                                     sync.RWMutex
	lockDeleteOptionGroupRequest                              sync.RWMutex
	lockDeleteOptionGroupWithContext                          sync.RWMutex
	lockDeregisterDBProxyTargets                              sync.RWMutex
	lockDeregisterDBProxyTargetsRequest                       sync.RWMutex
	lockDeregisterDBProxyTargetsWithContext                   sync.RWMutex
	lockDescribeAccountAttributes                             sync.RWMutex
	lockDescribeAccountAttributesRequest                      sync.RWMutex
	lockDescribeAccountAttributesWithContext                  sync.RWMutex
	lockDescribeCertificates                                  sync.RWMutex
	lockDescribeCertificatesPages                             sync.RWMutex
	lockDescribeCertificatesPagesWithContext                  sync.RWMutex
	lockDescribeCertificatesRequest                           sync.RWMutex
	lockDescribeCertificatesWithContext                       sync.RWMutex
	lockDescribeDBClusterBacktracks                           sync.RWMutex
	lockDescribeDBClusterBacktracksPages                      sync.RWMutex
	lockDescribeDBClusterBacktracksPagesWithContext           sync.RWMutex
	lockDescribeDBClusterBacktracksRequest                    sync.RWMutex
	lockDescribeDBClusterBacktracksWithContext                sync.RWMutex
	lockDescribeDBClusterEndpoints                            sync.RWMutex
	lockDescribeDBClusterEndpointsPages                       sync.RWMutex
	lockDescribeDBClusterEndpointsPagesWithContext            sync.RWMutex
	lockDescribeDBClusterEndpointsRequest                     sync.RWMutex
	lockDescribeDBClusterEndpointsWithContext                 sync.RWMutex
	lockDescribeDBClusterParameterGroups                      sync.RWMutex
	lockDescribeDBClusterParameterGroupsPages                 sync.RWMutex
	lockDescribeDBClusterParameterGroupsPagesWithContext      sync.RWMutex
	lockDescribeDBClusterParameterGroupsRequest               sync.RWMutex
	lockDescribeDBClusterParameterGroupsWithContext           sync.RWMutex
	lockDescribeDBClusterParameters                           sync.RWMutex
	lockDescribeDBClusterParametersPages                      sync.RWMutex
	lockDescribeDBClusterParametersPagesWithContext           sync.RWMutex
	lockDescribeDBClusterParametersRequest                    sync.RWMutex
	lockDescribeDBClusterParametersWithContext                sync.RWMutex
	lockDescribeDBClusterSnapshotAttributes                   sync.RWMutex
	lockDescribeDBClusterSnapshotAttributesRequest            sync.RWMutex
	lockDescribeDBClusterSnapshotAttributesWithContext        sync.RWMutex
	lockDescribeDBClusterSnapshots                            sync.RWMutex
	lockDescribeDBClusterSnapshotsPages                       sync.RWMutex
	lockDescribeDBClusterSnapshotsPagesWithContext            sync.RWMutex
	lockDescribeDBClusterSnapshotsRequest                     sync.RWMutex
	lockDescribeDBClusterSnapshotsWithContext                 sync.RWMutex
	lockDescribeDBClusters                                    sync.RWMutex
	lockDescribeDBClustersPages                               sync.RWMutex
	lockDescribeDBClustersPagesWithContext                    sync.RWMutex
	lockDescribeDBClustersRequest                             sync.RWMutex
	lockDescribeDBClustersWithContext                         sync.RWMutex
	lockDescribeDBEngineVersions                              sync.RWMutex
	lockDescribeDBEngineVersionsPages                         sync.RWMutex
	lockDescribeDBEngineVersionsPagesWithContext              sync.RWMutex
	lockDescribeDBEngineVersionsRequest                       sync.RWMutex
	lockDescribeDBEngineVersionsWithContext                   sync.RWMutex
	lockDescribeDBInstanceAutomatedBackups                    sync.RWMutex
	lockDescribeDBInstanceAutomatedBackupsPages               sync.RWMutex
	lockDescribeDBInstanceAutomatedBackupsPagesWithContext    sync.RWMutex
	lockDescribeDBInstanceAutomatedBackupsRequest             sync.RWMutex
	lockDescribeDBInstanceAutomatedBackupsWithContext         sync.RWMutex
	lockDescribeDBInstances                                   sync.RWMutex
	lockDescribeDBInstancesPages                              sync.RWMutex
	lockDescribeDBInstancesPagesWithContext                   sync.RWMutex
	lockDescribeDBInstancesRequest                            sync.RWMutex
	lockDescribeDBInstancesWithContext                        sync.RWMutex
	lockDescribeDBLogFiles                                    sync.RWMutex
	lockDescribeDBLogFilesPages                               sync.RWMutex
	lockDescribeDBLogFilesPagesWithContext                    sync.RWMutex
	lockDescribeDBLogFilesRequest                             sync.RWMutex
	lockDescribeDBLogFilesWithContext                         sync.RWMutex
	lockDescribeDBParameterGroups                             sync.RWMutex
	lockDescribeDBParameterGroupsPages                        sync.RWMutex
	lockDescribeDBParameterGroupsPagesWithContext             sync.RWMutex
	lockDescribeDBParameterGroupsRequest                      sync.RWMutex
	lockDescribeDBParameterGroupsWithContext                  sync.RWMutex
	lockDescribeDBParameters                                  sync.RWMutex
	lockDescribeDBParametersPages                             sync.RWMutex
	lockDescribeDBParametersPagesWithContext                  sync.RWMutex
	lockDescribeDBParametersRequest                           sync.RWMutex
	lockDescribeDBParametersWithContext                       sync.RWMutex
	lockDescribeDBProxies                                     sync.RWMutex
	lockDescribeDBProxiesPages                                sync.RWMutex
	lockDescribeDBProxiesPagesWithContext                     sync.RWMutex
	lockDescribeDBProxiesRequest                              sync.RWMutex
	lockDescribeDBProxiesWithContext                          sync.RWMutex
	lockDescribeDBProxyEndpoints                              sync.RWMutex
	lockDescribeDBProxyEndpointsPages                         sync.RWMutex
	lockDescribeDBProxyEndpointsPagesWithContext              sync.RWMutex
	lockDescribeDBProxyEndpointsRequest                       sync.RWMutex
	lockDescribeDBProxyEndpointsWithContext                   sync.RWMutex
	lockDescribeDBProxyTargetGroups                           sync.RWMutex
	lockDescribeDBProxyTargetGroupsPages                      sync.RWMutex
	lockDescribeDBProxyTargetGroupsPagesWithContext           sync.RWMutex
	lockDescribeDBProxyTargetGroupsRequest                    sync.RWMutex
	lockDescribeDBProxyTargetGroupsWithContext                sync.RWMutex
	lockDescribeDBProxyTargets                                sync.RWMutex
	lockDescribeDBProxyTargetsPages                           sync.RWMutex
	lockDescribeDBProxyTargetsPagesWithContext                sync.RWMutex
	lockDescribeDBProxyTargetsRequest                         sync.RWMutex
	lockDescribeDBProxyTargetsWithContext                     sync.RWMutex
	lockDescribeDBSecurityGroups                              sync.RWMutex
	lockDescribeDBSecurityGroupsPages                         sync.RWMutex
	lockDescribeDBSecurityGroupsPagesWithContext              sync.RWMutex
	lockDescribeDBSecurityGroupsRequest                       sync.RWMutex
	lockDescribeDBSecurityGroupsWithContext                   sync.RWMutex
	lockDescribeDBSnapshotAttributes                          sync.RWMutex
	lockDescribeDBSnapshotAttributesRequest                   sync.RWMutex
	lockDescribeDBSnapshotAttributesWithContext               sync.RWMutex
	lockDescribeDBSnapshots                                   sync.RWMutex
	lockDescribeDBSnapshotsPages                              sync.RWMutex
	lockDescribeDBSnapshotsPagesWithContext                   sync.RWMutex
	lockDescribeDBSnapshotsRequest                            sync.RWMutex
	lockDescribeDBSnapshotsWithContext                        sync.RWMutex
	lockDescribeDBSubnetGroups                                sync.RWMutex
	lockDescribeDBSubnetGroupsPages                           sync.RWMutex
	lockDescribeDBSubnetGroupsPagesWithContext                sync.RWMutex
	lockDescribeDBSubnetGroupsRequest                         sync.RWMutex
	lockDescribeDBSubnetGroupsWithContext                     sync.RWMutex
	lockDescribeEngineDefaultClusterParameters                sync.RWMutex
	lockDescribeEngineDefaultClusterParametersRequest         sync.RWMutex
	lockDescribeEngineDefaultClusterParametersWithContext     sync.RWMutex
	lockDescribeEngineDefaultParameters                       sync.RWMutex
	lockDescribeEngineDefaultParametersPages                  sync.RWMutex
	lockDescribeEngineDefaultParametersPagesWithContext       sync.RWMutex
	lockDescribeEngineDefaultParametersRequest                sync.RWMutex
	lockDescribeEngineDefaultParametersWithContext            sync.RWMutex
	lockDescribeEventCategories                               sync.RWMutex
	lockDescribeEventCategoriesRequest                        sync.RWMutex
	lockDescribeEventCategoriesWithContext                    sync.RWMutex
	lockDescribeEventSubscriptions                            sync.RWMutex
	lockDescribeEventSubscriptionsPages                       sync.RWMutex
	lockDescribeEventSubscriptionsPagesWithContext            sync.RWMutex
	lockDescribeEventSubscriptionsRequest                     sync.RWMutex
	lockDescribeEventSubscriptionsWithContext                 sync.RWMutex
	lockDescribeEvents                                        sync.RWMutex
	lockDescribeEventsPages                                   sync.RWMutex
	lockDescribeEventsPagesWithContext                        sync.RWMutex
	lockDescribeEventsRequest                                 sync.RWMutex
	lockDescribeEventsWithContext                             sync.RWMutex
	lockDescribeExportTasks                                   sync.RWMutex
	lockDescribeExportTasksPages                              sync.RWMutex
	lockDescribeExportTasksPagesWithContext                   sync.RWMutex
	lockDescribeExportTasksRequest                            sync.RWMutex
	lockDescribeExportTasksWithContext                        sync.RWMutex
	lockDescribeGlobalClusters                                sync.RWMutex
	lockDescribeGlobalClustersPages                           sync.RWMutex
	lockDescribeGlobalClustersPagesWithContext                sync.RWMutex
	lockDescribeGlobalClustersRequest                         sync.RWMutex
	lockDescribeGlobalClustersWithContext                     sync.RWMutex
	lockDescribeOptionGroupOptions                            sync.RWMutex
	lockDescribeOptionGroupOptionsPages                       sync.RWMutex
	lockDescribeOptionGroupOptionsPagesWithContext            sync.RWMutex
	lockDescribeOptionGroupOptionsRequest                     sync.RWMutex
	lockDescribeOptionGroupOptionsWithContext                 sync.RWMutex
	lockDescribeOptionGroups                                  sync.RWMutex
	lockDescribeOptionGroupsPages                             sync.RWMutex
	lockDescribeOptionGroupsPagesWithContext                  sync.RWMutex
	lockDescribeOptionGroupsRequest                           sync.RWMutex
	lockDescribeOptionGroupsWithContext                       sync.RWMutex
	lockDescribeOrderableDBInstanceOptions                    sync.RWMutex
	lockDescribeOrderableDBInstanceOptionsPages               sync.RWMutex
	lockDescribeOrderableDBInstanceOptionsPagesWithContext    sync.RWMutex
	lockDescribeOrderableDBInstanceOptionsRequest             sync.RWMutex
	lockDescribeOrderableDBInstanceOptionsWithContext         sync.RWMutex
	lockDescribePendingMaintenanceActions                     sync.RWMutex
	lockDescribePendingMaintenanceActionsPages                sync.RWMutex
	lockDescribePendingMaintenanceActionsPagesWithContext     sync.RWMutex
	lockDescribePendingMaintenanceActionsRequest              sync.RWMutex
	lockDescribePendingMaintenanceActionsWithContext          sync.RWMutex
	lockDescribeReservedDBInstances                           sync.RWMutex
	lockDescribeReservedDBInstancesOfferings                  sync.RWMutex
	lockDescribeReservedDBInstancesOfferingsPages             sync.RWMutex
	lockDescribeReservedDBInstancesOfferingsPagesWithContext  sync.RWMutex
	lockDescribeReservedDBInstancesOfferingsRequest           sync.RWMutex
	lockDescribeReservedDBInstancesOfferingsWithContext       sync.RWMutex
	lockDescribeReservedDBInstancesPages                      sync.RWMutex
	lockDescribeReservedDBInstancesPagesWithContext           sync.RWMutex
	lockDescribeReservedDBInstancesRequest                    sync.RWMutex
	lockDescribeReservedDBInstancesWithContext                sync.RWMutex
	lockDescribeSourceRegions                                 sync.RWMutex
	lockDescribeSourceRegionsPages                            sync.RWMutex
	lockDescribeSourceRegionsPagesWithContext                 sync.RWMutex
	lockDescribeSourceRegionsRequest                          sync.RWMutex
	lockDescribeSourceRegionsWithContext                      sync.RWMutex
	lockDescribeValidDBInstanceModifications                  sync.RWMutex
	lockDescribeValidDBInstanceModificationsRequest           sync.RWMutex
	lockDescribeValidDBInstanceModificationsWithContext       sync.RWMutex
	lockDownloadDBLogFilePortion                              sync.RWMutex
	lockDownloadDBLogFilePortionPages                         sync.RWMutex
	lockDownloadDBLogFilePortionPagesWithContext              sync.RWMutex
	lockDownloadDBLogFilePortionRequest                       sync.RWMutex
	lockDownloadDBLogFilePortionWithContext                   sync.RWMutex
	lockFailoverDBCluster                                     sync.RWMutex
	lockFailoverDBClusterRequest                              sync.RWMutex
	lockFailoverDBClusterWithContext                          sync.RWMutex
	lockFailoverGlobalCluster                                 sync.RWMutex
	lockFailoverGlobalClusterRequest                          sync.RWMutex
	lockFailoverGlobalClusterWithContext                      sync.RWMutex
	lockListTagsForResource                                   sync.RWMutex
	lockListTagsForResourceRequest                            sync.RWMutex
	lockListTagsForResourceWithContext                        sync.RWMutex
	lockModifyActivityStream                                  sync.RWMutex
	lockModifyActivityStreamRequest                           sync.RWMutex
	lockModifyActivityStreamWithContext                       sync.RWMutex
	lockModifyCertificates                                    sync.RWMutex
	lockModifyCertificatesRequest                             sync.RWMutex
	lockModifyCertificatesWithContext                         sync.RWMutex
	lockModifyCurrentDBClusterCapacity                        sync.RWMutex
	lockModifyCurrentDBClusterCapacityRequest                 sync.RWMutex
	lockModifyCurrentDBClusterCapacityWithContext             sync.RWMutex
	lockModifyCustomDBEngineVersion                           sync.RWMutex
	lockModifyCustomDBEngineVersionRequest                    sync.RWMutex
	lockModifyCustomDBEngineVersionWithContext                sync.RWMutex
	lockModifyDBCluster                                       sync.RWMutex
	lockModifyDBClusterEndpoint                               sync.RWMutex
	lockModifyDBClusterEndpointRequest                        sync.RWMutex
	lockModifyDBClusterEndpointWithContext                    sync.RWMutex
	lockModifyDBClusterParameterGroup                         sync.RWMutex
	lockModifyDBClusterParameterGroupRequest                  sync.RWMutex
	lockModifyDBClusterParameterGroupWithContext              sync.RWMutex
	lockModifyDBClusterRequest                                sync.RWMutex
	lockModifyDBClusterSnapshotAttribute                      sync.RWMutex
	lockModifyDBClusterSnapshotAttributeRequest               sync.RWMutex
	lockModifyDBClusterSnapshotAttributeWithContext           sync.RWMutex
	lockModifyDBClusterWithContext                            sync.RWMutex
	lockModifyDBInstance                                      sync.RWMutex
	lockModifyDBInstanceRequest                               sync.RWMutex
	lockModifyDBInstanceWithContext                           sync.RWMutex
	lockModifyDBParameterGroup                                sync.RWMutex
	lockModifyDBParameterGroupRequest                         sync.RWMutex
	lockModifyDBParameterGroupWithContext                     sync.RWMutex
	lockModifyDBProxy                                         sync.RWMutex
	lockModifyDBProxyEndpoint                                 sync.RWMutex
	lockModifyDBProxyEndpointRequest                          sync.RWMutex
	lockModifyDBProxyEndpointWithContext                      sync.RWMutex
	lockModifyDBProxyRequest                                  sync.RWMutex
	lockModifyDBProxyTargetGroup                              sync.RWMutex
	lockModifyDBProxyTargetGroupRequest                       sync.RWMutex
	lockModifyDBProxyTargetGroupWithContext                   sync.RWMutex
	lockModifyDBProxyWithContext                              sync.RWMutex
	lockModifyDBSnapshot                                      sync.RWMutex
	lockModifyDBSnapshotAttribute                             sync.RWMutex
	lockModifyDBSnapshotAttributeRequest                      sync.RWMutex
	lockModifyDBSnapshotAttributeWithContext                  sync.RWMutex
	lockModifyDBSnapshotRequest                               sync.RWMutex
	lockModifyDBSnapshotWithContext                           sync.RWMutex
	lockModifyDBSubnetGroup                                   sync.RWMutex
	lockModifyDBSubnetGroupRequest                            sync.RWMutex
	lockModifyDBSubnetGroupWithContext                        sync.RWMutex
	lockModifyEventSubscription                               sync.RWMutex
	lockModifyEventSubscriptionRequest                        sync.RWMutex
	lockModifyEventSubscriptionWithContext                    sync.RWMutex
	lockModifyGlobalCluster                                   sync.RWMutex
	lockModifyGlobalClusterRequest                            sync.RWMutex
	lockModifyGlobalClusterWithContext                        sync.RWMutex
	lockModifyOptionGroup                                     sync.RWMutex
	lockModifyOptionGroupRequest                              sync.RWMutex
	lockModifyOptionGroupWithContext                          sync.RWMutex
	lockPromoteReadReplica                                    sync.RWMutex
	lockPromoteReadReplicaDBCluster                           sync.RWMutex
	lockPromoteReadReplicaDBClusterRequest                    sync.RWMutex
	lockPromoteReadReplicaDBClusterWithContext                sync.RWMutex
	lockPromoteReadReplicaRequest                             sync.RWMutex
	lockPromoteReadReplicaWithContext                         sync.RWMutex
	lockPurchaseReservedDBInstancesOffering                   sync.RWMutex
	lockPurchaseReservedDBInstancesOfferingRequest            sync.RWMutex
	lockPurchaseReservedDBInstancesOfferingWithContext        sync.RWMutex
	lockRebootDBCluster                                       sync.RWMutex
	lockRebootDBClusterRequest                                sync.RWMutex
	lockRebootDBClusterWithContext                            sync.RWMutex
	lockRebootDBInstance                                      sync.RWMutex
	lockRebootDBInstanceRequest                               sync.RWMutex
	lockRebootDBInstanceWithContext                           sync.RWMutex
	lockRegisterDBProxyTargets                                sync.RWMutex
	lockRegisterDBProxyTargetsRequest                         sync.RWMutex
	lockRegisterDBProxyTargetsWithContext                     sync.RWMutex
	lockRemoveFromGlobalCluster                               sync.RWMutex
	lockRemoveFromGlobalClusterRequest                        sync.RWMutex
	lockRemoveFromGlobalClusterWithContext                    sync.RWMutex
	lockRemoveRoleFromDBCluster                               sync.RWMutex
	lockRemoveRoleFromDBClusterRequest                        sync.RWMutex
	lockRemoveRoleFromDBClusterWithContext                    sync.RWMutex
	lockRemoveRoleFromDBInstance                              sync.RWMutex
	lockRemoveRoleFromDBInstanceRequest                       sync.RWMutex
	lockRemoveRoleFromDBInstanceWithContext                   sync.RWMutex
	lockRemoveSourceIdentifierFromSubscription                sync.RWMutex
	lockRemoveSourceIdentifierFromSubscriptionRequest         sync.RWMutex
	lockRemoveSourceIdentifierFromSubscriptionWithContext     sync.RWMutex
	lockRemoveTagsFromResource                                sync.RWMutex
	lockRemoveTagsFromResourceRequest                         sync.RWMutex
	lockRemoveTagsFromResourceWithContext                     sync.RWMutex
	lockResetDBClusterParameterGroup                          sync.RWMutex
	lockResetDBClusterParameterGroupRequest                   sync.RWMutex
	lockResetDBClusterParameterGroupWithContext               sync.RWMutex
	lockResetDBParameterGroup                                 sync.RWMutex
	lockResetDBParameterGroupRequest                          sync.RWMutex
	lockResetDBParameterGroupWithContext                      sync.RWMutex
	lockRestoreDBClusterFromS3                                sync.RWMutex
	lockRestoreDBClusterFromS3Request                         sync.RWMutex
	lockRestoreDBClusterFromS3WithContext                     sync.RWMutex
	lockRestoreDBClusterFromSnapshot                          sync.RWMutex
	lockRestoreDBClusterFromSnapshotRequest                   sync.RWMutex
	lockRestoreDBClusterFromSnapshotWithContext               sync.RWMutex
	lockRestoreDBClusterToPointInTime                         sync.RWMutex
	lockRestoreDBClusterToPointInTimeRequest                  sync.RWMutex
	lockRestoreDBClusterToPointInTimeWithContext              sync.RWMutex
	lockRestoreDBInstanceFromDBSnapshot                       sync.RWMutex
	lockRestoreDBInstanceFromDBSnapshotRequest                sync.RWMutex
	lockRestoreDBInstanceFromDBSnapshotWithContext            sync.RWMutex
	lockRestoreDBInstanceFromS3                               sync.RWMutex
	lockRestoreDBInstanceFromS3Request                        sync.RWMutex
	lockRestoreDBInstanceFromS3WithContext                    sync.RWMutex
	lockRestoreDBInstanceToPointInTime                        sync.RWMutex
	lockRestoreDBInstanceToPointInTimeRequest                 sync.RWMutex
	lockRestoreDBInstanceToPointInTimeWithContext             sync.RWMutex
	lockRevokeDBSecurityGroupIngress                          sync.RWMutex
	lockRevokeDBSecurityGroupIngressRequest                   sync.RWMutex
	lockRevokeDBSecurityGroupIngressWithContext               sync.RWMutex
	lockStartActivityStream                                   sync.RWMutex
	lockStartActivityStreamRequest                            sync.RWMutex
	lockStartActivityStreamWithContext                        sync.RWMutex
	lockStartDBCluster                                        sync.RWMutex
	lockStartDBClusterRequest                                 sync.RWMutex
	lockStartDBClusterWithContext                             sync.RWMutex
	lockStartDBInstance                                       sync.RWMutex
	lockStartDBInstanceAutomatedBackupsReplication            sync.RWMutex
	lockStartDBInstanceAutomatedBackupsReplicationRequest     sync.RWMutex
	lockStartDBInstanceAutomatedBackupsReplicationWithContext sync.RWMutex
	lockStartDBInstanceRequest                                sync.RWMutex
	lockStartDBInstanceWithContext                            sync.RWMutex
	lockStartExportTask                                       sync.RWMutex
	lockStartExportTaskRequest                                sync.RWMutex
	lockStartExportTaskWithContext                            sync.RWMutex
	lockStopActivityStream                                    sync.RWMutex
	lockStopActivityStreamRequest                             sync.RWMutex
	lockStopActivityStreamWithContext                         sync.RWMutex
	lockStopDBCluster                                         sync.RWMutex
	lockStopDBClusterRequest                                  sync.RWMutex
	lockStopDBClusterWithContext                              sync.RWMutex
	lockStopDBInstance                                        sync.RWMutex
	lockStopDBInstanceAutomatedBackupsReplication             sync.RWMutex
	lockStopDBInstanceAutomatedBackupsReplicationRequest      sync.RWMutex
	lockStopDBInstanceAutomatedBackupsReplicationWithContext  sync.RWMutex
	lockStopDBInstanceRequest                                 sync.RWMutex
	lockStopDBInstanceWithContext                             sync.RWMutex
	lockSwitchoverReadReplica                                 sync.RWMutex
	lockSwitchoverReadReplicaRequest                          sync.RWMutex
	lockSwitchoverReadReplicaWithContext                      sync.RWMutex
	lockWaitUntilDBClusterAvailable                           sync.RWMutex
	lockWaitUntilDBClusterAvailableWithContext                sync.RWMutex
	lockWaitUntilDBClusterDeleted                             sync.RWMutex
	lockWaitUntilDBClusterDeletedWithContext                  sync.RWMutex
	lockWaitUntilDBClusterSnapshotAvailable                   sync.RWMutex
	lockWaitUntilDBClusterSnapshotAvailableWithContext        sync.RWMutex
	lockWaitUntilDBClusterSnapshotDeleted                     sync.RWMutex
	lockWaitUntilDBClusterSnapshotDeletedWithContext          sync.RWMutex
	lockWaitUntilDBInstanceAvailable                          sync.RWMutex
	lockWaitUntilDBInstanceAvailableWithContext               sync.RWMutex
	lockWaitUntilDBInstanceDeleted                            sync.RWMutex
	lockWaitUntilDBInstanceDeletedWithContext                 sync.RWMutex
	lockWaitUntilDBSnapshotAvailable                          sync.RWMutex
	lockWaitUntilDBSnapshotAvailableWithContext               sync.RWMutex
	lockWaitUntilDBSnapshotDeleted                            sync.RWMutex
	lockWaitUntilDBSnapshotDeletedWithContext                 sync.RWMutex
}

// AddRoleToDBCluster calls AddRoleToDBClusterFunc.
func (mock *rdsClientMock) AddRoleToDBCluster(addRoleToDBClusterInput *rds.AddRoleToDBClusterInput) (*rds.AddRoleToDBClusterOutput, error) {
	if mock.AddRoleToDBClusterFunc == nil {
		panic("rdsClientMock.AddRoleToDBClusterFunc: method is nil but rdsClient.AddRoleToDBCluster was just called")
	}
	callInfo := struct {
		AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
	}{
		AddRoleToDBClusterInput: addRoleToDBClusterInput,
	}
	mock.lockAddRoleToDBCluster.Lock()
	mock.calls.AddRoleToDBCluster = append(mock.calls.AddRoleToDBCluster, callInfo)
	mock.lockAddRoleToDBCluster.Unlock()
	return mock.AddRoleToDBClusterFunc(addRoleToDBClusterInput)
}

// AddRoleToDBClusterCalls gets all the calls that were made to AddRoleToDBCluster.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBClusterCalls())
func (mock *rdsClientMock) AddRoleToDBClusterCalls() []struct {
	AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
} {
	var calls []struct {
		AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
	}
	mock.lockAddRoleToDBCluster.RLock()
	calls = mock.calls.AddRoleToDBCluster
	mock.lockAddRoleToDBCluster.RUnlock()
	return calls
}

// AddRoleToDBClusterRequest calls AddRoleToDBClusterRequestFunc.
func (mock *rdsClientMock) AddRoleToDBClusterRequest(addRoleToDBClusterInput *rds.AddRoleToDBClusterInput) (*request.Request, *rds.AddRoleToDBClusterOutput) {
	if mock.AddRoleToDBClusterRequestFunc == nil {
		panic("rdsClientMock.AddRoleToDBClusterRequestFunc: method is nil but rdsClient.AddRoleToDBClusterRequest was just called")
	}
	callInfo := struct {
		AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
	}{
		AddRoleToDBClusterInput: addRoleToDBClusterInput,
	}
	mock.lockAddRoleToDBClusterRequest.Lock()
	mock.calls.AddRoleToDBClusterRequest = append(mock.calls.AddRoleToDBClusterRequest, callInfo)
	mock.lockAddRoleToDBClusterRequest.Unlock()
	return mock.AddRoleToDBClusterRequestFunc(addRoleToDBClusterInput)
}

// AddRoleToDBClusterRequestCalls gets all the calls that were made to AddRoleToDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBClusterRequestCalls())
func (mock *rdsClientMock) AddRoleToDBClusterRequestCalls() []struct {
	AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
} {
	var calls []struct {
		AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
	}
	mock.lockAddRoleToDBClusterRequest.RLock()
	calls = mock.calls.AddRoleToDBClusterRequest
	mock.lockAddRoleToDBClusterRequest.RUnlock()
	return calls
}

// AddRoleToDBClusterWithContext calls AddRoleToDBClusterWithContextFunc.
func (mock *rdsClientMock) AddRoleToDBClusterWithContext(contextMoqParam context.Context, addRoleToDBClusterInput *rds.AddRoleToDBClusterInput, options ...request.Option) (*rds.AddRoleToDBClusterOutput, error) {
	if mock.AddRoleToDBClusterWithContextFunc == nil {
		panic("rdsClientMock.AddRoleToDBClusterWithContextFunc: method is nil but rdsClient.AddRoleToDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		AddRoleToDBClusterInput: addRoleToDBClusterInput,
		Options:                 options,
	}
	mock.lockAddRoleToDBClusterWithContext.Lock()
	mock.calls.AddRoleToDBClusterWithContext = append(mock.calls.AddRoleToDBClusterWithContext, callInfo)
	mock.lockAddRoleToDBClusterWithContext.Unlock()
	return mock.AddRoleToDBClusterWithContextFunc(contextMoqParam, addRoleToDBClusterInput, options...)
}

// AddRoleToDBClusterWithContextCalls gets all the calls that were made to AddRoleToDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBClusterWithContextCalls())
func (mock *rdsClientMock) AddRoleToDBClusterWithContextCalls() []struct {
	ContextMoqParam         context.Context
	AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		AddRoleToDBClusterInput *rds.AddRoleToDBClusterInput
		Options                 []request.Option
	}
	mock.lockAddRoleToDBClusterWithContext.RLock()
	calls = mock.calls.AddRoleToDBClusterWithContext
	mock.lockAddRoleToDBClusterWithContext.RUnlock()
	return calls
}

// AddRoleToDBInstance calls AddRoleToDBInstanceFunc.
func (mock *rdsClientMock) AddRoleToDBInstance(addRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput) (*rds.AddRoleToDBInstanceOutput, error) {
	if mock.AddRoleToDBInstanceFunc == nil {
		panic("rdsClientMock.AddRoleToDBInstanceFunc: method is nil but rdsClient.AddRoleToDBInstance was just called")
	}
	callInfo := struct {
		AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
	}{
		AddRoleToDBInstanceInput: addRoleToDBInstanceInput,
	}
	mock.lockAddRoleToDBInstance.Lock()
	mock.calls.AddRoleToDBInstance = append(mock.calls.AddRoleToDBInstance, callInfo)
	mock.lockAddRoleToDBInstance.Unlock()
	return mock.AddRoleToDBInstanceFunc(addRoleToDBInstanceInput)
}

// AddRoleToDBInstanceCalls gets all the calls that were made to AddRoleToDBInstance.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBInstanceCalls())
func (mock *rdsClientMock) AddRoleToDBInstanceCalls() []struct {
	AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
} {
	var calls []struct {
		AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
	}
	mock.lockAddRoleToDBInstance.RLock()
	calls = mock.calls.AddRoleToDBInstance
	mock.lockAddRoleToDBInstance.RUnlock()
	return calls
}

// AddRoleToDBInstanceRequest calls AddRoleToDBInstanceRequestFunc.
func (mock *rdsClientMock) AddRoleToDBInstanceRequest(addRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput) (*request.Request, *rds.AddRoleToDBInstanceOutput) {
	if mock.AddRoleToDBInstanceRequestFunc == nil {
		panic("rdsClientMock.AddRoleToDBInstanceRequestFunc: method is nil but rdsClient.AddRoleToDBInstanceRequest was just called")
	}
	callInfo := struct {
		AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
	}{
		AddRoleToDBInstanceInput: addRoleToDBInstanceInput,
	}
	mock.lockAddRoleToDBInstanceRequest.Lock()
	mock.calls.AddRoleToDBInstanceRequest = append(mock.calls.AddRoleToDBInstanceRequest, callInfo)
	mock.lockAddRoleToDBInstanceRequest.Unlock()
	return mock.AddRoleToDBInstanceRequestFunc(addRoleToDBInstanceInput)
}

// AddRoleToDBInstanceRequestCalls gets all the calls that were made to AddRoleToDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBInstanceRequestCalls())
func (mock *rdsClientMock) AddRoleToDBInstanceRequestCalls() []struct {
	AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
} {
	var calls []struct {
		AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
	}
	mock.lockAddRoleToDBInstanceRequest.RLock()
	calls = mock.calls.AddRoleToDBInstanceRequest
	mock.lockAddRoleToDBInstanceRequest.RUnlock()
	return calls
}

// AddRoleToDBInstanceWithContext calls AddRoleToDBInstanceWithContextFunc.
func (mock *rdsClientMock) AddRoleToDBInstanceWithContext(contextMoqParam context.Context, addRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput, options ...request.Option) (*rds.AddRoleToDBInstanceOutput, error) {
	if mock.AddRoleToDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.AddRoleToDBInstanceWithContextFunc: method is nil but rdsClient.AddRoleToDBInstanceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		AddRoleToDBInstanceInput: addRoleToDBInstanceInput,
		Options:                  options,
	}
	mock.lockAddRoleToDBInstanceWithContext.Lock()
	mock.calls.AddRoleToDBInstanceWithContext = append(mock.calls.AddRoleToDBInstanceWithContext, callInfo)
	mock.lockAddRoleToDBInstanceWithContext.Unlock()
	return mock.AddRoleToDBInstanceWithContextFunc(contextMoqParam, addRoleToDBInstanceInput, options...)
}

// AddRoleToDBInstanceWithContextCalls gets all the calls that were made to AddRoleToDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.AddRoleToDBInstanceWithContextCalls())
func (mock *rdsClientMock) AddRoleToDBInstanceWithContextCalls() []struct {
	ContextMoqParam          context.Context
	AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		AddRoleToDBInstanceInput *rds.AddRoleToDBInstanceInput
		Options                  []request.Option
	}
	mock.lockAddRoleToDBInstanceWithContext.RLock()
	calls = mock.calls.AddRoleToDBInstanceWithContext
	mock.lockAddRoleToDBInstanceWithContext.RUnlock()
	return calls
}

// AddSourceIdentifierToSubscription calls AddSourceIdentifierToSubscriptionFunc.
func (mock *rdsClientMock) AddSourceIdentifierToSubscription(addSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	if mock.AddSourceIdentifierToSubscriptionFunc == nil {
		panic("rdsClientMock.AddSourceIdentifierToSubscriptionFunc: method is nil but rdsClient.AddSourceIdentifierToSubscription was just called")
	}
	callInfo := struct {
		AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
	}{
		AddSourceIdentifierToSubscriptionInput: addSourceIdentifierToSubscriptionInput,
	}
	mock.lockAddSourceIdentifierToSubscription.Lock()
	mock.calls.AddSourceIdentifierToSubscription = append(mock.calls.AddSourceIdentifierToSubscription, callInfo)
	mock.lockAddSourceIdentifierToSubscription.Unlock()
	return mock.AddSourceIdentifierToSubscriptionFunc(addSourceIdentifierToSubscriptionInput)
}

// AddSourceIdentifierToSubscriptionCalls gets all the calls that were made to AddSourceIdentifierToSubscription.
// Check the length with:
//     len(mockedrdsClient.AddSourceIdentifierToSubscriptionCalls())
func (mock *rdsClientMock) AddSourceIdentifierToSubscriptionCalls() []struct {
	AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
} {
	var calls []struct {
		AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
	}
	mock.lockAddSourceIdentifierToSubscription.RLock()
	calls = mock.calls.AddSourceIdentifierToSubscription
	mock.lockAddSourceIdentifierToSubscription.RUnlock()
	return calls
}

// AddSourceIdentifierToSubscriptionRequest calls AddSourceIdentifierToSubscriptionRequestFunc.
func (mock *rdsClientMock) AddSourceIdentifierToSubscriptionRequest(addSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput) (*request.Request, *rds.AddSourceIdentifierToSubscriptionOutput) {
	if mock.AddSourceIdentifierToSubscriptionRequestFunc == nil {
		panic("rdsClientMock.AddSourceIdentifierToSubscriptionRequestFunc: method is nil but rdsClient.AddSourceIdentifierToSubscriptionRequest was just called")
	}
	callInfo := struct {
		AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
	}{
		AddSourceIdentifierToSubscriptionInput: addSourceIdentifierToSubscriptionInput,
	}
	mock.lockAddSourceIdentifierToSubscriptionRequest.Lock()
	mock.calls.AddSourceIdentifierToSubscriptionRequest = append(mock.calls.AddSourceIdentifierToSubscriptionRequest, callInfo)
	mock.lockAddSourceIdentifierToSubscriptionRequest.Unlock()
	return mock.AddSourceIdentifierToSubscriptionRequestFunc(addSourceIdentifierToSubscriptionInput)
}

// AddSourceIdentifierToSubscriptionRequestCalls gets all the calls that were made to AddSourceIdentifierToSubscriptionRequest.
// Check the length with:
//     len(mockedrdsClient.AddSourceIdentifierToSubscriptionRequestCalls())
func (mock *rdsClientMock) AddSourceIdentifierToSubscriptionRequestCalls() []struct {
	AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
} {
	var calls []struct {
		AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
	}
	mock.lockAddSourceIdentifierToSubscriptionRequest.RLock()
	calls = mock.calls.AddSourceIdentifierToSubscriptionRequest
	mock.lockAddSourceIdentifierToSubscriptionRequest.RUnlock()
	return calls
}

// AddSourceIdentifierToSubscriptionWithContext calls AddSourceIdentifierToSubscriptionWithContextFunc.
func (mock *rdsClientMock) AddSourceIdentifierToSubscriptionWithContext(contextMoqParam context.Context, addSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput, options ...request.Option) (*rds.AddSourceIdentifierToSubscriptionOutput, error) {
	if mock.AddSourceIdentifierToSubscriptionWithContextFunc == nil {
		panic("rdsClientMock.AddSourceIdentifierToSubscriptionWithContextFunc: method is nil but rdsClient.AddSourceIdentifierToSubscriptionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                        context.Context
		AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
		Options                                []request.Option
	}{
		ContextMoqParam:                        contextMoqParam,
		AddSourceIdentifierToSubscriptionInput: addSourceIdentifierToSubscriptionInput,
		Options:                                options,
	}
	mock.lockAddSourceIdentifierToSubscriptionWithContext.Lock()
	mock.calls.AddSourceIdentifierToSubscriptionWithContext = append(mock.calls.AddSourceIdentifierToSubscriptionWithContext, callInfo)
	mock.lockAddSourceIdentifierToSubscriptionWithContext.Unlock()
	return mock.AddSourceIdentifierToSubscriptionWithContextFunc(contextMoqParam, addSourceIdentifierToSubscriptionInput, options...)
}

// AddSourceIdentifierToSubscriptionWithContextCalls gets all the calls that were made to AddSourceIdentifierToSubscriptionWithContext.
// Check the length with:
//     len(mockedrdsClient.AddSourceIdentifierToSubscriptionWithContextCalls())
func (mock *rdsClientMock) AddSourceIdentifierToSubscriptionWithContextCalls() []struct {
	ContextMoqParam                        context.Context
	AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
	Options                                []request.Option
} {
	var calls []struct {
		ContextMoqParam                        context.Context
		AddSourceIdentifierToSubscriptionInput *rds.AddSourceIdentifierToSubscriptionInput
		Options                                []request.Option
	}
	mock.lockAddSourceIdentifierToSubscriptionWithContext.RLock()
	calls = mock.calls.AddSourceIdentifierToSubscriptionWithContext
	mock.lockAddSourceIdentifierToSubscriptionWithContext.RUnlock()
	return calls
}

// AddTagsToResource calls AddTagsToResourceFunc.
func (mock *rdsClientMock) AddTagsToResource(addTagsToResourceInput *rds.AddTagsToResourceInput) (*rds.AddTagsToResourceOutput, error) {
	if mock.AddTagsToResourceFunc == nil {
		panic("rdsClientMock.AddTagsToResourceFunc: method is nil but rdsClient.AddTagsToResource was just called")
	}
	callInfo := struct {
		AddTagsToResourceInput *rds.AddTagsToResourceInput
	}{
		AddTagsToResourceInput: addTagsToResourceInput,
	}
	mock.lockAddTagsToResource.Lock()
	mock.calls.AddTagsToResource = append(mock.calls.AddTagsToResource, callInfo)
	mock.lockAddTagsToResource.Unlock()
	return mock.AddTagsToResourceFunc(addTagsToResourceInput)
}

// AddTagsToResourceCalls gets all the calls that were made to AddTagsToResource.
// Check the length with:
//     len(mockedrdsClient.AddTagsToResourceCalls())
func (mock *rdsClientMock) AddTagsToResourceCalls() []struct {
	AddTagsToResourceInput *rds.AddTagsToResourceInput
} {
	var calls []struct {
		AddTagsToResourceInput *rds.AddTagsToResourceInput
	}
	mock.lockAddTagsToResource.RLock()
	calls = mock.calls.AddTagsToResource
	mock.lockAddTagsToResource.RUnlock()
	return calls
}

// AddTagsToResourceRequest calls AddTagsToResourceRequestFunc.
func (mock *rdsClientMock) AddTagsToResourceRequest(addTagsToResourceInput *rds.AddTagsToResourceInput) (*request.Request, *rds.AddTagsToResourceOutput) {
	if mock.AddTagsToResourceRequestFunc == nil {
		panic("rdsClientMock.AddTagsToResourceRequestFunc: method is nil but rdsClient.AddTagsToResourceRequest was just called")
	}
	callInfo := struct {
		AddTagsToResourceInput *rds.AddTagsToResourceInput
	}{
		AddTagsToResourceInput: addTagsToResourceInput,
	}
	mock.lockAddTagsToResourceRequest.Lock()
	mock.calls.AddTagsToResourceRequest = append(mock.calls.AddTagsToResourceRequest, callInfo)
	mock.lockAddTagsToResourceRequest.Unlock()
	return mock.AddTagsToResourceRequestFunc(addTagsToResourceInput)
}

// AddTagsToResourceRequestCalls gets all the calls that were made to AddTagsToResourceRequest.
// Check the length with:
//     len(mockedrdsClient.AddTagsToResourceRequestCalls())
func (mock *rdsClientMock) AddTagsToResourceRequestCalls() []struct {
	AddTagsToResourceInput *rds.AddTagsToResourceInput
} {
	var calls []struct {
		AddTagsToResourceInput *rds.AddTagsToResourceInput
	}
	mock.lockAddTagsToResourceRequest.RLock()
	calls = mock.calls.AddTagsToResourceRequest
	mock.lockAddTagsToResourceRequest.RUnlock()
	return calls
}

// AddTagsToResourceWithContext calls AddTagsToResourceWithContextFunc.
func (mock *rdsClientMock) AddTagsToResourceWithContext(contextMoqParam context.Context, addTagsToResourceInput *rds.AddTagsToResourceInput, options ...request.Option) (*rds.AddTagsToResourceOutput, error) {
	if mock.AddTagsToResourceWithContextFunc == nil {
		panic("rdsClientMock.AddTagsToResourceWithContextFunc: method is nil but rdsClient.AddTagsToResourceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		AddTagsToResourceInput *rds.AddTagsToResourceInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		AddTagsToResourceInput: addTagsToResourceInput,
		Options:                options,
	}
	mock.lockAddTagsToResourceWithContext.Lock()
	mock.calls.AddTagsToResourceWithContext = append(mock.calls.AddTagsToResourceWithContext, callInfo)
	mock.lockAddTagsToResourceWithContext.Unlock()
	return mock.AddTagsToResourceWithContextFunc(contextMoqParam, addTagsToResourceInput, options...)
}

// AddTagsToResourceWithContextCalls gets all the calls that were made to AddTagsToResourceWithContext.
// Check the length with:
//     len(mockedrdsClient.AddTagsToResourceWithContextCalls())
func (mock *rdsClientMock) AddTagsToResourceWithContextCalls() []struct {
	ContextMoqParam        context.Context
	AddTagsToResourceInput *rds.AddTagsToResourceInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		AddTagsToResourceInput *rds.AddTagsToResourceInput
		Options                []request.Option
	}
	mock.lockAddTagsToResourceWithContext.RLock()
	calls = mock.calls.AddTagsToResourceWithContext
	mock.lockAddTagsToResourceWithContext.RUnlock()
	return calls
}

// ApplyPendingMaintenanceAction calls ApplyPendingMaintenanceActionFunc.
func (mock *rdsClientMock) ApplyPendingMaintenanceAction(applyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	if mock.ApplyPendingMaintenanceActionFunc == nil {
		panic("rdsClientMock.ApplyPendingMaintenanceActionFunc: method is nil but rdsClient.ApplyPendingMaintenanceAction was just called")
	}
	callInfo := struct {
		ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
	}{
		ApplyPendingMaintenanceActionInput: applyPendingMaintenanceActionInput,
	}
	mock.lockApplyPendingMaintenanceAction.Lock()
	mock.calls.ApplyPendingMaintenanceAction = append(mock.calls.ApplyPendingMaintenanceAction, callInfo)
	mock.lockApplyPendingMaintenanceAction.Unlock()
	return mock.ApplyPendingMaintenanceActionFunc(applyPendingMaintenanceActionInput)
}

// ApplyPendingMaintenanceActionCalls gets all the calls that were made to ApplyPendingMaintenanceAction.
// Check the length with:
//     len(mockedrdsClient.ApplyPendingMaintenanceActionCalls())
func (mock *rdsClientMock) ApplyPendingMaintenanceActionCalls() []struct {
	ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
} {
	var calls []struct {
		ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
	}
	mock.lockApplyPendingMaintenanceAction.RLock()
	calls = mock.calls.ApplyPendingMaintenanceAction
	mock.lockApplyPendingMaintenanceAction.RUnlock()
	return calls
}

// ApplyPendingMaintenanceActionRequest calls ApplyPendingMaintenanceActionRequestFunc.
func (mock *rdsClientMock) ApplyPendingMaintenanceActionRequest(applyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput) (*request.Request, *rds.ApplyPendingMaintenanceActionOutput) {
	if mock.ApplyPendingMaintenanceActionRequestFunc == nil {
		panic("rdsClientMock.ApplyPendingMaintenanceActionRequestFunc: method is nil but rdsClient.ApplyPendingMaintenanceActionRequest was just called")
	}
	callInfo := struct {
		ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
	}{
		ApplyPendingMaintenanceActionInput: applyPendingMaintenanceActionInput,
	}
	mock.lockApplyPendingMaintenanceActionRequest.Lock()
	mock.calls.ApplyPendingMaintenanceActionRequest = append(mock.calls.ApplyPendingMaintenanceActionRequest, callInfo)
	mock.lockApplyPendingMaintenanceActionRequest.Unlock()
	return mock.ApplyPendingMaintenanceActionRequestFunc(applyPendingMaintenanceActionInput)
}

// ApplyPendingMaintenanceActionRequestCalls gets all the calls that were made to ApplyPendingMaintenanceActionRequest.
// Check the length with:
//     len(mockedrdsClient.ApplyPendingMaintenanceActionRequestCalls())
func (mock *rdsClientMock) ApplyPendingMaintenanceActionRequestCalls() []struct {
	ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
} {
	var calls []struct {
		ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
	}
	mock.lockApplyPendingMaintenanceActionRequest.RLock()
	calls = mock.calls.ApplyPendingMaintenanceActionRequest
	mock.lockApplyPendingMaintenanceActionRequest.RUnlock()
	return calls
}

// ApplyPendingMaintenanceActionWithContext calls ApplyPendingMaintenanceActionWithContextFunc.
func (mock *rdsClientMock) ApplyPendingMaintenanceActionWithContext(contextMoqParam context.Context, applyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput, options ...request.Option) (*rds.ApplyPendingMaintenanceActionOutput, error) {
	if mock.ApplyPendingMaintenanceActionWithContextFunc == nil {
		panic("rdsClientMock.ApplyPendingMaintenanceActionWithContextFunc: method is nil but rdsClient.ApplyPendingMaintenanceActionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		ApplyPendingMaintenanceActionInput: applyPendingMaintenanceActionInput,
		Options:                            options,
	}
	mock.lockApplyPendingMaintenanceActionWithContext.Lock()
	mock.calls.ApplyPendingMaintenanceActionWithContext = append(mock.calls.ApplyPendingMaintenanceActionWithContext, callInfo)
	mock.lockApplyPendingMaintenanceActionWithContext.Unlock()
	return mock.ApplyPendingMaintenanceActionWithContextFunc(contextMoqParam, applyPendingMaintenanceActionInput, options...)
}

// ApplyPendingMaintenanceActionWithContextCalls gets all the calls that were made to ApplyPendingMaintenanceActionWithContext.
// Check the length with:
//     len(mockedrdsClient.ApplyPendingMaintenanceActionWithContextCalls())
func (mock *rdsClientMock) ApplyPendingMaintenanceActionWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		ApplyPendingMaintenanceActionInput *rds.ApplyPendingMaintenanceActionInput
		Options                            []request.Option
	}
	mock.lockApplyPendingMaintenanceActionWithContext.RLock()
	calls = mock.calls.ApplyPendingMaintenanceActionWithContext
	mock.lockApplyPendingMaintenanceActionWithContext.RUnlock()
	return calls
}

// AuthorizeDBSecurityGroupIngress calls AuthorizeDBSecurityGroupIngressFunc.
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngress(authorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	if mock.AuthorizeDBSecurityGroupIngressFunc == nil {
		panic("rdsClientMock.AuthorizeDBSecurityGroupIngressFunc: method is nil but rdsClient.AuthorizeDBSecurityGroupIngress was just called")
	}
	callInfo := struct {
		AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
	}{
		AuthorizeDBSecurityGroupIngressInput: authorizeDBSecurityGroupIngressInput,
	}
	mock.lockAuthorizeDBSecurityGroupIngress.Lock()
	mock.calls.AuthorizeDBSecurityGroupIngress = append(mock.calls.AuthorizeDBSecurityGroupIngress, callInfo)
	mock.lockAuthorizeDBSecurityGroupIngress.Unlock()
	return mock.AuthorizeDBSecurityGroupIngressFunc(authorizeDBSecurityGroupIngressInput)
}

// AuthorizeDBSecurityGroupIngressCalls gets all the calls that were made to AuthorizeDBSecurityGroupIngress.
// Check the length with:
//     len(mockedrdsClient.AuthorizeDBSecurityGroupIngressCalls())
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngressCalls() []struct {
	AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
} {
	var calls []struct {
		AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
	}
	mock.lockAuthorizeDBSecurityGroupIngress.RLock()
	calls = mock.calls.AuthorizeDBSecurityGroupIngress
	mock.lockAuthorizeDBSecurityGroupIngress.RUnlock()
	return calls
}

// AuthorizeDBSecurityGroupIngressRequest calls AuthorizeDBSecurityGroupIngressRequestFunc.
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngressRequest(authorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput) (*request.Request, *rds.AuthorizeDBSecurityGroupIngressOutput) {
	if mock.AuthorizeDBSecurityGroupIngressRequestFunc == nil {
		panic("rdsClientMock.AuthorizeDBSecurityGroupIngressRequestFunc: method is nil but rdsClient.AuthorizeDBSecurityGroupIngressRequest was just called")
	}
	callInfo := struct {
		AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
	}{
		AuthorizeDBSecurityGroupIngressInput: authorizeDBSecurityGroupIngressInput,
	}
	mock.lockAuthorizeDBSecurityGroupIngressRequest.Lock()
	mock.calls.AuthorizeDBSecurityGroupIngressRequest = append(mock.calls.AuthorizeDBSecurityGroupIngressRequest, callInfo)
	mock.lockAuthorizeDBSecurityGroupIngressRequest.Unlock()
	return mock.AuthorizeDBSecurityGroupIngressRequestFunc(authorizeDBSecurityGroupIngressInput)
}

// AuthorizeDBSecurityGroupIngressRequestCalls gets all the calls that were made to AuthorizeDBSecurityGroupIngressRequest.
// Check the length with:
//     len(mockedrdsClient.AuthorizeDBSecurityGroupIngressRequestCalls())
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngressRequestCalls() []struct {
	AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
} {
	var calls []struct {
		AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
	}
	mock.lockAuthorizeDBSecurityGroupIngressRequest.RLock()
	calls = mock.calls.AuthorizeDBSecurityGroupIngressRequest
	mock.lockAuthorizeDBSecurityGroupIngressRequest.RUnlock()
	return calls
}

// AuthorizeDBSecurityGroupIngressWithContext calls AuthorizeDBSecurityGroupIngressWithContextFunc.
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngressWithContext(contextMoqParam context.Context, authorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput, options ...request.Option) (*rds.AuthorizeDBSecurityGroupIngressOutput, error) {
	if mock.AuthorizeDBSecurityGroupIngressWithContextFunc == nil {
		panic("rdsClientMock.AuthorizeDBSecurityGroupIngressWithContextFunc: method is nil but rdsClient.AuthorizeDBSecurityGroupIngressWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		AuthorizeDBSecurityGroupIngressInput: authorizeDBSecurityGroupIngressInput,
		Options:                              options,
	}
	mock.lockAuthorizeDBSecurityGroupIngressWithContext.Lock()
	mock.calls.AuthorizeDBSecurityGroupIngressWithContext = append(mock.calls.AuthorizeDBSecurityGroupIngressWithContext, callInfo)
	mock.lockAuthorizeDBSecurityGroupIngressWithContext.Unlock()
	return mock.AuthorizeDBSecurityGroupIngressWithContextFunc(contextMoqParam, authorizeDBSecurityGroupIngressInput, options...)
}

// AuthorizeDBSecurityGroupIngressWithContextCalls gets all the calls that were made to AuthorizeDBSecurityGroupIngressWithContext.
// Check the length with:
//     len(mockedrdsClient.AuthorizeDBSecurityGroupIngressWithContextCalls())
func (mock *rdsClientMock) AuthorizeDBSecurityGroupIngressWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		AuthorizeDBSecurityGroupIngressInput *rds.AuthorizeDBSecurityGroupIngressInput
		Options                              []request.Option
	}
	mock.lockAuthorizeDBSecurityGroupIngressWithContext.RLock()
	calls = mock.calls.AuthorizeDBSecurityGroupIngressWithContext
	mock.lockAuthorizeDBSecurityGroupIngressWithContext.RUnlock()
	return calls
}

// BacktrackDBCluster calls BacktrackDBClusterFunc.
func (mock *rdsClientMock) BacktrackDBCluster(backtrackDBClusterInput *rds.BacktrackDBClusterInput) (*rds.BacktrackDBClusterOutput, error) {
	if mock.BacktrackDBClusterFunc == nil {
		panic("rdsClientMock.BacktrackDBClusterFunc: method is nil but rdsClient.BacktrackDBCluster was just called")
	}
	callInfo := struct {
		BacktrackDBClusterInput *rds.BacktrackDBClusterInput
	}{
		BacktrackDBClusterInput: backtrackDBClusterInput,
	}
	mock.lockBacktrackDBCluster.Lock()
	mock.calls.BacktrackDBCluster = append(mock.calls.BacktrackDBCluster, callInfo)
	mock.lockBacktrackDBCluster.Unlock()
	return mock.BacktrackDBClusterFunc(backtrackDBClusterInput)
}

// BacktrackDBClusterCalls gets all the calls that were made to BacktrackDBCluster.
// Check the length with:
//     len(mockedrdsClient.BacktrackDBClusterCalls())
func (mock *rdsClientMock) BacktrackDBClusterCalls() []struct {
	BacktrackDBClusterInput *rds.BacktrackDBClusterInput
} {
	var calls []struct {
		BacktrackDBClusterInput *rds.BacktrackDBClusterInput
	}
	mock.lockBacktrackDBCluster.RLock()
	calls = mock.calls.BacktrackDBCluster
	mock.lockBacktrackDBCluster.RUnlock()
	return calls
}

// BacktrackDBClusterRequest calls BacktrackDBClusterRequestFunc.
func (mock *rdsClientMock) BacktrackDBClusterRequest(backtrackDBClusterInput *rds.BacktrackDBClusterInput) (*request.Request, *rds.BacktrackDBClusterOutput) {
	if mock.BacktrackDBClusterRequestFunc == nil {
		panic("rdsClientMock.BacktrackDBClusterRequestFunc: method is nil but rdsClient.BacktrackDBClusterRequest was just called")
	}
	callInfo := struct {
		BacktrackDBClusterInput *rds.BacktrackDBClusterInput
	}{
		BacktrackDBClusterInput: backtrackDBClusterInput,
	}
	mock.lockBacktrackDBClusterRequest.Lock()
	mock.calls.BacktrackDBClusterRequest = append(mock.calls.BacktrackDBClusterRequest, callInfo)
	mock.lockBacktrackDBClusterRequest.Unlock()
	return mock.BacktrackDBClusterRequestFunc(backtrackDBClusterInput)
}

// BacktrackDBClusterRequestCalls gets all the calls that were made to BacktrackDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.BacktrackDBClusterRequestCalls())
func (mock *rdsClientMock) BacktrackDBClusterRequestCalls() []struct {
	BacktrackDBClusterInput *rds.BacktrackDBClusterInput
} {
	var calls []struct {
		BacktrackDBClusterInput *rds.BacktrackDBClusterInput
	}
	mock.lockBacktrackDBClusterRequest.RLock()
	calls = mock.calls.BacktrackDBClusterRequest
	mock.lockBacktrackDBClusterRequest.RUnlock()
	return calls
}

// BacktrackDBClusterWithContext calls BacktrackDBClusterWithContextFunc.
func (mock *rdsClientMock) BacktrackDBClusterWithContext(contextMoqParam context.Context, backtrackDBClusterInput *rds.BacktrackDBClusterInput, options ...request.Option) (*rds.BacktrackDBClusterOutput, error) {
	if mock.BacktrackDBClusterWithContextFunc == nil {
		panic("rdsClientMock.BacktrackDBClusterWithContextFunc: method is nil but rdsClient.BacktrackDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		BacktrackDBClusterInput *rds.BacktrackDBClusterInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		BacktrackDBClusterInput: backtrackDBClusterInput,
		Options:                 options,
	}
	mock.lockBacktrackDBClusterWithContext.Lock()
	mock.calls.BacktrackDBClusterWithContext = append(mock.calls.BacktrackDBClusterWithContext, callInfo)
	mock.lockBacktrackDBClusterWithContext.Unlock()
	return mock.BacktrackDBClusterWithContextFunc(contextMoqParam, backtrackDBClusterInput, options...)
}

// BacktrackDBClusterWithContextCalls gets all the calls that were made to BacktrackDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.BacktrackDBClusterWithContextCalls())
func (mock *rdsClientMock) BacktrackDBClusterWithContextCalls() []struct {
	ContextMoqParam         context.Context
	BacktrackDBClusterInput *rds.BacktrackDBClusterInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		BacktrackDBClusterInput *rds.BacktrackDBClusterInput
		Options                 []request.Option
	}
	mock.lockBacktrackDBClusterWithContext.RLock()
	calls = mock.calls.BacktrackDBClusterWithContext
	mock.lockBacktrackDBClusterWithContext.RUnlock()
	return calls
}

// CancelExportTask calls CancelExportTaskFunc.
func (mock *rdsClientMock) CancelExportTask(cancelExportTaskInput *rds.CancelExportTaskInput) (*rds.CancelExportTaskOutput, error) {
	if mock.CancelExportTaskFunc == nil {
		panic("rdsClientMock.CancelExportTaskFunc: method is nil but rdsClient.CancelExportTask was just called")
	}
	callInfo := struct {
		CancelExportTaskInput *rds.CancelExportTaskInput
	}{
		CancelExportTaskInput: cancelExportTaskInput,
	}
	mock.lockCancelExportTask.Lock()
	mock.calls.CancelExportTask = append(mock.calls.CancelExportTask, callInfo)
	mock.lockCancelExportTask.Unlock()
	return mock.CancelExportTaskFunc(cancelExportTaskInput)
}

// CancelExportTaskCalls gets all the calls that were made to CancelExportTask.
// Check the length with:
//     len(mockedrdsClient.CancelExportTaskCalls())
func (mock *rdsClientMock) CancelExportTaskCalls() []struct {
	CancelExportTaskInput *rds.CancelExportTaskInput
} {
	var calls []struct {
		CancelExportTaskInput *rds.CancelExportTaskInput
	}
	mock.lockCancelExportTask.RLock()
	calls = mock.calls.CancelExportTask
	mock.lockCancelExportTask.RUnlock()
	return calls
}

// CancelExportTaskRequest calls CancelExportTaskRequestFunc.
func (mock *rdsClientMock) CancelExportTaskRequest(cancelExportTaskInput *rds.CancelExportTaskInput) (*request.Request, *rds.CancelExportTaskOutput) {
	if mock.CancelExportTaskRequestFunc == nil {
		panic("rdsClientMock.CancelExportTaskRequestFunc: method is nil but rdsClient.CancelExportTaskRequest was just called")
	}
	callInfo := struct {
		CancelExportTaskInput *rds.CancelExportTaskInput
	}{
		CancelExportTaskInput: cancelExportTaskInput,
	}
	mock.lockCancelExportTaskRequest.Lock()
	mock.calls.CancelExportTaskRequest = append(mock.calls.CancelExportTaskRequest, callInfo)
	mock.lockCancelExportTaskRequest.Unlock()
	return mock.CancelExportTaskRequestFunc(cancelExportTaskInput)
}

// CancelExportTaskRequestCalls gets all the calls that were made to CancelExportTaskRequest.
// Check the length with:
//     len(mockedrdsClient.CancelExportTaskRequestCalls())
func (mock *rdsClientMock) CancelExportTaskRequestCalls() []struct {
	CancelExportTaskInput *rds.CancelExportTaskInput
} {
	var calls []struct {
		CancelExportTaskInput *rds.CancelExportTaskInput
	}
	mock.lockCancelExportTaskRequest.RLock()
	calls = mock.calls.CancelExportTaskRequest
	mock.lockCancelExportTaskRequest.RUnlock()
	return calls
}

// CancelExportTaskWithContext calls CancelExportTaskWithContextFunc.
func (mock *rdsClientMock) CancelExportTaskWithContext(contextMoqParam context.Context, cancelExportTaskInput *rds.CancelExportTaskInput, options ...request.Option) (*rds.CancelExportTaskOutput, error) {
	if mock.CancelExportTaskWithContextFunc == nil {
		panic("rdsClientMock.CancelExportTaskWithContextFunc: method is nil but rdsClient.CancelExportTaskWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		CancelExportTaskInput *rds.CancelExportTaskInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		CancelExportTaskInput: cancelExportTaskInput,
		Options:               options,
	}
	mock.lockCancelExportTaskWithContext.Lock()
	mock.calls.CancelExportTaskWithContext = append(mock.calls.CancelExportTaskWithContext, callInfo)
	mock.lockCancelExportTaskWithContext.Unlock()
	return mock.CancelExportTaskWithContextFunc(contextMoqParam, cancelExportTaskInput, options...)
}

// CancelExportTaskWithContextCalls gets all the calls that were made to CancelExportTaskWithContext.
// Check the length with:
//     len(mockedrdsClient.CancelExportTaskWithContextCalls())
func (mock *rdsClientMock) CancelExportTaskWithContextCalls() []struct {
	ContextMoqParam       context.Context
	CancelExportTaskInput *rds.CancelExportTaskInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		CancelExportTaskInput *rds.CancelExportTaskInput
		Options               []request.Option
	}
	mock.lockCancelExportTaskWithContext.RLock()
	calls = mock.calls.CancelExportTaskWithContext
	mock.lockCancelExportTaskWithContext.RUnlock()
	return calls
}

// CopyDBClusterParameterGroup calls CopyDBClusterParameterGroupFunc.
func (mock *rdsClientMock) CopyDBClusterParameterGroup(copyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput) (*rds.CopyDBClusterParameterGroupOutput, error) {
	if mock.CopyDBClusterParameterGroupFunc == nil {
		panic("rdsClientMock.CopyDBClusterParameterGroupFunc: method is nil but rdsClient.CopyDBClusterParameterGroup was just called")
	}
	callInfo := struct {
		CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
	}{
		CopyDBClusterParameterGroupInput: copyDBClusterParameterGroupInput,
	}
	mock.lockCopyDBClusterParameterGroup.Lock()
	mock.calls.CopyDBClusterParameterGroup = append(mock.calls.CopyDBClusterParameterGroup, callInfo)
	mock.lockCopyDBClusterParameterGroup.Unlock()
	return mock.CopyDBClusterParameterGroupFunc(copyDBClusterParameterGroupInput)
}

// CopyDBClusterParameterGroupCalls gets all the calls that were made to CopyDBClusterParameterGroup.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterParameterGroupCalls())
func (mock *rdsClientMock) CopyDBClusterParameterGroupCalls() []struct {
	CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
} {
	var calls []struct {
		CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
	}
	mock.lockCopyDBClusterParameterGroup.RLock()
	calls = mock.calls.CopyDBClusterParameterGroup
	mock.lockCopyDBClusterParameterGroup.RUnlock()
	return calls
}

// CopyDBClusterParameterGroupRequest calls CopyDBClusterParameterGroupRequestFunc.
func (mock *rdsClientMock) CopyDBClusterParameterGroupRequest(copyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput) (*request.Request, *rds.CopyDBClusterParameterGroupOutput) {
	if mock.CopyDBClusterParameterGroupRequestFunc == nil {
		panic("rdsClientMock.CopyDBClusterParameterGroupRequestFunc: method is nil but rdsClient.CopyDBClusterParameterGroupRequest was just called")
	}
	callInfo := struct {
		CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
	}{
		CopyDBClusterParameterGroupInput: copyDBClusterParameterGroupInput,
	}
	mock.lockCopyDBClusterParameterGroupRequest.Lock()
	mock.calls.CopyDBClusterParameterGroupRequest = append(mock.calls.CopyDBClusterParameterGroupRequest, callInfo)
	mock.lockCopyDBClusterParameterGroupRequest.Unlock()
	return mock.CopyDBClusterParameterGroupRequestFunc(copyDBClusterParameterGroupInput)
}

// CopyDBClusterParameterGroupRequestCalls gets all the calls that were made to CopyDBClusterParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterParameterGroupRequestCalls())
func (mock *rdsClientMock) CopyDBClusterParameterGroupRequestCalls() []struct {
	CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
} {
	var calls []struct {
		CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
	}
	mock.lockCopyDBClusterParameterGroupRequest.RLock()
	calls = mock.calls.CopyDBClusterParameterGroupRequest
	mock.lockCopyDBClusterParameterGroupRequest.RUnlock()
	return calls
}

// CopyDBClusterParameterGroupWithContext calls CopyDBClusterParameterGroupWithContextFunc.
func (mock *rdsClientMock) CopyDBClusterParameterGroupWithContext(contextMoqParam context.Context, copyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput, options ...request.Option) (*rds.CopyDBClusterParameterGroupOutput, error) {
	if mock.CopyDBClusterParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.CopyDBClusterParameterGroupWithContextFunc: method is nil but rdsClient.CopyDBClusterParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		CopyDBClusterParameterGroupInput: copyDBClusterParameterGroupInput,
		Options:                          options,
	}
	mock.lockCopyDBClusterParameterGroupWithContext.Lock()
	mock.calls.CopyDBClusterParameterGroupWithContext = append(mock.calls.CopyDBClusterParameterGroupWithContext, callInfo)
	mock.lockCopyDBClusterParameterGroupWithContext.Unlock()
	return mock.CopyDBClusterParameterGroupWithContextFunc(contextMoqParam, copyDBClusterParameterGroupInput, options...)
}

// CopyDBClusterParameterGroupWithContextCalls gets all the calls that were made to CopyDBClusterParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterParameterGroupWithContextCalls())
func (mock *rdsClientMock) CopyDBClusterParameterGroupWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		CopyDBClusterParameterGroupInput *rds.CopyDBClusterParameterGroupInput
		Options                          []request.Option
	}
	mock.lockCopyDBClusterParameterGroupWithContext.RLock()
	calls = mock.calls.CopyDBClusterParameterGroupWithContext
	mock.lockCopyDBClusterParameterGroupWithContext.RUnlock()
	return calls
}

// CopyDBClusterSnapshot calls CopyDBClusterSnapshotFunc.
func (mock *rdsClientMock) CopyDBClusterSnapshot(copyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput) (*rds.CopyDBClusterSnapshotOutput, error) {
	if mock.CopyDBClusterSnapshotFunc == nil {
		panic("rdsClientMock.CopyDBClusterSnapshotFunc: method is nil but rdsClient.CopyDBClusterSnapshot was just called")
	}
	callInfo := struct {
		CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
	}{
		CopyDBClusterSnapshotInput: copyDBClusterSnapshotInput,
	}
	mock.lockCopyDBClusterSnapshot.Lock()
	mock.calls.CopyDBClusterSnapshot = append(mock.calls.CopyDBClusterSnapshot, callInfo)
	mock.lockCopyDBClusterSnapshot.Unlock()
	return mock.CopyDBClusterSnapshotFunc(copyDBClusterSnapshotInput)
}

// CopyDBClusterSnapshotCalls gets all the calls that were made to CopyDBClusterSnapshot.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterSnapshotCalls())
func (mock *rdsClientMock) CopyDBClusterSnapshotCalls() []struct {
	CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
} {
	var calls []struct {
		CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
	}
	mock.lockCopyDBClusterSnapshot.RLock()
	calls = mock.calls.CopyDBClusterSnapshot
	mock.lockCopyDBClusterSnapshot.RUnlock()
	return calls
}

// CopyDBClusterSnapshotRequest calls CopyDBClusterSnapshotRequestFunc.
func (mock *rdsClientMock) CopyDBClusterSnapshotRequest(copyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput) (*request.Request, *rds.CopyDBClusterSnapshotOutput) {
	if mock.CopyDBClusterSnapshotRequestFunc == nil {
		panic("rdsClientMock.CopyDBClusterSnapshotRequestFunc: method is nil but rdsClient.CopyDBClusterSnapshotRequest was just called")
	}
	callInfo := struct {
		CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
	}{
		CopyDBClusterSnapshotInput: copyDBClusterSnapshotInput,
	}
	mock.lockCopyDBClusterSnapshotRequest.Lock()
	mock.calls.CopyDBClusterSnapshotRequest = append(mock.calls.CopyDBClusterSnapshotRequest, callInfo)
	mock.lockCopyDBClusterSnapshotRequest.Unlock()
	return mock.CopyDBClusterSnapshotRequestFunc(copyDBClusterSnapshotInput)
}

// CopyDBClusterSnapshotRequestCalls gets all the calls that were made to CopyDBClusterSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterSnapshotRequestCalls())
func (mock *rdsClientMock) CopyDBClusterSnapshotRequestCalls() []struct {
	CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
} {
	var calls []struct {
		CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
	}
	mock.lockCopyDBClusterSnapshotRequest.RLock()
	calls = mock.calls.CopyDBClusterSnapshotRequest
	mock.lockCopyDBClusterSnapshotRequest.RUnlock()
	return calls
}

// CopyDBClusterSnapshotWithContext calls CopyDBClusterSnapshotWithContextFunc.
func (mock *rdsClientMock) CopyDBClusterSnapshotWithContext(contextMoqParam context.Context, copyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput, options ...request.Option) (*rds.CopyDBClusterSnapshotOutput, error) {
	if mock.CopyDBClusterSnapshotWithContextFunc == nil {
		panic("rdsClientMock.CopyDBClusterSnapshotWithContextFunc: method is nil but rdsClient.CopyDBClusterSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		CopyDBClusterSnapshotInput: copyDBClusterSnapshotInput,
		Options:                    options,
	}
	mock.lockCopyDBClusterSnapshotWithContext.Lock()
	mock.calls.CopyDBClusterSnapshotWithContext = append(mock.calls.CopyDBClusterSnapshotWithContext, callInfo)
	mock.lockCopyDBClusterSnapshotWithContext.Unlock()
	return mock.CopyDBClusterSnapshotWithContextFunc(contextMoqParam, copyDBClusterSnapshotInput, options...)
}

// CopyDBClusterSnapshotWithContextCalls gets all the calls that were made to CopyDBClusterSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.CopyDBClusterSnapshotWithContextCalls())
func (mock *rdsClientMock) CopyDBClusterSnapshotWithContextCalls() []struct {
	ContextMoqParam            context.Context
	CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		CopyDBClusterSnapshotInput *rds.CopyDBClusterSnapshotInput
		Options                    []request.Option
	}
	mock.lockCopyDBClusterSnapshotWithContext.RLock()
	calls = mock.calls.CopyDBClusterSnapshotWithContext
	mock.lockCopyDBClusterSnapshotWithContext.RUnlock()
	return calls
}

// CopyDBParameterGroup calls CopyDBParameterGroupFunc.
func (mock *rdsClientMock) CopyDBParameterGroup(copyDBParameterGroupInput *rds.CopyDBParameterGroupInput) (*rds.CopyDBParameterGroupOutput, error) {
	if mock.CopyDBParameterGroupFunc == nil {
		panic("rdsClientMock.CopyDBParameterGroupFunc: method is nil but rdsClient.CopyDBParameterGroup was just called")
	}
	callInfo := struct {
		CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
	}{
		CopyDBParameterGroupInput: copyDBParameterGroupInput,
	}
	mock.lockCopyDBParameterGroup.Lock()
	mock.calls.CopyDBParameterGroup = append(mock.calls.CopyDBParameterGroup, callInfo)
	mock.lockCopyDBParameterGroup.Unlock()
	return mock.CopyDBParameterGroupFunc(copyDBParameterGroupInput)
}

// CopyDBParameterGroupCalls gets all the calls that were made to CopyDBParameterGroup.
// Check the length with:
//     len(mockedrdsClient.CopyDBParameterGroupCalls())
func (mock *rdsClientMock) CopyDBParameterGroupCalls() []struct {
	CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
} {
	var calls []struct {
		CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
	}
	mock.lockCopyDBParameterGroup.RLock()
	calls = mock.calls.CopyDBParameterGroup
	mock.lockCopyDBParameterGroup.RUnlock()
	return calls
}

// CopyDBParameterGroupRequest calls CopyDBParameterGroupRequestFunc.
func (mock *rdsClientMock) CopyDBParameterGroupRequest(copyDBParameterGroupInput *rds.CopyDBParameterGroupInput) (*request.Request, *rds.CopyDBParameterGroupOutput) {
	if mock.CopyDBParameterGroupRequestFunc == nil {
		panic("rdsClientMock.CopyDBParameterGroupRequestFunc: method is nil but rdsClient.CopyDBParameterGroupRequest was just called")
	}
	callInfo := struct {
		CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
	}{
		CopyDBParameterGroupInput: copyDBParameterGroupInput,
	}
	mock.lockCopyDBParameterGroupRequest.Lock()
	mock.calls.CopyDBParameterGroupRequest = append(mock.calls.CopyDBParameterGroupRequest, callInfo)
	mock.lockCopyDBParameterGroupRequest.Unlock()
	return mock.CopyDBParameterGroupRequestFunc(copyDBParameterGroupInput)
}

// CopyDBParameterGroupRequestCalls gets all the calls that were made to CopyDBParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CopyDBParameterGroupRequestCalls())
func (mock *rdsClientMock) CopyDBParameterGroupRequestCalls() []struct {
	CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
} {
	var calls []struct {
		CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
	}
	mock.lockCopyDBParameterGroupRequest.RLock()
	calls = mock.calls.CopyDBParameterGroupRequest
	mock.lockCopyDBParameterGroupRequest.RUnlock()
	return calls
}

// CopyDBParameterGroupWithContext calls CopyDBParameterGroupWithContextFunc.
func (mock *rdsClientMock) CopyDBParameterGroupWithContext(contextMoqParam context.Context, copyDBParameterGroupInput *rds.CopyDBParameterGroupInput, options ...request.Option) (*rds.CopyDBParameterGroupOutput, error) {
	if mock.CopyDBParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.CopyDBParameterGroupWithContextFunc: method is nil but rdsClient.CopyDBParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		CopyDBParameterGroupInput: copyDBParameterGroupInput,
		Options:                   options,
	}
	mock.lockCopyDBParameterGroupWithContext.Lock()
	mock.calls.CopyDBParameterGroupWithContext = append(mock.calls.CopyDBParameterGroupWithContext, callInfo)
	mock.lockCopyDBParameterGroupWithContext.Unlock()
	return mock.CopyDBParameterGroupWithContextFunc(contextMoqParam, copyDBParameterGroupInput, options...)
}

// CopyDBParameterGroupWithContextCalls gets all the calls that were made to CopyDBParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CopyDBParameterGroupWithContextCalls())
func (mock *rdsClientMock) CopyDBParameterGroupWithContextCalls() []struct {
	ContextMoqParam           context.Context
	CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		CopyDBParameterGroupInput *rds.CopyDBParameterGroupInput
		Options                   []request.Option
	}
	mock.lockCopyDBParameterGroupWithContext.RLock()
	calls = mock.calls.CopyDBParameterGroupWithContext
	mock.lockCopyDBParameterGroupWithContext.RUnlock()
	return calls
}

// CopyDBSnapshot calls CopyDBSnapshotFunc.
func (mock *rdsClientMock) CopyDBSnapshot(copyDBSnapshotInput *rds.CopyDBSnapshotInput) (*rds.CopyDBSnapshotOutput, error) {
	if mock.CopyDBSnapshotFunc == nil {
		panic("rdsClientMock.CopyDBSnapshotFunc: method is nil but rdsClient.CopyDBSnapshot was just called")
	}
	callInfo := struct {
		CopyDBSnapshotInput *rds.CopyDBSnapshotInput
	}{
		CopyDBSnapshotInput: copyDBSnapshotInput,
	}
	mock.lockCopyDBSnapshot.Lock()
	mock.calls.CopyDBSnapshot = append(mock.calls.CopyDBSnapshot, callInfo)
	mock.lockCopyDBSnapshot.Unlock()
	return mock.CopyDBSnapshotFunc(copyDBSnapshotInput)
}

// CopyDBSnapshotCalls gets all the calls that were made to CopyDBSnapshot.
// Check the length with:
//     len(mockedrdsClient.CopyDBSnapshotCalls())
func (mock *rdsClientMock) CopyDBSnapshotCalls() []struct {
	CopyDBSnapshotInput *rds.CopyDBSnapshotInput
} {
	var calls []struct {
		CopyDBSnapshotInput *rds.CopyDBSnapshotInput
	}
	mock.lockCopyDBSnapshot.RLock()
	calls = mock.calls.CopyDBSnapshot
	mock.lockCopyDBSnapshot.RUnlock()
	return calls
}

// CopyDBSnapshotRequest calls CopyDBSnapshotRequestFunc.
func (mock *rdsClientMock) CopyDBSnapshotRequest(copyDBSnapshotInput *rds.CopyDBSnapshotInput) (*request.Request, *rds.CopyDBSnapshotOutput) {
	if mock.CopyDBSnapshotRequestFunc == nil {
		panic("rdsClientMock.CopyDBSnapshotRequestFunc: method is nil but rdsClient.CopyDBSnapshotRequest was just called")
	}
	callInfo := struct {
		CopyDBSnapshotInput *rds.CopyDBSnapshotInput
	}{
		CopyDBSnapshotInput: copyDBSnapshotInput,
	}
	mock.lockCopyDBSnapshotRequest.Lock()
	mock.calls.CopyDBSnapshotRequest = append(mock.calls.CopyDBSnapshotRequest, callInfo)
	mock.lockCopyDBSnapshotRequest.Unlock()
	return mock.CopyDBSnapshotRequestFunc(copyDBSnapshotInput)
}

// CopyDBSnapshotRequestCalls gets all the calls that were made to CopyDBSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.CopyDBSnapshotRequestCalls())
func (mock *rdsClientMock) CopyDBSnapshotRequestCalls() []struct {
	CopyDBSnapshotInput *rds.CopyDBSnapshotInput
} {
	var calls []struct {
		CopyDBSnapshotInput *rds.CopyDBSnapshotInput
	}
	mock.lockCopyDBSnapshotRequest.RLock()
	calls = mock.calls.CopyDBSnapshotRequest
	mock.lockCopyDBSnapshotRequest.RUnlock()
	return calls
}

// CopyDBSnapshotWithContext calls CopyDBSnapshotWithContextFunc.
func (mock *rdsClientMock) CopyDBSnapshotWithContext(contextMoqParam context.Context, copyDBSnapshotInput *rds.CopyDBSnapshotInput, options ...request.Option) (*rds.CopyDBSnapshotOutput, error) {
	if mock.CopyDBSnapshotWithContextFunc == nil {
		panic("rdsClientMock.CopyDBSnapshotWithContextFunc: method is nil but rdsClient.CopyDBSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		CopyDBSnapshotInput *rds.CopyDBSnapshotInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		CopyDBSnapshotInput: copyDBSnapshotInput,
		Options:             options,
	}
	mock.lockCopyDBSnapshotWithContext.Lock()
	mock.calls.CopyDBSnapshotWithContext = append(mock.calls.CopyDBSnapshotWithContext, callInfo)
	mock.lockCopyDBSnapshotWithContext.Unlock()
	return mock.CopyDBSnapshotWithContextFunc(contextMoqParam, copyDBSnapshotInput, options...)
}

// CopyDBSnapshotWithContextCalls gets all the calls that were made to CopyDBSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.CopyDBSnapshotWithContextCalls())
func (mock *rdsClientMock) CopyDBSnapshotWithContextCalls() []struct {
	ContextMoqParam     context.Context
	CopyDBSnapshotInput *rds.CopyDBSnapshotInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		CopyDBSnapshotInput *rds.CopyDBSnapshotInput
		Options             []request.Option
	}
	mock.lockCopyDBSnapshotWithContext.RLock()
	calls = mock.calls.CopyDBSnapshotWithContext
	mock.lockCopyDBSnapshotWithContext.RUnlock()
	return calls
}

// CopyOptionGroup calls CopyOptionGroupFunc.
func (mock *rdsClientMock) CopyOptionGroup(copyOptionGroupInput *rds.CopyOptionGroupInput) (*rds.CopyOptionGroupOutput, error) {
	if mock.CopyOptionGroupFunc == nil {
		panic("rdsClientMock.CopyOptionGroupFunc: method is nil but rdsClient.CopyOptionGroup was just called")
	}
	callInfo := struct {
		CopyOptionGroupInput *rds.CopyOptionGroupInput
	}{
		CopyOptionGroupInput: copyOptionGroupInput,
	}
	mock.lockCopyOptionGroup.Lock()
	mock.calls.CopyOptionGroup = append(mock.calls.CopyOptionGroup, callInfo)
	mock.lockCopyOptionGroup.Unlock()
	return mock.CopyOptionGroupFunc(copyOptionGroupInput)
}

// CopyOptionGroupCalls gets all the calls that were made to CopyOptionGroup.
// Check the length with:
//     len(mockedrdsClient.CopyOptionGroupCalls())
func (mock *rdsClientMock) CopyOptionGroupCalls() []struct {
	CopyOptionGroupInput *rds.CopyOptionGroupInput
} {
	var calls []struct {
		CopyOptionGroupInput *rds.CopyOptionGroupInput
	}
	mock.lockCopyOptionGroup.RLock()
	calls = mock.calls.CopyOptionGroup
	mock.lockCopyOptionGroup.RUnlock()
	return calls
}

// CopyOptionGroupRequest calls CopyOptionGroupRequestFunc.
func (mock *rdsClientMock) CopyOptionGroupRequest(copyOptionGroupInput *rds.CopyOptionGroupInput) (*request.Request, *rds.CopyOptionGroupOutput) {
	if mock.CopyOptionGroupRequestFunc == nil {
		panic("rdsClientMock.CopyOptionGroupRequestFunc: method is nil but rdsClient.CopyOptionGroupRequest was just called")
	}
	callInfo := struct {
		CopyOptionGroupInput *rds.CopyOptionGroupInput
	}{
		CopyOptionGroupInput: copyOptionGroupInput,
	}
	mock.lockCopyOptionGroupRequest.Lock()
	mock.calls.CopyOptionGroupRequest = append(mock.calls.CopyOptionGroupRequest, callInfo)
	mock.lockCopyOptionGroupRequest.Unlock()
	return mock.CopyOptionGroupRequestFunc(copyOptionGroupInput)
}

// CopyOptionGroupRequestCalls gets all the calls that were made to CopyOptionGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CopyOptionGroupRequestCalls())
func (mock *rdsClientMock) CopyOptionGroupRequestCalls() []struct {
	CopyOptionGroupInput *rds.CopyOptionGroupInput
} {
	var calls []struct {
		CopyOptionGroupInput *rds.CopyOptionGroupInput
	}
	mock.lockCopyOptionGroupRequest.RLock()
	calls = mock.calls.CopyOptionGroupRequest
	mock.lockCopyOptionGroupRequest.RUnlock()
	return calls
}

// CopyOptionGroupWithContext calls CopyOptionGroupWithContextFunc.
func (mock *rdsClientMock) CopyOptionGroupWithContext(contextMoqParam context.Context, copyOptionGroupInput *rds.CopyOptionGroupInput, options ...request.Option) (*rds.CopyOptionGroupOutput, error) {
	if mock.CopyOptionGroupWithContextFunc == nil {
		panic("rdsClientMock.CopyOptionGroupWithContextFunc: method is nil but rdsClient.CopyOptionGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		CopyOptionGroupInput *rds.CopyOptionGroupInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		CopyOptionGroupInput: copyOptionGroupInput,
		Options:              options,
	}
	mock.lockCopyOptionGroupWithContext.Lock()
	mock.calls.CopyOptionGroupWithContext = append(mock.calls.CopyOptionGroupWithContext, callInfo)
	mock.lockCopyOptionGroupWithContext.Unlock()
	return mock.CopyOptionGroupWithContextFunc(contextMoqParam, copyOptionGroupInput, options...)
}

// CopyOptionGroupWithContextCalls gets all the calls that were made to CopyOptionGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CopyOptionGroupWithContextCalls())
func (mock *rdsClientMock) CopyOptionGroupWithContextCalls() []struct {
	ContextMoqParam      context.Context
	CopyOptionGroupInput *rds.CopyOptionGroupInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		CopyOptionGroupInput *rds.CopyOptionGroupInput
		Options              []request.Option
	}
	mock.lockCopyOptionGroupWithContext.RLock()
	calls = mock.calls.CopyOptionGroupWithContext
	mock.lockCopyOptionGroupWithContext.RUnlock()
	return calls
}

// CreateCustomDBEngineVersion calls CreateCustomDBEngineVersionFunc.
func (mock *rdsClientMock) CreateCustomDBEngineVersion(createCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput) (*rds.CreateCustomDBEngineVersionOutput, error) {
	if mock.CreateCustomDBEngineVersionFunc == nil {
		panic("rdsClientMock.CreateCustomDBEngineVersionFunc: method is nil but rdsClient.CreateCustomDBEngineVersion was just called")
	}
	callInfo := struct {
		CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
	}{
		CreateCustomDBEngineVersionInput: createCustomDBEngineVersionInput,
	}
	mock.lockCreateCustomDBEngineVersion.Lock()
	mock.calls.CreateCustomDBEngineVersion = append(mock.calls.CreateCustomDBEngineVersion, callInfo)
	mock.lockCreateCustomDBEngineVersion.Unlock()
	return mock.CreateCustomDBEngineVersionFunc(createCustomDBEngineVersionInput)
}

// CreateCustomDBEngineVersionCalls gets all the calls that were made to CreateCustomDBEngineVersion.
// Check the length with:
//     len(mockedrdsClient.CreateCustomDBEngineVersionCalls())
func (mock *rdsClientMock) CreateCustomDBEngineVersionCalls() []struct {
	CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
} {
	var calls []struct {
		CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
	}
	mock.lockCreateCustomDBEngineVersion.RLock()
	calls = mock.calls.CreateCustomDBEngineVersion
	mock.lockCreateCustomDBEngineVersion.RUnlock()
	return calls
}

// CreateCustomDBEngineVersionRequest calls CreateCustomDBEngineVersionRequestFunc.
func (mock *rdsClientMock) CreateCustomDBEngineVersionRequest(createCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput) (*request.Request, *rds.CreateCustomDBEngineVersionOutput) {
	if mock.CreateCustomDBEngineVersionRequestFunc == nil {
		panic("rdsClientMock.CreateCustomDBEngineVersionRequestFunc: method is nil but rdsClient.CreateCustomDBEngineVersionRequest was just called")
	}
	callInfo := struct {
		CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
	}{
		CreateCustomDBEngineVersionInput: createCustomDBEngineVersionInput,
	}
	mock.lockCreateCustomDBEngineVersionRequest.Lock()
	mock.calls.CreateCustomDBEngineVersionRequest = append(mock.calls.CreateCustomDBEngineVersionRequest, callInfo)
	mock.lockCreateCustomDBEngineVersionRequest.Unlock()
	return mock.CreateCustomDBEngineVersionRequestFunc(createCustomDBEngineVersionInput)
}

// CreateCustomDBEngineVersionRequestCalls gets all the calls that were made to CreateCustomDBEngineVersionRequest.
// Check the length with:
//     len(mockedrdsClient.CreateCustomDBEngineVersionRequestCalls())
func (mock *rdsClientMock) CreateCustomDBEngineVersionRequestCalls() []struct {
	CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
} {
	var calls []struct {
		CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
	}
	mock.lockCreateCustomDBEngineVersionRequest.RLock()
	calls = mock.calls.CreateCustomDBEngineVersionRequest
	mock.lockCreateCustomDBEngineVersionRequest.RUnlock()
	return calls
}

// CreateCustomDBEngineVersionWithContext calls CreateCustomDBEngineVersionWithContextFunc.
func (mock *rdsClientMock) CreateCustomDBEngineVersionWithContext(contextMoqParam context.Context, createCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput, options ...request.Option) (*rds.CreateCustomDBEngineVersionOutput, error) {
	if mock.CreateCustomDBEngineVersionWithContextFunc == nil {
		panic("rdsClientMock.CreateCustomDBEngineVersionWithContextFunc: method is nil but rdsClient.CreateCustomDBEngineVersionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		CreateCustomDBEngineVersionInput: createCustomDBEngineVersionInput,
		Options:                          options,
	}
	mock.lockCreateCustomDBEngineVersionWithContext.Lock()
	mock.calls.CreateCustomDBEngineVersionWithContext = append(mock.calls.CreateCustomDBEngineVersionWithContext, callInfo)
	mock.lockCreateCustomDBEngineVersionWithContext.Unlock()
	return mock.CreateCustomDBEngineVersionWithContextFunc(contextMoqParam, createCustomDBEngineVersionInput, options...)
}

// CreateCustomDBEngineVersionWithContextCalls gets all the calls that were made to CreateCustomDBEngineVersionWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateCustomDBEngineVersionWithContextCalls())
func (mock *rdsClientMock) CreateCustomDBEngineVersionWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		CreateCustomDBEngineVersionInput *rds.CreateCustomDBEngineVersionInput
		Options                          []request.Option
	}
	mock.lockCreateCustomDBEngineVersionWithContext.RLock()
	calls = mock.calls.CreateCustomDBEngineVersionWithContext
	mock.lockCreateCustomDBEngineVersionWithContext.RUnlock()
	return calls
}

// CreateDBCluster calls CreateDBClusterFunc.
func (mock *rdsClientMock) CreateDBCluster(createDBClusterInput *rds.CreateDBClusterInput) (*rds.CreateDBClusterOutput, error) {
	if mock.CreateDBClusterFunc == nil {
		panic("rdsClientMock.CreateDBClusterFunc: method is nil but rdsClient.CreateDBCluster was just called")
	}
	callInfo := struct {
		CreateDBClusterInput *rds.CreateDBClusterInput
	}{
		CreateDBClusterInput: createDBClusterInput,
	}
	mock.lockCreateDBCluster.Lock()
	mock.calls.CreateDBCluster = append(mock.calls.CreateDBCluster, callInfo)
	mock.lockCreateDBCluster.Unlock()
	return mock.CreateDBClusterFunc(createDBClusterInput)
}

// CreateDBClusterCalls gets all the calls that were made to CreateDBCluster.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterCalls())
func (mock *rdsClientMock) CreateDBClusterCalls() []struct {
	CreateDBClusterInput *rds.CreateDBClusterInput
} {
	var calls []struct {
		CreateDBClusterInput *rds.CreateDBClusterInput
	}
	mock.lockCreateDBCluster.RLock()
	calls = mock.calls.CreateDBCluster
	mock.lockCreateDBCluster.RUnlock()
	return calls
}

// CreateDBClusterEndpoint calls CreateDBClusterEndpointFunc.
func (mock *rdsClientMock) CreateDBClusterEndpoint(createDBClusterEndpointInput *rds.CreateDBClusterEndpointInput) (*rds.CreateDBClusterEndpointOutput, error) {
	if mock.CreateDBClusterEndpointFunc == nil {
		panic("rdsClientMock.CreateDBClusterEndpointFunc: method is nil but rdsClient.CreateDBClusterEndpoint was just called")
	}
	callInfo := struct {
		CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
	}{
		CreateDBClusterEndpointInput: createDBClusterEndpointInput,
	}
	mock.lockCreateDBClusterEndpoint.Lock()
	mock.calls.CreateDBClusterEndpoint = append(mock.calls.CreateDBClusterEndpoint, callInfo)
	mock.lockCreateDBClusterEndpoint.Unlock()
	return mock.CreateDBClusterEndpointFunc(createDBClusterEndpointInput)
}

// CreateDBClusterEndpointCalls gets all the calls that were made to CreateDBClusterEndpoint.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterEndpointCalls())
func (mock *rdsClientMock) CreateDBClusterEndpointCalls() []struct {
	CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
} {
	var calls []struct {
		CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
	}
	mock.lockCreateDBClusterEndpoint.RLock()
	calls = mock.calls.CreateDBClusterEndpoint
	mock.lockCreateDBClusterEndpoint.RUnlock()
	return calls
}

// CreateDBClusterEndpointRequest calls CreateDBClusterEndpointRequestFunc.
func (mock *rdsClientMock) CreateDBClusterEndpointRequest(createDBClusterEndpointInput *rds.CreateDBClusterEndpointInput) (*request.Request, *rds.CreateDBClusterEndpointOutput) {
	if mock.CreateDBClusterEndpointRequestFunc == nil {
		panic("rdsClientMock.CreateDBClusterEndpointRequestFunc: method is nil but rdsClient.CreateDBClusterEndpointRequest was just called")
	}
	callInfo := struct {
		CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
	}{
		CreateDBClusterEndpointInput: createDBClusterEndpointInput,
	}
	mock.lockCreateDBClusterEndpointRequest.Lock()
	mock.calls.CreateDBClusterEndpointRequest = append(mock.calls.CreateDBClusterEndpointRequest, callInfo)
	mock.lockCreateDBClusterEndpointRequest.Unlock()
	return mock.CreateDBClusterEndpointRequestFunc(createDBClusterEndpointInput)
}

// CreateDBClusterEndpointRequestCalls gets all the calls that were made to CreateDBClusterEndpointRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterEndpointRequestCalls())
func (mock *rdsClientMock) CreateDBClusterEndpointRequestCalls() []struct {
	CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
} {
	var calls []struct {
		CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
	}
	mock.lockCreateDBClusterEndpointRequest.RLock()
	calls = mock.calls.CreateDBClusterEndpointRequest
	mock.lockCreateDBClusterEndpointRequest.RUnlock()
	return calls
}

// CreateDBClusterEndpointWithContext calls CreateDBClusterEndpointWithContextFunc.
func (mock *rdsClientMock) CreateDBClusterEndpointWithContext(contextMoqParam context.Context, createDBClusterEndpointInput *rds.CreateDBClusterEndpointInput, options ...request.Option) (*rds.CreateDBClusterEndpointOutput, error) {
	if mock.CreateDBClusterEndpointWithContextFunc == nil {
		panic("rdsClientMock.CreateDBClusterEndpointWithContextFunc: method is nil but rdsClient.CreateDBClusterEndpointWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		CreateDBClusterEndpointInput: createDBClusterEndpointInput,
		Options:                      options,
	}
	mock.lockCreateDBClusterEndpointWithContext.Lock()
	mock.calls.CreateDBClusterEndpointWithContext = append(mock.calls.CreateDBClusterEndpointWithContext, callInfo)
	mock.lockCreateDBClusterEndpointWithContext.Unlock()
	return mock.CreateDBClusterEndpointWithContextFunc(contextMoqParam, createDBClusterEndpointInput, options...)
}

// CreateDBClusterEndpointWithContextCalls gets all the calls that were made to CreateDBClusterEndpointWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterEndpointWithContextCalls())
func (mock *rdsClientMock) CreateDBClusterEndpointWithContextCalls() []struct {
	ContextMoqParam              context.Context
	CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		CreateDBClusterEndpointInput *rds.CreateDBClusterEndpointInput
		Options                      []request.Option
	}
	mock.lockCreateDBClusterEndpointWithContext.RLock()
	calls = mock.calls.CreateDBClusterEndpointWithContext
	mock.lockCreateDBClusterEndpointWithContext.RUnlock()
	return calls
}

// CreateDBClusterParameterGroup calls CreateDBClusterParameterGroupFunc.
func (mock *rdsClientMock) CreateDBClusterParameterGroup(createDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput) (*rds.CreateDBClusterParameterGroupOutput, error) {
	if mock.CreateDBClusterParameterGroupFunc == nil {
		panic("rdsClientMock.CreateDBClusterParameterGroupFunc: method is nil but rdsClient.CreateDBClusterParameterGroup was just called")
	}
	callInfo := struct {
		CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
	}{
		CreateDBClusterParameterGroupInput: createDBClusterParameterGroupInput,
	}
	mock.lockCreateDBClusterParameterGroup.Lock()
	mock.calls.CreateDBClusterParameterGroup = append(mock.calls.CreateDBClusterParameterGroup, callInfo)
	mock.lockCreateDBClusterParameterGroup.Unlock()
	return mock.CreateDBClusterParameterGroupFunc(createDBClusterParameterGroupInput)
}

// CreateDBClusterParameterGroupCalls gets all the calls that were made to CreateDBClusterParameterGroup.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterParameterGroupCalls())
func (mock *rdsClientMock) CreateDBClusterParameterGroupCalls() []struct {
	CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
} {
	var calls []struct {
		CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
	}
	mock.lockCreateDBClusterParameterGroup.RLock()
	calls = mock.calls.CreateDBClusterParameterGroup
	mock.lockCreateDBClusterParameterGroup.RUnlock()
	return calls
}

// CreateDBClusterParameterGroupRequest calls CreateDBClusterParameterGroupRequestFunc.
func (mock *rdsClientMock) CreateDBClusterParameterGroupRequest(createDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput) (*request.Request, *rds.CreateDBClusterParameterGroupOutput) {
	if mock.CreateDBClusterParameterGroupRequestFunc == nil {
		panic("rdsClientMock.CreateDBClusterParameterGroupRequestFunc: method is nil but rdsClient.CreateDBClusterParameterGroupRequest was just called")
	}
	callInfo := struct {
		CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
	}{
		CreateDBClusterParameterGroupInput: createDBClusterParameterGroupInput,
	}
	mock.lockCreateDBClusterParameterGroupRequest.Lock()
	mock.calls.CreateDBClusterParameterGroupRequest = append(mock.calls.CreateDBClusterParameterGroupRequest, callInfo)
	mock.lockCreateDBClusterParameterGroupRequest.Unlock()
	return mock.CreateDBClusterParameterGroupRequestFunc(createDBClusterParameterGroupInput)
}

// CreateDBClusterParameterGroupRequestCalls gets all the calls that were made to CreateDBClusterParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterParameterGroupRequestCalls())
func (mock *rdsClientMock) CreateDBClusterParameterGroupRequestCalls() []struct {
	CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
} {
	var calls []struct {
		CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
	}
	mock.lockCreateDBClusterParameterGroupRequest.RLock()
	calls = mock.calls.CreateDBClusterParameterGroupRequest
	mock.lockCreateDBClusterParameterGroupRequest.RUnlock()
	return calls
}

// CreateDBClusterParameterGroupWithContext calls CreateDBClusterParameterGroupWithContextFunc.
func (mock *rdsClientMock) CreateDBClusterParameterGroupWithContext(contextMoqParam context.Context, createDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput, options ...request.Option) (*rds.CreateDBClusterParameterGroupOutput, error) {
	if mock.CreateDBClusterParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.CreateDBClusterParameterGroupWithContextFunc: method is nil but rdsClient.CreateDBClusterParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		CreateDBClusterParameterGroupInput: createDBClusterParameterGroupInput,
		Options:                            options,
	}
	mock.lockCreateDBClusterParameterGroupWithContext.Lock()
	mock.calls.CreateDBClusterParameterGroupWithContext = append(mock.calls.CreateDBClusterParameterGroupWithContext, callInfo)
	mock.lockCreateDBClusterParameterGroupWithContext.Unlock()
	return mock.CreateDBClusterParameterGroupWithContextFunc(contextMoqParam, createDBClusterParameterGroupInput, options...)
}

// CreateDBClusterParameterGroupWithContextCalls gets all the calls that were made to CreateDBClusterParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterParameterGroupWithContextCalls())
func (mock *rdsClientMock) CreateDBClusterParameterGroupWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		CreateDBClusterParameterGroupInput *rds.CreateDBClusterParameterGroupInput
		Options                            []request.Option
	}
	mock.lockCreateDBClusterParameterGroupWithContext.RLock()
	calls = mock.calls.CreateDBClusterParameterGroupWithContext
	mock.lockCreateDBClusterParameterGroupWithContext.RUnlock()
	return calls
}

// CreateDBClusterRequest calls CreateDBClusterRequestFunc.
func (mock *rdsClientMock) CreateDBClusterRequest(createDBClusterInput *rds.CreateDBClusterInput) (*request.Request, *rds.CreateDBClusterOutput) {
	if mock.CreateDBClusterRequestFunc == nil {
		panic("rdsClientMock.CreateDBClusterRequestFunc: method is nil but rdsClient.CreateDBClusterRequest was just called")
	}
	callInfo := struct {
		CreateDBClusterInput *rds.CreateDBClusterInput
	}{
		CreateDBClusterInput: createDBClusterInput,
	}
	mock.lockCreateDBClusterRequest.Lock()
	mock.calls.CreateDBClusterRequest = append(mock.calls.CreateDBClusterRequest, callInfo)
	mock.lockCreateDBClusterRequest.Unlock()
	return mock.CreateDBClusterRequestFunc(createDBClusterInput)
}

// CreateDBClusterRequestCalls gets all the calls that were made to CreateDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterRequestCalls())
func (mock *rdsClientMock) CreateDBClusterRequestCalls() []struct {
	CreateDBClusterInput *rds.CreateDBClusterInput
} {
	var calls []struct {
		CreateDBClusterInput *rds.CreateDBClusterInput
	}
	mock.lockCreateDBClusterRequest.RLock()
	calls = mock.calls.CreateDBClusterRequest
	mock.lockCreateDBClusterRequest.RUnlock()
	return calls
}

// CreateDBClusterSnapshot calls CreateDBClusterSnapshotFunc.
func (mock *rdsClientMock) CreateDBClusterSnapshot(createDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput) (*rds.CreateDBClusterSnapshotOutput, error) {
	if mock.CreateDBClusterSnapshotFunc == nil {
		panic("rdsClientMock.CreateDBClusterSnapshotFunc: method is nil but rdsClient.CreateDBClusterSnapshot was just called")
	}
	callInfo := struct {
		CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
	}{
		CreateDBClusterSnapshotInput: createDBClusterSnapshotInput,
	}
	mock.lockCreateDBClusterSnapshot.Lock()
	mock.calls.CreateDBClusterSnapshot = append(mock.calls.CreateDBClusterSnapshot, callInfo)
	mock.lockCreateDBClusterSnapshot.Unlock()
	return mock.CreateDBClusterSnapshotFunc(createDBClusterSnapshotInput)
}

// CreateDBClusterSnapshotCalls gets all the calls that were made to CreateDBClusterSnapshot.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterSnapshotCalls())
func (mock *rdsClientMock) CreateDBClusterSnapshotCalls() []struct {
	CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
} {
	var calls []struct {
		CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
	}
	mock.lockCreateDBClusterSnapshot.RLock()
	calls = mock.calls.CreateDBClusterSnapshot
	mock.lockCreateDBClusterSnapshot.RUnlock()
	return calls
}

// CreateDBClusterSnapshotRequest calls CreateDBClusterSnapshotRequestFunc.
func (mock *rdsClientMock) CreateDBClusterSnapshotRequest(createDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput) (*request.Request, *rds.CreateDBClusterSnapshotOutput) {
	if mock.CreateDBClusterSnapshotRequestFunc == nil {
		panic("rdsClientMock.CreateDBClusterSnapshotRequestFunc: method is nil but rdsClient.CreateDBClusterSnapshotRequest was just called")
	}
	callInfo := struct {
		CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
	}{
		CreateDBClusterSnapshotInput: createDBClusterSnapshotInput,
	}
	mock.lockCreateDBClusterSnapshotRequest.Lock()
	mock.calls.CreateDBClusterSnapshotRequest = append(mock.calls.CreateDBClusterSnapshotRequest, callInfo)
	mock.lockCreateDBClusterSnapshotRequest.Unlock()
	return mock.CreateDBClusterSnapshotRequestFunc(createDBClusterSnapshotInput)
}

// CreateDBClusterSnapshotRequestCalls gets all the calls that were made to CreateDBClusterSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterSnapshotRequestCalls())
func (mock *rdsClientMock) CreateDBClusterSnapshotRequestCalls() []struct {
	CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
} {
	var calls []struct {
		CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
	}
	mock.lockCreateDBClusterSnapshotRequest.RLock()
	calls = mock.calls.CreateDBClusterSnapshotRequest
	mock.lockCreateDBClusterSnapshotRequest.RUnlock()
	return calls
}

// CreateDBClusterSnapshotWithContext calls CreateDBClusterSnapshotWithContextFunc.
func (mock *rdsClientMock) CreateDBClusterSnapshotWithContext(contextMoqParam context.Context, createDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput, options ...request.Option) (*rds.CreateDBClusterSnapshotOutput, error) {
	if mock.CreateDBClusterSnapshotWithContextFunc == nil {
		panic("rdsClientMock.CreateDBClusterSnapshotWithContextFunc: method is nil but rdsClient.CreateDBClusterSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		CreateDBClusterSnapshotInput: createDBClusterSnapshotInput,
		Options:                      options,
	}
	mock.lockCreateDBClusterSnapshotWithContext.Lock()
	mock.calls.CreateDBClusterSnapshotWithContext = append(mock.calls.CreateDBClusterSnapshotWithContext, callInfo)
	mock.lockCreateDBClusterSnapshotWithContext.Unlock()
	return mock.CreateDBClusterSnapshotWithContextFunc(contextMoqParam, createDBClusterSnapshotInput, options...)
}

// CreateDBClusterSnapshotWithContextCalls gets all the calls that were made to CreateDBClusterSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterSnapshotWithContextCalls())
func (mock *rdsClientMock) CreateDBClusterSnapshotWithContextCalls() []struct {
	ContextMoqParam              context.Context
	CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		CreateDBClusterSnapshotInput *rds.CreateDBClusterSnapshotInput
		Options                      []request.Option
	}
	mock.lockCreateDBClusterSnapshotWithContext.RLock()
	calls = mock.calls.CreateDBClusterSnapshotWithContext
	mock.lockCreateDBClusterSnapshotWithContext.RUnlock()
	return calls
}

// CreateDBClusterWithContext calls CreateDBClusterWithContextFunc.
func (mock *rdsClientMock) CreateDBClusterWithContext(contextMoqParam context.Context, createDBClusterInput *rds.CreateDBClusterInput, options ...request.Option) (*rds.CreateDBClusterOutput, error) {
	if mock.CreateDBClusterWithContextFunc == nil {
		panic("rdsClientMock.CreateDBClusterWithContextFunc: method is nil but rdsClient.CreateDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		CreateDBClusterInput *rds.CreateDBClusterInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		CreateDBClusterInput: createDBClusterInput,
		Options:              options,
	}
	mock.lockCreateDBClusterWithContext.Lock()
	mock.calls.CreateDBClusterWithContext = append(mock.calls.CreateDBClusterWithContext, callInfo)
	mock.lockCreateDBClusterWithContext.Unlock()
	return mock.CreateDBClusterWithContextFunc(contextMoqParam, createDBClusterInput, options...)
}

// CreateDBClusterWithContextCalls gets all the calls that were made to CreateDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBClusterWithContextCalls())
func (mock *rdsClientMock) CreateDBClusterWithContextCalls() []struct {
	ContextMoqParam      context.Context
	CreateDBClusterInput *rds.CreateDBClusterInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		CreateDBClusterInput *rds.CreateDBClusterInput
		Options              []request.Option
	}
	mock.lockCreateDBClusterWithContext.RLock()
	calls = mock.calls.CreateDBClusterWithContext
	mock.lockCreateDBClusterWithContext.RUnlock()
	return calls
}

// CreateDBInstance calls CreateDBInstanceFunc.
func (mock *rdsClientMock) CreateDBInstance(createDBInstanceInput *rds.CreateDBInstanceInput) (*rds.CreateDBInstanceOutput, error) {
	if mock.CreateDBInstanceFunc == nil {
		panic("rdsClientMock.CreateDBInstanceFunc: method is nil but rdsClient.CreateDBInstance was just called")
	}
	callInfo := struct {
		CreateDBInstanceInput *rds.CreateDBInstanceInput
	}{
		CreateDBInstanceInput: createDBInstanceInput,
	}
	mock.lockCreateDBInstance.Lock()
	mock.calls.CreateDBInstance = append(mock.calls.CreateDBInstance, callInfo)
	mock.lockCreateDBInstance.Unlock()
	return mock.CreateDBInstanceFunc(createDBInstanceInput)
}

// CreateDBInstanceCalls gets all the calls that were made to CreateDBInstance.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceCalls())
func (mock *rdsClientMock) CreateDBInstanceCalls() []struct {
	CreateDBInstanceInput *rds.CreateDBInstanceInput
} {
	var calls []struct {
		CreateDBInstanceInput *rds.CreateDBInstanceInput
	}
	mock.lockCreateDBInstance.RLock()
	calls = mock.calls.CreateDBInstance
	mock.lockCreateDBInstance.RUnlock()
	return calls
}

// CreateDBInstanceReadReplica calls CreateDBInstanceReadReplicaFunc.
func (mock *rdsClientMock) CreateDBInstanceReadReplica(createDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	if mock.CreateDBInstanceReadReplicaFunc == nil {
		panic("rdsClientMock.CreateDBInstanceReadReplicaFunc: method is nil but rdsClient.CreateDBInstanceReadReplica was just called")
	}
	callInfo := struct {
		CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
	}{
		CreateDBInstanceReadReplicaInput: createDBInstanceReadReplicaInput,
	}
	mock.lockCreateDBInstanceReadReplica.Lock()
	mock.calls.CreateDBInstanceReadReplica = append(mock.calls.CreateDBInstanceReadReplica, callInfo)
	mock.lockCreateDBInstanceReadReplica.Unlock()
	return mock.CreateDBInstanceReadReplicaFunc(createDBInstanceReadReplicaInput)
}

// CreateDBInstanceReadReplicaCalls gets all the calls that were made to CreateDBInstanceReadReplica.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceReadReplicaCalls())
func (mock *rdsClientMock) CreateDBInstanceReadReplicaCalls() []struct {
	CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
} {
	var calls []struct {
		CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
	}
	mock.lockCreateDBInstanceReadReplica.RLock()
	calls = mock.calls.CreateDBInstanceReadReplica
	mock.lockCreateDBInstanceReadReplica.RUnlock()
	return calls
}

// CreateDBInstanceReadReplicaRequest calls CreateDBInstanceReadReplicaRequestFunc.
func (mock *rdsClientMock) CreateDBInstanceReadReplicaRequest(createDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput) (*request.Request, *rds.CreateDBInstanceReadReplicaOutput) {
	if mock.CreateDBInstanceReadReplicaRequestFunc == nil {
		panic("rdsClientMock.CreateDBInstanceReadReplicaRequestFunc: method is nil but rdsClient.CreateDBInstanceReadReplicaRequest was just called")
	}
	callInfo := struct {
		CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
	}{
		CreateDBInstanceReadReplicaInput: createDBInstanceReadReplicaInput,
	}
	mock.lockCreateDBInstanceReadReplicaRequest.Lock()
	mock.calls.CreateDBInstanceReadReplicaRequest = append(mock.calls.CreateDBInstanceReadReplicaRequest, callInfo)
	mock.lockCreateDBInstanceReadReplicaRequest.Unlock()
	return mock.CreateDBInstanceReadReplicaRequestFunc(createDBInstanceReadReplicaInput)
}

// CreateDBInstanceReadReplicaRequestCalls gets all the calls that were made to CreateDBInstanceReadReplicaRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceReadReplicaRequestCalls())
func (mock *rdsClientMock) CreateDBInstanceReadReplicaRequestCalls() []struct {
	CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
} {
	var calls []struct {
		CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
	}
	mock.lockCreateDBInstanceReadReplicaRequest.RLock()
	calls = mock.calls.CreateDBInstanceReadReplicaRequest
	mock.lockCreateDBInstanceReadReplicaRequest.RUnlock()
	return calls
}

// CreateDBInstanceReadReplicaWithContext calls CreateDBInstanceReadReplicaWithContextFunc.
func (mock *rdsClientMock) CreateDBInstanceReadReplicaWithContext(contextMoqParam context.Context, createDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput, options ...request.Option) (*rds.CreateDBInstanceReadReplicaOutput, error) {
	if mock.CreateDBInstanceReadReplicaWithContextFunc == nil {
		panic("rdsClientMock.CreateDBInstanceReadReplicaWithContextFunc: method is nil but rdsClient.CreateDBInstanceReadReplicaWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		CreateDBInstanceReadReplicaInput: createDBInstanceReadReplicaInput,
		Options:                          options,
	}
	mock.lockCreateDBInstanceReadReplicaWithContext.Lock()
	mock.calls.CreateDBInstanceReadReplicaWithContext = append(mock.calls.CreateDBInstanceReadReplicaWithContext, callInfo)
	mock.lockCreateDBInstanceReadReplicaWithContext.Unlock()
	return mock.CreateDBInstanceReadReplicaWithContextFunc(contextMoqParam, createDBInstanceReadReplicaInput, options...)
}

// CreateDBInstanceReadReplicaWithContextCalls gets all the calls that were made to CreateDBInstanceReadReplicaWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceReadReplicaWithContextCalls())
func (mock *rdsClientMock) CreateDBInstanceReadReplicaWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		CreateDBInstanceReadReplicaInput *rds.CreateDBInstanceReadReplicaInput
		Options                          []request.Option
	}
	mock.lockCreateDBInstanceReadReplicaWithContext.RLock()
	calls = mock.calls.CreateDBInstanceReadReplicaWithContext
	mock.lockCreateDBInstanceReadReplicaWithContext.RUnlock()
	return calls
}

// CreateDBInstanceRequest calls CreateDBInstanceRequestFunc.
func (mock *rdsClientMock) CreateDBInstanceRequest(createDBInstanceInput *rds.CreateDBInstanceInput) (*request.Request, *rds.CreateDBInstanceOutput) {
	if mock.CreateDBInstanceRequestFunc == nil {
		panic("rdsClientMock.CreateDBInstanceRequestFunc: method is nil but rdsClient.CreateDBInstanceRequest was just called")
	}
	callInfo := struct {
		CreateDBInstanceInput *rds.CreateDBInstanceInput
	}{
		CreateDBInstanceInput: createDBInstanceInput,
	}
	mock.lockCreateDBInstanceRequest.Lock()
	mock.calls.CreateDBInstanceRequest = append(mock.calls.CreateDBInstanceRequest, callInfo)
	mock.lockCreateDBInstanceRequest.Unlock()
	return mock.CreateDBInstanceRequestFunc(createDBInstanceInput)
}

// CreateDBInstanceRequestCalls gets all the calls that were made to CreateDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceRequestCalls())
func (mock *rdsClientMock) CreateDBInstanceRequestCalls() []struct {
	CreateDBInstanceInput *rds.CreateDBInstanceInput
} {
	var calls []struct {
		CreateDBInstanceInput *rds.CreateDBInstanceInput
	}
	mock.lockCreateDBInstanceRequest.RLock()
	calls = mock.calls.CreateDBInstanceRequest
	mock.lockCreateDBInstanceRequest.RUnlock()
	return calls
}

// CreateDBInstanceWithContext calls CreateDBInstanceWithContextFunc.
func (mock *rdsClientMock) CreateDBInstanceWithContext(contextMoqParam context.Context, createDBInstanceInput *rds.CreateDBInstanceInput, options ...request.Option) (*rds.CreateDBInstanceOutput, error) {
	if mock.CreateDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.CreateDBInstanceWithContextFunc: method is nil but rdsClient.CreateDBInstanceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		CreateDBInstanceInput *rds.CreateDBInstanceInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		CreateDBInstanceInput: createDBInstanceInput,
		Options:               options,
	}
	mock.lockCreateDBInstanceWithContext.Lock()
	mock.calls.CreateDBInstanceWithContext = append(mock.calls.CreateDBInstanceWithContext, callInfo)
	mock.lockCreateDBInstanceWithContext.Unlock()
	return mock.CreateDBInstanceWithContextFunc(contextMoqParam, createDBInstanceInput, options...)
}

// CreateDBInstanceWithContextCalls gets all the calls that were made to CreateDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBInstanceWithContextCalls())
func (mock *rdsClientMock) CreateDBInstanceWithContextCalls() []struct {
	ContextMoqParam       context.Context
	CreateDBInstanceInput *rds.CreateDBInstanceInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		CreateDBInstanceInput *rds.CreateDBInstanceInput
		Options               []request.Option
	}
	mock.lockCreateDBInstanceWithContext.RLock()
	calls = mock.calls.CreateDBInstanceWithContext
	mock.lockCreateDBInstanceWithContext.RUnlock()
	return calls
}

// CreateDBParameterGroup calls CreateDBParameterGroupFunc.
func (mock *rdsClientMock) CreateDBParameterGroup(createDBParameterGroupInput *rds.CreateDBParameterGroupInput) (*rds.CreateDBParameterGroupOutput, error) {
	if mock.CreateDBParameterGroupFunc == nil {
		panic("rdsClientMock.CreateDBParameterGroupFunc: method is nil but rdsClient.CreateDBParameterGroup was just called")
	}
	callInfo := struct {
		CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
	}{
		CreateDBParameterGroupInput: createDBParameterGroupInput,
	}
	mock.lockCreateDBParameterGroup.Lock()
	mock.calls.CreateDBParameterGroup = append(mock.calls.CreateDBParameterGroup, callInfo)
	mock.lockCreateDBParameterGroup.Unlock()
	return mock.CreateDBParameterGroupFunc(createDBParameterGroupInput)
}

// CreateDBParameterGroupCalls gets all the calls that were made to CreateDBParameterGroup.
// Check the length with:
//     len(mockedrdsClient.CreateDBParameterGroupCalls())
func (mock *rdsClientMock) CreateDBParameterGroupCalls() []struct {
	CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
} {
	var calls []struct {
		CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
	}
	mock.lockCreateDBParameterGroup.RLock()
	calls = mock.calls.CreateDBParameterGroup
	mock.lockCreateDBParameterGroup.RUnlock()
	return calls
}

// CreateDBParameterGroupRequest calls CreateDBParameterGroupRequestFunc.
func (mock *rdsClientMock) CreateDBParameterGroupRequest(createDBParameterGroupInput *rds.CreateDBParameterGroupInput) (*request.Request, *rds.CreateDBParameterGroupOutput) {
	if mock.CreateDBParameterGroupRequestFunc == nil {
		panic("rdsClientMock.CreateDBParameterGroupRequestFunc: method is nil but rdsClient.CreateDBParameterGroupRequest was just called")
	}
	callInfo := struct {
		CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
	}{
		CreateDBParameterGroupInput: createDBParameterGroupInput,
	}
	mock.lockCreateDBParameterGroupRequest.Lock()
	mock.calls.CreateDBParameterGroupRequest = append(mock.calls.CreateDBParameterGroupRequest, callInfo)
	mock.lockCreateDBParameterGroupRequest.Unlock()
	return mock.CreateDBParameterGroupRequestFunc(createDBParameterGroupInput)
}

// CreateDBParameterGroupRequestCalls gets all the calls that were made to CreateDBParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBParameterGroupRequestCalls())
func (mock *rdsClientMock) CreateDBParameterGroupRequestCalls() []struct {
	CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
} {
	var calls []struct {
		CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
	}
	mock.lockCreateDBParameterGroupRequest.RLock()
	calls = mock.calls.CreateDBParameterGroupRequest
	mock.lockCreateDBParameterGroupRequest.RUnlock()
	return calls
}

// CreateDBParameterGroupWithContext calls CreateDBParameterGroupWithContextFunc.
func (mock *rdsClientMock) CreateDBParameterGroupWithContext(contextMoqParam context.Context, createDBParameterGroupInput *rds.CreateDBParameterGroupInput, options ...request.Option) (*rds.CreateDBParameterGroupOutput, error) {
	if mock.CreateDBParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.CreateDBParameterGroupWithContextFunc: method is nil but rdsClient.CreateDBParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		CreateDBParameterGroupInput: createDBParameterGroupInput,
		Options:                     options,
	}
	mock.lockCreateDBParameterGroupWithContext.Lock()
	mock.calls.CreateDBParameterGroupWithContext = append(mock.calls.CreateDBParameterGroupWithContext, callInfo)
	mock.lockCreateDBParameterGroupWithContext.Unlock()
	return mock.CreateDBParameterGroupWithContextFunc(contextMoqParam, createDBParameterGroupInput, options...)
}

// CreateDBParameterGroupWithContextCalls gets all the calls that were made to CreateDBParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBParameterGroupWithContextCalls())
func (mock *rdsClientMock) CreateDBParameterGroupWithContextCalls() []struct {
	ContextMoqParam             context.Context
	CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		CreateDBParameterGroupInput *rds.CreateDBParameterGroupInput
		Options                     []request.Option
	}
	mock.lockCreateDBParameterGroupWithContext.RLock()
	calls = mock.calls.CreateDBParameterGroupWithContext
	mock.lockCreateDBParameterGroupWithContext.RUnlock()
	return calls
}

// CreateDBProxy calls CreateDBProxyFunc.
func (mock *rdsClientMock) CreateDBProxy(createDBProxyInput *rds.CreateDBProxyInput) (*rds.CreateDBProxyOutput, error) {
	if mock.CreateDBProxyFunc == nil {
		panic("rdsClientMock.CreateDBProxyFunc: method is nil but rdsClient.CreateDBProxy was just called")
	}
	callInfo := struct {
		CreateDBProxyInput *rds.CreateDBProxyInput
	}{
		CreateDBProxyInput: createDBProxyInput,
	}
	mock.lockCreateDBProxy.Lock()
	mock.calls.CreateDBProxy = append(mock.calls.CreateDBProxy, callInfo)
	mock.lockCreateDBProxy.Unlock()
	return mock.CreateDBProxyFunc(createDBProxyInput)
}

// CreateDBProxyCalls gets all the calls that were made to CreateDBProxy.
// Check the length with:
//     len(mockedrdsClient.CreateDBProxyCalls())
func (mock *rdsClientMock) CreateDBProxyCalls() []struct {
	CreateDBProxyInput *rds.CreateDBProxyInput
} {
	var calls []struct {
		CreateDBProxyInput *rds.CreateDBProxyInput
	}
	mock.lockCreateDBProxy.RLock()
	calls = mock.calls.CreateDBProxy
	mock.lockCreateDBProxy.RUnlock()
	return calls
}

// CreateDBProxyEndpoint calls CreateDBProxyEndpointFunc.
func (mock *rdsClientMock) CreateDBProxyEndpoint(createDBProxyEndpointInput *rds.CreateDBProxyEndpointInput) (*rds.CreateDBProxyEndpointOutput, error) {
	if mock.CreateDBProxyEndpointFunc == nil {
		panic("rdsClientMock.CreateDBProxyEndpointFunc: method is nil but rdsClient.CreateDBProxyEndpoint was just called")
	}
	callInfo := struct {
		CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
	}{
		CreateDBProxyEndpointInput: createDBProxyEndpointInput,
	}
	mock.lockCreateDBProxyEndpoint.Lock()
	mock.calls.CreateDBProxyEndpoint = append(mock.calls.CreateDBProxyEndpoint, callInfo)
	mock.lockCreateDBProxyEndpoint.Unlock()
	return mock.CreateDBProxyEndpointFunc(createDBProxyEndpointInput)
}

// CreateDBProxyEndpointCalls gets all the calls that were made to CreateDBProxyEndpoint.
// Check the length with:
//     len(mockedrdsClient.CreateDBProxyEndpointCalls())
func (mock *rdsClientMock) CreateDBProxyEndpointCalls() []struct {
	CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
} {
	var calls []struct {
		CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
	}
	mock.lockCreateDBProxyEndpoint.RLock()
	calls = mock.calls.CreateDBProxyEndpoint
	mock.lockCreateDBProxyEndpoint.RUnlock()
	return calls
}

// CreateDBProxyEndpointRequest calls CreateDBProxyEndpointRequestFunc.
func (mock *rdsClientMock) CreateDBProxyEndpointRequest(createDBProxyEndpointInput *rds.CreateDBProxyEndpointInput) (*request.Request, *rds.CreateDBProxyEndpointOutput) {
	if mock.CreateDBProxyEndpointRequestFunc == nil {
		panic("rdsClientMock.CreateDBProxyEndpointRequestFunc: method is nil but rdsClient.CreateDBProxyEndpointRequest was just called")
	}
	callInfo := struct {
		CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
	}{
		CreateDBProxyEndpointInput: createDBProxyEndpointInput,
	}
	mock.lockCreateDBProxyEndpointRequest.Lock()
	mock.calls.CreateDBProxyEndpointRequest = append(mock.calls.CreateDBProxyEndpointRequest, callInfo)
	mock.lockCreateDBProxyEndpointRequest.Unlock()
	return mock.CreateDBProxyEndpointRequestFunc(createDBProxyEndpointInput)
}

// CreateDBProxyEndpointRequestCalls gets all the calls that were made to CreateDBProxyEndpointRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBProxyEndpointRequestCalls())
func (mock *rdsClientMock) CreateDBProxyEndpointRequestCalls() []struct {
	CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
} {
	var calls []struct {
		CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
	}
	mock.lockCreateDBProxyEndpointRequest.RLock()
	calls = mock.calls.CreateDBProxyEndpointRequest
	mock.lockCreateDBProxyEndpointRequest.RUnlock()
	return calls
}

// CreateDBProxyEndpointWithContext calls CreateDBProxyEndpointWithContextFunc.
func (mock *rdsClientMock) CreateDBProxyEndpointWithContext(contextMoqParam context.Context, createDBProxyEndpointInput *rds.CreateDBProxyEndpointInput, options ...request.Option) (*rds.CreateDBProxyEndpointOutput, error) {
	if mock.CreateDBProxyEndpointWithContextFunc == nil {
		panic("rdsClientMock.CreateDBProxyEndpointWithContextFunc: method is nil but rdsClient.CreateDBProxyEndpointWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		CreateDBProxyEndpointInput: createDBProxyEndpointInput,
		Options:                    options,
	}
	mock.lockCreateDBProxyEndpointWithContext.Lock()
	mock.calls.CreateDBProxyEndpointWithContext = append(mock.calls.CreateDBProxyEndpointWithContext, callInfo)
	mock.lockCreateDBProxyEndpointWithContext.Unlock()
	return mock.CreateDBProxyEndpointWithContextFunc(contextMoqParam, createDBProxyEndpointInput, options...)
}

// CreateDBProxyEndpointWithContextCalls gets all the calls that were made to CreateDBProxyEndpointWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBProxyEndpointWithContextCalls())
func (mock *rdsClientMock) CreateDBProxyEndpointWithContextCalls() []struct {
	ContextMoqParam            context.Context
	CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		CreateDBProxyEndpointInput *rds.CreateDBProxyEndpointInput
		Options                    []request.Option
	}
	mock.lockCreateDBProxyEndpointWithContext.RLock()
	calls = mock.calls.CreateDBProxyEndpointWithContext
	mock.lockCreateDBProxyEndpointWithContext.RUnlock()
	return calls
}

// CreateDBProxyRequest calls CreateDBProxyRequestFunc.
func (mock *rdsClientMock) CreateDBProxyRequest(createDBProxyInput *rds.CreateDBProxyInput) (*request.Request, *rds.CreateDBProxyOutput) {
	if mock.CreateDBProxyRequestFunc == nil {
		panic("rdsClientMock.CreateDBProxyRequestFunc: method is nil but rdsClient.CreateDBProxyRequest was just called")
	}
	callInfo := struct {
		CreateDBProxyInput *rds.CreateDBProxyInput
	}{
		CreateDBProxyInput: createDBProxyInput,
	}
	mock.lockCreateDBProxyRequest.Lock()
	mock.calls.CreateDBProxyRequest = append(mock.calls.CreateDBProxyRequest, callInfo)
	mock.lockCreateDBProxyRequest.Unlock()
	return mock.CreateDBProxyRequestFunc(createDBProxyInput)
}

// CreateDBProxyRequestCalls gets all the calls that were made to CreateDBProxyRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBProxyRequestCalls())
func (mock *rdsClientMock) CreateDBProxyRequestCalls() []struct {
	CreateDBProxyInput *rds.CreateDBProxyInput
} {
	var calls []struct {
		CreateDBProxyInput *rds.CreateDBProxyInput
	}
	mock.lockCreateDBProxyRequest.RLock()
	calls = mock.calls.CreateDBProxyRequest
	mock.lockCreateDBProxyRequest.RUnlock()
	return calls
}

// CreateDBProxyWithContext calls CreateDBProxyWithContextFunc.
func (mock *rdsClientMock) CreateDBProxyWithContext(contextMoqParam context.Context, createDBProxyInput *rds.CreateDBProxyInput, options ...request.Option) (*rds.CreateDBProxyOutput, error) {
	if mock.CreateDBProxyWithContextFunc == nil {
		panic("rdsClientMock.CreateDBProxyWithContextFunc: method is nil but rdsClient.CreateDBProxyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		CreateDBProxyInput *rds.CreateDBProxyInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		CreateDBProxyInput: createDBProxyInput,
		Options:            options,
	}
	mock.lockCreateDBProxyWithContext.Lock()
	mock.calls.CreateDBProxyWithContext = append(mock.calls.CreateDBProxyWithContext, callInfo)
	mock.lockCreateDBProxyWithContext.Unlock()
	return mock.CreateDBProxyWithContextFunc(contextMoqParam, createDBProxyInput, options...)
}

// CreateDBProxyWithContextCalls gets all the calls that were made to CreateDBProxyWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBProxyWithContextCalls())
func (mock *rdsClientMock) CreateDBProxyWithContextCalls() []struct {
	ContextMoqParam    context.Context
	CreateDBProxyInput *rds.CreateDBProxyInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		CreateDBProxyInput *rds.CreateDBProxyInput
		Options            []request.Option
	}
	mock.lockCreateDBProxyWithContext.RLock()
	calls = mock.calls.CreateDBProxyWithContext
	mock.lockCreateDBProxyWithContext.RUnlock()
	return calls
}

// CreateDBSecurityGroup calls CreateDBSecurityGroupFunc.
func (mock *rdsClientMock) CreateDBSecurityGroup(createDBSecurityGroupInput *rds.CreateDBSecurityGroupInput) (*rds.CreateDBSecurityGroupOutput, error) {
	if mock.CreateDBSecurityGroupFunc == nil {
		panic("rdsClientMock.CreateDBSecurityGroupFunc: method is nil but rdsClient.CreateDBSecurityGroup was just called")
	}
	callInfo := struct {
		CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
	}{
		CreateDBSecurityGroupInput: createDBSecurityGroupInput,
	}
	mock.lockCreateDBSecurityGroup.Lock()
	mock.calls.CreateDBSecurityGroup = append(mock.calls.CreateDBSecurityGroup, callInfo)
	mock.lockCreateDBSecurityGroup.Unlock()
	return mock.CreateDBSecurityGroupFunc(createDBSecurityGroupInput)
}

// CreateDBSecurityGroupCalls gets all the calls that were made to CreateDBSecurityGroup.
// Check the length with:
//     len(mockedrdsClient.CreateDBSecurityGroupCalls())
func (mock *rdsClientMock) CreateDBSecurityGroupCalls() []struct {
	CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
} {
	var calls []struct {
		CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
	}
	mock.lockCreateDBSecurityGroup.RLock()
	calls = mock.calls.CreateDBSecurityGroup
	mock.lockCreateDBSecurityGroup.RUnlock()
	return calls
}

// CreateDBSecurityGroupRequest calls CreateDBSecurityGroupRequestFunc.
func (mock *rdsClientMock) CreateDBSecurityGroupRequest(createDBSecurityGroupInput *rds.CreateDBSecurityGroupInput) (*request.Request, *rds.CreateDBSecurityGroupOutput) {
	if mock.CreateDBSecurityGroupRequestFunc == nil {
		panic("rdsClientMock.CreateDBSecurityGroupRequestFunc: method is nil but rdsClient.CreateDBSecurityGroupRequest was just called")
	}
	callInfo := struct {
		CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
	}{
		CreateDBSecurityGroupInput: createDBSecurityGroupInput,
	}
	mock.lockCreateDBSecurityGroupRequest.Lock()
	mock.calls.CreateDBSecurityGroupRequest = append(mock.calls.CreateDBSecurityGroupRequest, callInfo)
	mock.lockCreateDBSecurityGroupRequest.Unlock()
	return mock.CreateDBSecurityGroupRequestFunc(createDBSecurityGroupInput)
}

// CreateDBSecurityGroupRequestCalls gets all the calls that were made to CreateDBSecurityGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBSecurityGroupRequestCalls())
func (mock *rdsClientMock) CreateDBSecurityGroupRequestCalls() []struct {
	CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
} {
	var calls []struct {
		CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
	}
	mock.lockCreateDBSecurityGroupRequest.RLock()
	calls = mock.calls.CreateDBSecurityGroupRequest
	mock.lockCreateDBSecurityGroupRequest.RUnlock()
	return calls
}

// CreateDBSecurityGroupWithContext calls CreateDBSecurityGroupWithContextFunc.
func (mock *rdsClientMock) CreateDBSecurityGroupWithContext(contextMoqParam context.Context, createDBSecurityGroupInput *rds.CreateDBSecurityGroupInput, options ...request.Option) (*rds.CreateDBSecurityGroupOutput, error) {
	if mock.CreateDBSecurityGroupWithContextFunc == nil {
		panic("rdsClientMock.CreateDBSecurityGroupWithContextFunc: method is nil but rdsClient.CreateDBSecurityGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		CreateDBSecurityGroupInput: createDBSecurityGroupInput,
		Options:                    options,
	}
	mock.lockCreateDBSecurityGroupWithContext.Lock()
	mock.calls.CreateDBSecurityGroupWithContext = append(mock.calls.CreateDBSecurityGroupWithContext, callInfo)
	mock.lockCreateDBSecurityGroupWithContext.Unlock()
	return mock.CreateDBSecurityGroupWithContextFunc(contextMoqParam, createDBSecurityGroupInput, options...)
}

// CreateDBSecurityGroupWithContextCalls gets all the calls that were made to CreateDBSecurityGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBSecurityGroupWithContextCalls())
func (mock *rdsClientMock) CreateDBSecurityGroupWithContextCalls() []struct {
	ContextMoqParam            context.Context
	CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		CreateDBSecurityGroupInput *rds.CreateDBSecurityGroupInput
		Options                    []request.Option
	}
	mock.lockCreateDBSecurityGroupWithContext.RLock()
	calls = mock.calls.CreateDBSecurityGroupWithContext
	mock.lockCreateDBSecurityGroupWithContext.RUnlock()
	return calls
}

// CreateDBSnapshot calls CreateDBSnapshotFunc.
func (mock *rdsClientMock) CreateDBSnapshot(createDBSnapshotInput *rds.CreateDBSnapshotInput) (*rds.CreateDBSnapshotOutput, error) {
	if mock.CreateDBSnapshotFunc == nil {
		panic("rdsClientMock.CreateDBSnapshotFunc: method is nil but rdsClient.CreateDBSnapshot was just called")
	}
	callInfo := struct {
		CreateDBSnapshotInput *rds.CreateDBSnapshotInput
	}{
		CreateDBSnapshotInput: createDBSnapshotInput,
	}
	mock.lockCreateDBSnapshot.Lock()
	mock.calls.CreateDBSnapshot = append(mock.calls.CreateDBSnapshot, callInfo)
	mock.lockCreateDBSnapshot.Unlock()
	return mock.CreateDBSnapshotFunc(createDBSnapshotInput)
}

// CreateDBSnapshotCalls gets all the calls that were made to CreateDBSnapshot.
// Check the length with:
//     len(mockedrdsClient.CreateDBSnapshotCalls())
func (mock *rdsClientMock) CreateDBSnapshotCalls() []struct {
	CreateDBSnapshotInput *rds.CreateDBSnapshotInput
} {
	var calls []struct {
		CreateDBSnapshotInput *rds.CreateDBSnapshotInput
	}
	mock.lockCreateDBSnapshot.RLock()
	calls = mock.calls.CreateDBSnapshot
	mock.lockCreateDBSnapshot.RUnlock()
	return calls
}

// CreateDBSnapshotRequest calls CreateDBSnapshotRequestFunc.
func (mock *rdsClientMock) CreateDBSnapshotRequest(createDBSnapshotInput *rds.CreateDBSnapshotInput) (*request.Request, *rds.CreateDBSnapshotOutput) {
	if mock.CreateDBSnapshotRequestFunc == nil {
		panic("rdsClientMock.CreateDBSnapshotRequestFunc: method is nil but rdsClient.CreateDBSnapshotRequest was just called")
	}
	callInfo := struct {
		CreateDBSnapshotInput *rds.CreateDBSnapshotInput
	}{
		CreateDBSnapshotInput: createDBSnapshotInput,
	}
	mock.lockCreateDBSnapshotRequest.Lock()
	mock.calls.CreateDBSnapshotRequest = append(mock.calls.CreateDBSnapshotRequest, callInfo)
	mock.lockCreateDBSnapshotRequest.Unlock()
	return mock.CreateDBSnapshotRequestFunc(createDBSnapshotInput)
}

// CreateDBSnapshotRequestCalls gets all the calls that were made to CreateDBSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBSnapshotRequestCalls())
func (mock *rdsClientMock) CreateDBSnapshotRequestCalls() []struct {
	CreateDBSnapshotInput *rds.CreateDBSnapshotInput
} {
	var calls []struct {
		CreateDBSnapshotInput *rds.CreateDBSnapshotInput
	}
	mock.lockCreateDBSnapshotRequest.RLock()
	calls = mock.calls.CreateDBSnapshotRequest
	mock.lockCreateDBSnapshotRequest.RUnlock()
	return calls
}

// CreateDBSnapshotWithContext calls CreateDBSnapshotWithContextFunc.
func (mock *rdsClientMock) CreateDBSnapshotWithContext(contextMoqParam context.Context, createDBSnapshotInput *rds.CreateDBSnapshotInput, options ...request.Option) (*rds.CreateDBSnapshotOutput, error) {
	if mock.CreateDBSnapshotWithContextFunc == nil {
		panic("rdsClientMock.CreateDBSnapshotWithContextFunc: method is nil but rdsClient.CreateDBSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		CreateDBSnapshotInput *rds.CreateDBSnapshotInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		CreateDBSnapshotInput: createDBSnapshotInput,
		Options:               options,
	}
	mock.lockCreateDBSnapshotWithContext.Lock()
	mock.calls.CreateDBSnapshotWithContext = append(mock.calls.CreateDBSnapshotWithContext, callInfo)
	mock.lockCreateDBSnapshotWithContext.Unlock()
	return mock.CreateDBSnapshotWithContextFunc(contextMoqParam, createDBSnapshotInput, options...)
}

// CreateDBSnapshotWithContextCalls gets all the calls that were made to CreateDBSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBSnapshotWithContextCalls())
func (mock *rdsClientMock) CreateDBSnapshotWithContextCalls() []struct {
	ContextMoqParam       context.Context
	CreateDBSnapshotInput *rds.CreateDBSnapshotInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		CreateDBSnapshotInput *rds.CreateDBSnapshotInput
		Options               []request.Option
	}
	mock.lockCreateDBSnapshotWithContext.RLock()
	calls = mock.calls.CreateDBSnapshotWithContext
	mock.lockCreateDBSnapshotWithContext.RUnlock()
	return calls
}

// CreateDBSubnetGroup calls CreateDBSubnetGroupFunc.
func (mock *rdsClientMock) CreateDBSubnetGroup(createDBSubnetGroupInput *rds.CreateDBSubnetGroupInput) (*rds.CreateDBSubnetGroupOutput, error) {
	if mock.CreateDBSubnetGroupFunc == nil {
		panic("rdsClientMock.CreateDBSubnetGroupFunc: method is nil but rdsClient.CreateDBSubnetGroup was just called")
	}
	callInfo := struct {
		CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
	}{
		CreateDBSubnetGroupInput: createDBSubnetGroupInput,
	}
	mock.lockCreateDBSubnetGroup.Lock()
	mock.calls.CreateDBSubnetGroup = append(mock.calls.CreateDBSubnetGroup, callInfo)
	mock.lockCreateDBSubnetGroup.Unlock()
	return mock.CreateDBSubnetGroupFunc(createDBSubnetGroupInput)
}

// CreateDBSubnetGroupCalls gets all the calls that were made to CreateDBSubnetGroup.
// Check the length with:
//     len(mockedrdsClient.CreateDBSubnetGroupCalls())
func (mock *rdsClientMock) CreateDBSubnetGroupCalls() []struct {
	CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
} {
	var calls []struct {
		CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
	}
	mock.lockCreateDBSubnetGroup.RLock()
	calls = mock.calls.CreateDBSubnetGroup
	mock.lockCreateDBSubnetGroup.RUnlock()
	return calls
}

// CreateDBSubnetGroupRequest calls CreateDBSubnetGroupRequestFunc.
func (mock *rdsClientMock) CreateDBSubnetGroupRequest(createDBSubnetGroupInput *rds.CreateDBSubnetGroupInput) (*request.Request, *rds.CreateDBSubnetGroupOutput) {
	if mock.CreateDBSubnetGroupRequestFunc == nil {
		panic("rdsClientMock.CreateDBSubnetGroupRequestFunc: method is nil but rdsClient.CreateDBSubnetGroupRequest was just called")
	}
	callInfo := struct {
		CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
	}{
		CreateDBSubnetGroupInput: createDBSubnetGroupInput,
	}
	mock.lockCreateDBSubnetGroupRequest.Lock()
	mock.calls.CreateDBSubnetGroupRequest = append(mock.calls.CreateDBSubnetGroupRequest, callInfo)
	mock.lockCreateDBSubnetGroupRequest.Unlock()
	return mock.CreateDBSubnetGroupRequestFunc(createDBSubnetGroupInput)
}

// CreateDBSubnetGroupRequestCalls gets all the calls that were made to CreateDBSubnetGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CreateDBSubnetGroupRequestCalls())
func (mock *rdsClientMock) CreateDBSubnetGroupRequestCalls() []struct {
	CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
} {
	var calls []struct {
		CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
	}
	mock.lockCreateDBSubnetGroupRequest.RLock()
	calls = mock.calls.CreateDBSubnetGroupRequest
	mock.lockCreateDBSubnetGroupRequest.RUnlock()
	return calls
}

// CreateDBSubnetGroupWithContext calls CreateDBSubnetGroupWithContextFunc.
func (mock *rdsClientMock) CreateDBSubnetGroupWithContext(contextMoqParam context.Context, createDBSubnetGroupInput *rds.CreateDBSubnetGroupInput, options ...request.Option) (*rds.CreateDBSubnetGroupOutput, error) {
	if mock.CreateDBSubnetGroupWithContextFunc == nil {
		panic("rdsClientMock.CreateDBSubnetGroupWithContextFunc: method is nil but rdsClient.CreateDBSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		CreateDBSubnetGroupInput: createDBSubnetGroupInput,
		Options:                  options,
	}
	mock.lockCreateDBSubnetGroupWithContext.Lock()
	mock.calls.CreateDBSubnetGroupWithContext = append(mock.calls.CreateDBSubnetGroupWithContext, callInfo)
	mock.lockCreateDBSubnetGroupWithContext.Unlock()
	return mock.CreateDBSubnetGroupWithContextFunc(contextMoqParam, createDBSubnetGroupInput, options...)
}

// CreateDBSubnetGroupWithContextCalls gets all the calls that were made to CreateDBSubnetGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateDBSubnetGroupWithContextCalls())
func (mock *rdsClientMock) CreateDBSubnetGroupWithContextCalls() []struct {
	ContextMoqParam          context.Context
	CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		CreateDBSubnetGroupInput *rds.CreateDBSubnetGroupInput
		Options                  []request.Option
	}
	mock.lockCreateDBSubnetGroupWithContext.RLock()
	calls = mock.calls.CreateDBSubnetGroupWithContext
	mock.lockCreateDBSubnetGroupWithContext.RUnlock()
	return calls
}

// CreateEventSubscription calls CreateEventSubscriptionFunc.
func (mock *rdsClientMock) CreateEventSubscription(createEventSubscriptionInput *rds.CreateEventSubscriptionInput) (*rds.CreateEventSubscriptionOutput, error) {
	if mock.CreateEventSubscriptionFunc == nil {
		panic("rdsClientMock.CreateEventSubscriptionFunc: method is nil but rdsClient.CreateEventSubscription was just called")
	}
	callInfo := struct {
		CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
	}{
		CreateEventSubscriptionInput: createEventSubscriptionInput,
	}
	mock.lockCreateEventSubscription.Lock()
	mock.calls.CreateEventSubscription = append(mock.calls.CreateEventSubscription, callInfo)
	mock.lockCreateEventSubscription.Unlock()
	return mock.CreateEventSubscriptionFunc(createEventSubscriptionInput)
}

// CreateEventSubscriptionCalls gets all the calls that were made to CreateEventSubscription.
// Check the length with:
//     len(mockedrdsClient.CreateEventSubscriptionCalls())
func (mock *rdsClientMock) CreateEventSubscriptionCalls() []struct {
	CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
} {
	var calls []struct {
		CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
	}
	mock.lockCreateEventSubscription.RLock()
	calls = mock.calls.CreateEventSubscription
	mock.lockCreateEventSubscription.RUnlock()
	return calls
}

// CreateEventSubscriptionRequest calls CreateEventSubscriptionRequestFunc.
func (mock *rdsClientMock) CreateEventSubscriptionRequest(createEventSubscriptionInput *rds.CreateEventSubscriptionInput) (*request.Request, *rds.CreateEventSubscriptionOutput) {
	if mock.CreateEventSubscriptionRequestFunc == nil {
		panic("rdsClientMock.CreateEventSubscriptionRequestFunc: method is nil but rdsClient.CreateEventSubscriptionRequest was just called")
	}
	callInfo := struct {
		CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
	}{
		CreateEventSubscriptionInput: createEventSubscriptionInput,
	}
	mock.lockCreateEventSubscriptionRequest.Lock()
	mock.calls.CreateEventSubscriptionRequest = append(mock.calls.CreateEventSubscriptionRequest, callInfo)
	mock.lockCreateEventSubscriptionRequest.Unlock()
	return mock.CreateEventSubscriptionRequestFunc(createEventSubscriptionInput)
}

// CreateEventSubscriptionRequestCalls gets all the calls that were made to CreateEventSubscriptionRequest.
// Check the length with:
//     len(mockedrdsClient.CreateEventSubscriptionRequestCalls())
func (mock *rdsClientMock) CreateEventSubscriptionRequestCalls() []struct {
	CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
} {
	var calls []struct {
		CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
	}
	mock.lockCreateEventSubscriptionRequest.RLock()
	calls = mock.calls.CreateEventSubscriptionRequest
	mock.lockCreateEventSubscriptionRequest.RUnlock()
	return calls
}

// CreateEventSubscriptionWithContext calls CreateEventSubscriptionWithContextFunc.
func (mock *rdsClientMock) CreateEventSubscriptionWithContext(contextMoqParam context.Context, createEventSubscriptionInput *rds.CreateEventSubscriptionInput, options ...request.Option) (*rds.CreateEventSubscriptionOutput, error) {
	if mock.CreateEventSubscriptionWithContextFunc == nil {
		panic("rdsClientMock.CreateEventSubscriptionWithContextFunc: method is nil but rdsClient.CreateEventSubscriptionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		CreateEventSubscriptionInput: createEventSubscriptionInput,
		Options:                      options,
	}
	mock.lockCreateEventSubscriptionWithContext.Lock()
	mock.calls.CreateEventSubscriptionWithContext = append(mock.calls.CreateEventSubscriptionWithContext, callInfo)
	mock.lockCreateEventSubscriptionWithContext.Unlock()
	return mock.CreateEventSubscriptionWithContextFunc(contextMoqParam, createEventSubscriptionInput, options...)
}

// CreateEventSubscriptionWithContextCalls gets all the calls that were made to CreateEventSubscriptionWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateEventSubscriptionWithContextCalls())
func (mock *rdsClientMock) CreateEventSubscriptionWithContextCalls() []struct {
	ContextMoqParam              context.Context
	CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		CreateEventSubscriptionInput *rds.CreateEventSubscriptionInput
		Options                      []request.Option
	}
	mock.lockCreateEventSubscriptionWithContext.RLock()
	calls = mock.calls.CreateEventSubscriptionWithContext
	mock.lockCreateEventSubscriptionWithContext.RUnlock()
	return calls
}

// CreateGlobalCluster calls CreateGlobalClusterFunc.
func (mock *rdsClientMock) CreateGlobalCluster(createGlobalClusterInput *rds.CreateGlobalClusterInput) (*rds.CreateGlobalClusterOutput, error) {
	if mock.CreateGlobalClusterFunc == nil {
		panic("rdsClientMock.CreateGlobalClusterFunc: method is nil but rdsClient.CreateGlobalCluster was just called")
	}
	callInfo := struct {
		CreateGlobalClusterInput *rds.CreateGlobalClusterInput
	}{
		CreateGlobalClusterInput: createGlobalClusterInput,
	}
	mock.lockCreateGlobalCluster.Lock()
	mock.calls.CreateGlobalCluster = append(mock.calls.CreateGlobalCluster, callInfo)
	mock.lockCreateGlobalCluster.Unlock()
	return mock.CreateGlobalClusterFunc(createGlobalClusterInput)
}

// CreateGlobalClusterCalls gets all the calls that were made to CreateGlobalCluster.
// Check the length with:
//     len(mockedrdsClient.CreateGlobalClusterCalls())
func (mock *rdsClientMock) CreateGlobalClusterCalls() []struct {
	CreateGlobalClusterInput *rds.CreateGlobalClusterInput
} {
	var calls []struct {
		CreateGlobalClusterInput *rds.CreateGlobalClusterInput
	}
	mock.lockCreateGlobalCluster.RLock()
	calls = mock.calls.CreateGlobalCluster
	mock.lockCreateGlobalCluster.RUnlock()
	return calls
}

// CreateGlobalClusterRequest calls CreateGlobalClusterRequestFunc.
func (mock *rdsClientMock) CreateGlobalClusterRequest(createGlobalClusterInput *rds.CreateGlobalClusterInput) (*request.Request, *rds.CreateGlobalClusterOutput) {
	if mock.CreateGlobalClusterRequestFunc == nil {
		panic("rdsClientMock.CreateGlobalClusterRequestFunc: method is nil but rdsClient.CreateGlobalClusterRequest was just called")
	}
	callInfo := struct {
		CreateGlobalClusterInput *rds.CreateGlobalClusterInput
	}{
		CreateGlobalClusterInput: createGlobalClusterInput,
	}
	mock.lockCreateGlobalClusterRequest.Lock()
	mock.calls.CreateGlobalClusterRequest = append(mock.calls.CreateGlobalClusterRequest, callInfo)
	mock.lockCreateGlobalClusterRequest.Unlock()
	return mock.CreateGlobalClusterRequestFunc(createGlobalClusterInput)
}

// CreateGlobalClusterRequestCalls gets all the calls that were made to CreateGlobalClusterRequest.
// Check the length with:
//     len(mockedrdsClient.CreateGlobalClusterRequestCalls())
func (mock *rdsClientMock) CreateGlobalClusterRequestCalls() []struct {
	CreateGlobalClusterInput *rds.CreateGlobalClusterInput
} {
	var calls []struct {
		CreateGlobalClusterInput *rds.CreateGlobalClusterInput
	}
	mock.lockCreateGlobalClusterRequest.RLock()
	calls = mock.calls.CreateGlobalClusterRequest
	mock.lockCreateGlobalClusterRequest.RUnlock()
	return calls
}

// CreateGlobalClusterWithContext calls CreateGlobalClusterWithContextFunc.
func (mock *rdsClientMock) CreateGlobalClusterWithContext(contextMoqParam context.Context, createGlobalClusterInput *rds.CreateGlobalClusterInput, options ...request.Option) (*rds.CreateGlobalClusterOutput, error) {
	if mock.CreateGlobalClusterWithContextFunc == nil {
		panic("rdsClientMock.CreateGlobalClusterWithContextFunc: method is nil but rdsClient.CreateGlobalClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		CreateGlobalClusterInput *rds.CreateGlobalClusterInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		CreateGlobalClusterInput: createGlobalClusterInput,
		Options:                  options,
	}
	mock.lockCreateGlobalClusterWithContext.Lock()
	mock.calls.CreateGlobalClusterWithContext = append(mock.calls.CreateGlobalClusterWithContext, callInfo)
	mock.lockCreateGlobalClusterWithContext.Unlock()
	return mock.CreateGlobalClusterWithContextFunc(contextMoqParam, createGlobalClusterInput, options...)
}

// CreateGlobalClusterWithContextCalls gets all the calls that were made to CreateGlobalClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateGlobalClusterWithContextCalls())
func (mock *rdsClientMock) CreateGlobalClusterWithContextCalls() []struct {
	ContextMoqParam          context.Context
	CreateGlobalClusterInput *rds.CreateGlobalClusterInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		CreateGlobalClusterInput *rds.CreateGlobalClusterInput
		Options                  []request.Option
	}
	mock.lockCreateGlobalClusterWithContext.RLock()
	calls = mock.calls.CreateGlobalClusterWithContext
	mock.lockCreateGlobalClusterWithContext.RUnlock()
	return calls
}

// CreateOptionGroup calls CreateOptionGroupFunc.
func (mock *rdsClientMock) CreateOptionGroup(createOptionGroupInput *rds.CreateOptionGroupInput) (*rds.CreateOptionGroupOutput, error) {
	if mock.CreateOptionGroupFunc == nil {
		panic("rdsClientMock.CreateOptionGroupFunc: method is nil but rdsClient.CreateOptionGroup was just called")
	}
	callInfo := struct {
		CreateOptionGroupInput *rds.CreateOptionGroupInput
	}{
		CreateOptionGroupInput: createOptionGroupInput,
	}
	mock.lockCreateOptionGroup.Lock()
	mock.calls.CreateOptionGroup = append(mock.calls.CreateOptionGroup, callInfo)
	mock.lockCreateOptionGroup.Unlock()
	return mock.CreateOptionGroupFunc(createOptionGroupInput)
}

// CreateOptionGroupCalls gets all the calls that were made to CreateOptionGroup.
// Check the length with:
//     len(mockedrdsClient.CreateOptionGroupCalls())
func (mock *rdsClientMock) CreateOptionGroupCalls() []struct {
	CreateOptionGroupInput *rds.CreateOptionGroupInput
} {
	var calls []struct {
		CreateOptionGroupInput *rds.CreateOptionGroupInput
	}
	mock.lockCreateOptionGroup.RLock()
	calls = mock.calls.CreateOptionGroup
	mock.lockCreateOptionGroup.RUnlock()
	return calls
}

// CreateOptionGroupRequest calls CreateOptionGroupRequestFunc.
func (mock *rdsClientMock) CreateOptionGroupRequest(createOptionGroupInput *rds.CreateOptionGroupInput) (*request.Request, *rds.CreateOptionGroupOutput) {
	if mock.CreateOptionGroupRequestFunc == nil {
		panic("rdsClientMock.CreateOptionGroupRequestFunc: method is nil but rdsClient.CreateOptionGroupRequest was just called")
	}
	callInfo := struct {
		CreateOptionGroupInput *rds.CreateOptionGroupInput
	}{
		CreateOptionGroupInput: createOptionGroupInput,
	}
	mock.lockCreateOptionGroupRequest.Lock()
	mock.calls.CreateOptionGroupRequest = append(mock.calls.CreateOptionGroupRequest, callInfo)
	mock.lockCreateOptionGroupRequest.Unlock()
	return mock.CreateOptionGroupRequestFunc(createOptionGroupInput)
}

// CreateOptionGroupRequestCalls gets all the calls that were made to CreateOptionGroupRequest.
// Check the length with:
//     len(mockedrdsClient.CreateOptionGroupRequestCalls())
func (mock *rdsClientMock) CreateOptionGroupRequestCalls() []struct {
	CreateOptionGroupInput *rds.CreateOptionGroupInput
} {
	var calls []struct {
		CreateOptionGroupInput *rds.CreateOptionGroupInput
	}
	mock.lockCreateOptionGroupRequest.RLock()
	calls = mock.calls.CreateOptionGroupRequest
	mock.lockCreateOptionGroupRequest.RUnlock()
	return calls
}

// CreateOptionGroupWithContext calls CreateOptionGroupWithContextFunc.
func (mock *rdsClientMock) CreateOptionGroupWithContext(contextMoqParam context.Context, createOptionGroupInput *rds.CreateOptionGroupInput, options ...request.Option) (*rds.CreateOptionGroupOutput, error) {
	if mock.CreateOptionGroupWithContextFunc == nil {
		panic("rdsClientMock.CreateOptionGroupWithContextFunc: method is nil but rdsClient.CreateOptionGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		CreateOptionGroupInput *rds.CreateOptionGroupInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		CreateOptionGroupInput: createOptionGroupInput,
		Options:                options,
	}
	mock.lockCreateOptionGroupWithContext.Lock()
	mock.calls.CreateOptionGroupWithContext = append(mock.calls.CreateOptionGroupWithContext, callInfo)
	mock.lockCreateOptionGroupWithContext.Unlock()
	return mock.CreateOptionGroupWithContextFunc(contextMoqParam, createOptionGroupInput, options...)
}

// CreateOptionGroupWithContextCalls gets all the calls that were made to CreateOptionGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.CreateOptionGroupWithContextCalls())
func (mock *rdsClientMock) CreateOptionGroupWithContextCalls() []struct {
	ContextMoqParam        context.Context
	CreateOptionGroupInput *rds.CreateOptionGroupInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		CreateOptionGroupInput *rds.CreateOptionGroupInput
		Options                []request.Option
	}
	mock.lockCreateOptionGroupWithContext.RLock()
	calls = mock.calls.CreateOptionGroupWithContext
	mock.lockCreateOptionGroupWithContext.RUnlock()
	return calls
}

// DeleteCustomDBEngineVersion calls DeleteCustomDBEngineVersionFunc.
func (mock *rdsClientMock) DeleteCustomDBEngineVersion(deleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput) (*rds.DeleteCustomDBEngineVersionOutput, error) {
	if mock.DeleteCustomDBEngineVersionFunc == nil {
		panic("rdsClientMock.DeleteCustomDBEngineVersionFunc: method is nil but rdsClient.DeleteCustomDBEngineVersion was just called")
	}
	callInfo := struct {
		DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
	}{
		DeleteCustomDBEngineVersionInput: deleteCustomDBEngineVersionInput,
	}
	mock.lockDeleteCustomDBEngineVersion.Lock()
	mock.calls.DeleteCustomDBEngineVersion = append(mock.calls.DeleteCustomDBEngineVersion, callInfo)
	mock.lockDeleteCustomDBEngineVersion.Unlock()
	return mock.DeleteCustomDBEngineVersionFunc(deleteCustomDBEngineVersionInput)
}

// DeleteCustomDBEngineVersionCalls gets all the calls that were made to DeleteCustomDBEngineVersion.
// Check the length with:
//     len(mockedrdsClient.DeleteCustomDBEngineVersionCalls())
func (mock *rdsClientMock) DeleteCustomDBEngineVersionCalls() []struct {
	DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
} {
	var calls []struct {
		DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
	}
	mock.lockDeleteCustomDBEngineVersion.RLock()
	calls = mock.calls.DeleteCustomDBEngineVersion
	mock.lockDeleteCustomDBEngineVersion.RUnlock()
	return calls
}

// DeleteCustomDBEngineVersionRequest calls DeleteCustomDBEngineVersionRequestFunc.
func (mock *rdsClientMock) DeleteCustomDBEngineVersionRequest(deleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput) (*request.Request, *rds.DeleteCustomDBEngineVersionOutput) {
	if mock.DeleteCustomDBEngineVersionRequestFunc == nil {
		panic("rdsClientMock.DeleteCustomDBEngineVersionRequestFunc: method is nil but rdsClient.DeleteCustomDBEngineVersionRequest was just called")
	}
	callInfo := struct {
		DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
	}{
		DeleteCustomDBEngineVersionInput: deleteCustomDBEngineVersionInput,
	}
	mock.lockDeleteCustomDBEngineVersionRequest.Lock()
	mock.calls.DeleteCustomDBEngineVersionRequest = append(mock.calls.DeleteCustomDBEngineVersionRequest, callInfo)
	mock.lockDeleteCustomDBEngineVersionRequest.Unlock()
	return mock.DeleteCustomDBEngineVersionRequestFunc(deleteCustomDBEngineVersionInput)
}

// DeleteCustomDBEngineVersionRequestCalls gets all the calls that were made to DeleteCustomDBEngineVersionRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteCustomDBEngineVersionRequestCalls())
func (mock *rdsClientMock) DeleteCustomDBEngineVersionRequestCalls() []struct {
	DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
} {
	var calls []struct {
		DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
	}
	mock.lockDeleteCustomDBEngineVersionRequest.RLock()
	calls = mock.calls.DeleteCustomDBEngineVersionRequest
	mock.lockDeleteCustomDBEngineVersionRequest.RUnlock()
	return calls
}

// DeleteCustomDBEngineVersionWithContext calls DeleteCustomDBEngineVersionWithContextFunc.
func (mock *rdsClientMock) DeleteCustomDBEngineVersionWithContext(contextMoqParam context.Context, deleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput, options ...request.Option) (*rds.DeleteCustomDBEngineVersionOutput, error) {
	if mock.DeleteCustomDBEngineVersionWithContextFunc == nil {
		panic("rdsClientMock.DeleteCustomDBEngineVersionWithContextFunc: method is nil but rdsClient.DeleteCustomDBEngineVersionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DeleteCustomDBEngineVersionInput: deleteCustomDBEngineVersionInput,
		Options:                          options,
	}
	mock.lockDeleteCustomDBEngineVersionWithContext.Lock()
	mock.calls.DeleteCustomDBEngineVersionWithContext = append(mock.calls.DeleteCustomDBEngineVersionWithContext, callInfo)
	mock.lockDeleteCustomDBEngineVersionWithContext.Unlock()
	return mock.DeleteCustomDBEngineVersionWithContextFunc(contextMoqParam, deleteCustomDBEngineVersionInput, options...)
}

// DeleteCustomDBEngineVersionWithContextCalls gets all the calls that were made to DeleteCustomDBEngineVersionWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteCustomDBEngineVersionWithContextCalls())
func (mock *rdsClientMock) DeleteCustomDBEngineVersionWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DeleteCustomDBEngineVersionInput *rds.DeleteCustomDBEngineVersionInput
		Options                          []request.Option
	}
	mock.lockDeleteCustomDBEngineVersionWithContext.RLock()
	calls = mock.calls.DeleteCustomDBEngineVersionWithContext
	mock.lockDeleteCustomDBEngineVersionWithContext.RUnlock()
	return calls
}

// DeleteDBCluster calls DeleteDBClusterFunc.
func (mock *rdsClientMock) DeleteDBCluster(deleteDBClusterInput *rds.DeleteDBClusterInput) (*rds.DeleteDBClusterOutput, error) {
	if mock.DeleteDBClusterFunc == nil {
		panic("rdsClientMock.DeleteDBClusterFunc: method is nil but rdsClient.DeleteDBCluster was just called")
	}
	callInfo := struct {
		DeleteDBClusterInput *rds.DeleteDBClusterInput
	}{
		DeleteDBClusterInput: deleteDBClusterInput,
	}
	mock.lockDeleteDBCluster.Lock()
	mock.calls.DeleteDBCluster = append(mock.calls.DeleteDBCluster, callInfo)
	mock.lockDeleteDBCluster.Unlock()
	return mock.DeleteDBClusterFunc(deleteDBClusterInput)
}

// DeleteDBClusterCalls gets all the calls that were made to DeleteDBCluster.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterCalls())
func (mock *rdsClientMock) DeleteDBClusterCalls() []struct {
	DeleteDBClusterInput *rds.DeleteDBClusterInput
} {
	var calls []struct {
		DeleteDBClusterInput *rds.DeleteDBClusterInput
	}
	mock.lockDeleteDBCluster.RLock()
	calls = mock.calls.DeleteDBCluster
	mock.lockDeleteDBCluster.RUnlock()
	return calls
}

// DeleteDBClusterEndpoint calls DeleteDBClusterEndpointFunc.
func (mock *rdsClientMock) DeleteDBClusterEndpoint(deleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput) (*rds.DeleteDBClusterEndpointOutput, error) {
	if mock.DeleteDBClusterEndpointFunc == nil {
		panic("rdsClientMock.DeleteDBClusterEndpointFunc: method is nil but rdsClient.DeleteDBClusterEndpoint was just called")
	}
	callInfo := struct {
		DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
	}{
		DeleteDBClusterEndpointInput: deleteDBClusterEndpointInput,
	}
	mock.lockDeleteDBClusterEndpoint.Lock()
	mock.calls.DeleteDBClusterEndpoint = append(mock.calls.DeleteDBClusterEndpoint, callInfo)
	mock.lockDeleteDBClusterEndpoint.Unlock()
	return mock.DeleteDBClusterEndpointFunc(deleteDBClusterEndpointInput)
}

// DeleteDBClusterEndpointCalls gets all the calls that were made to DeleteDBClusterEndpoint.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterEndpointCalls())
func (mock *rdsClientMock) DeleteDBClusterEndpointCalls() []struct {
	DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
} {
	var calls []struct {
		DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
	}
	mock.lockDeleteDBClusterEndpoint.RLock()
	calls = mock.calls.DeleteDBClusterEndpoint
	mock.lockDeleteDBClusterEndpoint.RUnlock()
	return calls
}

// DeleteDBClusterEndpointRequest calls DeleteDBClusterEndpointRequestFunc.
func (mock *rdsClientMock) DeleteDBClusterEndpointRequest(deleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput) (*request.Request, *rds.DeleteDBClusterEndpointOutput) {
	if mock.DeleteDBClusterEndpointRequestFunc == nil {
		panic("rdsClientMock.DeleteDBClusterEndpointRequestFunc: method is nil but rdsClient.DeleteDBClusterEndpointRequest was just called")
	}
	callInfo := struct {
		DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
	}{
		DeleteDBClusterEndpointInput: deleteDBClusterEndpointInput,
	}
	mock.lockDeleteDBClusterEndpointRequest.Lock()
	mock.calls.DeleteDBClusterEndpointRequest = append(mock.calls.DeleteDBClusterEndpointRequest, callInfo)
	mock.lockDeleteDBClusterEndpointRequest.Unlock()
	return mock.DeleteDBClusterEndpointRequestFunc(deleteDBClusterEndpointInput)
}

// DeleteDBClusterEndpointRequestCalls gets all the calls that were made to DeleteDBClusterEndpointRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterEndpointRequestCalls())
func (mock *rdsClientMock) DeleteDBClusterEndpointRequestCalls() []struct {
	DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
} {
	var calls []struct {
		DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
	}
	mock.lockDeleteDBClusterEndpointRequest.RLock()
	calls = mock.calls.DeleteDBClusterEndpointRequest
	mock.lockDeleteDBClusterEndpointRequest.RUnlock()
	return calls
}

// DeleteDBClusterEndpointWithContext calls DeleteDBClusterEndpointWithContextFunc.
func (mock *rdsClientMock) DeleteDBClusterEndpointWithContext(contextMoqParam context.Context, deleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput, options ...request.Option) (*rds.DeleteDBClusterEndpointOutput, error) {
	if mock.DeleteDBClusterEndpointWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBClusterEndpointWithContextFunc: method is nil but rdsClient.DeleteDBClusterEndpointWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		DeleteDBClusterEndpointInput: deleteDBClusterEndpointInput,
		Options:                      options,
	}
	mock.lockDeleteDBClusterEndpointWithContext.Lock()
	mock.calls.DeleteDBClusterEndpointWithContext = append(mock.calls.DeleteDBClusterEndpointWithContext, callInfo)
	mock.lockDeleteDBClusterEndpointWithContext.Unlock()
	return mock.DeleteDBClusterEndpointWithContextFunc(contextMoqParam, deleteDBClusterEndpointInput, options...)
}

// DeleteDBClusterEndpointWithContextCalls gets all the calls that were made to DeleteDBClusterEndpointWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterEndpointWithContextCalls())
func (mock *rdsClientMock) DeleteDBClusterEndpointWithContextCalls() []struct {
	ContextMoqParam              context.Context
	DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		DeleteDBClusterEndpointInput *rds.DeleteDBClusterEndpointInput
		Options                      []request.Option
	}
	mock.lockDeleteDBClusterEndpointWithContext.RLock()
	calls = mock.calls.DeleteDBClusterEndpointWithContext
	mock.lockDeleteDBClusterEndpointWithContext.RUnlock()
	return calls
}

// DeleteDBClusterParameterGroup calls DeleteDBClusterParameterGroupFunc.
func (mock *rdsClientMock) DeleteDBClusterParameterGroup(deleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	if mock.DeleteDBClusterParameterGroupFunc == nil {
		panic("rdsClientMock.DeleteDBClusterParameterGroupFunc: method is nil but rdsClient.DeleteDBClusterParameterGroup was just called")
	}
	callInfo := struct {
		DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
	}{
		DeleteDBClusterParameterGroupInput: deleteDBClusterParameterGroupInput,
	}
	mock.lockDeleteDBClusterParameterGroup.Lock()
	mock.calls.DeleteDBClusterParameterGroup = append(mock.calls.DeleteDBClusterParameterGroup, callInfo)
	mock.lockDeleteDBClusterParameterGroup.Unlock()
	return mock.DeleteDBClusterParameterGroupFunc(deleteDBClusterParameterGroupInput)
}

// DeleteDBClusterParameterGroupCalls gets all the calls that were made to DeleteDBClusterParameterGroup.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterParameterGroupCalls())
func (mock *rdsClientMock) DeleteDBClusterParameterGroupCalls() []struct {
	DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
} {
	var calls []struct {
		DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
	}
	mock.lockDeleteDBClusterParameterGroup.RLock()
	calls = mock.calls.DeleteDBClusterParameterGroup
	mock.lockDeleteDBClusterParameterGroup.RUnlock()
	return calls
}

// DeleteDBClusterParameterGroupRequest calls DeleteDBClusterParameterGroupRequestFunc.
func (mock *rdsClientMock) DeleteDBClusterParameterGroupRequest(deleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput) (*request.Request, *rds.DeleteDBClusterParameterGroupOutput) {
	if mock.DeleteDBClusterParameterGroupRequestFunc == nil {
		panic("rdsClientMock.DeleteDBClusterParameterGroupRequestFunc: method is nil but rdsClient.DeleteDBClusterParameterGroupRequest was just called")
	}
	callInfo := struct {
		DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
	}{
		DeleteDBClusterParameterGroupInput: deleteDBClusterParameterGroupInput,
	}
	mock.lockDeleteDBClusterParameterGroupRequest.Lock()
	mock.calls.DeleteDBClusterParameterGroupRequest = append(mock.calls.DeleteDBClusterParameterGroupRequest, callInfo)
	mock.lockDeleteDBClusterParameterGroupRequest.Unlock()
	return mock.DeleteDBClusterParameterGroupRequestFunc(deleteDBClusterParameterGroupInput)
}

// DeleteDBClusterParameterGroupRequestCalls gets all the calls that were made to DeleteDBClusterParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterParameterGroupRequestCalls())
func (mock *rdsClientMock) DeleteDBClusterParameterGroupRequestCalls() []struct {
	DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
} {
	var calls []struct {
		DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
	}
	mock.lockDeleteDBClusterParameterGroupRequest.RLock()
	calls = mock.calls.DeleteDBClusterParameterGroupRequest
	mock.lockDeleteDBClusterParameterGroupRequest.RUnlock()
	return calls
}

// DeleteDBClusterParameterGroupWithContext calls DeleteDBClusterParameterGroupWithContextFunc.
func (mock *rdsClientMock) DeleteDBClusterParameterGroupWithContext(contextMoqParam context.Context, deleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput, options ...request.Option) (*rds.DeleteDBClusterParameterGroupOutput, error) {
	if mock.DeleteDBClusterParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBClusterParameterGroupWithContextFunc: method is nil but rdsClient.DeleteDBClusterParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		DeleteDBClusterParameterGroupInput: deleteDBClusterParameterGroupInput,
		Options:                            options,
	}
	mock.lockDeleteDBClusterParameterGroupWithContext.Lock()
	mock.calls.DeleteDBClusterParameterGroupWithContext = append(mock.calls.DeleteDBClusterParameterGroupWithContext, callInfo)
	mock.lockDeleteDBClusterParameterGroupWithContext.Unlock()
	return mock.DeleteDBClusterParameterGroupWithContextFunc(contextMoqParam, deleteDBClusterParameterGroupInput, options...)
}

// DeleteDBClusterParameterGroupWithContextCalls gets all the calls that were made to DeleteDBClusterParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterParameterGroupWithContextCalls())
func (mock *rdsClientMock) DeleteDBClusterParameterGroupWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		DeleteDBClusterParameterGroupInput *rds.DeleteDBClusterParameterGroupInput
		Options                            []request.Option
	}
	mock.lockDeleteDBClusterParameterGroupWithContext.RLock()
	calls = mock.calls.DeleteDBClusterParameterGroupWithContext
	mock.lockDeleteDBClusterParameterGroupWithContext.RUnlock()
	return calls
}

// DeleteDBClusterRequest calls DeleteDBClusterRequestFunc.
func (mock *rdsClientMock) DeleteDBClusterRequest(deleteDBClusterInput *rds.DeleteDBClusterInput) (*request.Request, *rds.DeleteDBClusterOutput) {
	if mock.DeleteDBClusterRequestFunc == nil {
		panic("rdsClientMock.DeleteDBClusterRequestFunc: method is nil but rdsClient.DeleteDBClusterRequest was just called")
	}
	callInfo := struct {
		DeleteDBClusterInput *rds.DeleteDBClusterInput
	}{
		DeleteDBClusterInput: deleteDBClusterInput,
	}
	mock.lockDeleteDBClusterRequest.Lock()
	mock.calls.DeleteDBClusterRequest = append(mock.calls.DeleteDBClusterRequest, callInfo)
	mock.lockDeleteDBClusterRequest.Unlock()
	return mock.DeleteDBClusterRequestFunc(deleteDBClusterInput)
}

// DeleteDBClusterRequestCalls gets all the calls that were made to DeleteDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterRequestCalls())
func (mock *rdsClientMock) DeleteDBClusterRequestCalls() []struct {
	DeleteDBClusterInput *rds.DeleteDBClusterInput
} {
	var calls []struct {
		DeleteDBClusterInput *rds.DeleteDBClusterInput
	}
	mock.lockDeleteDBClusterRequest.RLock()
	calls = mock.calls.DeleteDBClusterRequest
	mock.lockDeleteDBClusterRequest.RUnlock()
	return calls
}

// DeleteDBClusterSnapshot calls DeleteDBClusterSnapshotFunc.
func (mock *rdsClientMock) DeleteDBClusterSnapshot(deleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput) (*rds.DeleteDBClusterSnapshotOutput, error) {
	if mock.DeleteDBClusterSnapshotFunc == nil {
		panic("rdsClientMock.DeleteDBClusterSnapshotFunc: method is nil but rdsClient.DeleteDBClusterSnapshot was just called")
	}
	callInfo := struct {
		DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
	}{
		DeleteDBClusterSnapshotInput: deleteDBClusterSnapshotInput,
	}
	mock.lockDeleteDBClusterSnapshot.Lock()
	mock.calls.DeleteDBClusterSnapshot = append(mock.calls.DeleteDBClusterSnapshot, callInfo)
	mock.lockDeleteDBClusterSnapshot.Unlock()
	return mock.DeleteDBClusterSnapshotFunc(deleteDBClusterSnapshotInput)
}

// DeleteDBClusterSnapshotCalls gets all the calls that were made to DeleteDBClusterSnapshot.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterSnapshotCalls())
func (mock *rdsClientMock) DeleteDBClusterSnapshotCalls() []struct {
	DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
} {
	var calls []struct {
		DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
	}
	mock.lockDeleteDBClusterSnapshot.RLock()
	calls = mock.calls.DeleteDBClusterSnapshot
	mock.lockDeleteDBClusterSnapshot.RUnlock()
	return calls
}

// DeleteDBClusterSnapshotRequest calls DeleteDBClusterSnapshotRequestFunc.
func (mock *rdsClientMock) DeleteDBClusterSnapshotRequest(deleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput) (*request.Request, *rds.DeleteDBClusterSnapshotOutput) {
	if mock.DeleteDBClusterSnapshotRequestFunc == nil {
		panic("rdsClientMock.DeleteDBClusterSnapshotRequestFunc: method is nil but rdsClient.DeleteDBClusterSnapshotRequest was just called")
	}
	callInfo := struct {
		DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
	}{
		DeleteDBClusterSnapshotInput: deleteDBClusterSnapshotInput,
	}
	mock.lockDeleteDBClusterSnapshotRequest.Lock()
	mock.calls.DeleteDBClusterSnapshotRequest = append(mock.calls.DeleteDBClusterSnapshotRequest, callInfo)
	mock.lockDeleteDBClusterSnapshotRequest.Unlock()
	return mock.DeleteDBClusterSnapshotRequestFunc(deleteDBClusterSnapshotInput)
}

// DeleteDBClusterSnapshotRequestCalls gets all the calls that were made to DeleteDBClusterSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterSnapshotRequestCalls())
func (mock *rdsClientMock) DeleteDBClusterSnapshotRequestCalls() []struct {
	DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
} {
	var calls []struct {
		DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
	}
	mock.lockDeleteDBClusterSnapshotRequest.RLock()
	calls = mock.calls.DeleteDBClusterSnapshotRequest
	mock.lockDeleteDBClusterSnapshotRequest.RUnlock()
	return calls
}

// DeleteDBClusterSnapshotWithContext calls DeleteDBClusterSnapshotWithContextFunc.
func (mock *rdsClientMock) DeleteDBClusterSnapshotWithContext(contextMoqParam context.Context, deleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput, options ...request.Option) (*rds.DeleteDBClusterSnapshotOutput, error) {
	if mock.DeleteDBClusterSnapshotWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBClusterSnapshotWithContextFunc: method is nil but rdsClient.DeleteDBClusterSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		DeleteDBClusterSnapshotInput: deleteDBClusterSnapshotInput,
		Options:                      options,
	}
	mock.lockDeleteDBClusterSnapshotWithContext.Lock()
	mock.calls.DeleteDBClusterSnapshotWithContext = append(mock.calls.DeleteDBClusterSnapshotWithContext, callInfo)
	mock.lockDeleteDBClusterSnapshotWithContext.Unlock()
	return mock.DeleteDBClusterSnapshotWithContextFunc(contextMoqParam, deleteDBClusterSnapshotInput, options...)
}

// DeleteDBClusterSnapshotWithContextCalls gets all the calls that were made to DeleteDBClusterSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterSnapshotWithContextCalls())
func (mock *rdsClientMock) DeleteDBClusterSnapshotWithContextCalls() []struct {
	ContextMoqParam              context.Context
	DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		DeleteDBClusterSnapshotInput *rds.DeleteDBClusterSnapshotInput
		Options                      []request.Option
	}
	mock.lockDeleteDBClusterSnapshotWithContext.RLock()
	calls = mock.calls.DeleteDBClusterSnapshotWithContext
	mock.lockDeleteDBClusterSnapshotWithContext.RUnlock()
	return calls
}

// DeleteDBClusterWithContext calls DeleteDBClusterWithContextFunc.
func (mock *rdsClientMock) DeleteDBClusterWithContext(contextMoqParam context.Context, deleteDBClusterInput *rds.DeleteDBClusterInput, options ...request.Option) (*rds.DeleteDBClusterOutput, error) {
	if mock.DeleteDBClusterWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBClusterWithContextFunc: method is nil but rdsClient.DeleteDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		DeleteDBClusterInput *rds.DeleteDBClusterInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		DeleteDBClusterInput: deleteDBClusterInput,
		Options:              options,
	}
	mock.lockDeleteDBClusterWithContext.Lock()
	mock.calls.DeleteDBClusterWithContext = append(mock.calls.DeleteDBClusterWithContext, callInfo)
	mock.lockDeleteDBClusterWithContext.Unlock()
	return mock.DeleteDBClusterWithContextFunc(contextMoqParam, deleteDBClusterInput, options...)
}

// DeleteDBClusterWithContextCalls gets all the calls that were made to DeleteDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBClusterWithContextCalls())
func (mock *rdsClientMock) DeleteDBClusterWithContextCalls() []struct {
	ContextMoqParam      context.Context
	DeleteDBClusterInput *rds.DeleteDBClusterInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		DeleteDBClusterInput *rds.DeleteDBClusterInput
		Options              []request.Option
	}
	mock.lockDeleteDBClusterWithContext.RLock()
	calls = mock.calls.DeleteDBClusterWithContext
	mock.lockDeleteDBClusterWithContext.RUnlock()
	return calls
}

// DeleteDBInstance calls DeleteDBInstanceFunc.
func (mock *rdsClientMock) DeleteDBInstance(deleteDBInstanceInput *rds.DeleteDBInstanceInput) (*rds.DeleteDBInstanceOutput, error) {
	if mock.DeleteDBInstanceFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceFunc: method is nil but rdsClient.DeleteDBInstance was just called")
	}
	callInfo := struct {
		DeleteDBInstanceInput *rds.DeleteDBInstanceInput
	}{
		DeleteDBInstanceInput: deleteDBInstanceInput,
	}
	mock.lockDeleteDBInstance.Lock()
	mock.calls.DeleteDBInstance = append(mock.calls.DeleteDBInstance, callInfo)
	mock.lockDeleteDBInstance.Unlock()
	return mock.DeleteDBInstanceFunc(deleteDBInstanceInput)
}

// DeleteDBInstanceCalls gets all the calls that were made to DeleteDBInstance.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceCalls())
func (mock *rdsClientMock) DeleteDBInstanceCalls() []struct {
	DeleteDBInstanceInput *rds.DeleteDBInstanceInput
} {
	var calls []struct {
		DeleteDBInstanceInput *rds.DeleteDBInstanceInput
	}
	mock.lockDeleteDBInstance.RLock()
	calls = mock.calls.DeleteDBInstance
	mock.lockDeleteDBInstance.RUnlock()
	return calls
}

// DeleteDBInstanceAutomatedBackup calls DeleteDBInstanceAutomatedBackupFunc.
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackup(deleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	if mock.DeleteDBInstanceAutomatedBackupFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceAutomatedBackupFunc: method is nil but rdsClient.DeleteDBInstanceAutomatedBackup was just called")
	}
	callInfo := struct {
		DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
	}{
		DeleteDBInstanceAutomatedBackupInput: deleteDBInstanceAutomatedBackupInput,
	}
	mock.lockDeleteDBInstanceAutomatedBackup.Lock()
	mock.calls.DeleteDBInstanceAutomatedBackup = append(mock.calls.DeleteDBInstanceAutomatedBackup, callInfo)
	mock.lockDeleteDBInstanceAutomatedBackup.Unlock()
	return mock.DeleteDBInstanceAutomatedBackupFunc(deleteDBInstanceAutomatedBackupInput)
}

// DeleteDBInstanceAutomatedBackupCalls gets all the calls that were made to DeleteDBInstanceAutomatedBackup.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceAutomatedBackupCalls())
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackupCalls() []struct {
	DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
} {
	var calls []struct {
		DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
	}
	mock.lockDeleteDBInstanceAutomatedBackup.RLock()
	calls = mock.calls.DeleteDBInstanceAutomatedBackup
	mock.lockDeleteDBInstanceAutomatedBackup.RUnlock()
	return calls
}

// DeleteDBInstanceAutomatedBackupRequest calls DeleteDBInstanceAutomatedBackupRequestFunc.
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackupRequest(deleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput) (*request.Request, *rds.DeleteDBInstanceAutomatedBackupOutput) {
	if mock.DeleteDBInstanceAutomatedBackupRequestFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceAutomatedBackupRequestFunc: method is nil but rdsClient.DeleteDBInstanceAutomatedBackupRequest was just called")
	}
	callInfo := struct {
		DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
	}{
		DeleteDBInstanceAutomatedBackupInput: deleteDBInstanceAutomatedBackupInput,
	}
	mock.lockDeleteDBInstanceAutomatedBackupRequest.Lock()
	mock.calls.DeleteDBInstanceAutomatedBackupRequest = append(mock.calls.DeleteDBInstanceAutomatedBackupRequest, callInfo)
	mock.lockDeleteDBInstanceAutomatedBackupRequest.Unlock()
	return mock.DeleteDBInstanceAutomatedBackupRequestFunc(deleteDBInstanceAutomatedBackupInput)
}

// DeleteDBInstanceAutomatedBackupRequestCalls gets all the calls that were made to DeleteDBInstanceAutomatedBackupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceAutomatedBackupRequestCalls())
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackupRequestCalls() []struct {
	DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
} {
	var calls []struct {
		DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
	}
	mock.lockDeleteDBInstanceAutomatedBackupRequest.RLock()
	calls = mock.calls.DeleteDBInstanceAutomatedBackupRequest
	mock.lockDeleteDBInstanceAutomatedBackupRequest.RUnlock()
	return calls
}

// DeleteDBInstanceAutomatedBackupWithContext calls DeleteDBInstanceAutomatedBackupWithContextFunc.
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackupWithContext(contextMoqParam context.Context, deleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput, options ...request.Option) (*rds.DeleteDBInstanceAutomatedBackupOutput, error) {
	if mock.DeleteDBInstanceAutomatedBackupWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceAutomatedBackupWithContextFunc: method is nil but rdsClient.DeleteDBInstanceAutomatedBackupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		DeleteDBInstanceAutomatedBackupInput: deleteDBInstanceAutomatedBackupInput,
		Options:                              options,
	}
	mock.lockDeleteDBInstanceAutomatedBackupWithContext.Lock()
	mock.calls.DeleteDBInstanceAutomatedBackupWithContext = append(mock.calls.DeleteDBInstanceAutomatedBackupWithContext, callInfo)
	mock.lockDeleteDBInstanceAutomatedBackupWithContext.Unlock()
	return mock.DeleteDBInstanceAutomatedBackupWithContextFunc(contextMoqParam, deleteDBInstanceAutomatedBackupInput, options...)
}

// DeleteDBInstanceAutomatedBackupWithContextCalls gets all the calls that were made to DeleteDBInstanceAutomatedBackupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceAutomatedBackupWithContextCalls())
func (mock *rdsClientMock) DeleteDBInstanceAutomatedBackupWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		DeleteDBInstanceAutomatedBackupInput *rds.DeleteDBInstanceAutomatedBackupInput
		Options                              []request.Option
	}
	mock.lockDeleteDBInstanceAutomatedBackupWithContext.RLock()
	calls = mock.calls.DeleteDBInstanceAutomatedBackupWithContext
	mock.lockDeleteDBInstanceAutomatedBackupWithContext.RUnlock()
	return calls
}

// DeleteDBInstanceRequest calls DeleteDBInstanceRequestFunc.
func (mock *rdsClientMock) DeleteDBInstanceRequest(deleteDBInstanceInput *rds.DeleteDBInstanceInput) (*request.Request, *rds.DeleteDBInstanceOutput) {
	if mock.DeleteDBInstanceRequestFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceRequestFunc: method is nil but rdsClient.DeleteDBInstanceRequest was just called")
	}
	callInfo := struct {
		DeleteDBInstanceInput *rds.DeleteDBInstanceInput
	}{
		DeleteDBInstanceInput: deleteDBInstanceInput,
	}
	mock.lockDeleteDBInstanceRequest.Lock()
	mock.calls.DeleteDBInstanceRequest = append(mock.calls.DeleteDBInstanceRequest, callInfo)
	mock.lockDeleteDBInstanceRequest.Unlock()
	return mock.DeleteDBInstanceRequestFunc(deleteDBInstanceInput)
}

// DeleteDBInstanceRequestCalls gets all the calls that were made to DeleteDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceRequestCalls())
func (mock *rdsClientMock) DeleteDBInstanceRequestCalls() []struct {
	DeleteDBInstanceInput *rds.DeleteDBInstanceInput
} {
	var calls []struct {
		DeleteDBInstanceInput *rds.DeleteDBInstanceInput
	}
	mock.lockDeleteDBInstanceRequest.RLock()
	calls = mock.calls.DeleteDBInstanceRequest
	mock.lockDeleteDBInstanceRequest.RUnlock()
	return calls
}

// DeleteDBInstanceWithContext calls DeleteDBInstanceWithContextFunc.
func (mock *rdsClientMock) DeleteDBInstanceWithContext(contextMoqParam context.Context, deleteDBInstanceInput *rds.DeleteDBInstanceInput, options ...request.Option) (*rds.DeleteDBInstanceOutput, error) {
	if mock.DeleteDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBInstanceWithContextFunc: method is nil but rdsClient.DeleteDBInstanceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		DeleteDBInstanceInput *rds.DeleteDBInstanceInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		DeleteDBInstanceInput: deleteDBInstanceInput,
		Options:               options,
	}
	mock.lockDeleteDBInstanceWithContext.Lock()
	mock.calls.DeleteDBInstanceWithContext = append(mock.calls.DeleteDBInstanceWithContext, callInfo)
	mock.lockDeleteDBInstanceWithContext.Unlock()
	return mock.DeleteDBInstanceWithContextFunc(contextMoqParam, deleteDBInstanceInput, options...)
}

// DeleteDBInstanceWithContextCalls gets all the calls that were made to DeleteDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBInstanceWithContextCalls())
func (mock *rdsClientMock) DeleteDBInstanceWithContextCalls() []struct {
	ContextMoqParam       context.Context
	DeleteDBInstanceInput *rds.DeleteDBInstanceInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		DeleteDBInstanceInput *rds.DeleteDBInstanceInput
		Options               []request.Option
	}
	mock.lockDeleteDBInstanceWithContext.RLock()
	calls = mock.calls.DeleteDBInstanceWithContext
	mock.lockDeleteDBInstanceWithContext.RUnlock()
	return calls
}

// DeleteDBParameterGroup calls DeleteDBParameterGroupFunc.
func (mock *rdsClientMock) DeleteDBParameterGroup(deleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput) (*rds.DeleteDBParameterGroupOutput, error) {
	if mock.DeleteDBParameterGroupFunc == nil {
		panic("rdsClientMock.DeleteDBParameterGroupFunc: method is nil but rdsClient.DeleteDBParameterGroup was just called")
	}
	callInfo := struct {
		DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
	}{
		DeleteDBParameterGroupInput: deleteDBParameterGroupInput,
	}
	mock.lockDeleteDBParameterGroup.Lock()
	mock.calls.DeleteDBParameterGroup = append(mock.calls.DeleteDBParameterGroup, callInfo)
	mock.lockDeleteDBParameterGroup.Unlock()
	return mock.DeleteDBParameterGroupFunc(deleteDBParameterGroupInput)
}

// DeleteDBParameterGroupCalls gets all the calls that were made to DeleteDBParameterGroup.
// Check the length with:
//     len(mockedrdsClient.DeleteDBParameterGroupCalls())
func (mock *rdsClientMock) DeleteDBParameterGroupCalls() []struct {
	DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
} {
	var calls []struct {
		DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
	}
	mock.lockDeleteDBParameterGroup.RLock()
	calls = mock.calls.DeleteDBParameterGroup
	mock.lockDeleteDBParameterGroup.RUnlock()
	return calls
}

// DeleteDBParameterGroupRequest calls DeleteDBParameterGroupRequestFunc.
func (mock *rdsClientMock) DeleteDBParameterGroupRequest(deleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput) (*request.Request, *rds.DeleteDBParameterGroupOutput) {
	if mock.DeleteDBParameterGroupRequestFunc == nil {
		panic("rdsClientMock.DeleteDBParameterGroupRequestFunc: method is nil but rdsClient.DeleteDBParameterGroupRequest was just called")
	}
	callInfo := struct {
		DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
	}{
		DeleteDBParameterGroupInput: deleteDBParameterGroupInput,
	}
	mock.lockDeleteDBParameterGroupRequest.Lock()
	mock.calls.DeleteDBParameterGroupRequest = append(mock.calls.DeleteDBParameterGroupRequest, callInfo)
	mock.lockDeleteDBParameterGroupRequest.Unlock()
	return mock.DeleteDBParameterGroupRequestFunc(deleteDBParameterGroupInput)
}

// DeleteDBParameterGroupRequestCalls gets all the calls that were made to DeleteDBParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBParameterGroupRequestCalls())
func (mock *rdsClientMock) DeleteDBParameterGroupRequestCalls() []struct {
	DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
} {
	var calls []struct {
		DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
	}
	mock.lockDeleteDBParameterGroupRequest.RLock()
	calls = mock.calls.DeleteDBParameterGroupRequest
	mock.lockDeleteDBParameterGroupRequest.RUnlock()
	return calls
}

// DeleteDBParameterGroupWithContext calls DeleteDBParameterGroupWithContextFunc.
func (mock *rdsClientMock) DeleteDBParameterGroupWithContext(contextMoqParam context.Context, deleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput, options ...request.Option) (*rds.DeleteDBParameterGroupOutput, error) {
	if mock.DeleteDBParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBParameterGroupWithContextFunc: method is nil but rdsClient.DeleteDBParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DeleteDBParameterGroupInput: deleteDBParameterGroupInput,
		Options:                     options,
	}
	mock.lockDeleteDBParameterGroupWithContext.Lock()
	mock.calls.DeleteDBParameterGroupWithContext = append(mock.calls.DeleteDBParameterGroupWithContext, callInfo)
	mock.lockDeleteDBParameterGroupWithContext.Unlock()
	return mock.DeleteDBParameterGroupWithContextFunc(contextMoqParam, deleteDBParameterGroupInput, options...)
}

// DeleteDBParameterGroupWithContextCalls gets all the calls that were made to DeleteDBParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBParameterGroupWithContextCalls())
func (mock *rdsClientMock) DeleteDBParameterGroupWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DeleteDBParameterGroupInput *rds.DeleteDBParameterGroupInput
		Options                     []request.Option
	}
	mock.lockDeleteDBParameterGroupWithContext.RLock()
	calls = mock.calls.DeleteDBParameterGroupWithContext
	mock.lockDeleteDBParameterGroupWithContext.RUnlock()
	return calls
}

// DeleteDBProxy calls DeleteDBProxyFunc.
func (mock *rdsClientMock) DeleteDBProxy(deleteDBProxyInput *rds.DeleteDBProxyInput) (*rds.DeleteDBProxyOutput, error) {
	if mock.DeleteDBProxyFunc == nil {
		panic("rdsClientMock.DeleteDBProxyFunc: method is nil but rdsClient.DeleteDBProxy was just called")
	}
	callInfo := struct {
		DeleteDBProxyInput *rds.DeleteDBProxyInput
	}{
		DeleteDBProxyInput: deleteDBProxyInput,
	}
	mock.lockDeleteDBProxy.Lock()
	mock.calls.DeleteDBProxy = append(mock.calls.DeleteDBProxy, callInfo)
	mock.lockDeleteDBProxy.Unlock()
	return mock.DeleteDBProxyFunc(deleteDBProxyInput)
}

// DeleteDBProxyCalls gets all the calls that were made to DeleteDBProxy.
// Check the length with:
//     len(mockedrdsClient.DeleteDBProxyCalls())
func (mock *rdsClientMock) DeleteDBProxyCalls() []struct {
	DeleteDBProxyInput *rds.DeleteDBProxyInput
} {
	var calls []struct {
		DeleteDBProxyInput *rds.DeleteDBProxyInput
	}
	mock.lockDeleteDBProxy.RLock()
	calls = mock.calls.DeleteDBProxy
	mock.lockDeleteDBProxy.RUnlock()
	return calls
}

// DeleteDBProxyEndpoint calls DeleteDBProxyEndpointFunc.
func (mock *rdsClientMock) DeleteDBProxyEndpoint(deleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput) (*rds.DeleteDBProxyEndpointOutput, error) {
	if mock.DeleteDBProxyEndpointFunc == nil {
		panic("rdsClientMock.DeleteDBProxyEndpointFunc: method is nil but rdsClient.DeleteDBProxyEndpoint was just called")
	}
	callInfo := struct {
		DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
	}{
		DeleteDBProxyEndpointInput: deleteDBProxyEndpointInput,
	}
	mock.lockDeleteDBProxyEndpoint.Lock()
	mock.calls.DeleteDBProxyEndpoint = append(mock.calls.DeleteDBProxyEndpoint, callInfo)
	mock.lockDeleteDBProxyEndpoint.Unlock()
	return mock.DeleteDBProxyEndpointFunc(deleteDBProxyEndpointInput)
}

// DeleteDBProxyEndpointCalls gets all the calls that were made to DeleteDBProxyEndpoint.
// Check the length with:
//     len(mockedrdsClient.DeleteDBProxyEndpointCalls())
func (mock *rdsClientMock) DeleteDBProxyEndpointCalls() []struct {
	DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
} {
	var calls []struct {
		DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
	}
	mock.lockDeleteDBProxyEndpoint.RLock()
	calls = mock.calls.DeleteDBProxyEndpoint
	mock.lockDeleteDBProxyEndpoint.RUnlock()
	return calls
}

// DeleteDBProxyEndpointRequest calls DeleteDBProxyEndpointRequestFunc.
func (mock *rdsClientMock) DeleteDBProxyEndpointRequest(deleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput) (*request.Request, *rds.DeleteDBProxyEndpointOutput) {
	if mock.DeleteDBProxyEndpointRequestFunc == nil {
		panic("rdsClientMock.DeleteDBProxyEndpointRequestFunc: method is nil but rdsClient.DeleteDBProxyEndpointRequest was just called")
	}
	callInfo := struct {
		DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
	}{
		DeleteDBProxyEndpointInput: deleteDBProxyEndpointInput,
	}
	mock.lockDeleteDBProxyEndpointRequest.Lock()
	mock.calls.DeleteDBProxyEndpointRequest = append(mock.calls.DeleteDBProxyEndpointRequest, callInfo)
	mock.lockDeleteDBProxyEndpointRequest.Unlock()
	return mock.DeleteDBProxyEndpointRequestFunc(deleteDBProxyEndpointInput)
}

// DeleteDBProxyEndpointRequestCalls gets all the calls that were made to DeleteDBProxyEndpointRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBProxyEndpointRequestCalls())
func (mock *rdsClientMock) DeleteDBProxyEndpointRequestCalls() []struct {
	DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
} {
	var calls []struct {
		DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
	}
	mock.lockDeleteDBProxyEndpointRequest.RLock()
	calls = mock.calls.DeleteDBProxyEndpointRequest
	mock.lockDeleteDBProxyEndpointRequest.RUnlock()
	return calls
}

// DeleteDBProxyEndpointWithContext calls DeleteDBProxyEndpointWithContextFunc.
func (mock *rdsClientMock) DeleteDBProxyEndpointWithContext(contextMoqParam context.Context, deleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput, options ...request.Option) (*rds.DeleteDBProxyEndpointOutput, error) {
	if mock.DeleteDBProxyEndpointWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBProxyEndpointWithContextFunc: method is nil but rdsClient.DeleteDBProxyEndpointWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		DeleteDBProxyEndpointInput: deleteDBProxyEndpointInput,
		Options:                    options,
	}
	mock.lockDeleteDBProxyEndpointWithContext.Lock()
	mock.calls.DeleteDBProxyEndpointWithContext = append(mock.calls.DeleteDBProxyEndpointWithContext, callInfo)
	mock.lockDeleteDBProxyEndpointWithContext.Unlock()
	return mock.DeleteDBProxyEndpointWithContextFunc(contextMoqParam, deleteDBProxyEndpointInput, options...)
}

// DeleteDBProxyEndpointWithContextCalls gets all the calls that were made to DeleteDBProxyEndpointWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBProxyEndpointWithContextCalls())
func (mock *rdsClientMock) DeleteDBProxyEndpointWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DeleteDBProxyEndpointInput *rds.DeleteDBProxyEndpointInput
		Options                    []request.Option
	}
	mock.lockDeleteDBProxyEndpointWithContext.RLock()
	calls = mock.calls.DeleteDBProxyEndpointWithContext
	mock.lockDeleteDBProxyEndpointWithContext.RUnlock()
	return calls
}

// DeleteDBProxyRequest calls DeleteDBProxyRequestFunc.
func (mock *rdsClientMock) DeleteDBProxyRequest(deleteDBProxyInput *rds.DeleteDBProxyInput) (*request.Request, *rds.DeleteDBProxyOutput) {
	if mock.DeleteDBProxyRequestFunc == nil {
		panic("rdsClientMock.DeleteDBProxyRequestFunc: method is nil but rdsClient.DeleteDBProxyRequest was just called")
	}
	callInfo := struct {
		DeleteDBProxyInput *rds.DeleteDBProxyInput
	}{
		DeleteDBProxyInput: deleteDBProxyInput,
	}
	mock.lockDeleteDBProxyRequest.Lock()
	mock.calls.DeleteDBProxyRequest = append(mock.calls.DeleteDBProxyRequest, callInfo)
	mock.lockDeleteDBProxyRequest.Unlock()
	return mock.DeleteDBProxyRequestFunc(deleteDBProxyInput)
}

// DeleteDBProxyRequestCalls gets all the calls that were made to DeleteDBProxyRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBProxyRequestCalls())
func (mock *rdsClientMock) DeleteDBProxyRequestCalls() []struct {
	DeleteDBProxyInput *rds.DeleteDBProxyInput
} {
	var calls []struct {
		DeleteDBProxyInput *rds.DeleteDBProxyInput
	}
	mock.lockDeleteDBProxyRequest.RLock()
	calls = mock.calls.DeleteDBProxyRequest
	mock.lockDeleteDBProxyRequest.RUnlock()
	return calls
}

// DeleteDBProxyWithContext calls DeleteDBProxyWithContextFunc.
func (mock *rdsClientMock) DeleteDBProxyWithContext(contextMoqParam context.Context, deleteDBProxyInput *rds.DeleteDBProxyInput, options ...request.Option) (*rds.DeleteDBProxyOutput, error) {
	if mock.DeleteDBProxyWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBProxyWithContextFunc: method is nil but rdsClient.DeleteDBProxyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		DeleteDBProxyInput *rds.DeleteDBProxyInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		DeleteDBProxyInput: deleteDBProxyInput,
		Options:            options,
	}
	mock.lockDeleteDBProxyWithContext.Lock()
	mock.calls.DeleteDBProxyWithContext = append(mock.calls.DeleteDBProxyWithContext, callInfo)
	mock.lockDeleteDBProxyWithContext.Unlock()
	return mock.DeleteDBProxyWithContextFunc(contextMoqParam, deleteDBProxyInput, options...)
}

// DeleteDBProxyWithContextCalls gets all the calls that were made to DeleteDBProxyWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBProxyWithContextCalls())
func (mock *rdsClientMock) DeleteDBProxyWithContextCalls() []struct {
	ContextMoqParam    context.Context
	DeleteDBProxyInput *rds.DeleteDBProxyInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		DeleteDBProxyInput *rds.DeleteDBProxyInput
		Options            []request.Option
	}
	mock.lockDeleteDBProxyWithContext.RLock()
	calls = mock.calls.DeleteDBProxyWithContext
	mock.lockDeleteDBProxyWithContext.RUnlock()
	return calls
}

// DeleteDBSecurityGroup calls DeleteDBSecurityGroupFunc.
func (mock *rdsClientMock) DeleteDBSecurityGroup(deleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput) (*rds.DeleteDBSecurityGroupOutput, error) {
	if mock.DeleteDBSecurityGroupFunc == nil {
		panic("rdsClientMock.DeleteDBSecurityGroupFunc: method is nil but rdsClient.DeleteDBSecurityGroup was just called")
	}
	callInfo := struct {
		DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
	}{
		DeleteDBSecurityGroupInput: deleteDBSecurityGroupInput,
	}
	mock.lockDeleteDBSecurityGroup.Lock()
	mock.calls.DeleteDBSecurityGroup = append(mock.calls.DeleteDBSecurityGroup, callInfo)
	mock.lockDeleteDBSecurityGroup.Unlock()
	return mock.DeleteDBSecurityGroupFunc(deleteDBSecurityGroupInput)
}

// DeleteDBSecurityGroupCalls gets all the calls that were made to DeleteDBSecurityGroup.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSecurityGroupCalls())
func (mock *rdsClientMock) DeleteDBSecurityGroupCalls() []struct {
	DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
} {
	var calls []struct {
		DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
	}
	mock.lockDeleteDBSecurityGroup.RLock()
	calls = mock.calls.DeleteDBSecurityGroup
	mock.lockDeleteDBSecurityGroup.RUnlock()
	return calls
}

// DeleteDBSecurityGroupRequest calls DeleteDBSecurityGroupRequestFunc.
func (mock *rdsClientMock) DeleteDBSecurityGroupRequest(deleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput) (*request.Request, *rds.DeleteDBSecurityGroupOutput) {
	if mock.DeleteDBSecurityGroupRequestFunc == nil {
		panic("rdsClientMock.DeleteDBSecurityGroupRequestFunc: method is nil but rdsClient.DeleteDBSecurityGroupRequest was just called")
	}
	callInfo := struct {
		DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
	}{
		DeleteDBSecurityGroupInput: deleteDBSecurityGroupInput,
	}
	mock.lockDeleteDBSecurityGroupRequest.Lock()
	mock.calls.DeleteDBSecurityGroupRequest = append(mock.calls.DeleteDBSecurityGroupRequest, callInfo)
	mock.lockDeleteDBSecurityGroupRequest.Unlock()
	return mock.DeleteDBSecurityGroupRequestFunc(deleteDBSecurityGroupInput)
}

// DeleteDBSecurityGroupRequestCalls gets all the calls that were made to DeleteDBSecurityGroupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSecurityGroupRequestCalls())
func (mock *rdsClientMock) DeleteDBSecurityGroupRequestCalls() []struct {
	DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
} {
	var calls []struct {
		DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
	}
	mock.lockDeleteDBSecurityGroupRequest.RLock()
	calls = mock.calls.DeleteDBSecurityGroupRequest
	mock.lockDeleteDBSecurityGroupRequest.RUnlock()
	return calls
}

// DeleteDBSecurityGroupWithContext calls DeleteDBSecurityGroupWithContextFunc.
func (mock *rdsClientMock) DeleteDBSecurityGroupWithContext(contextMoqParam context.Context, deleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput, options ...request.Option) (*rds.DeleteDBSecurityGroupOutput, error) {
	if mock.DeleteDBSecurityGroupWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBSecurityGroupWithContextFunc: method is nil but rdsClient.DeleteDBSecurityGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		DeleteDBSecurityGroupInput: deleteDBSecurityGroupInput,
		Options:                    options,
	}
	mock.lockDeleteDBSecurityGroupWithContext.Lock()
	mock.calls.DeleteDBSecurityGroupWithContext = append(mock.calls.DeleteDBSecurityGroupWithContext, callInfo)
	mock.lockDeleteDBSecurityGroupWithContext.Unlock()
	return mock.DeleteDBSecurityGroupWithContextFunc(contextMoqParam, deleteDBSecurityGroupInput, options...)
}

// DeleteDBSecurityGroupWithContextCalls gets all the calls that were made to DeleteDBSecurityGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSecurityGroupWithContextCalls())
func (mock *rdsClientMock) DeleteDBSecurityGroupWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DeleteDBSecurityGroupInput *rds.DeleteDBSecurityGroupInput
		Options                    []request.Option
	}
	mock.lockDeleteDBSecurityGroupWithContext.RLock()
	calls = mock.calls.DeleteDBSecurityGroupWithContext
	mock.lockDeleteDBSecurityGroupWithContext.RUnlock()
	return calls
}

// DeleteDBSnapshot calls DeleteDBSnapshotFunc.
func (mock *rdsClientMock) DeleteDBSnapshot(deleteDBSnapshotInput *rds.DeleteDBSnapshotInput) (*rds.DeleteDBSnapshotOutput, error) {
	if mock.DeleteDBSnapshotFunc == nil {
		panic("rdsClientMock.DeleteDBSnapshotFunc: method is nil but rdsClient.DeleteDBSnapshot was just called")
	}
	callInfo := struct {
		DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
	}{
		DeleteDBSnapshotInput: deleteDBSnapshotInput,
	}
	mock.lockDeleteDBSnapshot.Lock()
	mock.calls.DeleteDBSnapshot = append(mock.calls.DeleteDBSnapshot, callInfo)
	mock.lockDeleteDBSnapshot.Unlock()
	return mock.DeleteDBSnapshotFunc(deleteDBSnapshotInput)
}

// DeleteDBSnapshotCalls gets all the calls that were made to DeleteDBSnapshot.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSnapshotCalls())
func (mock *rdsClientMock) DeleteDBSnapshotCalls() []struct {
	DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
} {
	var calls []struct {
		DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
	}
	mock.lockDeleteDBSnapshot.RLock()
	calls = mock.calls.DeleteDBSnapshot
	mock.lockDeleteDBSnapshot.RUnlock()
	return calls
}

// DeleteDBSnapshotRequest calls DeleteDBSnapshotRequestFunc.
func (mock *rdsClientMock) DeleteDBSnapshotRequest(deleteDBSnapshotInput *rds.DeleteDBSnapshotInput) (*request.Request, *rds.DeleteDBSnapshotOutput) {
	if mock.DeleteDBSnapshotRequestFunc == nil {
		panic("rdsClientMock.DeleteDBSnapshotRequestFunc: method is nil but rdsClient.DeleteDBSnapshotRequest was just called")
	}
	callInfo := struct {
		DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
	}{
		DeleteDBSnapshotInput: deleteDBSnapshotInput,
	}
	mock.lockDeleteDBSnapshotRequest.Lock()
	mock.calls.DeleteDBSnapshotRequest = append(mock.calls.DeleteDBSnapshotRequest, callInfo)
	mock.lockDeleteDBSnapshotRequest.Unlock()
	return mock.DeleteDBSnapshotRequestFunc(deleteDBSnapshotInput)
}

// DeleteDBSnapshotRequestCalls gets all the calls that were made to DeleteDBSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSnapshotRequestCalls())
func (mock *rdsClientMock) DeleteDBSnapshotRequestCalls() []struct {
	DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
} {
	var calls []struct {
		DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
	}
	mock.lockDeleteDBSnapshotRequest.RLock()
	calls = mock.calls.DeleteDBSnapshotRequest
	mock.lockDeleteDBSnapshotRequest.RUnlock()
	return calls
}

// DeleteDBSnapshotWithContext calls DeleteDBSnapshotWithContextFunc.
func (mock *rdsClientMock) DeleteDBSnapshotWithContext(contextMoqParam context.Context, deleteDBSnapshotInput *rds.DeleteDBSnapshotInput, options ...request.Option) (*rds.DeleteDBSnapshotOutput, error) {
	if mock.DeleteDBSnapshotWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBSnapshotWithContextFunc: method is nil but rdsClient.DeleteDBSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		DeleteDBSnapshotInput: deleteDBSnapshotInput,
		Options:               options,
	}
	mock.lockDeleteDBSnapshotWithContext.Lock()
	mock.calls.DeleteDBSnapshotWithContext = append(mock.calls.DeleteDBSnapshotWithContext, callInfo)
	mock.lockDeleteDBSnapshotWithContext.Unlock()
	return mock.DeleteDBSnapshotWithContextFunc(contextMoqParam, deleteDBSnapshotInput, options...)
}

// DeleteDBSnapshotWithContextCalls gets all the calls that were made to DeleteDBSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSnapshotWithContextCalls())
func (mock *rdsClientMock) DeleteDBSnapshotWithContextCalls() []struct {
	ContextMoqParam       context.Context
	DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		DeleteDBSnapshotInput *rds.DeleteDBSnapshotInput
		Options               []request.Option
	}
	mock.lockDeleteDBSnapshotWithContext.RLock()
	calls = mock.calls.DeleteDBSnapshotWithContext
	mock.lockDeleteDBSnapshotWithContext.RUnlock()
	return calls
}

// DeleteDBSubnetGroup calls DeleteDBSubnetGroupFunc.
func (mock *rdsClientMock) DeleteDBSubnetGroup(deleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput) (*rds.DeleteDBSubnetGroupOutput, error) {
	if mock.DeleteDBSubnetGroupFunc == nil {
		panic("rdsClientMock.DeleteDBSubnetGroupFunc: method is nil but rdsClient.DeleteDBSubnetGroup was just called")
	}
	callInfo := struct {
		DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
	}{
		DeleteDBSubnetGroupInput: deleteDBSubnetGroupInput,
	}
	mock.lockDeleteDBSubnetGroup.Lock()
	mock.calls.DeleteDBSubnetGroup = append(mock.calls.DeleteDBSubnetGroup, callInfo)
	mock.lockDeleteDBSubnetGroup.Unlock()
	return mock.DeleteDBSubnetGroupFunc(deleteDBSubnetGroupInput)
}

// DeleteDBSubnetGroupCalls gets all the calls that were made to DeleteDBSubnetGroup.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSubnetGroupCalls())
func (mock *rdsClientMock) DeleteDBSubnetGroupCalls() []struct {
	DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
} {
	var calls []struct {
		DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
	}
	mock.lockDeleteDBSubnetGroup.RLock()
	calls = mock.calls.DeleteDBSubnetGroup
	mock.lockDeleteDBSubnetGroup.RUnlock()
	return calls
}

// DeleteDBSubnetGroupRequest calls DeleteDBSubnetGroupRequestFunc.
func (mock *rdsClientMock) DeleteDBSubnetGroupRequest(deleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput) (*request.Request, *rds.DeleteDBSubnetGroupOutput) {
	if mock.DeleteDBSubnetGroupRequestFunc == nil {
		panic("rdsClientMock.DeleteDBSubnetGroupRequestFunc: method is nil but rdsClient.DeleteDBSubnetGroupRequest was just called")
	}
	callInfo := struct {
		DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
	}{
		DeleteDBSubnetGroupInput: deleteDBSubnetGroupInput,
	}
	mock.lockDeleteDBSubnetGroupRequest.Lock()
	mock.calls.DeleteDBSubnetGroupRequest = append(mock.calls.DeleteDBSubnetGroupRequest, callInfo)
	mock.lockDeleteDBSubnetGroupRequest.Unlock()
	return mock.DeleteDBSubnetGroupRequestFunc(deleteDBSubnetGroupInput)
}

// DeleteDBSubnetGroupRequestCalls gets all the calls that were made to DeleteDBSubnetGroupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSubnetGroupRequestCalls())
func (mock *rdsClientMock) DeleteDBSubnetGroupRequestCalls() []struct {
	DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
} {
	var calls []struct {
		DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
	}
	mock.lockDeleteDBSubnetGroupRequest.RLock()
	calls = mock.calls.DeleteDBSubnetGroupRequest
	mock.lockDeleteDBSubnetGroupRequest.RUnlock()
	return calls
}

// DeleteDBSubnetGroupWithContext calls DeleteDBSubnetGroupWithContextFunc.
func (mock *rdsClientMock) DeleteDBSubnetGroupWithContext(contextMoqParam context.Context, deleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput, options ...request.Option) (*rds.DeleteDBSubnetGroupOutput, error) {
	if mock.DeleteDBSubnetGroupWithContextFunc == nil {
		panic("rdsClientMock.DeleteDBSubnetGroupWithContextFunc: method is nil but rdsClient.DeleteDBSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DeleteDBSubnetGroupInput: deleteDBSubnetGroupInput,
		Options:                  options,
	}
	mock.lockDeleteDBSubnetGroupWithContext.Lock()
	mock.calls.DeleteDBSubnetGroupWithContext = append(mock.calls.DeleteDBSubnetGroupWithContext, callInfo)
	mock.lockDeleteDBSubnetGroupWithContext.Unlock()
	return mock.DeleteDBSubnetGroupWithContextFunc(contextMoqParam, deleteDBSubnetGroupInput, options...)
}

// DeleteDBSubnetGroupWithContextCalls gets all the calls that were made to DeleteDBSubnetGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteDBSubnetGroupWithContextCalls())
func (mock *rdsClientMock) DeleteDBSubnetGroupWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DeleteDBSubnetGroupInput *rds.DeleteDBSubnetGroupInput
		Options                  []request.Option
	}
	mock.lockDeleteDBSubnetGroupWithContext.RLock()
	calls = mock.calls.DeleteDBSubnetGroupWithContext
	mock.lockDeleteDBSubnetGroupWithContext.RUnlock()
	return calls
}

// DeleteEventSubscription calls DeleteEventSubscriptionFunc.
func (mock *rdsClientMock) DeleteEventSubscription(deleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput) (*rds.DeleteEventSubscriptionOutput, error) {
	if mock.DeleteEventSubscriptionFunc == nil {
		panic("rdsClientMock.DeleteEventSubscriptionFunc: method is nil but rdsClient.DeleteEventSubscription was just called")
	}
	callInfo := struct {
		DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
	}{
		DeleteEventSubscriptionInput: deleteEventSubscriptionInput,
	}
	mock.lockDeleteEventSubscription.Lock()
	mock.calls.DeleteEventSubscription = append(mock.calls.DeleteEventSubscription, callInfo)
	mock.lockDeleteEventSubscription.Unlock()
	return mock.DeleteEventSubscriptionFunc(deleteEventSubscriptionInput)
}

// DeleteEventSubscriptionCalls gets all the calls that were made to DeleteEventSubscription.
// Check the length with:
//     len(mockedrdsClient.DeleteEventSubscriptionCalls())
func (mock *rdsClientMock) DeleteEventSubscriptionCalls() []struct {
	DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
} {
	var calls []struct {
		DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
	}
	mock.lockDeleteEventSubscription.RLock()
	calls = mock.calls.DeleteEventSubscription
	mock.lockDeleteEventSubscription.RUnlock()
	return calls
}

// DeleteEventSubscriptionRequest calls DeleteEventSubscriptionRequestFunc.
func (mock *rdsClientMock) DeleteEventSubscriptionRequest(deleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput) (*request.Request, *rds.DeleteEventSubscriptionOutput) {
	if mock.DeleteEventSubscriptionRequestFunc == nil {
		panic("rdsClientMock.DeleteEventSubscriptionRequestFunc: method is nil but rdsClient.DeleteEventSubscriptionRequest was just called")
	}
	callInfo := struct {
		DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
	}{
		DeleteEventSubscriptionInput: deleteEventSubscriptionInput,
	}
	mock.lockDeleteEventSubscriptionRequest.Lock()
	mock.calls.DeleteEventSubscriptionRequest = append(mock.calls.DeleteEventSubscriptionRequest, callInfo)
	mock.lockDeleteEventSubscriptionRequest.Unlock()
	return mock.DeleteEventSubscriptionRequestFunc(deleteEventSubscriptionInput)
}

// DeleteEventSubscriptionRequestCalls gets all the calls that were made to DeleteEventSubscriptionRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteEventSubscriptionRequestCalls())
func (mock *rdsClientMock) DeleteEventSubscriptionRequestCalls() []struct {
	DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
} {
	var calls []struct {
		DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
	}
	mock.lockDeleteEventSubscriptionRequest.RLock()
	calls = mock.calls.DeleteEventSubscriptionRequest
	mock.lockDeleteEventSubscriptionRequest.RUnlock()
	return calls
}

// DeleteEventSubscriptionWithContext calls DeleteEventSubscriptionWithContextFunc.
func (mock *rdsClientMock) DeleteEventSubscriptionWithContext(contextMoqParam context.Context, deleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput, options ...request.Option) (*rds.DeleteEventSubscriptionOutput, error) {
	if mock.DeleteEventSubscriptionWithContextFunc == nil {
		panic("rdsClientMock.DeleteEventSubscriptionWithContextFunc: method is nil but rdsClient.DeleteEventSubscriptionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		DeleteEventSubscriptionInput: deleteEventSubscriptionInput,
		Options:                      options,
	}
	mock.lockDeleteEventSubscriptionWithContext.Lock()
	mock.calls.DeleteEventSubscriptionWithContext = append(mock.calls.DeleteEventSubscriptionWithContext, callInfo)
	mock.lockDeleteEventSubscriptionWithContext.Unlock()
	return mock.DeleteEventSubscriptionWithContextFunc(contextMoqParam, deleteEventSubscriptionInput, options...)
}

// DeleteEventSubscriptionWithContextCalls gets all the calls that were made to DeleteEventSubscriptionWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteEventSubscriptionWithContextCalls())
func (mock *rdsClientMock) DeleteEventSubscriptionWithContextCalls() []struct {
	ContextMoqParam              context.Context
	DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		DeleteEventSubscriptionInput *rds.DeleteEventSubscriptionInput
		Options                      []request.Option
	}
	mock.lockDeleteEventSubscriptionWithContext.RLock()
	calls = mock.calls.DeleteEventSubscriptionWithContext
	mock.lockDeleteEventSubscriptionWithContext.RUnlock()
	return calls
}

// DeleteGlobalCluster calls DeleteGlobalClusterFunc.
func (mock *rdsClientMock) DeleteGlobalCluster(deleteGlobalClusterInput *rds.DeleteGlobalClusterInput) (*rds.DeleteGlobalClusterOutput, error) {
	if mock.DeleteGlobalClusterFunc == nil {
		panic("rdsClientMock.DeleteGlobalClusterFunc: method is nil but rdsClient.DeleteGlobalCluster was just called")
	}
	callInfo := struct {
		DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
	}{
		DeleteGlobalClusterInput: deleteGlobalClusterInput,
	}
	mock.lockDeleteGlobalCluster.Lock()
	mock.calls.DeleteGlobalCluster = append(mock.calls.DeleteGlobalCluster, callInfo)
	mock.lockDeleteGlobalCluster.Unlock()
	return mock.DeleteGlobalClusterFunc(deleteGlobalClusterInput)
}

// DeleteGlobalClusterCalls gets all the calls that were made to DeleteGlobalCluster.
// Check the length with:
//     len(mockedrdsClient.DeleteGlobalClusterCalls())
func (mock *rdsClientMock) DeleteGlobalClusterCalls() []struct {
	DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
} {
	var calls []struct {
		DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
	}
	mock.lockDeleteGlobalCluster.RLock()
	calls = mock.calls.DeleteGlobalCluster
	mock.lockDeleteGlobalCluster.RUnlock()
	return calls
}

// DeleteGlobalClusterRequest calls DeleteGlobalClusterRequestFunc.
func (mock *rdsClientMock) DeleteGlobalClusterRequest(deleteGlobalClusterInput *rds.DeleteGlobalClusterInput) (*request.Request, *rds.DeleteGlobalClusterOutput) {
	if mock.DeleteGlobalClusterRequestFunc == nil {
		panic("rdsClientMock.DeleteGlobalClusterRequestFunc: method is nil but rdsClient.DeleteGlobalClusterRequest was just called")
	}
	callInfo := struct {
		DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
	}{
		DeleteGlobalClusterInput: deleteGlobalClusterInput,
	}
	mock.lockDeleteGlobalClusterRequest.Lock()
	mock.calls.DeleteGlobalClusterRequest = append(mock.calls.DeleteGlobalClusterRequest, callInfo)
	mock.lockDeleteGlobalClusterRequest.Unlock()
	return mock.DeleteGlobalClusterRequestFunc(deleteGlobalClusterInput)
}

// DeleteGlobalClusterRequestCalls gets all the calls that were made to DeleteGlobalClusterRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteGlobalClusterRequestCalls())
func (mock *rdsClientMock) DeleteGlobalClusterRequestCalls() []struct {
	DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
} {
	var calls []struct {
		DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
	}
	mock.lockDeleteGlobalClusterRequest.RLock()
	calls = mock.calls.DeleteGlobalClusterRequest
	mock.lockDeleteGlobalClusterRequest.RUnlock()
	return calls
}

// DeleteGlobalClusterWithContext calls DeleteGlobalClusterWithContextFunc.
func (mock *rdsClientMock) DeleteGlobalClusterWithContext(contextMoqParam context.Context, deleteGlobalClusterInput *rds.DeleteGlobalClusterInput, options ...request.Option) (*rds.DeleteGlobalClusterOutput, error) {
	if mock.DeleteGlobalClusterWithContextFunc == nil {
		panic("rdsClientMock.DeleteGlobalClusterWithContextFunc: method is nil but rdsClient.DeleteGlobalClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DeleteGlobalClusterInput: deleteGlobalClusterInput,
		Options:                  options,
	}
	mock.lockDeleteGlobalClusterWithContext.Lock()
	mock.calls.DeleteGlobalClusterWithContext = append(mock.calls.DeleteGlobalClusterWithContext, callInfo)
	mock.lockDeleteGlobalClusterWithContext.Unlock()
	return mock.DeleteGlobalClusterWithContextFunc(contextMoqParam, deleteGlobalClusterInput, options...)
}

// DeleteGlobalClusterWithContextCalls gets all the calls that were made to DeleteGlobalClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteGlobalClusterWithContextCalls())
func (mock *rdsClientMock) DeleteGlobalClusterWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DeleteGlobalClusterInput *rds.DeleteGlobalClusterInput
		Options                  []request.Option
	}
	mock.lockDeleteGlobalClusterWithContext.RLock()
	calls = mock.calls.DeleteGlobalClusterWithContext
	mock.lockDeleteGlobalClusterWithContext.RUnlock()
	return calls
}

// DeleteOptionGroup calls DeleteOptionGroupFunc.
func (mock *rdsClientMock) DeleteOptionGroup(deleteOptionGroupInput *rds.DeleteOptionGroupInput) (*rds.DeleteOptionGroupOutput, error) {
	if mock.DeleteOptionGroupFunc == nil {
		panic("rdsClientMock.DeleteOptionGroupFunc: method is nil but rdsClient.DeleteOptionGroup was just called")
	}
	callInfo := struct {
		DeleteOptionGroupInput *rds.DeleteOptionGroupInput
	}{
		DeleteOptionGroupInput: deleteOptionGroupInput,
	}
	mock.lockDeleteOptionGroup.Lock()
	mock.calls.DeleteOptionGroup = append(mock.calls.DeleteOptionGroup, callInfo)
	mock.lockDeleteOptionGroup.Unlock()
	return mock.DeleteOptionGroupFunc(deleteOptionGroupInput)
}

// DeleteOptionGroupCalls gets all the calls that were made to DeleteOptionGroup.
// Check the length with:
//     len(mockedrdsClient.DeleteOptionGroupCalls())
func (mock *rdsClientMock) DeleteOptionGroupCalls() []struct {
	DeleteOptionGroupInput *rds.DeleteOptionGroupInput
} {
	var calls []struct {
		DeleteOptionGroupInput *rds.DeleteOptionGroupInput
	}
	mock.lockDeleteOptionGroup.RLock()
	calls = mock.calls.DeleteOptionGroup
	mock.lockDeleteOptionGroup.RUnlock()
	return calls
}

// DeleteOptionGroupRequest calls DeleteOptionGroupRequestFunc.
func (mock *rdsClientMock) DeleteOptionGroupRequest(deleteOptionGroupInput *rds.DeleteOptionGroupInput) (*request.Request, *rds.DeleteOptionGroupOutput) {
	if mock.DeleteOptionGroupRequestFunc == nil {
		panic("rdsClientMock.DeleteOptionGroupRequestFunc: method is nil but rdsClient.DeleteOptionGroupRequest was just called")
	}
	callInfo := struct {
		DeleteOptionGroupInput *rds.DeleteOptionGroupInput
	}{
		DeleteOptionGroupInput: deleteOptionGroupInput,
	}
	mock.lockDeleteOptionGroupRequest.Lock()
	mock.calls.DeleteOptionGroupRequest = append(mock.calls.DeleteOptionGroupRequest, callInfo)
	mock.lockDeleteOptionGroupRequest.Unlock()
	return mock.DeleteOptionGroupRequestFunc(deleteOptionGroupInput)
}

// DeleteOptionGroupRequestCalls gets all the calls that were made to DeleteOptionGroupRequest.
// Check the length with:
//     len(mockedrdsClient.DeleteOptionGroupRequestCalls())
func (mock *rdsClientMock) DeleteOptionGroupRequestCalls() []struct {
	DeleteOptionGroupInput *rds.DeleteOptionGroupInput
} {
	var calls []struct {
		DeleteOptionGroupInput *rds.DeleteOptionGroupInput
	}
	mock.lockDeleteOptionGroupRequest.RLock()
	calls = mock.calls.DeleteOptionGroupRequest
	mock.lockDeleteOptionGroupRequest.RUnlock()
	return calls
}

// DeleteOptionGroupWithContext calls DeleteOptionGroupWithContextFunc.
func (mock *rdsClientMock) DeleteOptionGroupWithContext(contextMoqParam context.Context, deleteOptionGroupInput *rds.DeleteOptionGroupInput, options ...request.Option) (*rds.DeleteOptionGroupOutput, error) {
	if mock.DeleteOptionGroupWithContextFunc == nil {
		panic("rdsClientMock.DeleteOptionGroupWithContextFunc: method is nil but rdsClient.DeleteOptionGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		DeleteOptionGroupInput *rds.DeleteOptionGroupInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		DeleteOptionGroupInput: deleteOptionGroupInput,
		Options:                options,
	}
	mock.lockDeleteOptionGroupWithContext.Lock()
	mock.calls.DeleteOptionGroupWithContext = append(mock.calls.DeleteOptionGroupWithContext, callInfo)
	mock.lockDeleteOptionGroupWithContext.Unlock()
	return mock.DeleteOptionGroupWithContextFunc(contextMoqParam, deleteOptionGroupInput, options...)
}

// DeleteOptionGroupWithContextCalls gets all the calls that were made to DeleteOptionGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.DeleteOptionGroupWithContextCalls())
func (mock *rdsClientMock) DeleteOptionGroupWithContextCalls() []struct {
	ContextMoqParam        context.Context
	DeleteOptionGroupInput *rds.DeleteOptionGroupInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		DeleteOptionGroupInput *rds.DeleteOptionGroupInput
		Options                []request.Option
	}
	mock.lockDeleteOptionGroupWithContext.RLock()
	calls = mock.calls.DeleteOptionGroupWithContext
	mock.lockDeleteOptionGroupWithContext.RUnlock()
	return calls
}

// DeregisterDBProxyTargets calls DeregisterDBProxyTargetsFunc.
func (mock *rdsClientMock) DeregisterDBProxyTargets(deregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput) (*rds.DeregisterDBProxyTargetsOutput, error) {
	if mock.DeregisterDBProxyTargetsFunc == nil {
		panic("rdsClientMock.DeregisterDBProxyTargetsFunc: method is nil but rdsClient.DeregisterDBProxyTargets was just called")
	}
	callInfo := struct {
		DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
	}{
		DeregisterDBProxyTargetsInput: deregisterDBProxyTargetsInput,
	}
	mock.lockDeregisterDBProxyTargets.Lock()
	mock.calls.DeregisterDBProxyTargets = append(mock.calls.DeregisterDBProxyTargets, callInfo)
	mock.lockDeregisterDBProxyTargets.Unlock()
	return mock.DeregisterDBProxyTargetsFunc(deregisterDBProxyTargetsInput)
}

// DeregisterDBProxyTargetsCalls gets all the calls that were made to DeregisterDBProxyTargets.
// Check the length with:
//     len(mockedrdsClient.DeregisterDBProxyTargetsCalls())
func (mock *rdsClientMock) DeregisterDBProxyTargetsCalls() []struct {
	DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
} {
	var calls []struct {
		DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
	}
	mock.lockDeregisterDBProxyTargets.RLock()
	calls = mock.calls.DeregisterDBProxyTargets
	mock.lockDeregisterDBProxyTargets.RUnlock()
	return calls
}

// DeregisterDBProxyTargetsRequest calls DeregisterDBProxyTargetsRequestFunc.
func (mock *rdsClientMock) DeregisterDBProxyTargetsRequest(deregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput) (*request.Request, *rds.DeregisterDBProxyTargetsOutput) {
	if mock.DeregisterDBProxyTargetsRequestFunc == nil {
		panic("rdsClientMock.DeregisterDBProxyTargetsRequestFunc: method is nil but rdsClient.DeregisterDBProxyTargetsRequest was just called")
	}
	callInfo := struct {
		DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
	}{
		DeregisterDBProxyTargetsInput: deregisterDBProxyTargetsInput,
	}
	mock.lockDeregisterDBProxyTargetsRequest.Lock()
	mock.calls.DeregisterDBProxyTargetsRequest = append(mock.calls.DeregisterDBProxyTargetsRequest, callInfo)
	mock.lockDeregisterDBProxyTargetsRequest.Unlock()
	return mock.DeregisterDBProxyTargetsRequestFunc(deregisterDBProxyTargetsInput)
}

// DeregisterDBProxyTargetsRequestCalls gets all the calls that were made to DeregisterDBProxyTargetsRequest.
// Check the length with:
//     len(mockedrdsClient.DeregisterDBProxyTargetsRequestCalls())
func (mock *rdsClientMock) DeregisterDBProxyTargetsRequestCalls() []struct {
	DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
} {
	var calls []struct {
		DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
	}
	mock.lockDeregisterDBProxyTargetsRequest.RLock()
	calls = mock.calls.DeregisterDBProxyTargetsRequest
	mock.lockDeregisterDBProxyTargetsRequest.RUnlock()
	return calls
}

// DeregisterDBProxyTargetsWithContext calls DeregisterDBProxyTargetsWithContextFunc.
func (mock *rdsClientMock) DeregisterDBProxyTargetsWithContext(contextMoqParam context.Context, deregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput, options ...request.Option) (*rds.DeregisterDBProxyTargetsOutput, error) {
	if mock.DeregisterDBProxyTargetsWithContextFunc == nil {
		panic("rdsClientMock.DeregisterDBProxyTargetsWithContextFunc: method is nil but rdsClient.DeregisterDBProxyTargetsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DeregisterDBProxyTargetsInput: deregisterDBProxyTargetsInput,
		Options:                       options,
	}
	mock.lockDeregisterDBProxyTargetsWithContext.Lock()
	mock.calls.DeregisterDBProxyTargetsWithContext = append(mock.calls.DeregisterDBProxyTargetsWithContext, callInfo)
	mock.lockDeregisterDBProxyTargetsWithContext.Unlock()
	return mock.DeregisterDBProxyTargetsWithContextFunc(contextMoqParam, deregisterDBProxyTargetsInput, options...)
}

// DeregisterDBProxyTargetsWithContextCalls gets all the calls that were made to DeregisterDBProxyTargetsWithContext.
// Check the length with:
//     len(mockedrdsClient.DeregisterDBProxyTargetsWithContextCalls())
func (mock *rdsClientMock) DeregisterDBProxyTargetsWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DeregisterDBProxyTargetsInput *rds.DeregisterDBProxyTargetsInput
		Options                       []request.Option
	}
	mock.lockDeregisterDBProxyTargetsWithContext.RLock()
	calls = mock.calls.DeregisterDBProxyTargetsWithContext
	mock.lockDeregisterDBProxyTargetsWithContext.RUnlock()
	return calls
}

// DescribeAccountAttributes calls DescribeAccountAttributesFunc.
func (mock *rdsClientMock) DescribeAccountAttributes(describeAccountAttributesInput *rds.DescribeAccountAttributesInput) (*rds.DescribeAccountAttributesOutput, error) {
	if mock.DescribeAccountAttributesFunc == nil {
		panic("rdsClientMock.DescribeAccountAttributesFunc: method is nil but rdsClient.DescribeAccountAttributes was just called")
	}
	callInfo := struct {
		DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
	}{
		DescribeAccountAttributesInput: describeAccountAttributesInput,
	}
	mock.lockDescribeAccountAttributes.Lock()
	mock.calls.DescribeAccountAttributes = append(mock.calls.DescribeAccountAttributes, callInfo)
	mock.lockDescribeAccountAttributes.Unlock()
	return mock.DescribeAccountAttributesFunc(describeAccountAttributesInput)
}

// DescribeAccountAttributesCalls gets all the calls that were made to DescribeAccountAttributes.
// Check the length with:
//     len(mockedrdsClient.DescribeAccountAttributesCalls())
func (mock *rdsClientMock) DescribeAccountAttributesCalls() []struct {
	DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
} {
	var calls []struct {
		DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
	}
	mock.lockDescribeAccountAttributes.RLock()
	calls = mock.calls.DescribeAccountAttributes
	mock.lockDescribeAccountAttributes.RUnlock()
	return calls
}

// DescribeAccountAttributesRequest calls DescribeAccountAttributesRequestFunc.
func (mock *rdsClientMock) DescribeAccountAttributesRequest(describeAccountAttributesInput *rds.DescribeAccountAttributesInput) (*request.Request, *rds.DescribeAccountAttributesOutput) {
	if mock.DescribeAccountAttributesRequestFunc == nil {
		panic("rdsClientMock.DescribeAccountAttributesRequestFunc: method is nil but rdsClient.DescribeAccountAttributesRequest was just called")
	}
	callInfo := struct {
		DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
	}{
		DescribeAccountAttributesInput: describeAccountAttributesInput,
	}
	mock.lockDescribeAccountAttributesRequest.Lock()
	mock.calls.DescribeAccountAttributesRequest = append(mock.calls.DescribeAccountAttributesRequest, callInfo)
	mock.lockDescribeAccountAttributesRequest.Unlock()
	return mock.DescribeAccountAttributesRequestFunc(describeAccountAttributesInput)
}

// DescribeAccountAttributesRequestCalls gets all the calls that were made to DescribeAccountAttributesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeAccountAttributesRequestCalls())
func (mock *rdsClientMock) DescribeAccountAttributesRequestCalls() []struct {
	DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
} {
	var calls []struct {
		DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
	}
	mock.lockDescribeAccountAttributesRequest.RLock()
	calls = mock.calls.DescribeAccountAttributesRequest
	mock.lockDescribeAccountAttributesRequest.RUnlock()
	return calls
}

// DescribeAccountAttributesWithContext calls DescribeAccountAttributesWithContextFunc.
func (mock *rdsClientMock) DescribeAccountAttributesWithContext(contextMoqParam context.Context, describeAccountAttributesInput *rds.DescribeAccountAttributesInput, options ...request.Option) (*rds.DescribeAccountAttributesOutput, error) {
	if mock.DescribeAccountAttributesWithContextFunc == nil {
		panic("rdsClientMock.DescribeAccountAttributesWithContextFunc: method is nil but rdsClient.DescribeAccountAttributesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		DescribeAccountAttributesInput: describeAccountAttributesInput,
		Options:                        options,
	}
	mock.lockDescribeAccountAttributesWithContext.Lock()
	mock.calls.DescribeAccountAttributesWithContext = append(mock.calls.DescribeAccountAttributesWithContext, callInfo)
	mock.lockDescribeAccountAttributesWithContext.Unlock()
	return mock.DescribeAccountAttributesWithContextFunc(contextMoqParam, describeAccountAttributesInput, options...)
}

// DescribeAccountAttributesWithContextCalls gets all the calls that were made to DescribeAccountAttributesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeAccountAttributesWithContextCalls())
func (mock *rdsClientMock) DescribeAccountAttributesWithContextCalls() []struct {
	ContextMoqParam                context.Context
	DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		DescribeAccountAttributesInput *rds.DescribeAccountAttributesInput
		Options                        []request.Option
	}
	mock.lockDescribeAccountAttributesWithContext.RLock()
	calls = mock.calls.DescribeAccountAttributesWithContext
	mock.lockDescribeAccountAttributesWithContext.RUnlock()
	return calls
}

// DescribeCertificates calls DescribeCertificatesFunc.
func (mock *rdsClientMock) DescribeCertificates(describeCertificatesInput *rds.DescribeCertificatesInput) (*rds.DescribeCertificatesOutput, error) {
	if mock.DescribeCertificatesFunc == nil {
		panic("rdsClientMock.DescribeCertificatesFunc: method is nil but rdsClient.DescribeCertificates was just called")
	}
	callInfo := struct {
		DescribeCertificatesInput *rds.DescribeCertificatesInput
	}{
		DescribeCertificatesInput: describeCertificatesInput,
	}
	mock.lockDescribeCertificates.Lock()
	mock.calls.DescribeCertificates = append(mock.calls.DescribeCertificates, callInfo)
	mock.lockDescribeCertificates.Unlock()
	return mock.DescribeCertificatesFunc(describeCertificatesInput)
}

// DescribeCertificatesCalls gets all the calls that were made to DescribeCertificates.
// Check the length with:
//     len(mockedrdsClient.DescribeCertificatesCalls())
func (mock *rdsClientMock) DescribeCertificatesCalls() []struct {
	DescribeCertificatesInput *rds.DescribeCertificatesInput
} {
	var calls []struct {
		DescribeCertificatesInput *rds.DescribeCertificatesInput
	}
	mock.lockDescribeCertificates.RLock()
	calls = mock.calls.DescribeCertificates
	mock.lockDescribeCertificates.RUnlock()
	return calls
}

// DescribeCertificatesPages calls DescribeCertificatesPagesFunc.
func (mock *rdsClientMock) DescribeCertificatesPages(describeCertificatesInput *rds.DescribeCertificatesInput, fn func(*rds.DescribeCertificatesOutput, bool) bool) error {
	if mock.DescribeCertificatesPagesFunc == nil {
		panic("rdsClientMock.DescribeCertificatesPagesFunc: method is nil but rdsClient.DescribeCertificatesPages was just called")
	}
	callInfo := struct {
		DescribeCertificatesInput *rds.DescribeCertificatesInput
		Fn                        func(*rds.DescribeCertificatesOutput, bool) bool
	}{
		DescribeCertificatesInput: describeCertificatesInput,
		Fn:                        fn,
	}
	mock.lockDescribeCertificatesPages.Lock()
	mock.calls.DescribeCertificatesPages = append(mock.calls.DescribeCertificatesPages, callInfo)
	mock.lockDescribeCertificatesPages.Unlock()
	return mock.DescribeCertificatesPagesFunc(describeCertificatesInput, fn)
}

// DescribeCertificatesPagesCalls gets all the calls that were made to DescribeCertificatesPages.
// Check the length with:
//     len(mockedrdsClient.DescribeCertificatesPagesCalls())
func (mock *rdsClientMock) DescribeCertificatesPagesCalls() []struct {
	DescribeCertificatesInput *rds.DescribeCertificatesInput
	Fn                        func(*rds.DescribeCertificatesOutput, bool) bool
} {
	var calls []struct {
		DescribeCertificatesInput *rds.DescribeCertificatesInput
		Fn                        func(*rds.DescribeCertificatesOutput, bool) bool
	}
	mock.lockDescribeCertificatesPages.RLock()
	calls = mock.calls.DescribeCertificatesPages
	mock.lockDescribeCertificatesPages.RUnlock()
	return calls
}

// DescribeCertificatesPagesWithContext calls DescribeCertificatesPagesWithContextFunc.
func (mock *rdsClientMock) DescribeCertificatesPagesWithContext(contextMoqParam context.Context, describeCertificatesInput *rds.DescribeCertificatesInput, fn func(*rds.DescribeCertificatesOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeCertificatesPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeCertificatesPagesWithContextFunc: method is nil but rdsClient.DescribeCertificatesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		DescribeCertificatesInput *rds.DescribeCertificatesInput
		Fn                        func(*rds.DescribeCertificatesOutput, bool) bool
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		DescribeCertificatesInput: describeCertificatesInput,
		Fn:                        fn,
		Options:                   options,
	}
	mock.lockDescribeCertificatesPagesWithContext.Lock()
	mock.calls.DescribeCertificatesPagesWithContext = append(mock.calls.DescribeCertificatesPagesWithContext, callInfo)
	mock.lockDescribeCertificatesPagesWithContext.Unlock()
	return mock.DescribeCertificatesPagesWithContextFunc(contextMoqParam, describeCertificatesInput, fn, options...)
}

// DescribeCertificatesPagesWithContextCalls gets all the calls that were made to DescribeCertificatesPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeCertificatesPagesWithContextCalls())
func (mock *rdsClientMock) DescribeCertificatesPagesWithContextCalls() []struct {
	ContextMoqParam           context.Context
	DescribeCertificatesInput *rds.DescribeCertificatesInput
	Fn                        func(*rds.DescribeCertificatesOutput, bool) bool
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		DescribeCertificatesInput *rds.DescribeCertificatesInput
		Fn                        func(*rds.DescribeCertificatesOutput, bool) bool
		Options                   []request.Option
	}
	mock.lockDescribeCertificatesPagesWithContext.RLock()
	calls = mock.calls.DescribeCertificatesPagesWithContext
	mock.lockDescribeCertificatesPagesWithContext.RUnlock()
	return calls
}

// DescribeCertificatesRequest calls DescribeCertificatesRequestFunc.
func (mock *rdsClientMock) DescribeCertificatesRequest(describeCertificatesInput *rds.DescribeCertificatesInput) (*request.Request, *rds.DescribeCertificatesOutput) {
	if mock.DescribeCertificatesRequestFunc == nil {
		panic("rdsClientMock.DescribeCertificatesRequestFunc: method is nil but rdsClient.DescribeCertificatesRequest was just called")
	}
	callInfo := struct {
		DescribeCertificatesInput *rds.DescribeCertificatesInput
	}{
		DescribeCertificatesInput: describeCertificatesInput,
	}
	mock.lockDescribeCertificatesRequest.Lock()
	mock.calls.DescribeCertificatesRequest = append(mock.calls.DescribeCertificatesRequest, callInfo)
	mock.lockDescribeCertificatesRequest.Unlock()
	return mock.DescribeCertificatesRequestFunc(describeCertificatesInput)
}

// DescribeCertificatesRequestCalls gets all the calls that were made to DescribeCertificatesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeCertificatesRequestCalls())
func (mock *rdsClientMock) DescribeCertificatesRequestCalls() []struct {
	DescribeCertificatesInput *rds.DescribeCertificatesInput
} {
	var calls []struct {
		DescribeCertificatesInput *rds.DescribeCertificatesInput
	}
	mock.lockDescribeCertificatesRequest.RLock()
	calls = mock.calls.DescribeCertificatesRequest
	mock.lockDescribeCertificatesRequest.RUnlock()
	return calls
}

// DescribeCertificatesWithContext calls DescribeCertificatesWithContextFunc.
func (mock *rdsClientMock) DescribeCertificatesWithContext(contextMoqParam context.Context, describeCertificatesInput *rds.DescribeCertificatesInput, options ...request.Option) (*rds.DescribeCertificatesOutput, error) {
	if mock.DescribeCertificatesWithContextFunc == nil {
		panic("rdsClientMock.DescribeCertificatesWithContextFunc: method is nil but rdsClient.DescribeCertificatesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		DescribeCertificatesInput *rds.DescribeCertificatesInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		DescribeCertificatesInput: describeCertificatesInput,
		Options:                   options,
	}
	mock.lockDescribeCertificatesWithContext.Lock()
	mock.calls.DescribeCertificatesWithContext = append(mock.calls.DescribeCertificatesWithContext, callInfo)
	mock.lockDescribeCertificatesWithContext.Unlock()
	return mock.DescribeCertificatesWithContextFunc(contextMoqParam, describeCertificatesInput, options...)
}

// DescribeCertificatesWithContextCalls gets all the calls that were made to DescribeCertificatesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeCertificatesWithContextCalls())
func (mock *rdsClientMock) DescribeCertificatesWithContextCalls() []struct {
	ContextMoqParam           context.Context
	DescribeCertificatesInput *rds.DescribeCertificatesInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		DescribeCertificatesInput *rds.DescribeCertificatesInput
		Options                   []request.Option
	}
	mock.lockDescribeCertificatesWithContext.RLock()
	calls = mock.calls.DescribeCertificatesWithContext
	mock.lockDescribeCertificatesWithContext.RUnlock()
	return calls
}

// DescribeDBClusterBacktracks calls DescribeDBClusterBacktracksFunc.
func (mock *rdsClientMock) DescribeDBClusterBacktracks(describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput) (*rds.DescribeDBClusterBacktracksOutput, error) {
	if mock.DescribeDBClusterBacktracksFunc == nil {
		panic("rdsClientMock.DescribeDBClusterBacktracksFunc: method is nil but rdsClient.DescribeDBClusterBacktracks was just called")
	}
	callInfo := struct {
		DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
	}{
		DescribeDBClusterBacktracksInput: describeDBClusterBacktracksInput,
	}
	mock.lockDescribeDBClusterBacktracks.Lock()
	mock.calls.DescribeDBClusterBacktracks = append(mock.calls.DescribeDBClusterBacktracks, callInfo)
	mock.lockDescribeDBClusterBacktracks.Unlock()
	return mock.DescribeDBClusterBacktracksFunc(describeDBClusterBacktracksInput)
}

// DescribeDBClusterBacktracksCalls gets all the calls that were made to DescribeDBClusterBacktracks.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterBacktracksCalls())
func (mock *rdsClientMock) DescribeDBClusterBacktracksCalls() []struct {
	DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
} {
	var calls []struct {
		DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
	}
	mock.lockDescribeDBClusterBacktracks.RLock()
	calls = mock.calls.DescribeDBClusterBacktracks
	mock.lockDescribeDBClusterBacktracks.RUnlock()
	return calls
}

// DescribeDBClusterBacktracksPages calls DescribeDBClusterBacktracksPagesFunc.
func (mock *rdsClientMock) DescribeDBClusterBacktracksPages(describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput, fn func(*rds.DescribeDBClusterBacktracksOutput, bool) bool) error {
	if mock.DescribeDBClusterBacktracksPagesFunc == nil {
		panic("rdsClientMock.DescribeDBClusterBacktracksPagesFunc: method is nil but rdsClient.DescribeDBClusterBacktracksPages was just called")
	}
	callInfo := struct {
		DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
		Fn                               func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
	}{
		DescribeDBClusterBacktracksInput: describeDBClusterBacktracksInput,
		Fn:                               fn,
	}
	mock.lockDescribeDBClusterBacktracksPages.Lock()
	mock.calls.DescribeDBClusterBacktracksPages = append(mock.calls.DescribeDBClusterBacktracksPages, callInfo)
	mock.lockDescribeDBClusterBacktracksPages.Unlock()
	return mock.DescribeDBClusterBacktracksPagesFunc(describeDBClusterBacktracksInput, fn)
}

// DescribeDBClusterBacktracksPagesCalls gets all the calls that were made to DescribeDBClusterBacktracksPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterBacktracksPagesCalls())
func (mock *rdsClientMock) DescribeDBClusterBacktracksPagesCalls() []struct {
	DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
	Fn                               func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
} {
	var calls []struct {
		DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
		Fn                               func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
	}
	mock.lockDescribeDBClusterBacktracksPages.RLock()
	calls = mock.calls.DescribeDBClusterBacktracksPages
	mock.lockDescribeDBClusterBacktracksPages.RUnlock()
	return calls
}

// DescribeDBClusterBacktracksPagesWithContext calls DescribeDBClusterBacktracksPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterBacktracksPagesWithContext(contextMoqParam context.Context, describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput, fn func(*rds.DescribeDBClusterBacktracksOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBClusterBacktracksPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterBacktracksPagesWithContextFunc: method is nil but rdsClient.DescribeDBClusterBacktracksPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
		Fn                               func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeDBClusterBacktracksInput: describeDBClusterBacktracksInput,
		Fn:                               fn,
		Options:                          options,
	}
	mock.lockDescribeDBClusterBacktracksPagesWithContext.Lock()
	mock.calls.DescribeDBClusterBacktracksPagesWithContext = append(mock.calls.DescribeDBClusterBacktracksPagesWithContext, callInfo)
	mock.lockDescribeDBClusterBacktracksPagesWithContext.Unlock()
	return mock.DescribeDBClusterBacktracksPagesWithContextFunc(contextMoqParam, describeDBClusterBacktracksInput, fn, options...)
}

// DescribeDBClusterBacktracksPagesWithContextCalls gets all the calls that were made to DescribeDBClusterBacktracksPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterBacktracksPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterBacktracksPagesWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
	Fn                               func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
		Fn                               func(*rds.DescribeDBClusterBacktracksOutput, bool) bool
		Options                          []request.Option
	}
	mock.lockDescribeDBClusterBacktracksPagesWithContext.RLock()
	calls = mock.calls.DescribeDBClusterBacktracksPagesWithContext
	mock.lockDescribeDBClusterBacktracksPagesWithContext.RUnlock()
	return calls
}

// DescribeDBClusterBacktracksRequest calls DescribeDBClusterBacktracksRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterBacktracksRequest(describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput) (*request.Request, *rds.DescribeDBClusterBacktracksOutput) {
	if mock.DescribeDBClusterBacktracksRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterBacktracksRequestFunc: method is nil but rdsClient.DescribeDBClusterBacktracksRequest was just called")
	}
	callInfo := struct {
		DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
	}{
		DescribeDBClusterBacktracksInput: describeDBClusterBacktracksInput,
	}
	mock.lockDescribeDBClusterBacktracksRequest.Lock()
	mock.calls.DescribeDBClusterBacktracksRequest = append(mock.calls.DescribeDBClusterBacktracksRequest, callInfo)
	mock.lockDescribeDBClusterBacktracksRequest.Unlock()
	return mock.DescribeDBClusterBacktracksRequestFunc(describeDBClusterBacktracksInput)
}

// DescribeDBClusterBacktracksRequestCalls gets all the calls that were made to DescribeDBClusterBacktracksRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterBacktracksRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterBacktracksRequestCalls() []struct {
	DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
} {
	var calls []struct {
		DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
	}
	mock.lockDescribeDBClusterBacktracksRequest.RLock()
	calls = mock.calls.DescribeDBClusterBacktracksRequest
	mock.lockDescribeDBClusterBacktracksRequest.RUnlock()
	return calls
}

// DescribeDBClusterBacktracksWithContext calls DescribeDBClusterBacktracksWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterBacktracksWithContext(contextMoqParam context.Context, describeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput, options ...request.Option) (*rds.DescribeDBClusterBacktracksOutput, error) {
	if mock.DescribeDBClusterBacktracksWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterBacktracksWithContextFunc: method is nil but rdsClient.DescribeDBClusterBacktracksWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeDBClusterBacktracksInput: describeDBClusterBacktracksInput,
		Options:                          options,
	}
	mock.lockDescribeDBClusterBacktracksWithContext.Lock()
	mock.calls.DescribeDBClusterBacktracksWithContext = append(mock.calls.DescribeDBClusterBacktracksWithContext, callInfo)
	mock.lockDescribeDBClusterBacktracksWithContext.Unlock()
	return mock.DescribeDBClusterBacktracksWithContextFunc(contextMoqParam, describeDBClusterBacktracksInput, options...)
}

// DescribeDBClusterBacktracksWithContextCalls gets all the calls that were made to DescribeDBClusterBacktracksWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterBacktracksWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterBacktracksWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeDBClusterBacktracksInput *rds.DescribeDBClusterBacktracksInput
		Options                          []request.Option
	}
	mock.lockDescribeDBClusterBacktracksWithContext.RLock()
	calls = mock.calls.DescribeDBClusterBacktracksWithContext
	mock.lockDescribeDBClusterBacktracksWithContext.RUnlock()
	return calls
}

// DescribeDBClusterEndpoints calls DescribeDBClusterEndpointsFunc.
func (mock *rdsClientMock) DescribeDBClusterEndpoints(describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput) (*rds.DescribeDBClusterEndpointsOutput, error) {
	if mock.DescribeDBClusterEndpointsFunc == nil {
		panic("rdsClientMock.DescribeDBClusterEndpointsFunc: method is nil but rdsClient.DescribeDBClusterEndpoints was just called")
	}
	callInfo := struct {
		DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
	}{
		DescribeDBClusterEndpointsInput: describeDBClusterEndpointsInput,
	}
	mock.lockDescribeDBClusterEndpoints.Lock()
	mock.calls.DescribeDBClusterEndpoints = append(mock.calls.DescribeDBClusterEndpoints, callInfo)
	mock.lockDescribeDBClusterEndpoints.Unlock()
	return mock.DescribeDBClusterEndpointsFunc(describeDBClusterEndpointsInput)
}

// DescribeDBClusterEndpointsCalls gets all the calls that were made to DescribeDBClusterEndpoints.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterEndpointsCalls())
func (mock *rdsClientMock) DescribeDBClusterEndpointsCalls() []struct {
	DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
} {
	var calls []struct {
		DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
	}
	mock.lockDescribeDBClusterEndpoints.RLock()
	calls = mock.calls.DescribeDBClusterEndpoints
	mock.lockDescribeDBClusterEndpoints.RUnlock()
	return calls
}

// DescribeDBClusterEndpointsPages calls DescribeDBClusterEndpointsPagesFunc.
func (mock *rdsClientMock) DescribeDBClusterEndpointsPages(describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput, fn func(*rds.DescribeDBClusterEndpointsOutput, bool) bool) error {
	if mock.DescribeDBClusterEndpointsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBClusterEndpointsPagesFunc: method is nil but rdsClient.DescribeDBClusterEndpointsPages was just called")
	}
	callInfo := struct {
		DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
		Fn                              func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
	}{
		DescribeDBClusterEndpointsInput: describeDBClusterEndpointsInput,
		Fn:                              fn,
	}
	mock.lockDescribeDBClusterEndpointsPages.Lock()
	mock.calls.DescribeDBClusterEndpointsPages = append(mock.calls.DescribeDBClusterEndpointsPages, callInfo)
	mock.lockDescribeDBClusterEndpointsPages.Unlock()
	return mock.DescribeDBClusterEndpointsPagesFunc(describeDBClusterEndpointsInput, fn)
}

// DescribeDBClusterEndpointsPagesCalls gets all the calls that were made to DescribeDBClusterEndpointsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterEndpointsPagesCalls())
func (mock *rdsClientMock) DescribeDBClusterEndpointsPagesCalls() []struct {
	DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
	Fn                              func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
		Fn                              func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
	}
	mock.lockDescribeDBClusterEndpointsPages.RLock()
	calls = mock.calls.DescribeDBClusterEndpointsPages
	mock.lockDescribeDBClusterEndpointsPages.RUnlock()
	return calls
}

// DescribeDBClusterEndpointsPagesWithContext calls DescribeDBClusterEndpointsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterEndpointsPagesWithContext(contextMoqParam context.Context, describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput, fn func(*rds.DescribeDBClusterEndpointsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBClusterEndpointsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterEndpointsPagesWithContextFunc: method is nil but rdsClient.DescribeDBClusterEndpointsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
		Fn                              func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeDBClusterEndpointsInput: describeDBClusterEndpointsInput,
		Fn:                              fn,
		Options:                         options,
	}
	mock.lockDescribeDBClusterEndpointsPagesWithContext.Lock()
	mock.calls.DescribeDBClusterEndpointsPagesWithContext = append(mock.calls.DescribeDBClusterEndpointsPagesWithContext, callInfo)
	mock.lockDescribeDBClusterEndpointsPagesWithContext.Unlock()
	return mock.DescribeDBClusterEndpointsPagesWithContextFunc(contextMoqParam, describeDBClusterEndpointsInput, fn, options...)
}

// DescribeDBClusterEndpointsPagesWithContextCalls gets all the calls that were made to DescribeDBClusterEndpointsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterEndpointsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterEndpointsPagesWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
	Fn                              func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
		Fn                              func(*rds.DescribeDBClusterEndpointsOutput, bool) bool
		Options                         []request.Option
	}
	mock.lockDescribeDBClusterEndpointsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBClusterEndpointsPagesWithContext
	mock.lockDescribeDBClusterEndpointsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBClusterEndpointsRequest calls DescribeDBClusterEndpointsRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterEndpointsRequest(describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput) (*request.Request, *rds.DescribeDBClusterEndpointsOutput) {
	if mock.DescribeDBClusterEndpointsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterEndpointsRequestFunc: method is nil but rdsClient.DescribeDBClusterEndpointsRequest was just called")
	}
	callInfo := struct {
		DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
	}{
		DescribeDBClusterEndpointsInput: describeDBClusterEndpointsInput,
	}
	mock.lockDescribeDBClusterEndpointsRequest.Lock()
	mock.calls.DescribeDBClusterEndpointsRequest = append(mock.calls.DescribeDBClusterEndpointsRequest, callInfo)
	mock.lockDescribeDBClusterEndpointsRequest.Unlock()
	return mock.DescribeDBClusterEndpointsRequestFunc(describeDBClusterEndpointsInput)
}

// DescribeDBClusterEndpointsRequestCalls gets all the calls that were made to DescribeDBClusterEndpointsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterEndpointsRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterEndpointsRequestCalls() []struct {
	DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
} {
	var calls []struct {
		DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
	}
	mock.lockDescribeDBClusterEndpointsRequest.RLock()
	calls = mock.calls.DescribeDBClusterEndpointsRequest
	mock.lockDescribeDBClusterEndpointsRequest.RUnlock()
	return calls
}

// DescribeDBClusterEndpointsWithContext calls DescribeDBClusterEndpointsWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterEndpointsWithContext(contextMoqParam context.Context, describeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput, options ...request.Option) (*rds.DescribeDBClusterEndpointsOutput, error) {
	if mock.DescribeDBClusterEndpointsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterEndpointsWithContextFunc: method is nil but rdsClient.DescribeDBClusterEndpointsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeDBClusterEndpointsInput: describeDBClusterEndpointsInput,
		Options:                         options,
	}
	mock.lockDescribeDBClusterEndpointsWithContext.Lock()
	mock.calls.DescribeDBClusterEndpointsWithContext = append(mock.calls.DescribeDBClusterEndpointsWithContext, callInfo)
	mock.lockDescribeDBClusterEndpointsWithContext.Unlock()
	return mock.DescribeDBClusterEndpointsWithContextFunc(contextMoqParam, describeDBClusterEndpointsInput, options...)
}

// DescribeDBClusterEndpointsWithContextCalls gets all the calls that were made to DescribeDBClusterEndpointsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterEndpointsWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterEndpointsWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterEndpointsInput *rds.DescribeDBClusterEndpointsInput
		Options                         []request.Option
	}
	mock.lockDescribeDBClusterEndpointsWithContext.RLock()
	calls = mock.calls.DescribeDBClusterEndpointsWithContext
	mock.lockDescribeDBClusterEndpointsWithContext.RUnlock()
	return calls
}

// DescribeDBClusterParameterGroups calls DescribeDBClusterParameterGroupsFunc.
func (mock *rdsClientMock) DescribeDBClusterParameterGroups(describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	if mock.DescribeDBClusterParameterGroupsFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParameterGroupsFunc: method is nil but rdsClient.DescribeDBClusterParameterGroups was just called")
	}
	callInfo := struct {
		DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
	}{
		DescribeDBClusterParameterGroupsInput: describeDBClusterParameterGroupsInput,
	}
	mock.lockDescribeDBClusterParameterGroups.Lock()
	mock.calls.DescribeDBClusterParameterGroups = append(mock.calls.DescribeDBClusterParameterGroups, callInfo)
	mock.lockDescribeDBClusterParameterGroups.Unlock()
	return mock.DescribeDBClusterParameterGroupsFunc(describeDBClusterParameterGroupsInput)
}

// DescribeDBClusterParameterGroupsCalls gets all the calls that were made to DescribeDBClusterParameterGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParameterGroupsCalls())
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsCalls() []struct {
	DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
} {
	var calls []struct {
		DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
	}
	mock.lockDescribeDBClusterParameterGroups.RLock()
	calls = mock.calls.DescribeDBClusterParameterGroups
	mock.lockDescribeDBClusterParameterGroups.RUnlock()
	return calls
}

// DescribeDBClusterParameterGroupsPages calls DescribeDBClusterParameterGroupsPagesFunc.
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsPages(describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput, fn func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool) error {
	if mock.DescribeDBClusterParameterGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParameterGroupsPagesFunc: method is nil but rdsClient.DescribeDBClusterParameterGroupsPages was just called")
	}
	callInfo := struct {
		DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
		Fn                                    func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
	}{
		DescribeDBClusterParameterGroupsInput: describeDBClusterParameterGroupsInput,
		Fn:                                    fn,
	}
	mock.lockDescribeDBClusterParameterGroupsPages.Lock()
	mock.calls.DescribeDBClusterParameterGroupsPages = append(mock.calls.DescribeDBClusterParameterGroupsPages, callInfo)
	mock.lockDescribeDBClusterParameterGroupsPages.Unlock()
	return mock.DescribeDBClusterParameterGroupsPagesFunc(describeDBClusterParameterGroupsInput, fn)
}

// DescribeDBClusterParameterGroupsPagesCalls gets all the calls that were made to DescribeDBClusterParameterGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParameterGroupsPagesCalls())
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsPagesCalls() []struct {
	DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
	Fn                                    func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
		Fn                                    func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
	}
	mock.lockDescribeDBClusterParameterGroupsPages.RLock()
	calls = mock.calls.DescribeDBClusterParameterGroupsPages
	mock.lockDescribeDBClusterParameterGroupsPages.RUnlock()
	return calls
}

// DescribeDBClusterParameterGroupsPagesWithContext calls DescribeDBClusterParameterGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsPagesWithContext(contextMoqParam context.Context, describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput, fn func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBClusterParameterGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParameterGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBClusterParameterGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                       context.Context
		DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
		Fn                                    func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
		Options                               []request.Option
	}{
		ContextMoqParam:                       contextMoqParam,
		DescribeDBClusterParameterGroupsInput: describeDBClusterParameterGroupsInput,
		Fn:                                    fn,
		Options:                               options,
	}
	mock.lockDescribeDBClusterParameterGroupsPagesWithContext.Lock()
	mock.calls.DescribeDBClusterParameterGroupsPagesWithContext = append(mock.calls.DescribeDBClusterParameterGroupsPagesWithContext, callInfo)
	mock.lockDescribeDBClusterParameterGroupsPagesWithContext.Unlock()
	return mock.DescribeDBClusterParameterGroupsPagesWithContextFunc(contextMoqParam, describeDBClusterParameterGroupsInput, fn, options...)
}

// DescribeDBClusterParameterGroupsPagesWithContextCalls gets all the calls that were made to DescribeDBClusterParameterGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParameterGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsPagesWithContextCalls() []struct {
	ContextMoqParam                       context.Context
	DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
	Fn                                    func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
	Options                               []request.Option
} {
	var calls []struct {
		ContextMoqParam                       context.Context
		DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
		Fn                                    func(*rds.DescribeDBClusterParameterGroupsOutput, bool) bool
		Options                               []request.Option
	}
	mock.lockDescribeDBClusterParameterGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBClusterParameterGroupsPagesWithContext
	mock.lockDescribeDBClusterParameterGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBClusterParameterGroupsRequest calls DescribeDBClusterParameterGroupsRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsRequest(describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput) (*request.Request, *rds.DescribeDBClusterParameterGroupsOutput) {
	if mock.DescribeDBClusterParameterGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParameterGroupsRequestFunc: method is nil but rdsClient.DescribeDBClusterParameterGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
	}{
		DescribeDBClusterParameterGroupsInput: describeDBClusterParameterGroupsInput,
	}
	mock.lockDescribeDBClusterParameterGroupsRequest.Lock()
	mock.calls.DescribeDBClusterParameterGroupsRequest = append(mock.calls.DescribeDBClusterParameterGroupsRequest, callInfo)
	mock.lockDescribeDBClusterParameterGroupsRequest.Unlock()
	return mock.DescribeDBClusterParameterGroupsRequestFunc(describeDBClusterParameterGroupsInput)
}

// DescribeDBClusterParameterGroupsRequestCalls gets all the calls that were made to DescribeDBClusterParameterGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParameterGroupsRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsRequestCalls() []struct {
	DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
} {
	var calls []struct {
		DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
	}
	mock.lockDescribeDBClusterParameterGroupsRequest.RLock()
	calls = mock.calls.DescribeDBClusterParameterGroupsRequest
	mock.lockDescribeDBClusterParameterGroupsRequest.RUnlock()
	return calls
}

// DescribeDBClusterParameterGroupsWithContext calls DescribeDBClusterParameterGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsWithContext(contextMoqParam context.Context, describeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput, options ...request.Option) (*rds.DescribeDBClusterParameterGroupsOutput, error) {
	if mock.DescribeDBClusterParameterGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParameterGroupsWithContextFunc: method is nil but rdsClient.DescribeDBClusterParameterGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                       context.Context
		DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
		Options                               []request.Option
	}{
		ContextMoqParam:                       contextMoqParam,
		DescribeDBClusterParameterGroupsInput: describeDBClusterParameterGroupsInput,
		Options:                               options,
	}
	mock.lockDescribeDBClusterParameterGroupsWithContext.Lock()
	mock.calls.DescribeDBClusterParameterGroupsWithContext = append(mock.calls.DescribeDBClusterParameterGroupsWithContext, callInfo)
	mock.lockDescribeDBClusterParameterGroupsWithContext.Unlock()
	return mock.DescribeDBClusterParameterGroupsWithContextFunc(contextMoqParam, describeDBClusterParameterGroupsInput, options...)
}

// DescribeDBClusterParameterGroupsWithContextCalls gets all the calls that were made to DescribeDBClusterParameterGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParameterGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterParameterGroupsWithContextCalls() []struct {
	ContextMoqParam                       context.Context
	DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
	Options                               []request.Option
} {
	var calls []struct {
		ContextMoqParam                       context.Context
		DescribeDBClusterParameterGroupsInput *rds.DescribeDBClusterParameterGroupsInput
		Options                               []request.Option
	}
	mock.lockDescribeDBClusterParameterGroupsWithContext.RLock()
	calls = mock.calls.DescribeDBClusterParameterGroupsWithContext
	mock.lockDescribeDBClusterParameterGroupsWithContext.RUnlock()
	return calls
}

// DescribeDBClusterParameters calls DescribeDBClusterParametersFunc.
func (mock *rdsClientMock) DescribeDBClusterParameters(describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput) (*rds.DescribeDBClusterParametersOutput, error) {
	if mock.DescribeDBClusterParametersFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParametersFunc: method is nil but rdsClient.DescribeDBClusterParameters was just called")
	}
	callInfo := struct {
		DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
	}{
		DescribeDBClusterParametersInput: describeDBClusterParametersInput,
	}
	mock.lockDescribeDBClusterParameters.Lock()
	mock.calls.DescribeDBClusterParameters = append(mock.calls.DescribeDBClusterParameters, callInfo)
	mock.lockDescribeDBClusterParameters.Unlock()
	return mock.DescribeDBClusterParametersFunc(describeDBClusterParametersInput)
}

// DescribeDBClusterParametersCalls gets all the calls that were made to DescribeDBClusterParameters.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParametersCalls())
func (mock *rdsClientMock) DescribeDBClusterParametersCalls() []struct {
	DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
} {
	var calls []struct {
		DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
	}
	mock.lockDescribeDBClusterParameters.RLock()
	calls = mock.calls.DescribeDBClusterParameters
	mock.lockDescribeDBClusterParameters.RUnlock()
	return calls
}

// DescribeDBClusterParametersPages calls DescribeDBClusterParametersPagesFunc.
func (mock *rdsClientMock) DescribeDBClusterParametersPages(describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput, fn func(*rds.DescribeDBClusterParametersOutput, bool) bool) error {
	if mock.DescribeDBClusterParametersPagesFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParametersPagesFunc: method is nil but rdsClient.DescribeDBClusterParametersPages was just called")
	}
	callInfo := struct {
		DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
		Fn                               func(*rds.DescribeDBClusterParametersOutput, bool) bool
	}{
		DescribeDBClusterParametersInput: describeDBClusterParametersInput,
		Fn:                               fn,
	}
	mock.lockDescribeDBClusterParametersPages.Lock()
	mock.calls.DescribeDBClusterParametersPages = append(mock.calls.DescribeDBClusterParametersPages, callInfo)
	mock.lockDescribeDBClusterParametersPages.Unlock()
	return mock.DescribeDBClusterParametersPagesFunc(describeDBClusterParametersInput, fn)
}

// DescribeDBClusterParametersPagesCalls gets all the calls that were made to DescribeDBClusterParametersPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParametersPagesCalls())
func (mock *rdsClientMock) DescribeDBClusterParametersPagesCalls() []struct {
	DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
	Fn                               func(*rds.DescribeDBClusterParametersOutput, bool) bool
} {
	var calls []struct {
		DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
		Fn                               func(*rds.DescribeDBClusterParametersOutput, bool) bool
	}
	mock.lockDescribeDBClusterParametersPages.RLock()
	calls = mock.calls.DescribeDBClusterParametersPages
	mock.lockDescribeDBClusterParametersPages.RUnlock()
	return calls
}

// DescribeDBClusterParametersPagesWithContext calls DescribeDBClusterParametersPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterParametersPagesWithContext(contextMoqParam context.Context, describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput, fn func(*rds.DescribeDBClusterParametersOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBClusterParametersPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParametersPagesWithContextFunc: method is nil but rdsClient.DescribeDBClusterParametersPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
		Fn                               func(*rds.DescribeDBClusterParametersOutput, bool) bool
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeDBClusterParametersInput: describeDBClusterParametersInput,
		Fn:                               fn,
		Options:                          options,
	}
	mock.lockDescribeDBClusterParametersPagesWithContext.Lock()
	mock.calls.DescribeDBClusterParametersPagesWithContext = append(mock.calls.DescribeDBClusterParametersPagesWithContext, callInfo)
	mock.lockDescribeDBClusterParametersPagesWithContext.Unlock()
	return mock.DescribeDBClusterParametersPagesWithContextFunc(contextMoqParam, describeDBClusterParametersInput, fn, options...)
}

// DescribeDBClusterParametersPagesWithContextCalls gets all the calls that were made to DescribeDBClusterParametersPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParametersPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterParametersPagesWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
	Fn                               func(*rds.DescribeDBClusterParametersOutput, bool) bool
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
		Fn                               func(*rds.DescribeDBClusterParametersOutput, bool) bool
		Options                          []request.Option
	}
	mock.lockDescribeDBClusterParametersPagesWithContext.RLock()
	calls = mock.calls.DescribeDBClusterParametersPagesWithContext
	mock.lockDescribeDBClusterParametersPagesWithContext.RUnlock()
	return calls
}

// DescribeDBClusterParametersRequest calls DescribeDBClusterParametersRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterParametersRequest(describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput) (*request.Request, *rds.DescribeDBClusterParametersOutput) {
	if mock.DescribeDBClusterParametersRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParametersRequestFunc: method is nil but rdsClient.DescribeDBClusterParametersRequest was just called")
	}
	callInfo := struct {
		DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
	}{
		DescribeDBClusterParametersInput: describeDBClusterParametersInput,
	}
	mock.lockDescribeDBClusterParametersRequest.Lock()
	mock.calls.DescribeDBClusterParametersRequest = append(mock.calls.DescribeDBClusterParametersRequest, callInfo)
	mock.lockDescribeDBClusterParametersRequest.Unlock()
	return mock.DescribeDBClusterParametersRequestFunc(describeDBClusterParametersInput)
}

// DescribeDBClusterParametersRequestCalls gets all the calls that were made to DescribeDBClusterParametersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParametersRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterParametersRequestCalls() []struct {
	DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
} {
	var calls []struct {
		DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
	}
	mock.lockDescribeDBClusterParametersRequest.RLock()
	calls = mock.calls.DescribeDBClusterParametersRequest
	mock.lockDescribeDBClusterParametersRequest.RUnlock()
	return calls
}

// DescribeDBClusterParametersWithContext calls DescribeDBClusterParametersWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterParametersWithContext(contextMoqParam context.Context, describeDBClusterParametersInput *rds.DescribeDBClusterParametersInput, options ...request.Option) (*rds.DescribeDBClusterParametersOutput, error) {
	if mock.DescribeDBClusterParametersWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterParametersWithContextFunc: method is nil but rdsClient.DescribeDBClusterParametersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeDBClusterParametersInput: describeDBClusterParametersInput,
		Options:                          options,
	}
	mock.lockDescribeDBClusterParametersWithContext.Lock()
	mock.calls.DescribeDBClusterParametersWithContext = append(mock.calls.DescribeDBClusterParametersWithContext, callInfo)
	mock.lockDescribeDBClusterParametersWithContext.Unlock()
	return mock.DescribeDBClusterParametersWithContextFunc(contextMoqParam, describeDBClusterParametersInput, options...)
}

// DescribeDBClusterParametersWithContextCalls gets all the calls that were made to DescribeDBClusterParametersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterParametersWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterParametersWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeDBClusterParametersInput *rds.DescribeDBClusterParametersInput
		Options                          []request.Option
	}
	mock.lockDescribeDBClusterParametersWithContext.RLock()
	calls = mock.calls.DescribeDBClusterParametersWithContext
	mock.lockDescribeDBClusterParametersWithContext.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotAttributes calls DescribeDBClusterSnapshotAttributesFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributes(describeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	if mock.DescribeDBClusterSnapshotAttributesFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotAttributesFunc: method is nil but rdsClient.DescribeDBClusterSnapshotAttributes was just called")
	}
	callInfo := struct {
		DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
	}{
		DescribeDBClusterSnapshotAttributesInput: describeDBClusterSnapshotAttributesInput,
	}
	mock.lockDescribeDBClusterSnapshotAttributes.Lock()
	mock.calls.DescribeDBClusterSnapshotAttributes = append(mock.calls.DescribeDBClusterSnapshotAttributes, callInfo)
	mock.lockDescribeDBClusterSnapshotAttributes.Unlock()
	return mock.DescribeDBClusterSnapshotAttributesFunc(describeDBClusterSnapshotAttributesInput)
}

// DescribeDBClusterSnapshotAttributesCalls gets all the calls that were made to DescribeDBClusterSnapshotAttributes.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotAttributesCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributesCalls() []struct {
	DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
} {
	var calls []struct {
		DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
	}
	mock.lockDescribeDBClusterSnapshotAttributes.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotAttributes
	mock.lockDescribeDBClusterSnapshotAttributes.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotAttributesRequest calls DescribeDBClusterSnapshotAttributesRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributesRequest(describeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *rds.DescribeDBClusterSnapshotAttributesOutput) {
	if mock.DescribeDBClusterSnapshotAttributesRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotAttributesRequestFunc: method is nil but rdsClient.DescribeDBClusterSnapshotAttributesRequest was just called")
	}
	callInfo := struct {
		DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
	}{
		DescribeDBClusterSnapshotAttributesInput: describeDBClusterSnapshotAttributesInput,
	}
	mock.lockDescribeDBClusterSnapshotAttributesRequest.Lock()
	mock.calls.DescribeDBClusterSnapshotAttributesRequest = append(mock.calls.DescribeDBClusterSnapshotAttributesRequest, callInfo)
	mock.lockDescribeDBClusterSnapshotAttributesRequest.Unlock()
	return mock.DescribeDBClusterSnapshotAttributesRequestFunc(describeDBClusterSnapshotAttributesInput)
}

// DescribeDBClusterSnapshotAttributesRequestCalls gets all the calls that were made to DescribeDBClusterSnapshotAttributesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotAttributesRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributesRequestCalls() []struct {
	DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
} {
	var calls []struct {
		DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
	}
	mock.lockDescribeDBClusterSnapshotAttributesRequest.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotAttributesRequest
	mock.lockDescribeDBClusterSnapshotAttributesRequest.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotAttributesWithContext calls DescribeDBClusterSnapshotAttributesWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributesWithContext(contextMoqParam context.Context, describeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput, options ...request.Option) (*rds.DescribeDBClusterSnapshotAttributesOutput, error) {
	if mock.DescribeDBClusterSnapshotAttributesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotAttributesWithContextFunc: method is nil but rdsClient.DescribeDBClusterSnapshotAttributesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                          context.Context
		DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
		Options                                  []request.Option
	}{
		ContextMoqParam:                          contextMoqParam,
		DescribeDBClusterSnapshotAttributesInput: describeDBClusterSnapshotAttributesInput,
		Options:                                  options,
	}
	mock.lockDescribeDBClusterSnapshotAttributesWithContext.Lock()
	mock.calls.DescribeDBClusterSnapshotAttributesWithContext = append(mock.calls.DescribeDBClusterSnapshotAttributesWithContext, callInfo)
	mock.lockDescribeDBClusterSnapshotAttributesWithContext.Unlock()
	return mock.DescribeDBClusterSnapshotAttributesWithContextFunc(contextMoqParam, describeDBClusterSnapshotAttributesInput, options...)
}

// DescribeDBClusterSnapshotAttributesWithContextCalls gets all the calls that were made to DescribeDBClusterSnapshotAttributesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotAttributesWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotAttributesWithContextCalls() []struct {
	ContextMoqParam                          context.Context
	DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
	Options                                  []request.Option
} {
	var calls []struct {
		ContextMoqParam                          context.Context
		DescribeDBClusterSnapshotAttributesInput *rds.DescribeDBClusterSnapshotAttributesInput
		Options                                  []request.Option
	}
	mock.lockDescribeDBClusterSnapshotAttributesWithContext.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotAttributesWithContext
	mock.lockDescribeDBClusterSnapshotAttributesWithContext.RUnlock()
	return calls
}

// DescribeDBClusterSnapshots calls DescribeDBClusterSnapshotsFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshots(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	if mock.DescribeDBClusterSnapshotsFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotsFunc: method is nil but rdsClient.DescribeDBClusterSnapshots was just called")
	}
	callInfo := struct {
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	}{
		DescribeDBClusterSnapshotsInput: describeDBClusterSnapshotsInput,
	}
	mock.lockDescribeDBClusterSnapshots.Lock()
	mock.calls.DescribeDBClusterSnapshots = append(mock.calls.DescribeDBClusterSnapshots, callInfo)
	mock.lockDescribeDBClusterSnapshots.Unlock()
	return mock.DescribeDBClusterSnapshotsFunc(describeDBClusterSnapshotsInput)
}

// DescribeDBClusterSnapshotsCalls gets all the calls that were made to DescribeDBClusterSnapshots.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotsCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotsCalls() []struct {
	DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
} {
	var calls []struct {
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	}
	mock.lockDescribeDBClusterSnapshots.RLock()
	calls = mock.calls.DescribeDBClusterSnapshots
	mock.lockDescribeDBClusterSnapshots.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotsPages calls DescribeDBClusterSnapshotsPagesFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotsPages(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, fn func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool) error {
	if mock.DescribeDBClusterSnapshotsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotsPagesFunc: method is nil but rdsClient.DescribeDBClusterSnapshotsPages was just called")
	}
	callInfo := struct {
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		Fn                              func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
	}{
		DescribeDBClusterSnapshotsInput: describeDBClusterSnapshotsInput,
		Fn:                              fn,
	}
	mock.lockDescribeDBClusterSnapshotsPages.Lock()
	mock.calls.DescribeDBClusterSnapshotsPages = append(mock.calls.DescribeDBClusterSnapshotsPages, callInfo)
	mock.lockDescribeDBClusterSnapshotsPages.Unlock()
	return mock.DescribeDBClusterSnapshotsPagesFunc(describeDBClusterSnapshotsInput, fn)
}

// DescribeDBClusterSnapshotsPagesCalls gets all the calls that were made to DescribeDBClusterSnapshotsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotsPagesCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotsPagesCalls() []struct {
	DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	Fn                              func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		Fn                              func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
	}
	mock.lockDescribeDBClusterSnapshotsPages.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotsPages
	mock.lockDescribeDBClusterSnapshotsPages.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotsPagesWithContext calls DescribeDBClusterSnapshotsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotsPagesWithContext(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, fn func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBClusterSnapshotsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotsPagesWithContextFunc: method is nil but rdsClient.DescribeDBClusterSnapshotsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		Fn                              func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeDBClusterSnapshotsInput: describeDBClusterSnapshotsInput,
		Fn:                              fn,
		Options:                         options,
	}
	mock.lockDescribeDBClusterSnapshotsPagesWithContext.Lock()
	mock.calls.DescribeDBClusterSnapshotsPagesWithContext = append(mock.calls.DescribeDBClusterSnapshotsPagesWithContext, callInfo)
	mock.lockDescribeDBClusterSnapshotsPagesWithContext.Unlock()
	return mock.DescribeDBClusterSnapshotsPagesWithContextFunc(contextMoqParam, describeDBClusterSnapshotsInput, fn, options...)
}

// DescribeDBClusterSnapshotsPagesWithContextCalls gets all the calls that were made to DescribeDBClusterSnapshotsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotsPagesWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	Fn                              func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		Fn                              func(*rds.DescribeDBClusterSnapshotsOutput, bool) bool
		Options                         []request.Option
	}
	mock.lockDescribeDBClusterSnapshotsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotsPagesWithContext
	mock.lockDescribeDBClusterSnapshotsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotsRequest calls DescribeDBClusterSnapshotsRequestFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotsRequest(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) (*request.Request, *rds.DescribeDBClusterSnapshotsOutput) {
	if mock.DescribeDBClusterSnapshotsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotsRequestFunc: method is nil but rdsClient.DescribeDBClusterSnapshotsRequest was just called")
	}
	callInfo := struct {
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	}{
		DescribeDBClusterSnapshotsInput: describeDBClusterSnapshotsInput,
	}
	mock.lockDescribeDBClusterSnapshotsRequest.Lock()
	mock.calls.DescribeDBClusterSnapshotsRequest = append(mock.calls.DescribeDBClusterSnapshotsRequest, callInfo)
	mock.lockDescribeDBClusterSnapshotsRequest.Unlock()
	return mock.DescribeDBClusterSnapshotsRequestFunc(describeDBClusterSnapshotsInput)
}

// DescribeDBClusterSnapshotsRequestCalls gets all the calls that were made to DescribeDBClusterSnapshotsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotsRequestCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotsRequestCalls() []struct {
	DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
} {
	var calls []struct {
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	}
	mock.lockDescribeDBClusterSnapshotsRequest.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotsRequest
	mock.lockDescribeDBClusterSnapshotsRequest.RUnlock()
	return calls
}

// DescribeDBClusterSnapshotsWithContext calls DescribeDBClusterSnapshotsWithContextFunc.
func (mock *rdsClientMock) DescribeDBClusterSnapshotsWithContext(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, options ...request.Option) (*rds.DescribeDBClusterSnapshotsOutput, error) {
	if mock.DescribeDBClusterSnapshotsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClusterSnapshotsWithContextFunc: method is nil but rdsClient.DescribeDBClusterSnapshotsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeDBClusterSnapshotsInput: describeDBClusterSnapshotsInput,
		Options:                         options,
	}
	mock.lockDescribeDBClusterSnapshotsWithContext.Lock()
	mock.calls.DescribeDBClusterSnapshotsWithContext = append(mock.calls.DescribeDBClusterSnapshotsWithContext, callInfo)
	mock.lockDescribeDBClusterSnapshotsWithContext.Unlock()
	return mock.DescribeDBClusterSnapshotsWithContextFunc(contextMoqParam, describeDBClusterSnapshotsInput, options...)
}

// DescribeDBClusterSnapshotsWithContextCalls gets all the calls that were made to DescribeDBClusterSnapshotsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClusterSnapshotsWithContextCalls())
func (mock *rdsClientMock) DescribeDBClusterSnapshotsWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		Options                         []request.Option
	}
	mock.lockDescribeDBClusterSnapshotsWithContext.RLock()
	calls = mock.calls.DescribeDBClusterSnapshotsWithContext
	mock.lockDescribeDBClusterSnapshotsWithContext.RUnlock()
	return calls
}

// DescribeDBClusters calls DescribeDBClustersFunc.
func (mock *rdsClientMock) DescribeDBClusters(describeDBClustersInput *rds.DescribeDBClustersInput) (*rds.DescribeDBClustersOutput, error) {
	if mock.DescribeDBClustersFunc == nil {
		panic("rdsClientMock.DescribeDBClustersFunc: method is nil but rdsClient.DescribeDBClusters was just called")
	}
	callInfo := struct {
		DescribeDBClustersInput *rds.DescribeDBClustersInput
	}{
		DescribeDBClustersInput: describeDBClustersInput,
	}
	mock.lockDescribeDBClusters.Lock()
	mock.calls.DescribeDBClusters = append(mock.calls.DescribeDBClusters, callInfo)
	mock.lockDescribeDBClusters.Unlock()
	return mock.DescribeDBClustersFunc(describeDBClustersInput)
}

// DescribeDBClustersCalls gets all the calls that were made to DescribeDBClusters.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClustersCalls())
func (mock *rdsClientMock) DescribeDBClustersCalls() []struct {
	DescribeDBClustersInput *rds.DescribeDBClustersInput
} {
	var calls []struct {
		DescribeDBClustersInput *rds.DescribeDBClustersInput
	}
	mock.lockDescribeDBClusters.RLock()
	calls = mock.calls.DescribeDBClusters
	mock.lockDescribeDBClusters.RUnlock()
	return calls
}

// DescribeDBClustersPages calls DescribeDBClustersPagesFunc.
func (mock *rdsClientMock) DescribeDBClustersPages(describeDBClustersInput *rds.DescribeDBClustersInput, fn func(*rds.DescribeDBClustersOutput, bool) bool) error {
	if mock.DescribeDBClustersPagesFunc == nil {
		panic("rdsClientMock.DescribeDBClustersPagesFunc: method is nil but rdsClient.DescribeDBClustersPages was just called")
	}
	callInfo := struct {
		DescribeDBClustersInput *rds.DescribeDBClustersInput
		Fn                      func(*rds.DescribeDBClustersOutput, bool) bool
	}{
		DescribeDBClustersInput: describeDBClustersInput,
		Fn:                      fn,
	}
	mock.lockDescribeDBClustersPages.Lock()
	mock.calls.DescribeDBClustersPages = append(mock.calls.DescribeDBClustersPages, callInfo)
	mock.lockDescribeDBClustersPages.Unlock()
	return mock.DescribeDBClustersPagesFunc(describeDBClustersInput, fn)
}

// DescribeDBClustersPagesCalls gets all the calls that were made to DescribeDBClustersPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClustersPagesCalls())
func (mock *rdsClientMock) DescribeDBClustersPagesCalls() []struct {
	DescribeDBClustersInput *rds.DescribeDBClustersInput
	Fn                      func(*rds.DescribeDBClustersOutput, bool) bool
} {
	var calls []struct {
		DescribeDBClustersInput *rds.DescribeDBClustersInput
		Fn                      func(*rds.DescribeDBClustersOutput, bool) bool
	}
	mock.lockDescribeDBClustersPages.RLock()
	calls = mock.calls.DescribeDBClustersPages
	mock.lockDescribeDBClustersPages.RUnlock()
	return calls
}

// DescribeDBClustersPagesWithContext calls DescribeDBClustersPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBClustersPagesWithContext(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, fn func(*rds.DescribeDBClustersOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBClustersPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClustersPagesWithContextFunc: method is nil but rdsClient.DescribeDBClustersPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DescribeDBClustersInput *rds.DescribeDBClustersInput
		Fn                      func(*rds.DescribeDBClustersOutput, bool) bool
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DescribeDBClustersInput: describeDBClustersInput,
		Fn:                      fn,
		Options:                 options,
	}
	mock.lockDescribeDBClustersPagesWithContext.Lock()
	mock.calls.DescribeDBClustersPagesWithContext = append(mock.calls.DescribeDBClustersPagesWithContext, callInfo)
	mock.lockDescribeDBClustersPagesWithContext.Unlock()
	return mock.DescribeDBClustersPagesWithContextFunc(contextMoqParam, describeDBClustersInput, fn, options...)
}

// DescribeDBClustersPagesWithContextCalls gets all the calls that were made to DescribeDBClustersPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClustersPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBClustersPagesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DescribeDBClustersInput *rds.DescribeDBClustersInput
	Fn                      func(*rds.DescribeDBClustersOutput, bool) bool
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DescribeDBClustersInput *rds.DescribeDBClustersInput
		Fn                      func(*rds.DescribeDBClustersOutput, bool) bool
		Options                 []request.Option
	}
	mock.lockDescribeDBClustersPagesWithContext.RLock()
	calls = mock.calls.DescribeDBClustersPagesWithContext
	mock.lockDescribeDBClustersPagesWithContext.RUnlock()
	return calls
}

// DescribeDBClustersRequest calls DescribeDBClustersRequestFunc.
func (mock *rdsClientMock) DescribeDBClustersRequest(describeDBClustersInput *rds.DescribeDBClustersInput) (*request.Request, *rds.DescribeDBClustersOutput) {
	if mock.DescribeDBClustersRequestFunc == nil {
		panic("rdsClientMock.DescribeDBClustersRequestFunc: method is nil but rdsClient.DescribeDBClustersRequest was just called")
	}
	callInfo := struct {
		DescribeDBClustersInput *rds.DescribeDBClustersInput
	}{
		DescribeDBClustersInput: describeDBClustersInput,
	}
	mock.lockDescribeDBClustersRequest.Lock()
	mock.calls.DescribeDBClustersRequest = append(mock.calls.DescribeDBClustersRequest, callInfo)
	mock.lockDescribeDBClustersRequest.Unlock()
	return mock.DescribeDBClustersRequestFunc(describeDBClustersInput)
}

// DescribeDBClustersRequestCalls gets all the calls that were made to DescribeDBClustersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClustersRequestCalls())
func (mock *rdsClientMock) DescribeDBClustersRequestCalls() []struct {
	DescribeDBClustersInput *rds.DescribeDBClustersInput
} {
	var calls []struct {
		DescribeDBClustersInput *rds.DescribeDBClustersInput
	}
	mock.lockDescribeDBClustersRequest.RLock()
	calls = mock.calls.DescribeDBClustersRequest
	mock.lockDescribeDBClustersRequest.RUnlock()
	return calls
}

// DescribeDBClustersWithContext calls DescribeDBClustersWithContextFunc.
func (mock *rdsClientMock) DescribeDBClustersWithContext(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, options ...request.Option) (*rds.DescribeDBClustersOutput, error) {
	if mock.DescribeDBClustersWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBClustersWithContextFunc: method is nil but rdsClient.DescribeDBClustersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DescribeDBClustersInput *rds.DescribeDBClustersInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DescribeDBClustersInput: describeDBClustersInput,
		Options:                 options,
	}
	mock.lockDescribeDBClustersWithContext.Lock()
	mock.calls.DescribeDBClustersWithContext = append(mock.calls.DescribeDBClustersWithContext, callInfo)
	mock.lockDescribeDBClustersWithContext.Unlock()
	return mock.DescribeDBClustersWithContextFunc(contextMoqParam, describeDBClustersInput, options...)
}

// DescribeDBClustersWithContextCalls gets all the calls that were made to DescribeDBClustersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBClustersWithContextCalls())
func (mock *rdsClientMock) DescribeDBClustersWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DescribeDBClustersInput *rds.DescribeDBClustersInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DescribeDBClustersInput *rds.DescribeDBClustersInput
		Options                 []request.Option
	}
	mock.lockDescribeDBClustersWithContext.RLock()
	calls = mock.calls.DescribeDBClustersWithContext
	mock.lockDescribeDBClustersWithContext.RUnlock()
	return calls
}

// DescribeDBEngineVersions calls DescribeDBEngineVersionsFunc.
func (mock *rdsClientMock) DescribeDBEngineVersions(describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput) (*rds.DescribeDBEngineVersionsOutput, error) {
	if mock.DescribeDBEngineVersionsFunc == nil {
		panic("rdsClientMock.DescribeDBEngineVersionsFunc: method is nil but rdsClient.DescribeDBEngineVersions was just called")
	}
	callInfo := struct {
		DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
	}{
		DescribeDBEngineVersionsInput: describeDBEngineVersionsInput,
	}
	mock.lockDescribeDBEngineVersions.Lock()
	mock.calls.DescribeDBEngineVersions = append(mock.calls.DescribeDBEngineVersions, callInfo)
	mock.lockDescribeDBEngineVersions.Unlock()
	return mock.DescribeDBEngineVersionsFunc(describeDBEngineVersionsInput)
}

// DescribeDBEngineVersionsCalls gets all the calls that were made to DescribeDBEngineVersions.
// Check the length with:
//     len(mockedrdsClient.DescribeDBEngineVersionsCalls())
func (mock *rdsClientMock) DescribeDBEngineVersionsCalls() []struct {
	DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
} {
	var calls []struct {
		DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
	}
	mock.lockDescribeDBEngineVersions.RLock()
	calls = mock.calls.DescribeDBEngineVersions
	mock.lockDescribeDBEngineVersions.RUnlock()
	return calls
}

// DescribeDBEngineVersionsPages calls DescribeDBEngineVersionsPagesFunc.
func (mock *rdsClientMock) DescribeDBEngineVersionsPages(describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput, fn func(*rds.DescribeDBEngineVersionsOutput, bool) bool) error {
	if mock.DescribeDBEngineVersionsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBEngineVersionsPagesFunc: method is nil but rdsClient.DescribeDBEngineVersionsPages was just called")
	}
	callInfo := struct {
		DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
		Fn                            func(*rds.DescribeDBEngineVersionsOutput, bool) bool
	}{
		DescribeDBEngineVersionsInput: describeDBEngineVersionsInput,
		Fn:                            fn,
	}
	mock.lockDescribeDBEngineVersionsPages.Lock()
	mock.calls.DescribeDBEngineVersionsPages = append(mock.calls.DescribeDBEngineVersionsPages, callInfo)
	mock.lockDescribeDBEngineVersionsPages.Unlock()
	return mock.DescribeDBEngineVersionsPagesFunc(describeDBEngineVersionsInput, fn)
}

// DescribeDBEngineVersionsPagesCalls gets all the calls that were made to DescribeDBEngineVersionsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBEngineVersionsPagesCalls())
func (mock *rdsClientMock) DescribeDBEngineVersionsPagesCalls() []struct {
	DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
	Fn                            func(*rds.DescribeDBEngineVersionsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
		Fn                            func(*rds.DescribeDBEngineVersionsOutput, bool) bool
	}
	mock.lockDescribeDBEngineVersionsPages.RLock()
	calls = mock.calls.DescribeDBEngineVersionsPages
	mock.lockDescribeDBEngineVersionsPages.RUnlock()
	return calls
}

// DescribeDBEngineVersionsPagesWithContext calls DescribeDBEngineVersionsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBEngineVersionsPagesWithContext(contextMoqParam context.Context, describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput, fn func(*rds.DescribeDBEngineVersionsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBEngineVersionsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBEngineVersionsPagesWithContextFunc: method is nil but rdsClient.DescribeDBEngineVersionsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
		Fn                            func(*rds.DescribeDBEngineVersionsOutput, bool) bool
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DescribeDBEngineVersionsInput: describeDBEngineVersionsInput,
		Fn:                            fn,
		Options:                       options,
	}
	mock.lockDescribeDBEngineVersionsPagesWithContext.Lock()
	mock.calls.DescribeDBEngineVersionsPagesWithContext = append(mock.calls.DescribeDBEngineVersionsPagesWithContext, callInfo)
	mock.lockDescribeDBEngineVersionsPagesWithContext.Unlock()
	return mock.DescribeDBEngineVersionsPagesWithContextFunc(contextMoqParam, describeDBEngineVersionsInput, fn, options...)
}

// DescribeDBEngineVersionsPagesWithContextCalls gets all the calls that were made to DescribeDBEngineVersionsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBEngineVersionsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBEngineVersionsPagesWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
	Fn                            func(*rds.DescribeDBEngineVersionsOutput, bool) bool
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
		Fn                            func(*rds.DescribeDBEngineVersionsOutput, bool) bool
		Options                       []request.Option
	}
	mock.lockDescribeDBEngineVersionsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBEngineVersionsPagesWithContext
	mock.lockDescribeDBEngineVersionsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBEngineVersionsRequest calls DescribeDBEngineVersionsRequestFunc.
func (mock *rdsClientMock) DescribeDBEngineVersionsRequest(describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput) (*request.Request, *rds.DescribeDBEngineVersionsOutput) {
	if mock.DescribeDBEngineVersionsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBEngineVersionsRequestFunc: method is nil but rdsClient.DescribeDBEngineVersionsRequest was just called")
	}
	callInfo := struct {
		DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
	}{
		DescribeDBEngineVersionsInput: describeDBEngineVersionsInput,
	}
	mock.lockDescribeDBEngineVersionsRequest.Lock()
	mock.calls.DescribeDBEngineVersionsRequest = append(mock.calls.DescribeDBEngineVersionsRequest, callInfo)
	mock.lockDescribeDBEngineVersionsRequest.Unlock()
	return mock.DescribeDBEngineVersionsRequestFunc(describeDBEngineVersionsInput)
}

// DescribeDBEngineVersionsRequestCalls gets all the calls that were made to DescribeDBEngineVersionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBEngineVersionsRequestCalls())
func (mock *rdsClientMock) DescribeDBEngineVersionsRequestCalls() []struct {
	DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
} {
	var calls []struct {
		DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
	}
	mock.lockDescribeDBEngineVersionsRequest.RLock()
	calls = mock.calls.DescribeDBEngineVersionsRequest
	mock.lockDescribeDBEngineVersionsRequest.RUnlock()
	return calls
}

// DescribeDBEngineVersionsWithContext calls DescribeDBEngineVersionsWithContextFunc.
func (mock *rdsClientMock) DescribeDBEngineVersionsWithContext(contextMoqParam context.Context, describeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput, options ...request.Option) (*rds.DescribeDBEngineVersionsOutput, error) {
	if mock.DescribeDBEngineVersionsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBEngineVersionsWithContextFunc: method is nil but rdsClient.DescribeDBEngineVersionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DescribeDBEngineVersionsInput: describeDBEngineVersionsInput,
		Options:                       options,
	}
	mock.lockDescribeDBEngineVersionsWithContext.Lock()
	mock.calls.DescribeDBEngineVersionsWithContext = append(mock.calls.DescribeDBEngineVersionsWithContext, callInfo)
	mock.lockDescribeDBEngineVersionsWithContext.Unlock()
	return mock.DescribeDBEngineVersionsWithContextFunc(contextMoqParam, describeDBEngineVersionsInput, options...)
}

// DescribeDBEngineVersionsWithContextCalls gets all the calls that were made to DescribeDBEngineVersionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBEngineVersionsWithContextCalls())
func (mock *rdsClientMock) DescribeDBEngineVersionsWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DescribeDBEngineVersionsInput *rds.DescribeDBEngineVersionsInput
		Options                       []request.Option
	}
	mock.lockDescribeDBEngineVersionsWithContext.RLock()
	calls = mock.calls.DescribeDBEngineVersionsWithContext
	mock.lockDescribeDBEngineVersionsWithContext.RUnlock()
	return calls
}

// DescribeDBInstanceAutomatedBackups calls DescribeDBInstanceAutomatedBackupsFunc.
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackups(describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	if mock.DescribeDBInstanceAutomatedBackupsFunc == nil {
		panic("rdsClientMock.DescribeDBInstanceAutomatedBackupsFunc: method is nil but rdsClient.DescribeDBInstanceAutomatedBackups was just called")
	}
	callInfo := struct {
		DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
	}{
		DescribeDBInstanceAutomatedBackupsInput: describeDBInstanceAutomatedBackupsInput,
	}
	mock.lockDescribeDBInstanceAutomatedBackups.Lock()
	mock.calls.DescribeDBInstanceAutomatedBackups = append(mock.calls.DescribeDBInstanceAutomatedBackups, callInfo)
	mock.lockDescribeDBInstanceAutomatedBackups.Unlock()
	return mock.DescribeDBInstanceAutomatedBackupsFunc(describeDBInstanceAutomatedBackupsInput)
}

// DescribeDBInstanceAutomatedBackupsCalls gets all the calls that were made to DescribeDBInstanceAutomatedBackups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstanceAutomatedBackupsCalls())
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsCalls() []struct {
	DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
} {
	var calls []struct {
		DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
	}
	mock.lockDescribeDBInstanceAutomatedBackups.RLock()
	calls = mock.calls.DescribeDBInstanceAutomatedBackups
	mock.lockDescribeDBInstanceAutomatedBackups.RUnlock()
	return calls
}

// DescribeDBInstanceAutomatedBackupsPages calls DescribeDBInstanceAutomatedBackupsPagesFunc.
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsPages(describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput, fn func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool) error {
	if mock.DescribeDBInstanceAutomatedBackupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBInstanceAutomatedBackupsPagesFunc: method is nil but rdsClient.DescribeDBInstanceAutomatedBackupsPages was just called")
	}
	callInfo := struct {
		DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
		Fn                                      func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
	}{
		DescribeDBInstanceAutomatedBackupsInput: describeDBInstanceAutomatedBackupsInput,
		Fn:                                      fn,
	}
	mock.lockDescribeDBInstanceAutomatedBackupsPages.Lock()
	mock.calls.DescribeDBInstanceAutomatedBackupsPages = append(mock.calls.DescribeDBInstanceAutomatedBackupsPages, callInfo)
	mock.lockDescribeDBInstanceAutomatedBackupsPages.Unlock()
	return mock.DescribeDBInstanceAutomatedBackupsPagesFunc(describeDBInstanceAutomatedBackupsInput, fn)
}

// DescribeDBInstanceAutomatedBackupsPagesCalls gets all the calls that were made to DescribeDBInstanceAutomatedBackupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstanceAutomatedBackupsPagesCalls())
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsPagesCalls() []struct {
	DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
	Fn                                      func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
		Fn                                      func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
	}
	mock.lockDescribeDBInstanceAutomatedBackupsPages.RLock()
	calls = mock.calls.DescribeDBInstanceAutomatedBackupsPages
	mock.lockDescribeDBInstanceAutomatedBackupsPages.RUnlock()
	return calls
}

// DescribeDBInstanceAutomatedBackupsPagesWithContext calls DescribeDBInstanceAutomatedBackupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsPagesWithContext(contextMoqParam context.Context, describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput, fn func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBInstanceAutomatedBackupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBInstanceAutomatedBackupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBInstanceAutomatedBackupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
		Fn                                      func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		DescribeDBInstanceAutomatedBackupsInput: describeDBInstanceAutomatedBackupsInput,
		Fn:                                      fn,
		Options:                                 options,
	}
	mock.lockDescribeDBInstanceAutomatedBackupsPagesWithContext.Lock()
	mock.calls.DescribeDBInstanceAutomatedBackupsPagesWithContext = append(mock.calls.DescribeDBInstanceAutomatedBackupsPagesWithContext, callInfo)
	mock.lockDescribeDBInstanceAutomatedBackupsPagesWithContext.Unlock()
	return mock.DescribeDBInstanceAutomatedBackupsPagesWithContextFunc(contextMoqParam, describeDBInstanceAutomatedBackupsInput, fn, options...)
}

// DescribeDBInstanceAutomatedBackupsPagesWithContextCalls gets all the calls that were made to DescribeDBInstanceAutomatedBackupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstanceAutomatedBackupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsPagesWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
	Fn                                      func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
		Fn                                      func(*rds.DescribeDBInstanceAutomatedBackupsOutput, bool) bool
		Options                                 []request.Option
	}
	mock.lockDescribeDBInstanceAutomatedBackupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBInstanceAutomatedBackupsPagesWithContext
	mock.lockDescribeDBInstanceAutomatedBackupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBInstanceAutomatedBackupsRequest calls DescribeDBInstanceAutomatedBackupsRequestFunc.
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsRequest(describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput) (*request.Request, *rds.DescribeDBInstanceAutomatedBackupsOutput) {
	if mock.DescribeDBInstanceAutomatedBackupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBInstanceAutomatedBackupsRequestFunc: method is nil but rdsClient.DescribeDBInstanceAutomatedBackupsRequest was just called")
	}
	callInfo := struct {
		DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
	}{
		DescribeDBInstanceAutomatedBackupsInput: describeDBInstanceAutomatedBackupsInput,
	}
	mock.lockDescribeDBInstanceAutomatedBackupsRequest.Lock()
	mock.calls.DescribeDBInstanceAutomatedBackupsRequest = append(mock.calls.DescribeDBInstanceAutomatedBackupsRequest, callInfo)
	mock.lockDescribeDBInstanceAutomatedBackupsRequest.Unlock()
	return mock.DescribeDBInstanceAutomatedBackupsRequestFunc(describeDBInstanceAutomatedBackupsInput)
}

// DescribeDBInstanceAutomatedBackupsRequestCalls gets all the calls that were made to DescribeDBInstanceAutomatedBackupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstanceAutomatedBackupsRequestCalls())
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsRequestCalls() []struct {
	DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
} {
	var calls []struct {
		DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
	}
	mock.lockDescribeDBInstanceAutomatedBackupsRequest.RLock()
	calls = mock.calls.DescribeDBInstanceAutomatedBackupsRequest
	mock.lockDescribeDBInstanceAutomatedBackupsRequest.RUnlock()
	return calls
}

// DescribeDBInstanceAutomatedBackupsWithContext calls DescribeDBInstanceAutomatedBackupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsWithContext(contextMoqParam context.Context, describeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput, options ...request.Option) (*rds.DescribeDBInstanceAutomatedBackupsOutput, error) {
	if mock.DescribeDBInstanceAutomatedBackupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBInstanceAutomatedBackupsWithContextFunc: method is nil but rdsClient.DescribeDBInstanceAutomatedBackupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		DescribeDBInstanceAutomatedBackupsInput: describeDBInstanceAutomatedBackupsInput,
		Options:                                 options,
	}
	mock.lockDescribeDBInstanceAutomatedBackupsWithContext.Lock()
	mock.calls.DescribeDBInstanceAutomatedBackupsWithContext = append(mock.calls.DescribeDBInstanceAutomatedBackupsWithContext, callInfo)
	mock.lockDescribeDBInstanceAutomatedBackupsWithContext.Unlock()
	return mock.DescribeDBInstanceAutomatedBackupsWithContextFunc(contextMoqParam, describeDBInstanceAutomatedBackupsInput, options...)
}

// DescribeDBInstanceAutomatedBackupsWithContextCalls gets all the calls that were made to DescribeDBInstanceAutomatedBackupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstanceAutomatedBackupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBInstanceAutomatedBackupsWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		DescribeDBInstanceAutomatedBackupsInput *rds.DescribeDBInstanceAutomatedBackupsInput
		Options                                 []request.Option
	}
	mock.lockDescribeDBInstanceAutomatedBackupsWithContext.RLock()
	calls = mock.calls.DescribeDBInstanceAutomatedBackupsWithContext
	mock.lockDescribeDBInstanceAutomatedBackupsWithContext.RUnlock()
	return calls
}

// DescribeDBInstances calls DescribeDBInstancesFunc.
func (mock *rdsClientMock) DescribeDBInstances(describeDBInstancesInput *rds.DescribeDBInstancesInput) (*rds.DescribeDBInstancesOutput, error) {
	if mock.DescribeDBInstancesFunc == nil {
		panic("rdsClientMock.DescribeDBInstancesFunc: method is nil but rdsClient.DescribeDBInstances was just called")
	}
	callInfo := struct {
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	}{
		DescribeDBInstancesInput: describeDBInstancesInput,
	}
	mock.lockDescribeDBInstances.Lock()
	mock.calls.DescribeDBInstances = append(mock.calls.DescribeDBInstances, callInfo)
	mock.lockDescribeDBInstances.Unlock()
	return mock.DescribeDBInstancesFunc(describeDBInstancesInput)
}

// DescribeDBInstancesCalls gets all the calls that were made to DescribeDBInstances.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstancesCalls())
func (mock *rdsClientMock) DescribeDBInstancesCalls() []struct {
	DescribeDBInstancesInput *rds.DescribeDBInstancesInput
} {
	var calls []struct {
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	}
	mock.lockDescribeDBInstances.RLock()
	calls = mock.calls.DescribeDBInstances
	mock.lockDescribeDBInstances.RUnlock()
	return calls
}

// DescribeDBInstancesPages calls DescribeDBInstancesPagesFunc.
func (mock *rdsClientMock) DescribeDBInstancesPages(describeDBInstancesInput *rds.DescribeDBInstancesInput, fn func(*rds.DescribeDBInstancesOutput, bool) bool) error {
	if mock.DescribeDBInstancesPagesFunc == nil {
		panic("rdsClientMock.DescribeDBInstancesPagesFunc: method is nil but rdsClient.DescribeDBInstancesPages was just called")
	}
	callInfo := struct {
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		Fn                       func(*rds.DescribeDBInstancesOutput, bool) bool
	}{
		DescribeDBInstancesInput: describeDBInstancesInput,
		Fn:                       fn,
	}
	mock.lockDescribeDBInstancesPages.Lock()
	mock.calls.DescribeDBInstancesPages = append(mock.calls.DescribeDBInstancesPages, callInfo)
	mock.lockDescribeDBInstancesPages.Unlock()
	return mock.DescribeDBInstancesPagesFunc(describeDBInstancesInput, fn)
}

// DescribeDBInstancesPagesCalls gets all the calls that were made to DescribeDBInstancesPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstancesPagesCalls())
func (mock *rdsClientMock) DescribeDBInstancesPagesCalls() []struct {
	DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	Fn                       func(*rds.DescribeDBInstancesOutput, bool) bool
} {
	var calls []struct {
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		Fn                       func(*rds.DescribeDBInstancesOutput, bool) bool
	}
	mock.lockDescribeDBInstancesPages.RLock()
	calls = mock.calls.DescribeDBInstancesPages
	mock.lockDescribeDBInstancesPages.RUnlock()
	return calls
}

// DescribeDBInstancesPagesWithContext calls DescribeDBInstancesPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBInstancesPagesWithContext(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, fn func(*rds.DescribeDBInstancesOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBInstancesPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBInstancesPagesWithContextFunc: method is nil but rdsClient.DescribeDBInstancesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		Fn                       func(*rds.DescribeDBInstancesOutput, bool) bool
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DescribeDBInstancesInput: describeDBInstancesInput,
		Fn:                       fn,
		Options:                  options,
	}
	mock.lockDescribeDBInstancesPagesWithContext.Lock()
	mock.calls.DescribeDBInstancesPagesWithContext = append(mock.calls.DescribeDBInstancesPagesWithContext, callInfo)
	mock.lockDescribeDBInstancesPagesWithContext.Unlock()
	return mock.DescribeDBInstancesPagesWithContextFunc(contextMoqParam, describeDBInstancesInput, fn, options...)
}

// DescribeDBInstancesPagesWithContextCalls gets all the calls that were made to DescribeDBInstancesPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstancesPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBInstancesPagesWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	Fn                       func(*rds.DescribeDBInstancesOutput, bool) bool
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		Fn                       func(*rds.DescribeDBInstancesOutput, bool) bool
		Options                  []request.Option
	}
	mock.lockDescribeDBInstancesPagesWithContext.RLock()
	calls = mock.calls.DescribeDBInstancesPagesWithContext
	mock.lockDescribeDBInstancesPagesWithContext.RUnlock()
	return calls
}

// DescribeDBInstancesRequest calls DescribeDBInstancesRequestFunc.
func (mock *rdsClientMock) DescribeDBInstancesRequest(describeDBInstancesInput *rds.DescribeDBInstancesInput) (*request.Request, *rds.DescribeDBInstancesOutput) {
	if mock.DescribeDBInstancesRequestFunc == nil {
		panic("rdsClientMock.DescribeDBInstancesRequestFunc: method is nil but rdsClient.DescribeDBInstancesRequest was just called")
	}
	callInfo := struct {
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	}{
		DescribeDBInstancesInput: describeDBInstancesInput,
	}
	mock.lockDescribeDBInstancesRequest.Lock()
	mock.calls.DescribeDBInstancesRequest = append(mock.calls.DescribeDBInstancesRequest, callInfo)
	mock.lockDescribeDBInstancesRequest.Unlock()
	return mock.DescribeDBInstancesRequestFunc(describeDBInstancesInput)
}

// DescribeDBInstancesRequestCalls gets all the calls that were made to DescribeDBInstancesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstancesRequestCalls())
func (mock *rdsClientMock) DescribeDBInstancesRequestCalls() []struct {
	DescribeDBInstancesInput *rds.DescribeDBInstancesInput
} {
	var calls []struct {
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	}
	mock.lockDescribeDBInstancesRequest.RLock()
	calls = mock.calls.DescribeDBInstancesRequest
	mock.lockDescribeDBInstancesRequest.RUnlock()
	return calls
}

// DescribeDBInstancesWithContext calls DescribeDBInstancesWithContextFunc.
func (mock *rdsClientMock) DescribeDBInstancesWithContext(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, options ...request.Option) (*rds.DescribeDBInstancesOutput, error) {
	if mock.DescribeDBInstancesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBInstancesWithContextFunc: method is nil but rdsClient.DescribeDBInstancesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DescribeDBInstancesInput: describeDBInstancesInput,
		Options:                  options,
	}
	mock.lockDescribeDBInstancesWithContext.Lock()
	mock.calls.DescribeDBInstancesWithContext = append(mock.calls.DescribeDBInstancesWithContext, callInfo)
	mock.lockDescribeDBInstancesWithContext.Unlock()
	return mock.DescribeDBInstancesWithContextFunc(contextMoqParam, describeDBInstancesInput, options...)
}

// DescribeDBInstancesWithContextCalls gets all the calls that were made to DescribeDBInstancesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBInstancesWithContextCalls())
func (mock *rdsClientMock) DescribeDBInstancesWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		Options                  []request.Option
	}
	mock.lockDescribeDBInstancesWithContext.RLock()
	calls = mock.calls.DescribeDBInstancesWithContext
	mock.lockDescribeDBInstancesWithContext.RUnlock()
	return calls
}

// DescribeDBLogFiles calls DescribeDBLogFilesFunc.
func (mock *rdsClientMock) DescribeDBLogFiles(describeDBLogFilesInput *rds.DescribeDBLogFilesInput) (*rds.DescribeDBLogFilesOutput, error) {
	if mock.DescribeDBLogFilesFunc == nil {
		panic("rdsClientMock.DescribeDBLogFilesFunc: method is nil but rdsClient.DescribeDBLogFiles was just called")
	}
	callInfo := struct {
		DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
	}{
		DescribeDBLogFilesInput: describeDBLogFilesInput,
	}
	mock.lockDescribeDBLogFiles.Lock()
	mock.calls.DescribeDBLogFiles = append(mock.calls.DescribeDBLogFiles, callInfo)
	mock.lockDescribeDBLogFiles.Unlock()
	return mock.DescribeDBLogFilesFunc(describeDBLogFilesInput)
}

// DescribeDBLogFilesCalls gets all the calls that were made to DescribeDBLogFiles.
// Check the length with:
//     len(mockedrdsClient.DescribeDBLogFilesCalls())
func (mock *rdsClientMock) DescribeDBLogFilesCalls() []struct {
	DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
} {
	var calls []struct {
		DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
	}
	mock.lockDescribeDBLogFiles.RLock()
	calls = mock.calls.DescribeDBLogFiles
	mock.lockDescribeDBLogFiles.RUnlock()
	return calls
}

// DescribeDBLogFilesPages calls DescribeDBLogFilesPagesFunc.
func (mock *rdsClientMock) DescribeDBLogFilesPages(describeDBLogFilesInput *rds.DescribeDBLogFilesInput, fn func(*rds.DescribeDBLogFilesOutput, bool) bool) error {
	if mock.DescribeDBLogFilesPagesFunc == nil {
		panic("rdsClientMock.DescribeDBLogFilesPagesFunc: method is nil but rdsClient.DescribeDBLogFilesPages was just called")
	}
	callInfo := struct {
		DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
		Fn                      func(*rds.DescribeDBLogFilesOutput, bool) bool
	}{
		DescribeDBLogFilesInput: describeDBLogFilesInput,
		Fn:                      fn,
	}
	mock.lockDescribeDBLogFilesPages.Lock()
	mock.calls.DescribeDBLogFilesPages = append(mock.calls.DescribeDBLogFilesPages, callInfo)
	mock.lockDescribeDBLogFilesPages.Unlock()
	return mock.DescribeDBLogFilesPagesFunc(describeDBLogFilesInput, fn)
}

// DescribeDBLogFilesPagesCalls gets all the calls that were made to DescribeDBLogFilesPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBLogFilesPagesCalls())
func (mock *rdsClientMock) DescribeDBLogFilesPagesCalls() []struct {
	DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
	Fn                      func(*rds.DescribeDBLogFilesOutput, bool) bool
} {
	var calls []struct {
		DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
		Fn                      func(*rds.DescribeDBLogFilesOutput, bool) bool
	}
	mock.lockDescribeDBLogFilesPages.RLock()
	calls = mock.calls.DescribeDBLogFilesPages
	mock.lockDescribeDBLogFilesPages.RUnlock()
	return calls
}

// DescribeDBLogFilesPagesWithContext calls DescribeDBLogFilesPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBLogFilesPagesWithContext(contextMoqParam context.Context, describeDBLogFilesInput *rds.DescribeDBLogFilesInput, fn func(*rds.DescribeDBLogFilesOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBLogFilesPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBLogFilesPagesWithContextFunc: method is nil but rdsClient.DescribeDBLogFilesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
		Fn                      func(*rds.DescribeDBLogFilesOutput, bool) bool
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DescribeDBLogFilesInput: describeDBLogFilesInput,
		Fn:                      fn,
		Options:                 options,
	}
	mock.lockDescribeDBLogFilesPagesWithContext.Lock()
	mock.calls.DescribeDBLogFilesPagesWithContext = append(mock.calls.DescribeDBLogFilesPagesWithContext, callInfo)
	mock.lockDescribeDBLogFilesPagesWithContext.Unlock()
	return mock.DescribeDBLogFilesPagesWithContextFunc(contextMoqParam, describeDBLogFilesInput, fn, options...)
}

// DescribeDBLogFilesPagesWithContextCalls gets all the calls that were made to DescribeDBLogFilesPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBLogFilesPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBLogFilesPagesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
	Fn                      func(*rds.DescribeDBLogFilesOutput, bool) bool
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
		Fn                      func(*rds.DescribeDBLogFilesOutput, bool) bool
		Options                 []request.Option
	}
	mock.lockDescribeDBLogFilesPagesWithContext.RLock()
	calls = mock.calls.DescribeDBLogFilesPagesWithContext
	mock.lockDescribeDBLogFilesPagesWithContext.RUnlock()
	return calls
}

// DescribeDBLogFilesRequest calls DescribeDBLogFilesRequestFunc.
func (mock *rdsClientMock) DescribeDBLogFilesRequest(describeDBLogFilesInput *rds.DescribeDBLogFilesInput) (*request.Request, *rds.DescribeDBLogFilesOutput) {
	if mock.DescribeDBLogFilesRequestFunc == nil {
		panic("rdsClientMock.DescribeDBLogFilesRequestFunc: method is nil but rdsClient.DescribeDBLogFilesRequest was just called")
	}
	callInfo := struct {
		DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
	}{
		DescribeDBLogFilesInput: describeDBLogFilesInput,
	}
	mock.lockDescribeDBLogFilesRequest.Lock()
	mock.calls.DescribeDBLogFilesRequest = append(mock.calls.DescribeDBLogFilesRequest, callInfo)
	mock.lockDescribeDBLogFilesRequest.Unlock()
	return mock.DescribeDBLogFilesRequestFunc(describeDBLogFilesInput)
}

// DescribeDBLogFilesRequestCalls gets all the calls that were made to DescribeDBLogFilesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBLogFilesRequestCalls())
func (mock *rdsClientMock) DescribeDBLogFilesRequestCalls() []struct {
	DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
} {
	var calls []struct {
		DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
	}
	mock.lockDescribeDBLogFilesRequest.RLock()
	calls = mock.calls.DescribeDBLogFilesRequest
	mock.lockDescribeDBLogFilesRequest.RUnlock()
	return calls
}

// DescribeDBLogFilesWithContext calls DescribeDBLogFilesWithContextFunc.
func (mock *rdsClientMock) DescribeDBLogFilesWithContext(contextMoqParam context.Context, describeDBLogFilesInput *rds.DescribeDBLogFilesInput, options ...request.Option) (*rds.DescribeDBLogFilesOutput, error) {
	if mock.DescribeDBLogFilesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBLogFilesWithContextFunc: method is nil but rdsClient.DescribeDBLogFilesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DescribeDBLogFilesInput: describeDBLogFilesInput,
		Options:                 options,
	}
	mock.lockDescribeDBLogFilesWithContext.Lock()
	mock.calls.DescribeDBLogFilesWithContext = append(mock.calls.DescribeDBLogFilesWithContext, callInfo)
	mock.lockDescribeDBLogFilesWithContext.Unlock()
	return mock.DescribeDBLogFilesWithContextFunc(contextMoqParam, describeDBLogFilesInput, options...)
}

// DescribeDBLogFilesWithContextCalls gets all the calls that were made to DescribeDBLogFilesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBLogFilesWithContextCalls())
func (mock *rdsClientMock) DescribeDBLogFilesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DescribeDBLogFilesInput *rds.DescribeDBLogFilesInput
		Options                 []request.Option
	}
	mock.lockDescribeDBLogFilesWithContext.RLock()
	calls = mock.calls.DescribeDBLogFilesWithContext
	mock.lockDescribeDBLogFilesWithContext.RUnlock()
	return calls
}

// DescribeDBParameterGroups calls DescribeDBParameterGroupsFunc.
func (mock *rdsClientMock) DescribeDBParameterGroups(describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput) (*rds.DescribeDBParameterGroupsOutput, error) {
	if mock.DescribeDBParameterGroupsFunc == nil {
		panic("rdsClientMock.DescribeDBParameterGroupsFunc: method is nil but rdsClient.DescribeDBParameterGroups was just called")
	}
	callInfo := struct {
		DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
	}{
		DescribeDBParameterGroupsInput: describeDBParameterGroupsInput,
	}
	mock.lockDescribeDBParameterGroups.Lock()
	mock.calls.DescribeDBParameterGroups = append(mock.calls.DescribeDBParameterGroups, callInfo)
	mock.lockDescribeDBParameterGroups.Unlock()
	return mock.DescribeDBParameterGroupsFunc(describeDBParameterGroupsInput)
}

// DescribeDBParameterGroupsCalls gets all the calls that were made to DescribeDBParameterGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParameterGroupsCalls())
func (mock *rdsClientMock) DescribeDBParameterGroupsCalls() []struct {
	DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
} {
	var calls []struct {
		DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
	}
	mock.lockDescribeDBParameterGroups.RLock()
	calls = mock.calls.DescribeDBParameterGroups
	mock.lockDescribeDBParameterGroups.RUnlock()
	return calls
}

// DescribeDBParameterGroupsPages calls DescribeDBParameterGroupsPagesFunc.
func (mock *rdsClientMock) DescribeDBParameterGroupsPages(describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput, fn func(*rds.DescribeDBParameterGroupsOutput, bool) bool) error {
	if mock.DescribeDBParameterGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBParameterGroupsPagesFunc: method is nil but rdsClient.DescribeDBParameterGroupsPages was just called")
	}
	callInfo := struct {
		DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
		Fn                             func(*rds.DescribeDBParameterGroupsOutput, bool) bool
	}{
		DescribeDBParameterGroupsInput: describeDBParameterGroupsInput,
		Fn:                             fn,
	}
	mock.lockDescribeDBParameterGroupsPages.Lock()
	mock.calls.DescribeDBParameterGroupsPages = append(mock.calls.DescribeDBParameterGroupsPages, callInfo)
	mock.lockDescribeDBParameterGroupsPages.Unlock()
	return mock.DescribeDBParameterGroupsPagesFunc(describeDBParameterGroupsInput, fn)
}

// DescribeDBParameterGroupsPagesCalls gets all the calls that were made to DescribeDBParameterGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParameterGroupsPagesCalls())
func (mock *rdsClientMock) DescribeDBParameterGroupsPagesCalls() []struct {
	DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
	Fn                             func(*rds.DescribeDBParameterGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
		Fn                             func(*rds.DescribeDBParameterGroupsOutput, bool) bool
	}
	mock.lockDescribeDBParameterGroupsPages.RLock()
	calls = mock.calls.DescribeDBParameterGroupsPages
	mock.lockDescribeDBParameterGroupsPages.RUnlock()
	return calls
}

// DescribeDBParameterGroupsPagesWithContext calls DescribeDBParameterGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBParameterGroupsPagesWithContext(contextMoqParam context.Context, describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput, fn func(*rds.DescribeDBParameterGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBParameterGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBParameterGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBParameterGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
		Fn                             func(*rds.DescribeDBParameterGroupsOutput, bool) bool
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		DescribeDBParameterGroupsInput: describeDBParameterGroupsInput,
		Fn:                             fn,
		Options:                        options,
	}
	mock.lockDescribeDBParameterGroupsPagesWithContext.Lock()
	mock.calls.DescribeDBParameterGroupsPagesWithContext = append(mock.calls.DescribeDBParameterGroupsPagesWithContext, callInfo)
	mock.lockDescribeDBParameterGroupsPagesWithContext.Unlock()
	return mock.DescribeDBParameterGroupsPagesWithContextFunc(contextMoqParam, describeDBParameterGroupsInput, fn, options...)
}

// DescribeDBParameterGroupsPagesWithContextCalls gets all the calls that were made to DescribeDBParameterGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParameterGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBParameterGroupsPagesWithContextCalls() []struct {
	ContextMoqParam                context.Context
	DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
	Fn                             func(*rds.DescribeDBParameterGroupsOutput, bool) bool
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
		Fn                             func(*rds.DescribeDBParameterGroupsOutput, bool) bool
		Options                        []request.Option
	}
	mock.lockDescribeDBParameterGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBParameterGroupsPagesWithContext
	mock.lockDescribeDBParameterGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBParameterGroupsRequest calls DescribeDBParameterGroupsRequestFunc.
func (mock *rdsClientMock) DescribeDBParameterGroupsRequest(describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput) (*request.Request, *rds.DescribeDBParameterGroupsOutput) {
	if mock.DescribeDBParameterGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBParameterGroupsRequestFunc: method is nil but rdsClient.DescribeDBParameterGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
	}{
		DescribeDBParameterGroupsInput: describeDBParameterGroupsInput,
	}
	mock.lockDescribeDBParameterGroupsRequest.Lock()
	mock.calls.DescribeDBParameterGroupsRequest = append(mock.calls.DescribeDBParameterGroupsRequest, callInfo)
	mock.lockDescribeDBParameterGroupsRequest.Unlock()
	return mock.DescribeDBParameterGroupsRequestFunc(describeDBParameterGroupsInput)
}

// DescribeDBParameterGroupsRequestCalls gets all the calls that were made to DescribeDBParameterGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParameterGroupsRequestCalls())
func (mock *rdsClientMock) DescribeDBParameterGroupsRequestCalls() []struct {
	DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
} {
	var calls []struct {
		DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
	}
	mock.lockDescribeDBParameterGroupsRequest.RLock()
	calls = mock.calls.DescribeDBParameterGroupsRequest
	mock.lockDescribeDBParameterGroupsRequest.RUnlock()
	return calls
}

// DescribeDBParameterGroupsWithContext calls DescribeDBParameterGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBParameterGroupsWithContext(contextMoqParam context.Context, describeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput, options ...request.Option) (*rds.DescribeDBParameterGroupsOutput, error) {
	if mock.DescribeDBParameterGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBParameterGroupsWithContextFunc: method is nil but rdsClient.DescribeDBParameterGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		DescribeDBParameterGroupsInput: describeDBParameterGroupsInput,
		Options:                        options,
	}
	mock.lockDescribeDBParameterGroupsWithContext.Lock()
	mock.calls.DescribeDBParameterGroupsWithContext = append(mock.calls.DescribeDBParameterGroupsWithContext, callInfo)
	mock.lockDescribeDBParameterGroupsWithContext.Unlock()
	return mock.DescribeDBParameterGroupsWithContextFunc(contextMoqParam, describeDBParameterGroupsInput, options...)
}

// DescribeDBParameterGroupsWithContextCalls gets all the calls that were made to DescribeDBParameterGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParameterGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBParameterGroupsWithContextCalls() []struct {
	ContextMoqParam                context.Context
	DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		DescribeDBParameterGroupsInput *rds.DescribeDBParameterGroupsInput
		Options                        []request.Option
	}
	mock.lockDescribeDBParameterGroupsWithContext.RLock()
	calls = mock.calls.DescribeDBParameterGroupsWithContext
	mock.lockDescribeDBParameterGroupsWithContext.RUnlock()
	return calls
}

// DescribeDBParameters calls DescribeDBParametersFunc.
func (mock *rdsClientMock) DescribeDBParameters(describeDBParametersInput *rds.DescribeDBParametersInput) (*rds.DescribeDBParametersOutput, error) {
	if mock.DescribeDBParametersFunc == nil {
		panic("rdsClientMock.DescribeDBParametersFunc: method is nil but rdsClient.DescribeDBParameters was just called")
	}
	callInfo := struct {
		DescribeDBParametersInput *rds.DescribeDBParametersInput
	}{
		DescribeDBParametersInput: describeDBParametersInput,
	}
	mock.lockDescribeDBParameters.Lock()
	mock.calls.DescribeDBParameters = append(mock.calls.DescribeDBParameters, callInfo)
	mock.lockDescribeDBParameters.Unlock()
	return mock.DescribeDBParametersFunc(describeDBParametersInput)
}

// DescribeDBParametersCalls gets all the calls that were made to DescribeDBParameters.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParametersCalls())
func (mock *rdsClientMock) DescribeDBParametersCalls() []struct {
	DescribeDBParametersInput *rds.DescribeDBParametersInput
} {
	var calls []struct {
		DescribeDBParametersInput *rds.DescribeDBParametersInput
	}
	mock.lockDescribeDBParameters.RLock()
	calls = mock.calls.DescribeDBParameters
	mock.lockDescribeDBParameters.RUnlock()
	return calls
}

// DescribeDBParametersPages calls DescribeDBParametersPagesFunc.
func (mock *rdsClientMock) DescribeDBParametersPages(describeDBParametersInput *rds.DescribeDBParametersInput, fn func(*rds.DescribeDBParametersOutput, bool) bool) error {
	if mock.DescribeDBParametersPagesFunc == nil {
		panic("rdsClientMock.DescribeDBParametersPagesFunc: method is nil but rdsClient.DescribeDBParametersPages was just called")
	}
	callInfo := struct {
		DescribeDBParametersInput *rds.DescribeDBParametersInput
		Fn                        func(*rds.DescribeDBParametersOutput, bool) bool
	}{
		DescribeDBParametersInput: describeDBParametersInput,
		Fn:                        fn,
	}
	mock.lockDescribeDBParametersPages.Lock()
	mock.calls.DescribeDBParametersPages = append(mock.calls.DescribeDBParametersPages, callInfo)
	mock.lockDescribeDBParametersPages.Unlock()
	return mock.DescribeDBParametersPagesFunc(describeDBParametersInput, fn)
}

// DescribeDBParametersPagesCalls gets all the calls that were made to DescribeDBParametersPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParametersPagesCalls())
func (mock *rdsClientMock) DescribeDBParametersPagesCalls() []struct {
	DescribeDBParametersInput *rds.DescribeDBParametersInput
	Fn                        func(*rds.DescribeDBParametersOutput, bool) bool
} {
	var calls []struct {
		DescribeDBParametersInput *rds.DescribeDBParametersInput
		Fn                        func(*rds.DescribeDBParametersOutput, bool) bool
	}
	mock.lockDescribeDBParametersPages.RLock()
	calls = mock.calls.DescribeDBParametersPages
	mock.lockDescribeDBParametersPages.RUnlock()
	return calls
}

// DescribeDBParametersPagesWithContext calls DescribeDBParametersPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBParametersPagesWithContext(contextMoqParam context.Context, describeDBParametersInput *rds.DescribeDBParametersInput, fn func(*rds.DescribeDBParametersOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBParametersPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBParametersPagesWithContextFunc: method is nil but rdsClient.DescribeDBParametersPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		DescribeDBParametersInput *rds.DescribeDBParametersInput
		Fn                        func(*rds.DescribeDBParametersOutput, bool) bool
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		DescribeDBParametersInput: describeDBParametersInput,
		Fn:                        fn,
		Options:                   options,
	}
	mock.lockDescribeDBParametersPagesWithContext.Lock()
	mock.calls.DescribeDBParametersPagesWithContext = append(mock.calls.DescribeDBParametersPagesWithContext, callInfo)
	mock.lockDescribeDBParametersPagesWithContext.Unlock()
	return mock.DescribeDBParametersPagesWithContextFunc(contextMoqParam, describeDBParametersInput, fn, options...)
}

// DescribeDBParametersPagesWithContextCalls gets all the calls that were made to DescribeDBParametersPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParametersPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBParametersPagesWithContextCalls() []struct {
	ContextMoqParam           context.Context
	DescribeDBParametersInput *rds.DescribeDBParametersInput
	Fn                        func(*rds.DescribeDBParametersOutput, bool) bool
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		DescribeDBParametersInput *rds.DescribeDBParametersInput
		Fn                        func(*rds.DescribeDBParametersOutput, bool) bool
		Options                   []request.Option
	}
	mock.lockDescribeDBParametersPagesWithContext.RLock()
	calls = mock.calls.DescribeDBParametersPagesWithContext
	mock.lockDescribeDBParametersPagesWithContext.RUnlock()
	return calls
}

// DescribeDBParametersRequest calls DescribeDBParametersRequestFunc.
func (mock *rdsClientMock) DescribeDBParametersRequest(describeDBParametersInput *rds.DescribeDBParametersInput) (*request.Request, *rds.DescribeDBParametersOutput) {
	if mock.DescribeDBParametersRequestFunc == nil {
		panic("rdsClientMock.DescribeDBParametersRequestFunc: method is nil but rdsClient.DescribeDBParametersRequest was just called")
	}
	callInfo := struct {
		DescribeDBParametersInput *rds.DescribeDBParametersInput
	}{
		DescribeDBParametersInput: describeDBParametersInput,
	}
	mock.lockDescribeDBParametersRequest.Lock()
	mock.calls.DescribeDBParametersRequest = append(mock.calls.DescribeDBParametersRequest, callInfo)
	mock.lockDescribeDBParametersRequest.Unlock()
	return mock.DescribeDBParametersRequestFunc(describeDBParametersInput)
}

// DescribeDBParametersRequestCalls gets all the calls that were made to DescribeDBParametersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParametersRequestCalls())
func (mock *rdsClientMock) DescribeDBParametersRequestCalls() []struct {
	DescribeDBParametersInput *rds.DescribeDBParametersInput
} {
	var calls []struct {
		DescribeDBParametersInput *rds.DescribeDBParametersInput
	}
	mock.lockDescribeDBParametersRequest.RLock()
	calls = mock.calls.DescribeDBParametersRequest
	mock.lockDescribeDBParametersRequest.RUnlock()
	return calls
}

// DescribeDBParametersWithContext calls DescribeDBParametersWithContextFunc.
func (mock *rdsClientMock) DescribeDBParametersWithContext(contextMoqParam context.Context, describeDBParametersInput *rds.DescribeDBParametersInput, options ...request.Option) (*rds.DescribeDBParametersOutput, error) {
	if mock.DescribeDBParametersWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBParametersWithContextFunc: method is nil but rdsClient.DescribeDBParametersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		DescribeDBParametersInput *rds.DescribeDBParametersInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		DescribeDBParametersInput: describeDBParametersInput,
		Options:                   options,
	}
	mock.lockDescribeDBParametersWithContext.Lock()
	mock.calls.DescribeDBParametersWithContext = append(mock.calls.DescribeDBParametersWithContext, callInfo)
	mock.lockDescribeDBParametersWithContext.Unlock()
	return mock.DescribeDBParametersWithContextFunc(contextMoqParam, describeDBParametersInput, options...)
}

// DescribeDBParametersWithContextCalls gets all the calls that were made to DescribeDBParametersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBParametersWithContextCalls())
func (mock *rdsClientMock) DescribeDBParametersWithContextCalls() []struct {
	ContextMoqParam           context.Context
	DescribeDBParametersInput *rds.DescribeDBParametersInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		DescribeDBParametersInput *rds.DescribeDBParametersInput
		Options                   []request.Option
	}
	mock.lockDescribeDBParametersWithContext.RLock()
	calls = mock.calls.DescribeDBParametersWithContext
	mock.lockDescribeDBParametersWithContext.RUnlock()
	return calls
}

// DescribeDBProxies calls DescribeDBProxiesFunc.
func (mock *rdsClientMock) DescribeDBProxies(describeDBProxiesInput *rds.DescribeDBProxiesInput) (*rds.DescribeDBProxiesOutput, error) {
	if mock.DescribeDBProxiesFunc == nil {
		panic("rdsClientMock.DescribeDBProxiesFunc: method is nil but rdsClient.DescribeDBProxies was just called")
	}
	callInfo := struct {
		DescribeDBProxiesInput *rds.DescribeDBProxiesInput
	}{
		DescribeDBProxiesInput: describeDBProxiesInput,
	}
	mock.lockDescribeDBProxies.Lock()
	mock.calls.DescribeDBProxies = append(mock.calls.DescribeDBProxies, callInfo)
	mock.lockDescribeDBProxies.Unlock()
	return mock.DescribeDBProxiesFunc(describeDBProxiesInput)
}

// DescribeDBProxiesCalls gets all the calls that were made to DescribeDBProxies.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxiesCalls())
func (mock *rdsClientMock) DescribeDBProxiesCalls() []struct {
	DescribeDBProxiesInput *rds.DescribeDBProxiesInput
} {
	var calls []struct {
		DescribeDBProxiesInput *rds.DescribeDBProxiesInput
	}
	mock.lockDescribeDBProxies.RLock()
	calls = mock.calls.DescribeDBProxies
	mock.lockDescribeDBProxies.RUnlock()
	return calls
}

// DescribeDBProxiesPages calls DescribeDBProxiesPagesFunc.
func (mock *rdsClientMock) DescribeDBProxiesPages(describeDBProxiesInput *rds.DescribeDBProxiesInput, fn func(*rds.DescribeDBProxiesOutput, bool) bool) error {
	if mock.DescribeDBProxiesPagesFunc == nil {
		panic("rdsClientMock.DescribeDBProxiesPagesFunc: method is nil but rdsClient.DescribeDBProxiesPages was just called")
	}
	callInfo := struct {
		DescribeDBProxiesInput *rds.DescribeDBProxiesInput
		Fn                     func(*rds.DescribeDBProxiesOutput, bool) bool
	}{
		DescribeDBProxiesInput: describeDBProxiesInput,
		Fn:                     fn,
	}
	mock.lockDescribeDBProxiesPages.Lock()
	mock.calls.DescribeDBProxiesPages = append(mock.calls.DescribeDBProxiesPages, callInfo)
	mock.lockDescribeDBProxiesPages.Unlock()
	return mock.DescribeDBProxiesPagesFunc(describeDBProxiesInput, fn)
}

// DescribeDBProxiesPagesCalls gets all the calls that were made to DescribeDBProxiesPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxiesPagesCalls())
func (mock *rdsClientMock) DescribeDBProxiesPagesCalls() []struct {
	DescribeDBProxiesInput *rds.DescribeDBProxiesInput
	Fn                     func(*rds.DescribeDBProxiesOutput, bool) bool
} {
	var calls []struct {
		DescribeDBProxiesInput *rds.DescribeDBProxiesInput
		Fn                     func(*rds.DescribeDBProxiesOutput, bool) bool
	}
	mock.lockDescribeDBProxiesPages.RLock()
	calls = mock.calls.DescribeDBProxiesPages
	mock.lockDescribeDBProxiesPages.RUnlock()
	return calls
}

// DescribeDBProxiesPagesWithContext calls DescribeDBProxiesPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxiesPagesWithContext(contextMoqParam context.Context, describeDBProxiesInput *rds.DescribeDBProxiesInput, fn func(*rds.DescribeDBProxiesOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBProxiesPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxiesPagesWithContextFunc: method is nil but rdsClient.DescribeDBProxiesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		DescribeDBProxiesInput *rds.DescribeDBProxiesInput
		Fn                     func(*rds.DescribeDBProxiesOutput, bool) bool
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		DescribeDBProxiesInput: describeDBProxiesInput,
		Fn:                     fn,
		Options:                options,
	}
	mock.lockDescribeDBProxiesPagesWithContext.Lock()
	mock.calls.DescribeDBProxiesPagesWithContext = append(mock.calls.DescribeDBProxiesPagesWithContext, callInfo)
	mock.lockDescribeDBProxiesPagesWithContext.Unlock()
	return mock.DescribeDBProxiesPagesWithContextFunc(contextMoqParam, describeDBProxiesInput, fn, options...)
}

// DescribeDBProxiesPagesWithContextCalls gets all the calls that were made to DescribeDBProxiesPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxiesPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxiesPagesWithContextCalls() []struct {
	ContextMoqParam        context.Context
	DescribeDBProxiesInput *rds.DescribeDBProxiesInput
	Fn                     func(*rds.DescribeDBProxiesOutput, bool) bool
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		DescribeDBProxiesInput *rds.DescribeDBProxiesInput
		Fn                     func(*rds.DescribeDBProxiesOutput, bool) bool
		Options                []request.Option
	}
	mock.lockDescribeDBProxiesPagesWithContext.RLock()
	calls = mock.calls.DescribeDBProxiesPagesWithContext
	mock.lockDescribeDBProxiesPagesWithContext.RUnlock()
	return calls
}

// DescribeDBProxiesRequest calls DescribeDBProxiesRequestFunc.
func (mock *rdsClientMock) DescribeDBProxiesRequest(describeDBProxiesInput *rds.DescribeDBProxiesInput) (*request.Request, *rds.DescribeDBProxiesOutput) {
	if mock.DescribeDBProxiesRequestFunc == nil {
		panic("rdsClientMock.DescribeDBProxiesRequestFunc: method is nil but rdsClient.DescribeDBProxiesRequest was just called")
	}
	callInfo := struct {
		DescribeDBProxiesInput *rds.DescribeDBProxiesInput
	}{
		DescribeDBProxiesInput: describeDBProxiesInput,
	}
	mock.lockDescribeDBProxiesRequest.Lock()
	mock.calls.DescribeDBProxiesRequest = append(mock.calls.DescribeDBProxiesRequest, callInfo)
	mock.lockDescribeDBProxiesRequest.Unlock()
	return mock.DescribeDBProxiesRequestFunc(describeDBProxiesInput)
}

// DescribeDBProxiesRequestCalls gets all the calls that were made to DescribeDBProxiesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxiesRequestCalls())
func (mock *rdsClientMock) DescribeDBProxiesRequestCalls() []struct {
	DescribeDBProxiesInput *rds.DescribeDBProxiesInput
} {
	var calls []struct {
		DescribeDBProxiesInput *rds.DescribeDBProxiesInput
	}
	mock.lockDescribeDBProxiesRequest.RLock()
	calls = mock.calls.DescribeDBProxiesRequest
	mock.lockDescribeDBProxiesRequest.RUnlock()
	return calls
}

// DescribeDBProxiesWithContext calls DescribeDBProxiesWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxiesWithContext(contextMoqParam context.Context, describeDBProxiesInput *rds.DescribeDBProxiesInput, options ...request.Option) (*rds.DescribeDBProxiesOutput, error) {
	if mock.DescribeDBProxiesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxiesWithContextFunc: method is nil but rdsClient.DescribeDBProxiesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		DescribeDBProxiesInput *rds.DescribeDBProxiesInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		DescribeDBProxiesInput: describeDBProxiesInput,
		Options:                options,
	}
	mock.lockDescribeDBProxiesWithContext.Lock()
	mock.calls.DescribeDBProxiesWithContext = append(mock.calls.DescribeDBProxiesWithContext, callInfo)
	mock.lockDescribeDBProxiesWithContext.Unlock()
	return mock.DescribeDBProxiesWithContextFunc(contextMoqParam, describeDBProxiesInput, options...)
}

// DescribeDBProxiesWithContextCalls gets all the calls that were made to DescribeDBProxiesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxiesWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxiesWithContextCalls() []struct {
	ContextMoqParam        context.Context
	DescribeDBProxiesInput *rds.DescribeDBProxiesInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		DescribeDBProxiesInput *rds.DescribeDBProxiesInput
		Options                []request.Option
	}
	mock.lockDescribeDBProxiesWithContext.RLock()
	calls = mock.calls.DescribeDBProxiesWithContext
	mock.lockDescribeDBProxiesWithContext.RUnlock()
	return calls
}

// DescribeDBProxyEndpoints calls DescribeDBProxyEndpointsFunc.
func (mock *rdsClientMock) DescribeDBProxyEndpoints(describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput) (*rds.DescribeDBProxyEndpointsOutput, error) {
	if mock.DescribeDBProxyEndpointsFunc == nil {
		panic("rdsClientMock.DescribeDBProxyEndpointsFunc: method is nil but rdsClient.DescribeDBProxyEndpoints was just called")
	}
	callInfo := struct {
		DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
	}{
		DescribeDBProxyEndpointsInput: describeDBProxyEndpointsInput,
	}
	mock.lockDescribeDBProxyEndpoints.Lock()
	mock.calls.DescribeDBProxyEndpoints = append(mock.calls.DescribeDBProxyEndpoints, callInfo)
	mock.lockDescribeDBProxyEndpoints.Unlock()
	return mock.DescribeDBProxyEndpointsFunc(describeDBProxyEndpointsInput)
}

// DescribeDBProxyEndpointsCalls gets all the calls that were made to DescribeDBProxyEndpoints.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyEndpointsCalls())
func (mock *rdsClientMock) DescribeDBProxyEndpointsCalls() []struct {
	DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
} {
	var calls []struct {
		DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
	}
	mock.lockDescribeDBProxyEndpoints.RLock()
	calls = mock.calls.DescribeDBProxyEndpoints
	mock.lockDescribeDBProxyEndpoints.RUnlock()
	return calls
}

// DescribeDBProxyEndpointsPages calls DescribeDBProxyEndpointsPagesFunc.
func (mock *rdsClientMock) DescribeDBProxyEndpointsPages(describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput, fn func(*rds.DescribeDBProxyEndpointsOutput, bool) bool) error {
	if mock.DescribeDBProxyEndpointsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBProxyEndpointsPagesFunc: method is nil but rdsClient.DescribeDBProxyEndpointsPages was just called")
	}
	callInfo := struct {
		DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
		Fn                            func(*rds.DescribeDBProxyEndpointsOutput, bool) bool
	}{
		DescribeDBProxyEndpointsInput: describeDBProxyEndpointsInput,
		Fn:                            fn,
	}
	mock.lockDescribeDBProxyEndpointsPages.Lock()
	mock.calls.DescribeDBProxyEndpointsPages = append(mock.calls.DescribeDBProxyEndpointsPages, callInfo)
	mock.lockDescribeDBProxyEndpointsPages.Unlock()
	return mock.DescribeDBProxyEndpointsPagesFunc(describeDBProxyEndpointsInput, fn)
}

// DescribeDBProxyEndpointsPagesCalls gets all the calls that were made to DescribeDBProxyEndpointsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyEndpointsPagesCalls())
func (mock *rdsClientMock) DescribeDBProxyEndpointsPagesCalls() []struct {
	DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
	Fn                            func(*rds.DescribeDBProxyEndpointsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
		Fn                            func(*rds.DescribeDBProxyEndpointsOutput, bool) bool
	}
	mock.lockDescribeDBProxyEndpointsPages.RLock()
	calls = mock.calls.DescribeDBProxyEndpointsPages
	mock.lockDescribeDBProxyEndpointsPages.RUnlock()
	return calls
}

// DescribeDBProxyEndpointsPagesWithContext calls DescribeDBProxyEndpointsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxyEndpointsPagesWithContext(contextMoqParam context.Context, describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput, fn func(*rds.DescribeDBProxyEndpointsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBProxyEndpointsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxyEndpointsPagesWithContextFunc: method is nil but rdsClient.DescribeDBProxyEndpointsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
		Fn                            func(*rds.DescribeDBProxyEndpointsOutput, bool) bool
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DescribeDBProxyEndpointsInput: describeDBProxyEndpointsInput,
		Fn:                            fn,
		Options:                       options,
	}
	mock.lockDescribeDBProxyEndpointsPagesWithContext.Lock()
	mock.calls.DescribeDBProxyEndpointsPagesWithContext = append(mock.calls.DescribeDBProxyEndpointsPagesWithContext, callInfo)
	mock.lockDescribeDBProxyEndpointsPagesWithContext.Unlock()
	return mock.DescribeDBProxyEndpointsPagesWithContextFunc(contextMoqParam, describeDBProxyEndpointsInput, fn, options...)
}

// DescribeDBProxyEndpointsPagesWithContextCalls gets all the calls that were made to DescribeDBProxyEndpointsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyEndpointsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxyEndpointsPagesWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
	Fn                            func(*rds.DescribeDBProxyEndpointsOutput, bool) bool
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
		Fn                            func(*rds.DescribeDBProxyEndpointsOutput, bool) bool
		Options                       []request.Option
	}
	mock.lockDescribeDBProxyEndpointsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBProxyEndpointsPagesWithContext
	mock.lockDescribeDBProxyEndpointsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBProxyEndpointsRequest calls DescribeDBProxyEndpointsRequestFunc.
func (mock *rdsClientMock) DescribeDBProxyEndpointsRequest(describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput) (*request.Request, *rds.DescribeDBProxyEndpointsOutput) {
	if mock.DescribeDBProxyEndpointsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBProxyEndpointsRequestFunc: method is nil but rdsClient.DescribeDBProxyEndpointsRequest was just called")
	}
	callInfo := struct {
		DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
	}{
		DescribeDBProxyEndpointsInput: describeDBProxyEndpointsInput,
	}
	mock.lockDescribeDBProxyEndpointsRequest.Lock()
	mock.calls.DescribeDBProxyEndpointsRequest = append(mock.calls.DescribeDBProxyEndpointsRequest, callInfo)
	mock.lockDescribeDBProxyEndpointsRequest.Unlock()
	return mock.DescribeDBProxyEndpointsRequestFunc(describeDBProxyEndpointsInput)
}

// DescribeDBProxyEndpointsRequestCalls gets all the calls that were made to DescribeDBProxyEndpointsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyEndpointsRequestCalls())
func (mock *rdsClientMock) DescribeDBProxyEndpointsRequestCalls() []struct {
	DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
} {
	var calls []struct {
		DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
	}
	mock.lockDescribeDBProxyEndpointsRequest.RLock()
	calls = mock.calls.DescribeDBProxyEndpointsRequest
	mock.lockDescribeDBProxyEndpointsRequest.RUnlock()
	return calls
}

// DescribeDBProxyEndpointsWithContext calls DescribeDBProxyEndpointsWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxyEndpointsWithContext(contextMoqParam context.Context, describeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput, options ...request.Option) (*rds.DescribeDBProxyEndpointsOutput, error) {
	if mock.DescribeDBProxyEndpointsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxyEndpointsWithContextFunc: method is nil but rdsClient.DescribeDBProxyEndpointsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DescribeDBProxyEndpointsInput: describeDBProxyEndpointsInput,
		Options:                       options,
	}
	mock.lockDescribeDBProxyEndpointsWithContext.Lock()
	mock.calls.DescribeDBProxyEndpointsWithContext = append(mock.calls.DescribeDBProxyEndpointsWithContext, callInfo)
	mock.lockDescribeDBProxyEndpointsWithContext.Unlock()
	return mock.DescribeDBProxyEndpointsWithContextFunc(contextMoqParam, describeDBProxyEndpointsInput, options...)
}

// DescribeDBProxyEndpointsWithContextCalls gets all the calls that were made to DescribeDBProxyEndpointsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyEndpointsWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxyEndpointsWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DescribeDBProxyEndpointsInput *rds.DescribeDBProxyEndpointsInput
		Options                       []request.Option
	}
	mock.lockDescribeDBProxyEndpointsWithContext.RLock()
	calls = mock.calls.DescribeDBProxyEndpointsWithContext
	mock.lockDescribeDBProxyEndpointsWithContext.RUnlock()
	return calls
}

// DescribeDBProxyTargetGroups calls DescribeDBProxyTargetGroupsFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetGroups(describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	if mock.DescribeDBProxyTargetGroupsFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetGroupsFunc: method is nil but rdsClient.DescribeDBProxyTargetGroups was just called")
	}
	callInfo := struct {
		DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
	}{
		DescribeDBProxyTargetGroupsInput: describeDBProxyTargetGroupsInput,
	}
	mock.lockDescribeDBProxyTargetGroups.Lock()
	mock.calls.DescribeDBProxyTargetGroups = append(mock.calls.DescribeDBProxyTargetGroups, callInfo)
	mock.lockDescribeDBProxyTargetGroups.Unlock()
	return mock.DescribeDBProxyTargetGroupsFunc(describeDBProxyTargetGroupsInput)
}

// DescribeDBProxyTargetGroupsCalls gets all the calls that were made to DescribeDBProxyTargetGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetGroupsCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsCalls() []struct {
	DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
} {
	var calls []struct {
		DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
	}
	mock.lockDescribeDBProxyTargetGroups.RLock()
	calls = mock.calls.DescribeDBProxyTargetGroups
	mock.lockDescribeDBProxyTargetGroups.RUnlock()
	return calls
}

// DescribeDBProxyTargetGroupsPages calls DescribeDBProxyTargetGroupsPagesFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsPages(describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput, fn func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool) error {
	if mock.DescribeDBProxyTargetGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetGroupsPagesFunc: method is nil but rdsClient.DescribeDBProxyTargetGroupsPages was just called")
	}
	callInfo := struct {
		DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
		Fn                               func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
	}{
		DescribeDBProxyTargetGroupsInput: describeDBProxyTargetGroupsInput,
		Fn:                               fn,
	}
	mock.lockDescribeDBProxyTargetGroupsPages.Lock()
	mock.calls.DescribeDBProxyTargetGroupsPages = append(mock.calls.DescribeDBProxyTargetGroupsPages, callInfo)
	mock.lockDescribeDBProxyTargetGroupsPages.Unlock()
	return mock.DescribeDBProxyTargetGroupsPagesFunc(describeDBProxyTargetGroupsInput, fn)
}

// DescribeDBProxyTargetGroupsPagesCalls gets all the calls that were made to DescribeDBProxyTargetGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetGroupsPagesCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsPagesCalls() []struct {
	DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
	Fn                               func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
		Fn                               func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
	}
	mock.lockDescribeDBProxyTargetGroupsPages.RLock()
	calls = mock.calls.DescribeDBProxyTargetGroupsPages
	mock.lockDescribeDBProxyTargetGroupsPages.RUnlock()
	return calls
}

// DescribeDBProxyTargetGroupsPagesWithContext calls DescribeDBProxyTargetGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsPagesWithContext(contextMoqParam context.Context, describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput, fn func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBProxyTargetGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBProxyTargetGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
		Fn                               func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeDBProxyTargetGroupsInput: describeDBProxyTargetGroupsInput,
		Fn:                               fn,
		Options:                          options,
	}
	mock.lockDescribeDBProxyTargetGroupsPagesWithContext.Lock()
	mock.calls.DescribeDBProxyTargetGroupsPagesWithContext = append(mock.calls.DescribeDBProxyTargetGroupsPagesWithContext, callInfo)
	mock.lockDescribeDBProxyTargetGroupsPagesWithContext.Unlock()
	return mock.DescribeDBProxyTargetGroupsPagesWithContextFunc(contextMoqParam, describeDBProxyTargetGroupsInput, fn, options...)
}

// DescribeDBProxyTargetGroupsPagesWithContextCalls gets all the calls that were made to DescribeDBProxyTargetGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsPagesWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
	Fn                               func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
		Fn                               func(*rds.DescribeDBProxyTargetGroupsOutput, bool) bool
		Options                          []request.Option
	}
	mock.lockDescribeDBProxyTargetGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBProxyTargetGroupsPagesWithContext
	mock.lockDescribeDBProxyTargetGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBProxyTargetGroupsRequest calls DescribeDBProxyTargetGroupsRequestFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsRequest(describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput) (*request.Request, *rds.DescribeDBProxyTargetGroupsOutput) {
	if mock.DescribeDBProxyTargetGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetGroupsRequestFunc: method is nil but rdsClient.DescribeDBProxyTargetGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
	}{
		DescribeDBProxyTargetGroupsInput: describeDBProxyTargetGroupsInput,
	}
	mock.lockDescribeDBProxyTargetGroupsRequest.Lock()
	mock.calls.DescribeDBProxyTargetGroupsRequest = append(mock.calls.DescribeDBProxyTargetGroupsRequest, callInfo)
	mock.lockDescribeDBProxyTargetGroupsRequest.Unlock()
	return mock.DescribeDBProxyTargetGroupsRequestFunc(describeDBProxyTargetGroupsInput)
}

// DescribeDBProxyTargetGroupsRequestCalls gets all the calls that were made to DescribeDBProxyTargetGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetGroupsRequestCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsRequestCalls() []struct {
	DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
} {
	var calls []struct {
		DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
	}
	mock.lockDescribeDBProxyTargetGroupsRequest.RLock()
	calls = mock.calls.DescribeDBProxyTargetGroupsRequest
	mock.lockDescribeDBProxyTargetGroupsRequest.RUnlock()
	return calls
}

// DescribeDBProxyTargetGroupsWithContext calls DescribeDBProxyTargetGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsWithContext(contextMoqParam context.Context, describeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput, options ...request.Option) (*rds.DescribeDBProxyTargetGroupsOutput, error) {
	if mock.DescribeDBProxyTargetGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetGroupsWithContextFunc: method is nil but rdsClient.DescribeDBProxyTargetGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeDBProxyTargetGroupsInput: describeDBProxyTargetGroupsInput,
		Options:                          options,
	}
	mock.lockDescribeDBProxyTargetGroupsWithContext.Lock()
	mock.calls.DescribeDBProxyTargetGroupsWithContext = append(mock.calls.DescribeDBProxyTargetGroupsWithContext, callInfo)
	mock.lockDescribeDBProxyTargetGroupsWithContext.Unlock()
	return mock.DescribeDBProxyTargetGroupsWithContextFunc(contextMoqParam, describeDBProxyTargetGroupsInput, options...)
}

// DescribeDBProxyTargetGroupsWithContextCalls gets all the calls that were made to DescribeDBProxyTargetGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetGroupsWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeDBProxyTargetGroupsInput *rds.DescribeDBProxyTargetGroupsInput
		Options                          []request.Option
	}
	mock.lockDescribeDBProxyTargetGroupsWithContext.RLock()
	calls = mock.calls.DescribeDBProxyTargetGroupsWithContext
	mock.lockDescribeDBProxyTargetGroupsWithContext.RUnlock()
	return calls
}

// DescribeDBProxyTargets calls DescribeDBProxyTargetsFunc.
func (mock *rdsClientMock) DescribeDBProxyTargets(describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput) (*rds.DescribeDBProxyTargetsOutput, error) {
	if mock.DescribeDBProxyTargetsFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetsFunc: method is nil but rdsClient.DescribeDBProxyTargets was just called")
	}
	callInfo := struct {
		DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
	}{
		DescribeDBProxyTargetsInput: describeDBProxyTargetsInput,
	}
	mock.lockDescribeDBProxyTargets.Lock()
	mock.calls.DescribeDBProxyTargets = append(mock.calls.DescribeDBProxyTargets, callInfo)
	mock.lockDescribeDBProxyTargets.Unlock()
	return mock.DescribeDBProxyTargetsFunc(describeDBProxyTargetsInput)
}

// DescribeDBProxyTargetsCalls gets all the calls that were made to DescribeDBProxyTargets.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetsCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetsCalls() []struct {
	DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
} {
	var calls []struct {
		DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
	}
	mock.lockDescribeDBProxyTargets.RLock()
	calls = mock.calls.DescribeDBProxyTargets
	mock.lockDescribeDBProxyTargets.RUnlock()
	return calls
}

// DescribeDBProxyTargetsPages calls DescribeDBProxyTargetsPagesFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetsPages(describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput, fn func(*rds.DescribeDBProxyTargetsOutput, bool) bool) error {
	if mock.DescribeDBProxyTargetsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetsPagesFunc: method is nil but rdsClient.DescribeDBProxyTargetsPages was just called")
	}
	callInfo := struct {
		DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
		Fn                          func(*rds.DescribeDBProxyTargetsOutput, bool) bool
	}{
		DescribeDBProxyTargetsInput: describeDBProxyTargetsInput,
		Fn:                          fn,
	}
	mock.lockDescribeDBProxyTargetsPages.Lock()
	mock.calls.DescribeDBProxyTargetsPages = append(mock.calls.DescribeDBProxyTargetsPages, callInfo)
	mock.lockDescribeDBProxyTargetsPages.Unlock()
	return mock.DescribeDBProxyTargetsPagesFunc(describeDBProxyTargetsInput, fn)
}

// DescribeDBProxyTargetsPagesCalls gets all the calls that were made to DescribeDBProxyTargetsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetsPagesCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetsPagesCalls() []struct {
	DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
	Fn                          func(*rds.DescribeDBProxyTargetsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
		Fn                          func(*rds.DescribeDBProxyTargetsOutput, bool) bool
	}
	mock.lockDescribeDBProxyTargetsPages.RLock()
	calls = mock.calls.DescribeDBProxyTargetsPages
	mock.lockDescribeDBProxyTargetsPages.RUnlock()
	return calls
}

// DescribeDBProxyTargetsPagesWithContext calls DescribeDBProxyTargetsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetsPagesWithContext(contextMoqParam context.Context, describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput, fn func(*rds.DescribeDBProxyTargetsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBProxyTargetsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetsPagesWithContextFunc: method is nil but rdsClient.DescribeDBProxyTargetsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
		Fn                          func(*rds.DescribeDBProxyTargetsOutput, bool) bool
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DescribeDBProxyTargetsInput: describeDBProxyTargetsInput,
		Fn:                          fn,
		Options:                     options,
	}
	mock.lockDescribeDBProxyTargetsPagesWithContext.Lock()
	mock.calls.DescribeDBProxyTargetsPagesWithContext = append(mock.calls.DescribeDBProxyTargetsPagesWithContext, callInfo)
	mock.lockDescribeDBProxyTargetsPagesWithContext.Unlock()
	return mock.DescribeDBProxyTargetsPagesWithContextFunc(contextMoqParam, describeDBProxyTargetsInput, fn, options...)
}

// DescribeDBProxyTargetsPagesWithContextCalls gets all the calls that were made to DescribeDBProxyTargetsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetsPagesWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
	Fn                          func(*rds.DescribeDBProxyTargetsOutput, bool) bool
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
		Fn                          func(*rds.DescribeDBProxyTargetsOutput, bool) bool
		Options                     []request.Option
	}
	mock.lockDescribeDBProxyTargetsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBProxyTargetsPagesWithContext
	mock.lockDescribeDBProxyTargetsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBProxyTargetsRequest calls DescribeDBProxyTargetsRequestFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetsRequest(describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput) (*request.Request, *rds.DescribeDBProxyTargetsOutput) {
	if mock.DescribeDBProxyTargetsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetsRequestFunc: method is nil but rdsClient.DescribeDBProxyTargetsRequest was just called")
	}
	callInfo := struct {
		DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
	}{
		DescribeDBProxyTargetsInput: describeDBProxyTargetsInput,
	}
	mock.lockDescribeDBProxyTargetsRequest.Lock()
	mock.calls.DescribeDBProxyTargetsRequest = append(mock.calls.DescribeDBProxyTargetsRequest, callInfo)
	mock.lockDescribeDBProxyTargetsRequest.Unlock()
	return mock.DescribeDBProxyTargetsRequestFunc(describeDBProxyTargetsInput)
}

// DescribeDBProxyTargetsRequestCalls gets all the calls that were made to DescribeDBProxyTargetsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetsRequestCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetsRequestCalls() []struct {
	DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
} {
	var calls []struct {
		DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
	}
	mock.lockDescribeDBProxyTargetsRequest.RLock()
	calls = mock.calls.DescribeDBProxyTargetsRequest
	mock.lockDescribeDBProxyTargetsRequest.RUnlock()
	return calls
}

// DescribeDBProxyTargetsWithContext calls DescribeDBProxyTargetsWithContextFunc.
func (mock *rdsClientMock) DescribeDBProxyTargetsWithContext(contextMoqParam context.Context, describeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput, options ...request.Option) (*rds.DescribeDBProxyTargetsOutput, error) {
	if mock.DescribeDBProxyTargetsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBProxyTargetsWithContextFunc: method is nil but rdsClient.DescribeDBProxyTargetsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DescribeDBProxyTargetsInput: describeDBProxyTargetsInput,
		Options:                     options,
	}
	mock.lockDescribeDBProxyTargetsWithContext.Lock()
	mock.calls.DescribeDBProxyTargetsWithContext = append(mock.calls.DescribeDBProxyTargetsWithContext, callInfo)
	mock.lockDescribeDBProxyTargetsWithContext.Unlock()
	return mock.DescribeDBProxyTargetsWithContextFunc(contextMoqParam, describeDBProxyTargetsInput, options...)
}

// DescribeDBProxyTargetsWithContextCalls gets all the calls that were made to DescribeDBProxyTargetsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBProxyTargetsWithContextCalls())
func (mock *rdsClientMock) DescribeDBProxyTargetsWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DescribeDBProxyTargetsInput *rds.DescribeDBProxyTargetsInput
		Options                     []request.Option
	}
	mock.lockDescribeDBProxyTargetsWithContext.RLock()
	calls = mock.calls.DescribeDBProxyTargetsWithContext
	mock.lockDescribeDBProxyTargetsWithContext.RUnlock()
	return calls
}

// DescribeDBSecurityGroups calls DescribeDBSecurityGroupsFunc.
func (mock *rdsClientMock) DescribeDBSecurityGroups(describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput) (*rds.DescribeDBSecurityGroupsOutput, error) {
	if mock.DescribeDBSecurityGroupsFunc == nil {
		panic("rdsClientMock.DescribeDBSecurityGroupsFunc: method is nil but rdsClient.DescribeDBSecurityGroups was just called")
	}
	callInfo := struct {
		DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
	}{
		DescribeDBSecurityGroupsInput: describeDBSecurityGroupsInput,
	}
	mock.lockDescribeDBSecurityGroups.Lock()
	mock.calls.DescribeDBSecurityGroups = append(mock.calls.DescribeDBSecurityGroups, callInfo)
	mock.lockDescribeDBSecurityGroups.Unlock()
	return mock.DescribeDBSecurityGroupsFunc(describeDBSecurityGroupsInput)
}

// DescribeDBSecurityGroupsCalls gets all the calls that were made to DescribeDBSecurityGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSecurityGroupsCalls())
func (mock *rdsClientMock) DescribeDBSecurityGroupsCalls() []struct {
	DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
} {
	var calls []struct {
		DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
	}
	mock.lockDescribeDBSecurityGroups.RLock()
	calls = mock.calls.DescribeDBSecurityGroups
	mock.lockDescribeDBSecurityGroups.RUnlock()
	return calls
}

// DescribeDBSecurityGroupsPages calls DescribeDBSecurityGroupsPagesFunc.
func (mock *rdsClientMock) DescribeDBSecurityGroupsPages(describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput, fn func(*rds.DescribeDBSecurityGroupsOutput, bool) bool) error {
	if mock.DescribeDBSecurityGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBSecurityGroupsPagesFunc: method is nil but rdsClient.DescribeDBSecurityGroupsPages was just called")
	}
	callInfo := struct {
		DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
		Fn                            func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
	}{
		DescribeDBSecurityGroupsInput: describeDBSecurityGroupsInput,
		Fn:                            fn,
	}
	mock.lockDescribeDBSecurityGroupsPages.Lock()
	mock.calls.DescribeDBSecurityGroupsPages = append(mock.calls.DescribeDBSecurityGroupsPages, callInfo)
	mock.lockDescribeDBSecurityGroupsPages.Unlock()
	return mock.DescribeDBSecurityGroupsPagesFunc(describeDBSecurityGroupsInput, fn)
}

// DescribeDBSecurityGroupsPagesCalls gets all the calls that were made to DescribeDBSecurityGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSecurityGroupsPagesCalls())
func (mock *rdsClientMock) DescribeDBSecurityGroupsPagesCalls() []struct {
	DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
	Fn                            func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
		Fn                            func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
	}
	mock.lockDescribeDBSecurityGroupsPages.RLock()
	calls = mock.calls.DescribeDBSecurityGroupsPages
	mock.lockDescribeDBSecurityGroupsPages.RUnlock()
	return calls
}

// DescribeDBSecurityGroupsPagesWithContext calls DescribeDBSecurityGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBSecurityGroupsPagesWithContext(contextMoqParam context.Context, describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput, fn func(*rds.DescribeDBSecurityGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBSecurityGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSecurityGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBSecurityGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
		Fn                            func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DescribeDBSecurityGroupsInput: describeDBSecurityGroupsInput,
		Fn:                            fn,
		Options:                       options,
	}
	mock.lockDescribeDBSecurityGroupsPagesWithContext.Lock()
	mock.calls.DescribeDBSecurityGroupsPagesWithContext = append(mock.calls.DescribeDBSecurityGroupsPagesWithContext, callInfo)
	mock.lockDescribeDBSecurityGroupsPagesWithContext.Unlock()
	return mock.DescribeDBSecurityGroupsPagesWithContextFunc(contextMoqParam, describeDBSecurityGroupsInput, fn, options...)
}

// DescribeDBSecurityGroupsPagesWithContextCalls gets all the calls that were made to DescribeDBSecurityGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSecurityGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBSecurityGroupsPagesWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
	Fn                            func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
		Fn                            func(*rds.DescribeDBSecurityGroupsOutput, bool) bool
		Options                       []request.Option
	}
	mock.lockDescribeDBSecurityGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBSecurityGroupsPagesWithContext
	mock.lockDescribeDBSecurityGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBSecurityGroupsRequest calls DescribeDBSecurityGroupsRequestFunc.
func (mock *rdsClientMock) DescribeDBSecurityGroupsRequest(describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput) (*request.Request, *rds.DescribeDBSecurityGroupsOutput) {
	if mock.DescribeDBSecurityGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBSecurityGroupsRequestFunc: method is nil but rdsClient.DescribeDBSecurityGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
	}{
		DescribeDBSecurityGroupsInput: describeDBSecurityGroupsInput,
	}
	mock.lockDescribeDBSecurityGroupsRequest.Lock()
	mock.calls.DescribeDBSecurityGroupsRequest = append(mock.calls.DescribeDBSecurityGroupsRequest, callInfo)
	mock.lockDescribeDBSecurityGroupsRequest.Unlock()
	return mock.DescribeDBSecurityGroupsRequestFunc(describeDBSecurityGroupsInput)
}

// DescribeDBSecurityGroupsRequestCalls gets all the calls that were made to DescribeDBSecurityGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSecurityGroupsRequestCalls())
func (mock *rdsClientMock) DescribeDBSecurityGroupsRequestCalls() []struct {
	DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
} {
	var calls []struct {
		DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
	}
	mock.lockDescribeDBSecurityGroupsRequest.RLock()
	calls = mock.calls.DescribeDBSecurityGroupsRequest
	mock.lockDescribeDBSecurityGroupsRequest.RUnlock()
	return calls
}

// DescribeDBSecurityGroupsWithContext calls DescribeDBSecurityGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBSecurityGroupsWithContext(contextMoqParam context.Context, describeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput, options ...request.Option) (*rds.DescribeDBSecurityGroupsOutput, error) {
	if mock.DescribeDBSecurityGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSecurityGroupsWithContextFunc: method is nil but rdsClient.DescribeDBSecurityGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DescribeDBSecurityGroupsInput: describeDBSecurityGroupsInput,
		Options:                       options,
	}
	mock.lockDescribeDBSecurityGroupsWithContext.Lock()
	mock.calls.DescribeDBSecurityGroupsWithContext = append(mock.calls.DescribeDBSecurityGroupsWithContext, callInfo)
	mock.lockDescribeDBSecurityGroupsWithContext.Unlock()
	return mock.DescribeDBSecurityGroupsWithContextFunc(contextMoqParam, describeDBSecurityGroupsInput, options...)
}

// DescribeDBSecurityGroupsWithContextCalls gets all the calls that were made to DescribeDBSecurityGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSecurityGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBSecurityGroupsWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DescribeDBSecurityGroupsInput *rds.DescribeDBSecurityGroupsInput
		Options                       []request.Option
	}
	mock.lockDescribeDBSecurityGroupsWithContext.RLock()
	calls = mock.calls.DescribeDBSecurityGroupsWithContext
	mock.lockDescribeDBSecurityGroupsWithContext.RUnlock()
	return calls
}

// DescribeDBSnapshotAttributes calls DescribeDBSnapshotAttributesFunc.
func (mock *rdsClientMock) DescribeDBSnapshotAttributes(describeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	if mock.DescribeDBSnapshotAttributesFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotAttributesFunc: method is nil but rdsClient.DescribeDBSnapshotAttributes was just called")
	}
	callInfo := struct {
		DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
	}{
		DescribeDBSnapshotAttributesInput: describeDBSnapshotAttributesInput,
	}
	mock.lockDescribeDBSnapshotAttributes.Lock()
	mock.calls.DescribeDBSnapshotAttributes = append(mock.calls.DescribeDBSnapshotAttributes, callInfo)
	mock.lockDescribeDBSnapshotAttributes.Unlock()
	return mock.DescribeDBSnapshotAttributesFunc(describeDBSnapshotAttributesInput)
}

// DescribeDBSnapshotAttributesCalls gets all the calls that were made to DescribeDBSnapshotAttributes.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotAttributesCalls())
func (mock *rdsClientMock) DescribeDBSnapshotAttributesCalls() []struct {
	DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
} {
	var calls []struct {
		DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
	}
	mock.lockDescribeDBSnapshotAttributes.RLock()
	calls = mock.calls.DescribeDBSnapshotAttributes
	mock.lockDescribeDBSnapshotAttributes.RUnlock()
	return calls
}

// DescribeDBSnapshotAttributesRequest calls DescribeDBSnapshotAttributesRequestFunc.
func (mock *rdsClientMock) DescribeDBSnapshotAttributesRequest(describeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput) (*request.Request, *rds.DescribeDBSnapshotAttributesOutput) {
	if mock.DescribeDBSnapshotAttributesRequestFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotAttributesRequestFunc: method is nil but rdsClient.DescribeDBSnapshotAttributesRequest was just called")
	}
	callInfo := struct {
		DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
	}{
		DescribeDBSnapshotAttributesInput: describeDBSnapshotAttributesInput,
	}
	mock.lockDescribeDBSnapshotAttributesRequest.Lock()
	mock.calls.DescribeDBSnapshotAttributesRequest = append(mock.calls.DescribeDBSnapshotAttributesRequest, callInfo)
	mock.lockDescribeDBSnapshotAttributesRequest.Unlock()
	return mock.DescribeDBSnapshotAttributesRequestFunc(describeDBSnapshotAttributesInput)
}

// DescribeDBSnapshotAttributesRequestCalls gets all the calls that were made to DescribeDBSnapshotAttributesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotAttributesRequestCalls())
func (mock *rdsClientMock) DescribeDBSnapshotAttributesRequestCalls() []struct {
	DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
} {
	var calls []struct {
		DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
	}
	mock.lockDescribeDBSnapshotAttributesRequest.RLock()
	calls = mock.calls.DescribeDBSnapshotAttributesRequest
	mock.lockDescribeDBSnapshotAttributesRequest.RUnlock()
	return calls
}

// DescribeDBSnapshotAttributesWithContext calls DescribeDBSnapshotAttributesWithContextFunc.
func (mock *rdsClientMock) DescribeDBSnapshotAttributesWithContext(contextMoqParam context.Context, describeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput, options ...request.Option) (*rds.DescribeDBSnapshotAttributesOutput, error) {
	if mock.DescribeDBSnapshotAttributesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotAttributesWithContextFunc: method is nil but rdsClient.DescribeDBSnapshotAttributesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		DescribeDBSnapshotAttributesInput: describeDBSnapshotAttributesInput,
		Options:                           options,
	}
	mock.lockDescribeDBSnapshotAttributesWithContext.Lock()
	mock.calls.DescribeDBSnapshotAttributesWithContext = append(mock.calls.DescribeDBSnapshotAttributesWithContext, callInfo)
	mock.lockDescribeDBSnapshotAttributesWithContext.Unlock()
	return mock.DescribeDBSnapshotAttributesWithContextFunc(contextMoqParam, describeDBSnapshotAttributesInput, options...)
}

// DescribeDBSnapshotAttributesWithContextCalls gets all the calls that were made to DescribeDBSnapshotAttributesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotAttributesWithContextCalls())
func (mock *rdsClientMock) DescribeDBSnapshotAttributesWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		DescribeDBSnapshotAttributesInput *rds.DescribeDBSnapshotAttributesInput
		Options                           []request.Option
	}
	mock.lockDescribeDBSnapshotAttributesWithContext.RLock()
	calls = mock.calls.DescribeDBSnapshotAttributesWithContext
	mock.lockDescribeDBSnapshotAttributesWithContext.RUnlock()
	return calls
}

// DescribeDBSnapshots calls DescribeDBSnapshotsFunc.
func (mock *rdsClientMock) DescribeDBSnapshots(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) (*rds.DescribeDBSnapshotsOutput, error) {
	if mock.DescribeDBSnapshotsFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotsFunc: method is nil but rdsClient.DescribeDBSnapshots was just called")
	}
	callInfo := struct {
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	}{
		DescribeDBSnapshotsInput: describeDBSnapshotsInput,
	}
	mock.lockDescribeDBSnapshots.Lock()
	mock.calls.DescribeDBSnapshots = append(mock.calls.DescribeDBSnapshots, callInfo)
	mock.lockDescribeDBSnapshots.Unlock()
	return mock.DescribeDBSnapshotsFunc(describeDBSnapshotsInput)
}

// DescribeDBSnapshotsCalls gets all the calls that were made to DescribeDBSnapshots.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotsCalls())
func (mock *rdsClientMock) DescribeDBSnapshotsCalls() []struct {
	DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
} {
	var calls []struct {
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	}
	mock.lockDescribeDBSnapshots.RLock()
	calls = mock.calls.DescribeDBSnapshots
	mock.lockDescribeDBSnapshots.RUnlock()
	return calls
}

// DescribeDBSnapshotsPages calls DescribeDBSnapshotsPagesFunc.
func (mock *rdsClientMock) DescribeDBSnapshotsPages(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, fn func(*rds.DescribeDBSnapshotsOutput, bool) bool) error {
	if mock.DescribeDBSnapshotsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotsPagesFunc: method is nil but rdsClient.DescribeDBSnapshotsPages was just called")
	}
	callInfo := struct {
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		Fn                       func(*rds.DescribeDBSnapshotsOutput, bool) bool
	}{
		DescribeDBSnapshotsInput: describeDBSnapshotsInput,
		Fn:                       fn,
	}
	mock.lockDescribeDBSnapshotsPages.Lock()
	mock.calls.DescribeDBSnapshotsPages = append(mock.calls.DescribeDBSnapshotsPages, callInfo)
	mock.lockDescribeDBSnapshotsPages.Unlock()
	return mock.DescribeDBSnapshotsPagesFunc(describeDBSnapshotsInput, fn)
}

// DescribeDBSnapshotsPagesCalls gets all the calls that were made to DescribeDBSnapshotsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotsPagesCalls())
func (mock *rdsClientMock) DescribeDBSnapshotsPagesCalls() []struct {
	DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	Fn                       func(*rds.DescribeDBSnapshotsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		Fn                       func(*rds.DescribeDBSnapshotsOutput, bool) bool
	}
	mock.lockDescribeDBSnapshotsPages.RLock()
	calls = mock.calls.DescribeDBSnapshotsPages
	mock.lockDescribeDBSnapshotsPages.RUnlock()
	return calls
}

// DescribeDBSnapshotsPagesWithContext calls DescribeDBSnapshotsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBSnapshotsPagesWithContext(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, fn func(*rds.DescribeDBSnapshotsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBSnapshotsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotsPagesWithContextFunc: method is nil but rdsClient.DescribeDBSnapshotsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		Fn                       func(*rds.DescribeDBSnapshotsOutput, bool) bool
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DescribeDBSnapshotsInput: describeDBSnapshotsInput,
		Fn:                       fn,
		Options:                  options,
	}
	mock.lockDescribeDBSnapshotsPagesWithContext.Lock()
	mock.calls.DescribeDBSnapshotsPagesWithContext = append(mock.calls.DescribeDBSnapshotsPagesWithContext, callInfo)
	mock.lockDescribeDBSnapshotsPagesWithContext.Unlock()
	return mock.DescribeDBSnapshotsPagesWithContextFunc(contextMoqParam, describeDBSnapshotsInput, fn, options...)
}

// DescribeDBSnapshotsPagesWithContextCalls gets all the calls that were made to DescribeDBSnapshotsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBSnapshotsPagesWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	Fn                       func(*rds.DescribeDBSnapshotsOutput, bool) bool
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		Fn                       func(*rds.DescribeDBSnapshotsOutput, bool) bool
		Options                  []request.Option
	}
	mock.lockDescribeDBSnapshotsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBSnapshotsPagesWithContext
	mock.lockDescribeDBSnapshotsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBSnapshotsRequest calls DescribeDBSnapshotsRequestFunc.
func (mock *rdsClientMock) DescribeDBSnapshotsRequest(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) (*request.Request, *rds.DescribeDBSnapshotsOutput) {
	if mock.DescribeDBSnapshotsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotsRequestFunc: method is nil but rdsClient.DescribeDBSnapshotsRequest was just called")
	}
	callInfo := struct {
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	}{
		DescribeDBSnapshotsInput: describeDBSnapshotsInput,
	}
	mock.lockDescribeDBSnapshotsRequest.Lock()
	mock.calls.DescribeDBSnapshotsRequest = append(mock.calls.DescribeDBSnapshotsRequest, callInfo)
	mock.lockDescribeDBSnapshotsRequest.Unlock()
	return mock.DescribeDBSnapshotsRequestFunc(describeDBSnapshotsInput)
}

// DescribeDBSnapshotsRequestCalls gets all the calls that were made to DescribeDBSnapshotsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotsRequestCalls())
func (mock *rdsClientMock) DescribeDBSnapshotsRequestCalls() []struct {
	DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
} {
	var calls []struct {
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	}
	mock.lockDescribeDBSnapshotsRequest.RLock()
	calls = mock.calls.DescribeDBSnapshotsRequest
	mock.lockDescribeDBSnapshotsRequest.RUnlock()
	return calls
}

// DescribeDBSnapshotsWithContext calls DescribeDBSnapshotsWithContextFunc.
func (mock *rdsClientMock) DescribeDBSnapshotsWithContext(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, options ...request.Option) (*rds.DescribeDBSnapshotsOutput, error) {
	if mock.DescribeDBSnapshotsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSnapshotsWithContextFunc: method is nil but rdsClient.DescribeDBSnapshotsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DescribeDBSnapshotsInput: describeDBSnapshotsInput,
		Options:                  options,
	}
	mock.lockDescribeDBSnapshotsWithContext.Lock()
	mock.calls.DescribeDBSnapshotsWithContext = append(mock.calls.DescribeDBSnapshotsWithContext, callInfo)
	mock.lockDescribeDBSnapshotsWithContext.Unlock()
	return mock.DescribeDBSnapshotsWithContextFunc(contextMoqParam, describeDBSnapshotsInput, options...)
}

// DescribeDBSnapshotsWithContextCalls gets all the calls that were made to DescribeDBSnapshotsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSnapshotsWithContextCalls())
func (mock *rdsClientMock) DescribeDBSnapshotsWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		Options                  []request.Option
	}
	mock.lockDescribeDBSnapshotsWithContext.RLock()
	calls = mock.calls.DescribeDBSnapshotsWithContext
	mock.lockDescribeDBSnapshotsWithContext.RUnlock()
	return calls
}

// DescribeDBSubnetGroups calls DescribeDBSubnetGroupsFunc.
func (mock *rdsClientMock) DescribeDBSubnetGroups(describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput) (*rds.DescribeDBSubnetGroupsOutput, error) {
	if mock.DescribeDBSubnetGroupsFunc == nil {
		panic("rdsClientMock.DescribeDBSubnetGroupsFunc: method is nil but rdsClient.DescribeDBSubnetGroups was just called")
	}
	callInfo := struct {
		DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
	}{
		DescribeDBSubnetGroupsInput: describeDBSubnetGroupsInput,
	}
	mock.lockDescribeDBSubnetGroups.Lock()
	mock.calls.DescribeDBSubnetGroups = append(mock.calls.DescribeDBSubnetGroups, callInfo)
	mock.lockDescribeDBSubnetGroups.Unlock()
	return mock.DescribeDBSubnetGroupsFunc(describeDBSubnetGroupsInput)
}

// DescribeDBSubnetGroupsCalls gets all the calls that were made to DescribeDBSubnetGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSubnetGroupsCalls())
func (mock *rdsClientMock) DescribeDBSubnetGroupsCalls() []struct {
	DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
} {
	var calls []struct {
		DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
	}
	mock.lockDescribeDBSubnetGroups.RLock()
	calls = mock.calls.DescribeDBSubnetGroups
	mock.lockDescribeDBSubnetGroups.RUnlock()
	return calls
}

// DescribeDBSubnetGroupsPages calls DescribeDBSubnetGroupsPagesFunc.
func (mock *rdsClientMock) DescribeDBSubnetGroupsPages(describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput, fn func(*rds.DescribeDBSubnetGroupsOutput, bool) bool) error {
	if mock.DescribeDBSubnetGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeDBSubnetGroupsPagesFunc: method is nil but rdsClient.DescribeDBSubnetGroupsPages was just called")
	}
	callInfo := struct {
		DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
		Fn                          func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
	}{
		DescribeDBSubnetGroupsInput: describeDBSubnetGroupsInput,
		Fn:                          fn,
	}
	mock.lockDescribeDBSubnetGroupsPages.Lock()
	mock.calls.DescribeDBSubnetGroupsPages = append(mock.calls.DescribeDBSubnetGroupsPages, callInfo)
	mock.lockDescribeDBSubnetGroupsPages.Unlock()
	return mock.DescribeDBSubnetGroupsPagesFunc(describeDBSubnetGroupsInput, fn)
}

// DescribeDBSubnetGroupsPagesCalls gets all the calls that were made to DescribeDBSubnetGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSubnetGroupsPagesCalls())
func (mock *rdsClientMock) DescribeDBSubnetGroupsPagesCalls() []struct {
	DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
	Fn                          func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
		Fn                          func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
	}
	mock.lockDescribeDBSubnetGroupsPages.RLock()
	calls = mock.calls.DescribeDBSubnetGroupsPages
	mock.lockDescribeDBSubnetGroupsPages.RUnlock()
	return calls
}

// DescribeDBSubnetGroupsPagesWithContext calls DescribeDBSubnetGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeDBSubnetGroupsPagesWithContext(contextMoqParam context.Context, describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput, fn func(*rds.DescribeDBSubnetGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeDBSubnetGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSubnetGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeDBSubnetGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
		Fn                          func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DescribeDBSubnetGroupsInput: describeDBSubnetGroupsInput,
		Fn:                          fn,
		Options:                     options,
	}
	mock.lockDescribeDBSubnetGroupsPagesWithContext.Lock()
	mock.calls.DescribeDBSubnetGroupsPagesWithContext = append(mock.calls.DescribeDBSubnetGroupsPagesWithContext, callInfo)
	mock.lockDescribeDBSubnetGroupsPagesWithContext.Unlock()
	return mock.DescribeDBSubnetGroupsPagesWithContextFunc(contextMoqParam, describeDBSubnetGroupsInput, fn, options...)
}

// DescribeDBSubnetGroupsPagesWithContextCalls gets all the calls that were made to DescribeDBSubnetGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSubnetGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeDBSubnetGroupsPagesWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
	Fn                          func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
		Fn                          func(*rds.DescribeDBSubnetGroupsOutput, bool) bool
		Options                     []request.Option
	}
	mock.lockDescribeDBSubnetGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeDBSubnetGroupsPagesWithContext
	mock.lockDescribeDBSubnetGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeDBSubnetGroupsRequest calls DescribeDBSubnetGroupsRequestFunc.
func (mock *rdsClientMock) DescribeDBSubnetGroupsRequest(describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput) (*request.Request, *rds.DescribeDBSubnetGroupsOutput) {
	if mock.DescribeDBSubnetGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeDBSubnetGroupsRequestFunc: method is nil but rdsClient.DescribeDBSubnetGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
	}{
		DescribeDBSubnetGroupsInput: describeDBSubnetGroupsInput,
	}
	mock.lockDescribeDBSubnetGroupsRequest.Lock()
	mock.calls.DescribeDBSubnetGroupsRequest = append(mock.calls.DescribeDBSubnetGroupsRequest, callInfo)
	mock.lockDescribeDBSubnetGroupsRequest.Unlock()
	return mock.DescribeDBSubnetGroupsRequestFunc(describeDBSubnetGroupsInput)
}

// DescribeDBSubnetGroupsRequestCalls gets all the calls that were made to DescribeDBSubnetGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSubnetGroupsRequestCalls())
func (mock *rdsClientMock) DescribeDBSubnetGroupsRequestCalls() []struct {
	DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
} {
	var calls []struct {
		DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
	}
	mock.lockDescribeDBSubnetGroupsRequest.RLock()
	calls = mock.calls.DescribeDBSubnetGroupsRequest
	mock.lockDescribeDBSubnetGroupsRequest.RUnlock()
	return calls
}

// DescribeDBSubnetGroupsWithContext calls DescribeDBSubnetGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeDBSubnetGroupsWithContext(contextMoqParam context.Context, describeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput, options ...request.Option) (*rds.DescribeDBSubnetGroupsOutput, error) {
	if mock.DescribeDBSubnetGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeDBSubnetGroupsWithContextFunc: method is nil but rdsClient.DescribeDBSubnetGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DescribeDBSubnetGroupsInput: describeDBSubnetGroupsInput,
		Options:                     options,
	}
	mock.lockDescribeDBSubnetGroupsWithContext.Lock()
	mock.calls.DescribeDBSubnetGroupsWithContext = append(mock.calls.DescribeDBSubnetGroupsWithContext, callInfo)
	mock.lockDescribeDBSubnetGroupsWithContext.Unlock()
	return mock.DescribeDBSubnetGroupsWithContextFunc(contextMoqParam, describeDBSubnetGroupsInput, options...)
}

// DescribeDBSubnetGroupsWithContextCalls gets all the calls that were made to DescribeDBSubnetGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeDBSubnetGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeDBSubnetGroupsWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DescribeDBSubnetGroupsInput *rds.DescribeDBSubnetGroupsInput
		Options                     []request.Option
	}
	mock.lockDescribeDBSubnetGroupsWithContext.RLock()
	calls = mock.calls.DescribeDBSubnetGroupsWithContext
	mock.lockDescribeDBSubnetGroupsWithContext.RUnlock()
	return calls
}

// DescribeEngineDefaultClusterParameters calls DescribeEngineDefaultClusterParametersFunc.
func (mock *rdsClientMock) DescribeEngineDefaultClusterParameters(describeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	if mock.DescribeEngineDefaultClusterParametersFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultClusterParametersFunc: method is nil but rdsClient.DescribeEngineDefaultClusterParameters was just called")
	}
	callInfo := struct {
		DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
	}{
		DescribeEngineDefaultClusterParametersInput: describeEngineDefaultClusterParametersInput,
	}
	mock.lockDescribeEngineDefaultClusterParameters.Lock()
	mock.calls.DescribeEngineDefaultClusterParameters = append(mock.calls.DescribeEngineDefaultClusterParameters, callInfo)
	mock.lockDescribeEngineDefaultClusterParameters.Unlock()
	return mock.DescribeEngineDefaultClusterParametersFunc(describeEngineDefaultClusterParametersInput)
}

// DescribeEngineDefaultClusterParametersCalls gets all the calls that were made to DescribeEngineDefaultClusterParameters.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultClusterParametersCalls())
func (mock *rdsClientMock) DescribeEngineDefaultClusterParametersCalls() []struct {
	DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
} {
	var calls []struct {
		DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
	}
	mock.lockDescribeEngineDefaultClusterParameters.RLock()
	calls = mock.calls.DescribeEngineDefaultClusterParameters
	mock.lockDescribeEngineDefaultClusterParameters.RUnlock()
	return calls
}

// DescribeEngineDefaultClusterParametersRequest calls DescribeEngineDefaultClusterParametersRequestFunc.
func (mock *rdsClientMock) DescribeEngineDefaultClusterParametersRequest(describeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput) (*request.Request, *rds.DescribeEngineDefaultClusterParametersOutput) {
	if mock.DescribeEngineDefaultClusterParametersRequestFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultClusterParametersRequestFunc: method is nil but rdsClient.DescribeEngineDefaultClusterParametersRequest was just called")
	}
	callInfo := struct {
		DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
	}{
		DescribeEngineDefaultClusterParametersInput: describeEngineDefaultClusterParametersInput,
	}
	mock.lockDescribeEngineDefaultClusterParametersRequest.Lock()
	mock.calls.DescribeEngineDefaultClusterParametersRequest = append(mock.calls.DescribeEngineDefaultClusterParametersRequest, callInfo)
	mock.lockDescribeEngineDefaultClusterParametersRequest.Unlock()
	return mock.DescribeEngineDefaultClusterParametersRequestFunc(describeEngineDefaultClusterParametersInput)
}

// DescribeEngineDefaultClusterParametersRequestCalls gets all the calls that were made to DescribeEngineDefaultClusterParametersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultClusterParametersRequestCalls())
func (mock *rdsClientMock) DescribeEngineDefaultClusterParametersRequestCalls() []struct {
	DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
} {
	var calls []struct {
		DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
	}
	mock.lockDescribeEngineDefaultClusterParametersRequest.RLock()
	calls = mock.calls.DescribeEngineDefaultClusterParametersRequest
	mock.lockDescribeEngineDefaultClusterParametersRequest.RUnlock()
	return calls
}

// DescribeEngineDefaultClusterParametersWithContext calls DescribeEngineDefaultClusterParametersWithContextFunc.
func (mock *rdsClientMock) DescribeEngineDefaultClusterParametersWithContext(contextMoqParam context.Context, describeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput, options ...request.Option) (*rds.DescribeEngineDefaultClusterParametersOutput, error) {
	if mock.DescribeEngineDefaultClusterParametersWithContextFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultClusterParametersWithContextFunc: method is nil but rdsClient.DescribeEngineDefaultClusterParametersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                             context.Context
		DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
		Options                                     []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		DescribeEngineDefaultClusterParametersInput: describeEngineDefaultClusterParametersInput,
		Options: options,
	}
	mock.lockDescribeEngineDefaultClusterParametersWithContext.Lock()
	mock.calls.DescribeEngineDefaultClusterParametersWithContext = append(mock.calls.DescribeEngineDefaultClusterParametersWithContext, callInfo)
	mock.lockDescribeEngineDefaultClusterParametersWithContext.Unlock()
	return mock.DescribeEngineDefaultClusterParametersWithContextFunc(contextMoqParam, describeEngineDefaultClusterParametersInput, options...)
}

// DescribeEngineDefaultClusterParametersWithContextCalls gets all the calls that were made to DescribeEngineDefaultClusterParametersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultClusterParametersWithContextCalls())
func (mock *rdsClientMock) DescribeEngineDefaultClusterParametersWithContextCalls() []struct {
	ContextMoqParam                             context.Context
	DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
	Options                                     []request.Option
} {
	var calls []struct {
		ContextMoqParam                             context.Context
		DescribeEngineDefaultClusterParametersInput *rds.DescribeEngineDefaultClusterParametersInput
		Options                                     []request.Option
	}
	mock.lockDescribeEngineDefaultClusterParametersWithContext.RLock()
	calls = mock.calls.DescribeEngineDefaultClusterParametersWithContext
	mock.lockDescribeEngineDefaultClusterParametersWithContext.RUnlock()
	return calls
}

// DescribeEngineDefaultParameters calls DescribeEngineDefaultParametersFunc.
func (mock *rdsClientMock) DescribeEngineDefaultParameters(describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput) (*rds.DescribeEngineDefaultParametersOutput, error) {
	if mock.DescribeEngineDefaultParametersFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultParametersFunc: method is nil but rdsClient.DescribeEngineDefaultParameters was just called")
	}
	callInfo := struct {
		DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
	}{
		DescribeEngineDefaultParametersInput: describeEngineDefaultParametersInput,
	}
	mock.lockDescribeEngineDefaultParameters.Lock()
	mock.calls.DescribeEngineDefaultParameters = append(mock.calls.DescribeEngineDefaultParameters, callInfo)
	mock.lockDescribeEngineDefaultParameters.Unlock()
	return mock.DescribeEngineDefaultParametersFunc(describeEngineDefaultParametersInput)
}

// DescribeEngineDefaultParametersCalls gets all the calls that were made to DescribeEngineDefaultParameters.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultParametersCalls())
func (mock *rdsClientMock) DescribeEngineDefaultParametersCalls() []struct {
	DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
} {
	var calls []struct {
		DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
	}
	mock.lockDescribeEngineDefaultParameters.RLock()
	calls = mock.calls.DescribeEngineDefaultParameters
	mock.lockDescribeEngineDefaultParameters.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersPages calls DescribeEngineDefaultParametersPagesFunc.
func (mock *rdsClientMock) DescribeEngineDefaultParametersPages(describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput, fn func(*rds.DescribeEngineDefaultParametersOutput, bool) bool) error {
	if mock.DescribeEngineDefaultParametersPagesFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultParametersPagesFunc: method is nil but rdsClient.DescribeEngineDefaultParametersPages was just called")
	}
	callInfo := struct {
		DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
		Fn                                   func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
	}{
		DescribeEngineDefaultParametersInput: describeEngineDefaultParametersInput,
		Fn:                                   fn,
	}
	mock.lockDescribeEngineDefaultParametersPages.Lock()
	mock.calls.DescribeEngineDefaultParametersPages = append(mock.calls.DescribeEngineDefaultParametersPages, callInfo)
	mock.lockDescribeEngineDefaultParametersPages.Unlock()
	return mock.DescribeEngineDefaultParametersPagesFunc(describeEngineDefaultParametersInput, fn)
}

// DescribeEngineDefaultParametersPagesCalls gets all the calls that were made to DescribeEngineDefaultParametersPages.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultParametersPagesCalls())
func (mock *rdsClientMock) DescribeEngineDefaultParametersPagesCalls() []struct {
	DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
	Fn                                   func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
} {
	var calls []struct {
		DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
		Fn                                   func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
	}
	mock.lockDescribeEngineDefaultParametersPages.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersPages
	mock.lockDescribeEngineDefaultParametersPages.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersPagesWithContext calls DescribeEngineDefaultParametersPagesWithContextFunc.
func (mock *rdsClientMock) DescribeEngineDefaultParametersPagesWithContext(contextMoqParam context.Context, describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput, fn func(*rds.DescribeEngineDefaultParametersOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeEngineDefaultParametersPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultParametersPagesWithContextFunc: method is nil but rdsClient.DescribeEngineDefaultParametersPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
		Fn                                   func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		DescribeEngineDefaultParametersInput: describeEngineDefaultParametersInput,
		Fn:                                   fn,
		Options:                              options,
	}
	mock.lockDescribeEngineDefaultParametersPagesWithContext.Lock()
	mock.calls.DescribeEngineDefaultParametersPagesWithContext = append(mock.calls.DescribeEngineDefaultParametersPagesWithContext, callInfo)
	mock.lockDescribeEngineDefaultParametersPagesWithContext.Unlock()
	return mock.DescribeEngineDefaultParametersPagesWithContextFunc(contextMoqParam, describeEngineDefaultParametersInput, fn, options...)
}

// DescribeEngineDefaultParametersPagesWithContextCalls gets all the calls that were made to DescribeEngineDefaultParametersPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultParametersPagesWithContextCalls())
func (mock *rdsClientMock) DescribeEngineDefaultParametersPagesWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
	Fn                                   func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
		Fn                                   func(*rds.DescribeEngineDefaultParametersOutput, bool) bool
		Options                              []request.Option
	}
	mock.lockDescribeEngineDefaultParametersPagesWithContext.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersPagesWithContext
	mock.lockDescribeEngineDefaultParametersPagesWithContext.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersRequest calls DescribeEngineDefaultParametersRequestFunc.
func (mock *rdsClientMock) DescribeEngineDefaultParametersRequest(describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput) (*request.Request, *rds.DescribeEngineDefaultParametersOutput) {
	if mock.DescribeEngineDefaultParametersRequestFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultParametersRequestFunc: method is nil but rdsClient.DescribeEngineDefaultParametersRequest was just called")
	}
	callInfo := struct {
		DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
	}{
		DescribeEngineDefaultParametersInput: describeEngineDefaultParametersInput,
	}
	mock.lockDescribeEngineDefaultParametersRequest.Lock()
	mock.calls.DescribeEngineDefaultParametersRequest = append(mock.calls.DescribeEngineDefaultParametersRequest, callInfo)
	mock.lockDescribeEngineDefaultParametersRequest.Unlock()
	return mock.DescribeEngineDefaultParametersRequestFunc(describeEngineDefaultParametersInput)
}

// DescribeEngineDefaultParametersRequestCalls gets all the calls that were made to DescribeEngineDefaultParametersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultParametersRequestCalls())
func (mock *rdsClientMock) DescribeEngineDefaultParametersRequestCalls() []struct {
	DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
} {
	var calls []struct {
		DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
	}
	mock.lockDescribeEngineDefaultParametersRequest.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersRequest
	mock.lockDescribeEngineDefaultParametersRequest.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersWithContext calls DescribeEngineDefaultParametersWithContextFunc.
func (mock *rdsClientMock) DescribeEngineDefaultParametersWithContext(contextMoqParam context.Context, describeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput, options ...request.Option) (*rds.DescribeEngineDefaultParametersOutput, error) {
	if mock.DescribeEngineDefaultParametersWithContextFunc == nil {
		panic("rdsClientMock.DescribeEngineDefaultParametersWithContextFunc: method is nil but rdsClient.DescribeEngineDefaultParametersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		DescribeEngineDefaultParametersInput: describeEngineDefaultParametersInput,
		Options:                              options,
	}
	mock.lockDescribeEngineDefaultParametersWithContext.Lock()
	mock.calls.DescribeEngineDefaultParametersWithContext = append(mock.calls.DescribeEngineDefaultParametersWithContext, callInfo)
	mock.lockDescribeEngineDefaultParametersWithContext.Unlock()
	return mock.DescribeEngineDefaultParametersWithContextFunc(contextMoqParam, describeEngineDefaultParametersInput, options...)
}

// DescribeEngineDefaultParametersWithContextCalls gets all the calls that were made to DescribeEngineDefaultParametersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEngineDefaultParametersWithContextCalls())
func (mock *rdsClientMock) DescribeEngineDefaultParametersWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		DescribeEngineDefaultParametersInput *rds.DescribeEngineDefaultParametersInput
		Options                              []request.Option
	}
	mock.lockDescribeEngineDefaultParametersWithContext.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersWithContext
	mock.lockDescribeEngineDefaultParametersWithContext.RUnlock()
	return calls
}

// DescribeEventCategories calls DescribeEventCategoriesFunc.
func (mock *rdsClientMock) DescribeEventCategories(describeEventCategoriesInput *rds.DescribeEventCategoriesInput) (*rds.DescribeEventCategoriesOutput, error) {
	if mock.DescribeEventCategoriesFunc == nil {
		panic("rdsClientMock.DescribeEventCategoriesFunc: method is nil but rdsClient.DescribeEventCategories was just called")
	}
	callInfo := struct {
		DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
	}{
		DescribeEventCategoriesInput: describeEventCategoriesInput,
	}
	mock.lockDescribeEventCategories.Lock()
	mock.calls.DescribeEventCategories = append(mock.calls.DescribeEventCategories, callInfo)
	mock.lockDescribeEventCategories.Unlock()
	return mock.DescribeEventCategoriesFunc(describeEventCategoriesInput)
}

// DescribeEventCategoriesCalls gets all the calls that were made to DescribeEventCategories.
// Check the length with:
//     len(mockedrdsClient.DescribeEventCategoriesCalls())
func (mock *rdsClientMock) DescribeEventCategoriesCalls() []struct {
	DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
} {
	var calls []struct {
		DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
	}
	mock.lockDescribeEventCategories.RLock()
	calls = mock.calls.DescribeEventCategories
	mock.lockDescribeEventCategories.RUnlock()
	return calls
}

// DescribeEventCategoriesRequest calls DescribeEventCategoriesRequestFunc.
func (mock *rdsClientMock) DescribeEventCategoriesRequest(describeEventCategoriesInput *rds.DescribeEventCategoriesInput) (*request.Request, *rds.DescribeEventCategoriesOutput) {
	if mock.DescribeEventCategoriesRequestFunc == nil {
		panic("rdsClientMock.DescribeEventCategoriesRequestFunc: method is nil but rdsClient.DescribeEventCategoriesRequest was just called")
	}
	callInfo := struct {
		DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
	}{
		DescribeEventCategoriesInput: describeEventCategoriesInput,
	}
	mock.lockDescribeEventCategoriesRequest.Lock()
	mock.calls.DescribeEventCategoriesRequest = append(mock.calls.DescribeEventCategoriesRequest, callInfo)
	mock.lockDescribeEventCategoriesRequest.Unlock()
	return mock.DescribeEventCategoriesRequestFunc(describeEventCategoriesInput)
}

// DescribeEventCategoriesRequestCalls gets all the calls that were made to DescribeEventCategoriesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeEventCategoriesRequestCalls())
func (mock *rdsClientMock) DescribeEventCategoriesRequestCalls() []struct {
	DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
} {
	var calls []struct {
		DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
	}
	mock.lockDescribeEventCategoriesRequest.RLock()
	calls = mock.calls.DescribeEventCategoriesRequest
	mock.lockDescribeEventCategoriesRequest.RUnlock()
	return calls
}

// DescribeEventCategoriesWithContext calls DescribeEventCategoriesWithContextFunc.
func (mock *rdsClientMock) DescribeEventCategoriesWithContext(contextMoqParam context.Context, describeEventCategoriesInput *rds.DescribeEventCategoriesInput, options ...request.Option) (*rds.DescribeEventCategoriesOutput, error) {
	if mock.DescribeEventCategoriesWithContextFunc == nil {
		panic("rdsClientMock.DescribeEventCategoriesWithContextFunc: method is nil but rdsClient.DescribeEventCategoriesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		DescribeEventCategoriesInput: describeEventCategoriesInput,
		Options:                      options,
	}
	mock.lockDescribeEventCategoriesWithContext.Lock()
	mock.calls.DescribeEventCategoriesWithContext = append(mock.calls.DescribeEventCategoriesWithContext, callInfo)
	mock.lockDescribeEventCategoriesWithContext.Unlock()
	return mock.DescribeEventCategoriesWithContextFunc(contextMoqParam, describeEventCategoriesInput, options...)
}

// DescribeEventCategoriesWithContextCalls gets all the calls that were made to DescribeEventCategoriesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEventCategoriesWithContextCalls())
func (mock *rdsClientMock) DescribeEventCategoriesWithContextCalls() []struct {
	ContextMoqParam              context.Context
	DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		DescribeEventCategoriesInput *rds.DescribeEventCategoriesInput
		Options                      []request.Option
	}
	mock.lockDescribeEventCategoriesWithContext.RLock()
	calls = mock.calls.DescribeEventCategoriesWithContext
	mock.lockDescribeEventCategoriesWithContext.RUnlock()
	return calls
}

// DescribeEventSubscriptions calls DescribeEventSubscriptionsFunc.
func (mock *rdsClientMock) DescribeEventSubscriptions(describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput) (*rds.DescribeEventSubscriptionsOutput, error) {
	if mock.DescribeEventSubscriptionsFunc == nil {
		panic("rdsClientMock.DescribeEventSubscriptionsFunc: method is nil but rdsClient.DescribeEventSubscriptions was just called")
	}
	callInfo := struct {
		DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
	}{
		DescribeEventSubscriptionsInput: describeEventSubscriptionsInput,
	}
	mock.lockDescribeEventSubscriptions.Lock()
	mock.calls.DescribeEventSubscriptions = append(mock.calls.DescribeEventSubscriptions, callInfo)
	mock.lockDescribeEventSubscriptions.Unlock()
	return mock.DescribeEventSubscriptionsFunc(describeEventSubscriptionsInput)
}

// DescribeEventSubscriptionsCalls gets all the calls that were made to DescribeEventSubscriptions.
// Check the length with:
//     len(mockedrdsClient.DescribeEventSubscriptionsCalls())
func (mock *rdsClientMock) DescribeEventSubscriptionsCalls() []struct {
	DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
} {
	var calls []struct {
		DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
	}
	mock.lockDescribeEventSubscriptions.RLock()
	calls = mock.calls.DescribeEventSubscriptions
	mock.lockDescribeEventSubscriptions.RUnlock()
	return calls
}

// DescribeEventSubscriptionsPages calls DescribeEventSubscriptionsPagesFunc.
func (mock *rdsClientMock) DescribeEventSubscriptionsPages(describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput, fn func(*rds.DescribeEventSubscriptionsOutput, bool) bool) error {
	if mock.DescribeEventSubscriptionsPagesFunc == nil {
		panic("rdsClientMock.DescribeEventSubscriptionsPagesFunc: method is nil but rdsClient.DescribeEventSubscriptionsPages was just called")
	}
	callInfo := struct {
		DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
		Fn                              func(*rds.DescribeEventSubscriptionsOutput, bool) bool
	}{
		DescribeEventSubscriptionsInput: describeEventSubscriptionsInput,
		Fn:                              fn,
	}
	mock.lockDescribeEventSubscriptionsPages.Lock()
	mock.calls.DescribeEventSubscriptionsPages = append(mock.calls.DescribeEventSubscriptionsPages, callInfo)
	mock.lockDescribeEventSubscriptionsPages.Unlock()
	return mock.DescribeEventSubscriptionsPagesFunc(describeEventSubscriptionsInput, fn)
}

// DescribeEventSubscriptionsPagesCalls gets all the calls that were made to DescribeEventSubscriptionsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeEventSubscriptionsPagesCalls())
func (mock *rdsClientMock) DescribeEventSubscriptionsPagesCalls() []struct {
	DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
	Fn                              func(*rds.DescribeEventSubscriptionsOutput, bool) bool
} {
	var calls []struct {
		DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
		Fn                              func(*rds.DescribeEventSubscriptionsOutput, bool) bool
	}
	mock.lockDescribeEventSubscriptionsPages.RLock()
	calls = mock.calls.DescribeEventSubscriptionsPages
	mock.lockDescribeEventSubscriptionsPages.RUnlock()
	return calls
}

// DescribeEventSubscriptionsPagesWithContext calls DescribeEventSubscriptionsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeEventSubscriptionsPagesWithContext(contextMoqParam context.Context, describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput, fn func(*rds.DescribeEventSubscriptionsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeEventSubscriptionsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeEventSubscriptionsPagesWithContextFunc: method is nil but rdsClient.DescribeEventSubscriptionsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
		Fn                              func(*rds.DescribeEventSubscriptionsOutput, bool) bool
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeEventSubscriptionsInput: describeEventSubscriptionsInput,
		Fn:                              fn,
		Options:                         options,
	}
	mock.lockDescribeEventSubscriptionsPagesWithContext.Lock()
	mock.calls.DescribeEventSubscriptionsPagesWithContext = append(mock.calls.DescribeEventSubscriptionsPagesWithContext, callInfo)
	mock.lockDescribeEventSubscriptionsPagesWithContext.Unlock()
	return mock.DescribeEventSubscriptionsPagesWithContextFunc(contextMoqParam, describeEventSubscriptionsInput, fn, options...)
}

// DescribeEventSubscriptionsPagesWithContextCalls gets all the calls that were made to DescribeEventSubscriptionsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEventSubscriptionsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeEventSubscriptionsPagesWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
	Fn                              func(*rds.DescribeEventSubscriptionsOutput, bool) bool
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
		Fn                              func(*rds.DescribeEventSubscriptionsOutput, bool) bool
		Options                         []request.Option
	}
	mock.lockDescribeEventSubscriptionsPagesWithContext.RLock()
	calls = mock.calls.DescribeEventSubscriptionsPagesWithContext
	mock.lockDescribeEventSubscriptionsPagesWithContext.RUnlock()
	return calls
}

// DescribeEventSubscriptionsRequest calls DescribeEventSubscriptionsRequestFunc.
func (mock *rdsClientMock) DescribeEventSubscriptionsRequest(describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput) (*request.Request, *rds.DescribeEventSubscriptionsOutput) {
	if mock.DescribeEventSubscriptionsRequestFunc == nil {
		panic("rdsClientMock.DescribeEventSubscriptionsRequestFunc: method is nil but rdsClient.DescribeEventSubscriptionsRequest was just called")
	}
	callInfo := struct {
		DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
	}{
		DescribeEventSubscriptionsInput: describeEventSubscriptionsInput,
	}
	mock.lockDescribeEventSubscriptionsRequest.Lock()
	mock.calls.DescribeEventSubscriptionsRequest = append(mock.calls.DescribeEventSubscriptionsRequest, callInfo)
	mock.lockDescribeEventSubscriptionsRequest.Unlock()
	return mock.DescribeEventSubscriptionsRequestFunc(describeEventSubscriptionsInput)
}

// DescribeEventSubscriptionsRequestCalls gets all the calls that were made to DescribeEventSubscriptionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeEventSubscriptionsRequestCalls())
func (mock *rdsClientMock) DescribeEventSubscriptionsRequestCalls() []struct {
	DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
} {
	var calls []struct {
		DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
	}
	mock.lockDescribeEventSubscriptionsRequest.RLock()
	calls = mock.calls.DescribeEventSubscriptionsRequest
	mock.lockDescribeEventSubscriptionsRequest.RUnlock()
	return calls
}

// DescribeEventSubscriptionsWithContext calls DescribeEventSubscriptionsWithContextFunc.
func (mock *rdsClientMock) DescribeEventSubscriptionsWithContext(contextMoqParam context.Context, describeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput, options ...request.Option) (*rds.DescribeEventSubscriptionsOutput, error) {
	if mock.DescribeEventSubscriptionsWithContextFunc == nil {
		panic("rdsClientMock.DescribeEventSubscriptionsWithContextFunc: method is nil but rdsClient.DescribeEventSubscriptionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeEventSubscriptionsInput: describeEventSubscriptionsInput,
		Options:                         options,
	}
	mock.lockDescribeEventSubscriptionsWithContext.Lock()
	mock.calls.DescribeEventSubscriptionsWithContext = append(mock.calls.DescribeEventSubscriptionsWithContext, callInfo)
	mock.lockDescribeEventSubscriptionsWithContext.Unlock()
	return mock.DescribeEventSubscriptionsWithContextFunc(contextMoqParam, describeEventSubscriptionsInput, options...)
}

// DescribeEventSubscriptionsWithContextCalls gets all the calls that were made to DescribeEventSubscriptionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEventSubscriptionsWithContextCalls())
func (mock *rdsClientMock) DescribeEventSubscriptionsWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeEventSubscriptionsInput *rds.DescribeEventSubscriptionsInput
		Options                         []request.Option
	}
	mock.lockDescribeEventSubscriptionsWithContext.RLock()
	calls = mock.calls.DescribeEventSubscriptionsWithContext
	mock.lockDescribeEventSubscriptionsWithContext.RUnlock()
	return calls
}

// DescribeEvents calls DescribeEventsFunc.
func (mock *rdsClientMock) DescribeEvents(describeEventsInput *rds.DescribeEventsInput) (*rds.DescribeEventsOutput, error) {
	if mock.DescribeEventsFunc == nil {
		panic("rdsClientMock.DescribeEventsFunc: method is nil but rdsClient.DescribeEvents was just called")
	}
	callInfo := struct {
		DescribeEventsInput *rds.DescribeEventsInput
	}{
		DescribeEventsInput: describeEventsInput,
	}
	mock.lockDescribeEvents.Lock()
	mock.calls.DescribeEvents = append(mock.calls.DescribeEvents, callInfo)
	mock.lockDescribeEvents.Unlock()
	return mock.DescribeEventsFunc(describeEventsInput)
}

// DescribeEventsCalls gets all the calls that were made to DescribeEvents.
// Check the length with:
//     len(mockedrdsClient.DescribeEventsCalls())
func (mock *rdsClientMock) DescribeEventsCalls() []struct {
	DescribeEventsInput *rds.DescribeEventsInput
} {
	var calls []struct {
		DescribeEventsInput *rds.DescribeEventsInput
	}
	mock.lockDescribeEvents.RLock()
	calls = mock.calls.DescribeEvents
	mock.lockDescribeEvents.RUnlock()
	return calls
}

// DescribeEventsPages calls DescribeEventsPagesFunc.
func (mock *rdsClientMock) DescribeEventsPages(describeEventsInput *rds.DescribeEventsInput, fn func(*rds.DescribeEventsOutput, bool) bool) error {
	if mock.DescribeEventsPagesFunc == nil {
		panic("rdsClientMock.DescribeEventsPagesFunc: method is nil but rdsClient.DescribeEventsPages was just called")
	}
	callInfo := struct {
		DescribeEventsInput *rds.DescribeEventsInput
		Fn                  func(*rds.DescribeEventsOutput, bool) bool
	}{
		DescribeEventsInput: describeEventsInput,
		Fn:                  fn,
	}
	mock.lockDescribeEventsPages.Lock()
	mock.calls.DescribeEventsPages = append(mock.calls.DescribeEventsPages, callInfo)
	mock.lockDescribeEventsPages.Unlock()
	return mock.DescribeEventsPagesFunc(describeEventsInput, fn)
}

// DescribeEventsPagesCalls gets all the calls that were made to DescribeEventsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeEventsPagesCalls())
func (mock *rdsClientMock) DescribeEventsPagesCalls() []struct {
	DescribeEventsInput *rds.DescribeEventsInput
	Fn                  func(*rds.DescribeEventsOutput, bool) bool
} {
	var calls []struct {
		DescribeEventsInput *rds.DescribeEventsInput
		Fn                  func(*rds.DescribeEventsOutput, bool) bool
	}
	mock.lockDescribeEventsPages.RLock()
	calls = mock.calls.DescribeEventsPages
	mock.lockDescribeEventsPages.RUnlock()
	return calls
}

// DescribeEventsPagesWithContext calls DescribeEventsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeEventsPagesWithContext(contextMoqParam context.Context, describeEventsInput *rds.DescribeEventsInput, fn func(*rds.DescribeEventsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeEventsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeEventsPagesWithContextFunc: method is nil but rdsClient.DescribeEventsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		DescribeEventsInput *rds.DescribeEventsInput
		Fn                  func(*rds.DescribeEventsOutput, bool) bool
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		DescribeEventsInput: describeEventsInput,
		Fn:                  fn,
		Options:             options,
	}
	mock.lockDescribeEventsPagesWithContext.Lock()
	mock.calls.DescribeEventsPagesWithContext = append(mock.calls.DescribeEventsPagesWithContext, callInfo)
	mock.lockDescribeEventsPagesWithContext.Unlock()
	return mock.DescribeEventsPagesWithContextFunc(contextMoqParam, describeEventsInput, fn, options...)
}

// DescribeEventsPagesWithContextCalls gets all the calls that were made to DescribeEventsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEventsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeEventsPagesWithContextCalls() []struct {
	ContextMoqParam     context.Context
	DescribeEventsInput *rds.DescribeEventsInput
	Fn                  func(*rds.DescribeEventsOutput, bool) bool
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		DescribeEventsInput *rds.DescribeEventsInput
		Fn                  func(*rds.DescribeEventsOutput, bool) bool
		Options             []request.Option
	}
	mock.lockDescribeEventsPagesWithContext.RLock()
	calls = mock.calls.DescribeEventsPagesWithContext
	mock.lockDescribeEventsPagesWithContext.RUnlock()
	return calls
}

// DescribeEventsRequest calls DescribeEventsRequestFunc.
func (mock *rdsClientMock) DescribeEventsRequest(describeEventsInput *rds.DescribeEventsInput) (*request.Request, *rds.DescribeEventsOutput) {
	if mock.DescribeEventsRequestFunc == nil {
		panic("rdsClientMock.DescribeEventsRequestFunc: method is nil but rdsClient.DescribeEventsRequest was just called")
	}
	callInfo := struct {
		DescribeEventsInput *rds.DescribeEventsInput
	}{
		DescribeEventsInput: describeEventsInput,
	}
	mock.lockDescribeEventsRequest.Lock()
	mock.calls.DescribeEventsRequest = append(mock.calls.DescribeEventsRequest, callInfo)
	mock.lockDescribeEventsRequest.Unlock()
	return mock.DescribeEventsRequestFunc(describeEventsInput)
}

// DescribeEventsRequestCalls gets all the calls that were made to DescribeEventsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeEventsRequestCalls())
func (mock *rdsClientMock) DescribeEventsRequestCalls() []struct {
	DescribeEventsInput *rds.DescribeEventsInput
} {
	var calls []struct {
		DescribeEventsInput *rds.DescribeEventsInput
	}
	mock.lockDescribeEventsRequest.RLock()
	calls = mock.calls.DescribeEventsRequest
	mock.lockDescribeEventsRequest.RUnlock()
	return calls
}

// DescribeEventsWithContext calls DescribeEventsWithContextFunc.
func (mock *rdsClientMock) DescribeEventsWithContext(contextMoqParam context.Context, describeEventsInput *rds.DescribeEventsInput, options ...request.Option) (*rds.DescribeEventsOutput, error) {
	if mock.DescribeEventsWithContextFunc == nil {
		panic("rdsClientMock.DescribeEventsWithContextFunc: method is nil but rdsClient.DescribeEventsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		DescribeEventsInput *rds.DescribeEventsInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		DescribeEventsInput: describeEventsInput,
		Options:             options,
	}
	mock.lockDescribeEventsWithContext.Lock()
	mock.calls.DescribeEventsWithContext = append(mock.calls.DescribeEventsWithContext, callInfo)
	mock.lockDescribeEventsWithContext.Unlock()
	return mock.DescribeEventsWithContextFunc(contextMoqParam, describeEventsInput, options...)
}

// DescribeEventsWithContextCalls gets all the calls that were made to DescribeEventsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeEventsWithContextCalls())
func (mock *rdsClientMock) DescribeEventsWithContextCalls() []struct {
	ContextMoqParam     context.Context
	DescribeEventsInput *rds.DescribeEventsInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		DescribeEventsInput *rds.DescribeEventsInput
		Options             []request.Option
	}
	mock.lockDescribeEventsWithContext.RLock()
	calls = mock.calls.DescribeEventsWithContext
	mock.lockDescribeEventsWithContext.RUnlock()
	return calls
}

// DescribeExportTasks calls DescribeExportTasksFunc.
func (mock *rdsClientMock) DescribeExportTasks(describeExportTasksInput *rds.DescribeExportTasksInput) (*rds.DescribeExportTasksOutput, error) {
	if mock.DescribeExportTasksFunc == nil {
		panic("rdsClientMock.DescribeExportTasksFunc: method is nil but rdsClient.DescribeExportTasks was just called")
	}
	callInfo := struct {
		DescribeExportTasksInput *rds.DescribeExportTasksInput
	}{
		DescribeExportTasksInput: describeExportTasksInput,
	}
	mock.lockDescribeExportTasks.Lock()
	mock.calls.DescribeExportTasks = append(mock.calls.DescribeExportTasks, callInfo)
	mock.lockDescribeExportTasks.Unlock()
	return mock.DescribeExportTasksFunc(describeExportTasksInput)
}

// DescribeExportTasksCalls gets all the calls that were made to DescribeExportTasks.
// Check the length with:
//     len(mockedrdsClient.DescribeExportTasksCalls())
func (mock *rdsClientMock) DescribeExportTasksCalls() []struct {
	DescribeExportTasksInput *rds.DescribeExportTasksInput
} {
	var calls []struct {
		DescribeExportTasksInput *rds.DescribeExportTasksInput
	}
	mock.lockDescribeExportTasks.RLock()
	calls = mock.calls.DescribeExportTasks
	mock.lockDescribeExportTasks.RUnlock()
	return calls
}

// DescribeExportTasksPages calls DescribeExportTasksPagesFunc.
func (mock *rdsClientMock) DescribeExportTasksPages(describeExportTasksInput *rds.DescribeExportTasksInput, fn func(*rds.DescribeExportTasksOutput, bool) bool) error {
	if mock.DescribeExportTasksPagesFunc == nil {
		panic("rdsClientMock.DescribeExportTasksPagesFunc: method is nil but rdsClient.DescribeExportTasksPages was just called")
	}
	callInfo := struct {
		DescribeExportTasksInput *rds.DescribeExportTasksInput
		Fn                       func(*rds.DescribeExportTasksOutput, bool) bool
	}{
		DescribeExportTasksInput: describeExportTasksInput,
		Fn:                       fn,
	}
	mock.lockDescribeExportTasksPages.Lock()
	mock.calls.DescribeExportTasksPages = append(mock.calls.DescribeExportTasksPages, callInfo)
	mock.lockDescribeExportTasksPages.Unlock()
	return mock.DescribeExportTasksPagesFunc(describeExportTasksInput, fn)
}

// DescribeExportTasksPagesCalls gets all the calls that were made to DescribeExportTasksPages.
// Check the length with:
//     len(mockedrdsClient.DescribeExportTasksPagesCalls())
func (mock *rdsClientMock) DescribeExportTasksPagesCalls() []struct {
	DescribeExportTasksInput *rds.DescribeExportTasksInput
	Fn                       func(*rds.DescribeExportTasksOutput, bool) bool
} {
	var calls []struct {
		DescribeExportTasksInput *rds.DescribeExportTasksInput
		Fn                       func(*rds.DescribeExportTasksOutput, bool) bool
	}
	mock.lockDescribeExportTasksPages.RLock()
	calls = mock.calls.DescribeExportTasksPages
	mock.lockDescribeExportTasksPages.RUnlock()
	return calls
}

// DescribeExportTasksPagesWithContext calls DescribeExportTasksPagesWithContextFunc.
func (mock *rdsClientMock) DescribeExportTasksPagesWithContext(contextMoqParam context.Context, describeExportTasksInput *rds.DescribeExportTasksInput, fn func(*rds.DescribeExportTasksOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeExportTasksPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeExportTasksPagesWithContextFunc: method is nil but rdsClient.DescribeExportTasksPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DescribeExportTasksInput *rds.DescribeExportTasksInput
		Fn                       func(*rds.DescribeExportTasksOutput, bool) bool
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DescribeExportTasksInput: describeExportTasksInput,
		Fn:                       fn,
		Options:                  options,
	}
	mock.lockDescribeExportTasksPagesWithContext.Lock()
	mock.calls.DescribeExportTasksPagesWithContext = append(mock.calls.DescribeExportTasksPagesWithContext, callInfo)
	mock.lockDescribeExportTasksPagesWithContext.Unlock()
	return mock.DescribeExportTasksPagesWithContextFunc(contextMoqParam, describeExportTasksInput, fn, options...)
}

// DescribeExportTasksPagesWithContextCalls gets all the calls that were made to DescribeExportTasksPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeExportTasksPagesWithContextCalls())
func (mock *rdsClientMock) DescribeExportTasksPagesWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DescribeExportTasksInput *rds.DescribeExportTasksInput
	Fn                       func(*rds.DescribeExportTasksOutput, bool) bool
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DescribeExportTasksInput *rds.DescribeExportTasksInput
		Fn                       func(*rds.DescribeExportTasksOutput, bool) bool
		Options                  []request.Option
	}
	mock.lockDescribeExportTasksPagesWithContext.RLock()
	calls = mock.calls.DescribeExportTasksPagesWithContext
	mock.lockDescribeExportTasksPagesWithContext.RUnlock()
	return calls
}

// DescribeExportTasksRequest calls DescribeExportTasksRequestFunc.
func (mock *rdsClientMock) DescribeExportTasksRequest(describeExportTasksInput *rds.DescribeExportTasksInput) (*request.Request, *rds.DescribeExportTasksOutput) {
	if mock.DescribeExportTasksRequestFunc == nil {
		panic("rdsClientMock.DescribeExportTasksRequestFunc: method is nil but rdsClient.DescribeExportTasksRequest was just called")
	}
	callInfo := struct {
		DescribeExportTasksInput *rds.DescribeExportTasksInput
	}{
		DescribeExportTasksInput: describeExportTasksInput,
	}
	mock.lockDescribeExportTasksRequest.Lock()
	mock.calls.DescribeExportTasksRequest = append(mock.calls.DescribeExportTasksRequest, callInfo)
	mock.lockDescribeExportTasksRequest.Unlock()
	return mock.DescribeExportTasksRequestFunc(describeExportTasksInput)
}

// DescribeExportTasksRequestCalls gets all the calls that were made to DescribeExportTasksRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeExportTasksRequestCalls())
func (mock *rdsClientMock) DescribeExportTasksRequestCalls() []struct {
	DescribeExportTasksInput *rds.DescribeExportTasksInput
} {
	var calls []struct {
		DescribeExportTasksInput *rds.DescribeExportTasksInput
	}
	mock.lockDescribeExportTasksRequest.RLock()
	calls = mock.calls.DescribeExportTasksRequest
	mock.lockDescribeExportTasksRequest.RUnlock()
	return calls
}

// DescribeExportTasksWithContext calls DescribeExportTasksWithContextFunc.
func (mock *rdsClientMock) DescribeExportTasksWithContext(contextMoqParam context.Context, describeExportTasksInput *rds.DescribeExportTasksInput, options ...request.Option) (*rds.DescribeExportTasksOutput, error) {
	if mock.DescribeExportTasksWithContextFunc == nil {
		panic("rdsClientMock.DescribeExportTasksWithContextFunc: method is nil but rdsClient.DescribeExportTasksWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DescribeExportTasksInput *rds.DescribeExportTasksInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DescribeExportTasksInput: describeExportTasksInput,
		Options:                  options,
	}
	mock.lockDescribeExportTasksWithContext.Lock()
	mock.calls.DescribeExportTasksWithContext = append(mock.calls.DescribeExportTasksWithContext, callInfo)
	mock.lockDescribeExportTasksWithContext.Unlock()
	return mock.DescribeExportTasksWithContextFunc(contextMoqParam, describeExportTasksInput, options...)
}

// DescribeExportTasksWithContextCalls gets all the calls that were made to DescribeExportTasksWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeExportTasksWithContextCalls())
func (mock *rdsClientMock) DescribeExportTasksWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DescribeExportTasksInput *rds.DescribeExportTasksInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DescribeExportTasksInput *rds.DescribeExportTasksInput
		Options                  []request.Option
	}
	mock.lockDescribeExportTasksWithContext.RLock()
	calls = mock.calls.DescribeExportTasksWithContext
	mock.lockDescribeExportTasksWithContext.RUnlock()
	return calls
}

// DescribeGlobalClusters calls DescribeGlobalClustersFunc.
func (mock *rdsClientMock) DescribeGlobalClusters(describeGlobalClustersInput *rds.DescribeGlobalClustersInput) (*rds.DescribeGlobalClustersOutput, error) {
	if mock.DescribeGlobalClustersFunc == nil {
		panic("rdsClientMock.DescribeGlobalClustersFunc: method is nil but rdsClient.DescribeGlobalClusters was just called")
	}
	callInfo := struct {
		DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
	}{
		DescribeGlobalClustersInput: describeGlobalClustersInput,
	}
	mock.lockDescribeGlobalClusters.Lock()
	mock.calls.DescribeGlobalClusters = append(mock.calls.DescribeGlobalClusters, callInfo)
	mock.lockDescribeGlobalClusters.Unlock()
	return mock.DescribeGlobalClustersFunc(describeGlobalClustersInput)
}

// DescribeGlobalClustersCalls gets all the calls that were made to DescribeGlobalClusters.
// Check the length with:
//     len(mockedrdsClient.DescribeGlobalClustersCalls())
func (mock *rdsClientMock) DescribeGlobalClustersCalls() []struct {
	DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
} {
	var calls []struct {
		DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
	}
	mock.lockDescribeGlobalClusters.RLock()
	calls = mock.calls.DescribeGlobalClusters
	mock.lockDescribeGlobalClusters.RUnlock()
	return calls
}

// DescribeGlobalClustersPages calls DescribeGlobalClustersPagesFunc.
func (mock *rdsClientMock) DescribeGlobalClustersPages(describeGlobalClustersInput *rds.DescribeGlobalClustersInput, fn func(*rds.DescribeGlobalClustersOutput, bool) bool) error {
	if mock.DescribeGlobalClustersPagesFunc == nil {
		panic("rdsClientMock.DescribeGlobalClustersPagesFunc: method is nil but rdsClient.DescribeGlobalClustersPages was just called")
	}
	callInfo := struct {
		DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
		Fn                          func(*rds.DescribeGlobalClustersOutput, bool) bool
	}{
		DescribeGlobalClustersInput: describeGlobalClustersInput,
		Fn:                          fn,
	}
	mock.lockDescribeGlobalClustersPages.Lock()
	mock.calls.DescribeGlobalClustersPages = append(mock.calls.DescribeGlobalClustersPages, callInfo)
	mock.lockDescribeGlobalClustersPages.Unlock()
	return mock.DescribeGlobalClustersPagesFunc(describeGlobalClustersInput, fn)
}

// DescribeGlobalClustersPagesCalls gets all the calls that were made to DescribeGlobalClustersPages.
// Check the length with:
//     len(mockedrdsClient.DescribeGlobalClustersPagesCalls())
func (mock *rdsClientMock) DescribeGlobalClustersPagesCalls() []struct {
	DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
	Fn                          func(*rds.DescribeGlobalClustersOutput, bool) bool
} {
	var calls []struct {
		DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
		Fn                          func(*rds.DescribeGlobalClustersOutput, bool) bool
	}
	mock.lockDescribeGlobalClustersPages.RLock()
	calls = mock.calls.DescribeGlobalClustersPages
	mock.lockDescribeGlobalClustersPages.RUnlock()
	return calls
}

// DescribeGlobalClustersPagesWithContext calls DescribeGlobalClustersPagesWithContextFunc.
func (mock *rdsClientMock) DescribeGlobalClustersPagesWithContext(contextMoqParam context.Context, describeGlobalClustersInput *rds.DescribeGlobalClustersInput, fn func(*rds.DescribeGlobalClustersOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeGlobalClustersPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeGlobalClustersPagesWithContextFunc: method is nil but rdsClient.DescribeGlobalClustersPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
		Fn                          func(*rds.DescribeGlobalClustersOutput, bool) bool
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DescribeGlobalClustersInput: describeGlobalClustersInput,
		Fn:                          fn,
		Options:                     options,
	}
	mock.lockDescribeGlobalClustersPagesWithContext.Lock()
	mock.calls.DescribeGlobalClustersPagesWithContext = append(mock.calls.DescribeGlobalClustersPagesWithContext, callInfo)
	mock.lockDescribeGlobalClustersPagesWithContext.Unlock()
	return mock.DescribeGlobalClustersPagesWithContextFunc(contextMoqParam, describeGlobalClustersInput, fn, options...)
}

// DescribeGlobalClustersPagesWithContextCalls gets all the calls that were made to DescribeGlobalClustersPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeGlobalClustersPagesWithContextCalls())
func (mock *rdsClientMock) DescribeGlobalClustersPagesWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
	Fn                          func(*rds.DescribeGlobalClustersOutput, bool) bool
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
		Fn                          func(*rds.DescribeGlobalClustersOutput, bool) bool
		Options                     []request.Option
	}
	mock.lockDescribeGlobalClustersPagesWithContext.RLock()
	calls = mock.calls.DescribeGlobalClustersPagesWithContext
	mock.lockDescribeGlobalClustersPagesWithContext.RUnlock()
	return calls
}

// DescribeGlobalClustersRequest calls DescribeGlobalClustersRequestFunc.
func (mock *rdsClientMock) DescribeGlobalClustersRequest(describeGlobalClustersInput *rds.DescribeGlobalClustersInput) (*request.Request, *rds.DescribeGlobalClustersOutput) {
	if mock.DescribeGlobalClustersRequestFunc == nil {
		panic("rdsClientMock.DescribeGlobalClustersRequestFunc: method is nil but rdsClient.DescribeGlobalClustersRequest was just called")
	}
	callInfo := struct {
		DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
	}{
		DescribeGlobalClustersInput: describeGlobalClustersInput,
	}
	mock.lockDescribeGlobalClustersRequest.Lock()
	mock.calls.DescribeGlobalClustersRequest = append(mock.calls.DescribeGlobalClustersRequest, callInfo)
	mock.lockDescribeGlobalClustersRequest.Unlock()
	return mock.DescribeGlobalClustersRequestFunc(describeGlobalClustersInput)
}

// DescribeGlobalClustersRequestCalls gets all the calls that were made to DescribeGlobalClustersRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeGlobalClustersRequestCalls())
func (mock *rdsClientMock) DescribeGlobalClustersRequestCalls() []struct {
	DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
} {
	var calls []struct {
		DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
	}
	mock.lockDescribeGlobalClustersRequest.RLock()
	calls = mock.calls.DescribeGlobalClustersRequest
	mock.lockDescribeGlobalClustersRequest.RUnlock()
	return calls
}

// DescribeGlobalClustersWithContext calls DescribeGlobalClustersWithContextFunc.
func (mock *rdsClientMock) DescribeGlobalClustersWithContext(contextMoqParam context.Context, describeGlobalClustersInput *rds.DescribeGlobalClustersInput, options ...request.Option) (*rds.DescribeGlobalClustersOutput, error) {
	if mock.DescribeGlobalClustersWithContextFunc == nil {
		panic("rdsClientMock.DescribeGlobalClustersWithContextFunc: method is nil but rdsClient.DescribeGlobalClustersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DescribeGlobalClustersInput: describeGlobalClustersInput,
		Options:                     options,
	}
	mock.lockDescribeGlobalClustersWithContext.Lock()
	mock.calls.DescribeGlobalClustersWithContext = append(mock.calls.DescribeGlobalClustersWithContext, callInfo)
	mock.lockDescribeGlobalClustersWithContext.Unlock()
	return mock.DescribeGlobalClustersWithContextFunc(contextMoqParam, describeGlobalClustersInput, options...)
}

// DescribeGlobalClustersWithContextCalls gets all the calls that were made to DescribeGlobalClustersWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeGlobalClustersWithContextCalls())
func (mock *rdsClientMock) DescribeGlobalClustersWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DescribeGlobalClustersInput *rds.DescribeGlobalClustersInput
		Options                     []request.Option
	}
	mock.lockDescribeGlobalClustersWithContext.RLock()
	calls = mock.calls.DescribeGlobalClustersWithContext
	mock.lockDescribeGlobalClustersWithContext.RUnlock()
	return calls
}

// DescribeOptionGroupOptions calls DescribeOptionGroupOptionsFunc.
func (mock *rdsClientMock) DescribeOptionGroupOptions(describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput) (*rds.DescribeOptionGroupOptionsOutput, error) {
	if mock.DescribeOptionGroupOptionsFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupOptionsFunc: method is nil but rdsClient.DescribeOptionGroupOptions was just called")
	}
	callInfo := struct {
		DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
	}{
		DescribeOptionGroupOptionsInput: describeOptionGroupOptionsInput,
	}
	mock.lockDescribeOptionGroupOptions.Lock()
	mock.calls.DescribeOptionGroupOptions = append(mock.calls.DescribeOptionGroupOptions, callInfo)
	mock.lockDescribeOptionGroupOptions.Unlock()
	return mock.DescribeOptionGroupOptionsFunc(describeOptionGroupOptionsInput)
}

// DescribeOptionGroupOptionsCalls gets all the calls that were made to DescribeOptionGroupOptions.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupOptionsCalls())
func (mock *rdsClientMock) DescribeOptionGroupOptionsCalls() []struct {
	DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
} {
	var calls []struct {
		DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
	}
	mock.lockDescribeOptionGroupOptions.RLock()
	calls = mock.calls.DescribeOptionGroupOptions
	mock.lockDescribeOptionGroupOptions.RUnlock()
	return calls
}

// DescribeOptionGroupOptionsPages calls DescribeOptionGroupOptionsPagesFunc.
func (mock *rdsClientMock) DescribeOptionGroupOptionsPages(describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput, fn func(*rds.DescribeOptionGroupOptionsOutput, bool) bool) error {
	if mock.DescribeOptionGroupOptionsPagesFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupOptionsPagesFunc: method is nil but rdsClient.DescribeOptionGroupOptionsPages was just called")
	}
	callInfo := struct {
		DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
		Fn                              func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
	}{
		DescribeOptionGroupOptionsInput: describeOptionGroupOptionsInput,
		Fn:                              fn,
	}
	mock.lockDescribeOptionGroupOptionsPages.Lock()
	mock.calls.DescribeOptionGroupOptionsPages = append(mock.calls.DescribeOptionGroupOptionsPages, callInfo)
	mock.lockDescribeOptionGroupOptionsPages.Unlock()
	return mock.DescribeOptionGroupOptionsPagesFunc(describeOptionGroupOptionsInput, fn)
}

// DescribeOptionGroupOptionsPagesCalls gets all the calls that were made to DescribeOptionGroupOptionsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupOptionsPagesCalls())
func (mock *rdsClientMock) DescribeOptionGroupOptionsPagesCalls() []struct {
	DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
	Fn                              func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
} {
	var calls []struct {
		DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
		Fn                              func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
	}
	mock.lockDescribeOptionGroupOptionsPages.RLock()
	calls = mock.calls.DescribeOptionGroupOptionsPages
	mock.lockDescribeOptionGroupOptionsPages.RUnlock()
	return calls
}

// DescribeOptionGroupOptionsPagesWithContext calls DescribeOptionGroupOptionsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeOptionGroupOptionsPagesWithContext(contextMoqParam context.Context, describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput, fn func(*rds.DescribeOptionGroupOptionsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeOptionGroupOptionsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupOptionsPagesWithContextFunc: method is nil but rdsClient.DescribeOptionGroupOptionsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
		Fn                              func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeOptionGroupOptionsInput: describeOptionGroupOptionsInput,
		Fn:                              fn,
		Options:                         options,
	}
	mock.lockDescribeOptionGroupOptionsPagesWithContext.Lock()
	mock.calls.DescribeOptionGroupOptionsPagesWithContext = append(mock.calls.DescribeOptionGroupOptionsPagesWithContext, callInfo)
	mock.lockDescribeOptionGroupOptionsPagesWithContext.Unlock()
	return mock.DescribeOptionGroupOptionsPagesWithContextFunc(contextMoqParam, describeOptionGroupOptionsInput, fn, options...)
}

// DescribeOptionGroupOptionsPagesWithContextCalls gets all the calls that were made to DescribeOptionGroupOptionsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupOptionsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeOptionGroupOptionsPagesWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
	Fn                              func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
		Fn                              func(*rds.DescribeOptionGroupOptionsOutput, bool) bool
		Options                         []request.Option
	}
	mock.lockDescribeOptionGroupOptionsPagesWithContext.RLock()
	calls = mock.calls.DescribeOptionGroupOptionsPagesWithContext
	mock.lockDescribeOptionGroupOptionsPagesWithContext.RUnlock()
	return calls
}

// DescribeOptionGroupOptionsRequest calls DescribeOptionGroupOptionsRequestFunc.
func (mock *rdsClientMock) DescribeOptionGroupOptionsRequest(describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput) (*request.Request, *rds.DescribeOptionGroupOptionsOutput) {
	if mock.DescribeOptionGroupOptionsRequestFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupOptionsRequestFunc: method is nil but rdsClient.DescribeOptionGroupOptionsRequest was just called")
	}
	callInfo := struct {
		DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
	}{
		DescribeOptionGroupOptionsInput: describeOptionGroupOptionsInput,
	}
	mock.lockDescribeOptionGroupOptionsRequest.Lock()
	mock.calls.DescribeOptionGroupOptionsRequest = append(mock.calls.DescribeOptionGroupOptionsRequest, callInfo)
	mock.lockDescribeOptionGroupOptionsRequest.Unlock()
	return mock.DescribeOptionGroupOptionsRequestFunc(describeOptionGroupOptionsInput)
}

// DescribeOptionGroupOptionsRequestCalls gets all the calls that were made to DescribeOptionGroupOptionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupOptionsRequestCalls())
func (mock *rdsClientMock) DescribeOptionGroupOptionsRequestCalls() []struct {
	DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
} {
	var calls []struct {
		DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
	}
	mock.lockDescribeOptionGroupOptionsRequest.RLock()
	calls = mock.calls.DescribeOptionGroupOptionsRequest
	mock.lockDescribeOptionGroupOptionsRequest.RUnlock()
	return calls
}

// DescribeOptionGroupOptionsWithContext calls DescribeOptionGroupOptionsWithContextFunc.
func (mock *rdsClientMock) DescribeOptionGroupOptionsWithContext(contextMoqParam context.Context, describeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput, options ...request.Option) (*rds.DescribeOptionGroupOptionsOutput, error) {
	if mock.DescribeOptionGroupOptionsWithContextFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupOptionsWithContextFunc: method is nil but rdsClient.DescribeOptionGroupOptionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeOptionGroupOptionsInput: describeOptionGroupOptionsInput,
		Options:                         options,
	}
	mock.lockDescribeOptionGroupOptionsWithContext.Lock()
	mock.calls.DescribeOptionGroupOptionsWithContext = append(mock.calls.DescribeOptionGroupOptionsWithContext, callInfo)
	mock.lockDescribeOptionGroupOptionsWithContext.Unlock()
	return mock.DescribeOptionGroupOptionsWithContextFunc(contextMoqParam, describeOptionGroupOptionsInput, options...)
}

// DescribeOptionGroupOptionsWithContextCalls gets all the calls that were made to DescribeOptionGroupOptionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupOptionsWithContextCalls())
func (mock *rdsClientMock) DescribeOptionGroupOptionsWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeOptionGroupOptionsInput *rds.DescribeOptionGroupOptionsInput
		Options                         []request.Option
	}
	mock.lockDescribeOptionGroupOptionsWithContext.RLock()
	calls = mock.calls.DescribeOptionGroupOptionsWithContext
	mock.lockDescribeOptionGroupOptionsWithContext.RUnlock()
	return calls
}

// DescribeOptionGroups calls DescribeOptionGroupsFunc.
func (mock *rdsClientMock) DescribeOptionGroups(describeOptionGroupsInput *rds.DescribeOptionGroupsInput) (*rds.DescribeOptionGroupsOutput, error) {
	if mock.DescribeOptionGroupsFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupsFunc: method is nil but rdsClient.DescribeOptionGroups was just called")
	}
	callInfo := struct {
		DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
	}{
		DescribeOptionGroupsInput: describeOptionGroupsInput,
	}
	mock.lockDescribeOptionGroups.Lock()
	mock.calls.DescribeOptionGroups = append(mock.calls.DescribeOptionGroups, callInfo)
	mock.lockDescribeOptionGroups.Unlock()
	return mock.DescribeOptionGroupsFunc(describeOptionGroupsInput)
}

// DescribeOptionGroupsCalls gets all the calls that were made to DescribeOptionGroups.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupsCalls())
func (mock *rdsClientMock) DescribeOptionGroupsCalls() []struct {
	DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
} {
	var calls []struct {
		DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
	}
	mock.lockDescribeOptionGroups.RLock()
	calls = mock.calls.DescribeOptionGroups
	mock.lockDescribeOptionGroups.RUnlock()
	return calls
}

// DescribeOptionGroupsPages calls DescribeOptionGroupsPagesFunc.
func (mock *rdsClientMock) DescribeOptionGroupsPages(describeOptionGroupsInput *rds.DescribeOptionGroupsInput, fn func(*rds.DescribeOptionGroupsOutput, bool) bool) error {
	if mock.DescribeOptionGroupsPagesFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupsPagesFunc: method is nil but rdsClient.DescribeOptionGroupsPages was just called")
	}
	callInfo := struct {
		DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
		Fn                        func(*rds.DescribeOptionGroupsOutput, bool) bool
	}{
		DescribeOptionGroupsInput: describeOptionGroupsInput,
		Fn:                        fn,
	}
	mock.lockDescribeOptionGroupsPages.Lock()
	mock.calls.DescribeOptionGroupsPages = append(mock.calls.DescribeOptionGroupsPages, callInfo)
	mock.lockDescribeOptionGroupsPages.Unlock()
	return mock.DescribeOptionGroupsPagesFunc(describeOptionGroupsInput, fn)
}

// DescribeOptionGroupsPagesCalls gets all the calls that were made to DescribeOptionGroupsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupsPagesCalls())
func (mock *rdsClientMock) DescribeOptionGroupsPagesCalls() []struct {
	DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
	Fn                        func(*rds.DescribeOptionGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
		Fn                        func(*rds.DescribeOptionGroupsOutput, bool) bool
	}
	mock.lockDescribeOptionGroupsPages.RLock()
	calls = mock.calls.DescribeOptionGroupsPages
	mock.lockDescribeOptionGroupsPages.RUnlock()
	return calls
}

// DescribeOptionGroupsPagesWithContext calls DescribeOptionGroupsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeOptionGroupsPagesWithContext(contextMoqParam context.Context, describeOptionGroupsInput *rds.DescribeOptionGroupsInput, fn func(*rds.DescribeOptionGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeOptionGroupsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupsPagesWithContextFunc: method is nil but rdsClient.DescribeOptionGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
		Fn                        func(*rds.DescribeOptionGroupsOutput, bool) bool
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		DescribeOptionGroupsInput: describeOptionGroupsInput,
		Fn:                        fn,
		Options:                   options,
	}
	mock.lockDescribeOptionGroupsPagesWithContext.Lock()
	mock.calls.DescribeOptionGroupsPagesWithContext = append(mock.calls.DescribeOptionGroupsPagesWithContext, callInfo)
	mock.lockDescribeOptionGroupsPagesWithContext.Unlock()
	return mock.DescribeOptionGroupsPagesWithContextFunc(contextMoqParam, describeOptionGroupsInput, fn, options...)
}

// DescribeOptionGroupsPagesWithContextCalls gets all the calls that were made to DescribeOptionGroupsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeOptionGroupsPagesWithContextCalls() []struct {
	ContextMoqParam           context.Context
	DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
	Fn                        func(*rds.DescribeOptionGroupsOutput, bool) bool
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
		Fn                        func(*rds.DescribeOptionGroupsOutput, bool) bool
		Options                   []request.Option
	}
	mock.lockDescribeOptionGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeOptionGroupsPagesWithContext
	mock.lockDescribeOptionGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeOptionGroupsRequest calls DescribeOptionGroupsRequestFunc.
func (mock *rdsClientMock) DescribeOptionGroupsRequest(describeOptionGroupsInput *rds.DescribeOptionGroupsInput) (*request.Request, *rds.DescribeOptionGroupsOutput) {
	if mock.DescribeOptionGroupsRequestFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupsRequestFunc: method is nil but rdsClient.DescribeOptionGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
	}{
		DescribeOptionGroupsInput: describeOptionGroupsInput,
	}
	mock.lockDescribeOptionGroupsRequest.Lock()
	mock.calls.DescribeOptionGroupsRequest = append(mock.calls.DescribeOptionGroupsRequest, callInfo)
	mock.lockDescribeOptionGroupsRequest.Unlock()
	return mock.DescribeOptionGroupsRequestFunc(describeOptionGroupsInput)
}

// DescribeOptionGroupsRequestCalls gets all the calls that were made to DescribeOptionGroupsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupsRequestCalls())
func (mock *rdsClientMock) DescribeOptionGroupsRequestCalls() []struct {
	DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
} {
	var calls []struct {
		DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
	}
	mock.lockDescribeOptionGroupsRequest.RLock()
	calls = mock.calls.DescribeOptionGroupsRequest
	mock.lockDescribeOptionGroupsRequest.RUnlock()
	return calls
}

// DescribeOptionGroupsWithContext calls DescribeOptionGroupsWithContextFunc.
func (mock *rdsClientMock) DescribeOptionGroupsWithContext(contextMoqParam context.Context, describeOptionGroupsInput *rds.DescribeOptionGroupsInput, options ...request.Option) (*rds.DescribeOptionGroupsOutput, error) {
	if mock.DescribeOptionGroupsWithContextFunc == nil {
		panic("rdsClientMock.DescribeOptionGroupsWithContextFunc: method is nil but rdsClient.DescribeOptionGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		DescribeOptionGroupsInput: describeOptionGroupsInput,
		Options:                   options,
	}
	mock.lockDescribeOptionGroupsWithContext.Lock()
	mock.calls.DescribeOptionGroupsWithContext = append(mock.calls.DescribeOptionGroupsWithContext, callInfo)
	mock.lockDescribeOptionGroupsWithContext.Unlock()
	return mock.DescribeOptionGroupsWithContextFunc(contextMoqParam, describeOptionGroupsInput, options...)
}

// DescribeOptionGroupsWithContextCalls gets all the calls that were made to DescribeOptionGroupsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOptionGroupsWithContextCalls())
func (mock *rdsClientMock) DescribeOptionGroupsWithContextCalls() []struct {
	ContextMoqParam           context.Context
	DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		DescribeOptionGroupsInput *rds.DescribeOptionGroupsInput
		Options                   []request.Option
	}
	mock.lockDescribeOptionGroupsWithContext.RLock()
	calls = mock.calls.DescribeOptionGroupsWithContext
	mock.lockDescribeOptionGroupsWithContext.RUnlock()
	return calls
}

// DescribeOrderableDBInstanceOptions calls DescribeOrderableDBInstanceOptionsFunc.
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptions(describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	if mock.DescribeOrderableDBInstanceOptionsFunc == nil {
		panic("rdsClientMock.DescribeOrderableDBInstanceOptionsFunc: method is nil but rdsClient.DescribeOrderableDBInstanceOptions was just called")
	}
	callInfo := struct {
		DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
	}{
		DescribeOrderableDBInstanceOptionsInput: describeOrderableDBInstanceOptionsInput,
	}
	mock.lockDescribeOrderableDBInstanceOptions.Lock()
	mock.calls.DescribeOrderableDBInstanceOptions = append(mock.calls.DescribeOrderableDBInstanceOptions, callInfo)
	mock.lockDescribeOrderableDBInstanceOptions.Unlock()
	return mock.DescribeOrderableDBInstanceOptionsFunc(describeOrderableDBInstanceOptionsInput)
}

// DescribeOrderableDBInstanceOptionsCalls gets all the calls that were made to DescribeOrderableDBInstanceOptions.
// Check the length with:
//     len(mockedrdsClient.DescribeOrderableDBInstanceOptionsCalls())
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsCalls() []struct {
	DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
} {
	var calls []struct {
		DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
	}
	mock.lockDescribeOrderableDBInstanceOptions.RLock()
	calls = mock.calls.DescribeOrderableDBInstanceOptions
	mock.lockDescribeOrderableDBInstanceOptions.RUnlock()
	return calls
}

// DescribeOrderableDBInstanceOptionsPages calls DescribeOrderableDBInstanceOptionsPagesFunc.
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsPages(describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput, fn func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error {
	if mock.DescribeOrderableDBInstanceOptionsPagesFunc == nil {
		panic("rdsClientMock.DescribeOrderableDBInstanceOptionsPagesFunc: method is nil but rdsClient.DescribeOrderableDBInstanceOptionsPages was just called")
	}
	callInfo := struct {
		DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
		Fn                                      func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
	}{
		DescribeOrderableDBInstanceOptionsInput: describeOrderableDBInstanceOptionsInput,
		Fn:                                      fn,
	}
	mock.lockDescribeOrderableDBInstanceOptionsPages.Lock()
	mock.calls.DescribeOrderableDBInstanceOptionsPages = append(mock.calls.DescribeOrderableDBInstanceOptionsPages, callInfo)
	mock.lockDescribeOrderableDBInstanceOptionsPages.Unlock()
	return mock.DescribeOrderableDBInstanceOptionsPagesFunc(describeOrderableDBInstanceOptionsInput, fn)
}

// DescribeOrderableDBInstanceOptionsPagesCalls gets all the calls that were made to DescribeOrderableDBInstanceOptionsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeOrderableDBInstanceOptionsPagesCalls())
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsPagesCalls() []struct {
	DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
	Fn                                      func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
} {
	var calls []struct {
		DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
		Fn                                      func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
	}
	mock.lockDescribeOrderableDBInstanceOptionsPages.RLock()
	calls = mock.calls.DescribeOrderableDBInstanceOptionsPages
	mock.lockDescribeOrderableDBInstanceOptionsPages.RUnlock()
	return calls
}

// DescribeOrderableDBInstanceOptionsPagesWithContext calls DescribeOrderableDBInstanceOptionsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsPagesWithContext(contextMoqParam context.Context, describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput, fn func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeOrderableDBInstanceOptionsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeOrderableDBInstanceOptionsPagesWithContextFunc: method is nil but rdsClient.DescribeOrderableDBInstanceOptionsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
		Fn                                      func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		DescribeOrderableDBInstanceOptionsInput: describeOrderableDBInstanceOptionsInput,
		Fn:                                      fn,
		Options:                                 options,
	}
	mock.lockDescribeOrderableDBInstanceOptionsPagesWithContext.Lock()
	mock.calls.DescribeOrderableDBInstanceOptionsPagesWithContext = append(mock.calls.DescribeOrderableDBInstanceOptionsPagesWithContext, callInfo)
	mock.lockDescribeOrderableDBInstanceOptionsPagesWithContext.Unlock()
	return mock.DescribeOrderableDBInstanceOptionsPagesWithContextFunc(contextMoqParam, describeOrderableDBInstanceOptionsInput, fn, options...)
}

// DescribeOrderableDBInstanceOptionsPagesWithContextCalls gets all the calls that were made to DescribeOrderableDBInstanceOptionsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOrderableDBInstanceOptionsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsPagesWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
	Fn                                      func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
		Fn                                      func(*rds.DescribeOrderableDBInstanceOptionsOutput, bool) bool
		Options                                 []request.Option
	}
	mock.lockDescribeOrderableDBInstanceOptionsPagesWithContext.RLock()
	calls = mock.calls.DescribeOrderableDBInstanceOptionsPagesWithContext
	mock.lockDescribeOrderableDBInstanceOptionsPagesWithContext.RUnlock()
	return calls
}

// DescribeOrderableDBInstanceOptionsRequest calls DescribeOrderableDBInstanceOptionsRequestFunc.
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsRequest(describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *rds.DescribeOrderableDBInstanceOptionsOutput) {
	if mock.DescribeOrderableDBInstanceOptionsRequestFunc == nil {
		panic("rdsClientMock.DescribeOrderableDBInstanceOptionsRequestFunc: method is nil but rdsClient.DescribeOrderableDBInstanceOptionsRequest was just called")
	}
	callInfo := struct {
		DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
	}{
		DescribeOrderableDBInstanceOptionsInput: describeOrderableDBInstanceOptionsInput,
	}
	mock.lockDescribeOrderableDBInstanceOptionsRequest.Lock()
	mock.calls.DescribeOrderableDBInstanceOptionsRequest = append(mock.calls.DescribeOrderableDBInstanceOptionsRequest, callInfo)
	mock.lockDescribeOrderableDBInstanceOptionsRequest.Unlock()
	return mock.DescribeOrderableDBInstanceOptionsRequestFunc(describeOrderableDBInstanceOptionsInput)
}

// DescribeOrderableDBInstanceOptionsRequestCalls gets all the calls that were made to DescribeOrderableDBInstanceOptionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeOrderableDBInstanceOptionsRequestCalls())
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsRequestCalls() []struct {
	DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
} {
	var calls []struct {
		DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
	}
	mock.lockDescribeOrderableDBInstanceOptionsRequest.RLock()
	calls = mock.calls.DescribeOrderableDBInstanceOptionsRequest
	mock.lockDescribeOrderableDBInstanceOptionsRequest.RUnlock()
	return calls
}

// DescribeOrderableDBInstanceOptionsWithContext calls DescribeOrderableDBInstanceOptionsWithContextFunc.
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsWithContext(contextMoqParam context.Context, describeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput, options ...request.Option) (*rds.DescribeOrderableDBInstanceOptionsOutput, error) {
	if mock.DescribeOrderableDBInstanceOptionsWithContextFunc == nil {
		panic("rdsClientMock.DescribeOrderableDBInstanceOptionsWithContextFunc: method is nil but rdsClient.DescribeOrderableDBInstanceOptionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		DescribeOrderableDBInstanceOptionsInput: describeOrderableDBInstanceOptionsInput,
		Options:                                 options,
	}
	mock.lockDescribeOrderableDBInstanceOptionsWithContext.Lock()
	mock.calls.DescribeOrderableDBInstanceOptionsWithContext = append(mock.calls.DescribeOrderableDBInstanceOptionsWithContext, callInfo)
	mock.lockDescribeOrderableDBInstanceOptionsWithContext.Unlock()
	return mock.DescribeOrderableDBInstanceOptionsWithContextFunc(contextMoqParam, describeOrderableDBInstanceOptionsInput, options...)
}

// DescribeOrderableDBInstanceOptionsWithContextCalls gets all the calls that were made to DescribeOrderableDBInstanceOptionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeOrderableDBInstanceOptionsWithContextCalls())
func (mock *rdsClientMock) DescribeOrderableDBInstanceOptionsWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		DescribeOrderableDBInstanceOptionsInput *rds.DescribeOrderableDBInstanceOptionsInput
		Options                                 []request.Option
	}
	mock.lockDescribeOrderableDBInstanceOptionsWithContext.RLock()
	calls = mock.calls.DescribeOrderableDBInstanceOptionsWithContext
	mock.lockDescribeOrderableDBInstanceOptionsWithContext.RUnlock()
	return calls
}

// DescribePendingMaintenanceActions calls DescribePendingMaintenanceActionsFunc.
func (mock *rdsClientMock) DescribePendingMaintenanceActions(describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	if mock.DescribePendingMaintenanceActionsFunc == nil {
		panic("rdsClientMock.DescribePendingMaintenanceActionsFunc: method is nil but rdsClient.DescribePendingMaintenanceActions was just called")
	}
	callInfo := struct {
		DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
	}{
		DescribePendingMaintenanceActionsInput: describePendingMaintenanceActionsInput,
	}
	mock.lockDescribePendingMaintenanceActions.Lock()
	mock.calls.DescribePendingMaintenanceActions = append(mock.calls.DescribePendingMaintenanceActions, callInfo)
	mock.lockDescribePendingMaintenanceActions.Unlock()
	return mock.DescribePendingMaintenanceActionsFunc(describePendingMaintenanceActionsInput)
}

// DescribePendingMaintenanceActionsCalls gets all the calls that were made to DescribePendingMaintenanceActions.
// Check the length with:
//     len(mockedrdsClient.DescribePendingMaintenanceActionsCalls())
func (mock *rdsClientMock) DescribePendingMaintenanceActionsCalls() []struct {
	DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
} {
	var calls []struct {
		DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
	}
	mock.lockDescribePendingMaintenanceActions.RLock()
	calls = mock.calls.DescribePendingMaintenanceActions
	mock.lockDescribePendingMaintenanceActions.RUnlock()
	return calls
}

// DescribePendingMaintenanceActionsPages calls DescribePendingMaintenanceActionsPagesFunc.
func (mock *rdsClientMock) DescribePendingMaintenanceActionsPages(describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput, fn func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool) error {
	if mock.DescribePendingMaintenanceActionsPagesFunc == nil {
		panic("rdsClientMock.DescribePendingMaintenanceActionsPagesFunc: method is nil but rdsClient.DescribePendingMaintenanceActionsPages was just called")
	}
	callInfo := struct {
		DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
		Fn                                     func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
	}{
		DescribePendingMaintenanceActionsInput: describePendingMaintenanceActionsInput,
		Fn:                                     fn,
	}
	mock.lockDescribePendingMaintenanceActionsPages.Lock()
	mock.calls.DescribePendingMaintenanceActionsPages = append(mock.calls.DescribePendingMaintenanceActionsPages, callInfo)
	mock.lockDescribePendingMaintenanceActionsPages.Unlock()
	return mock.DescribePendingMaintenanceActionsPagesFunc(describePendingMaintenanceActionsInput, fn)
}

// DescribePendingMaintenanceActionsPagesCalls gets all the calls that were made to DescribePendingMaintenanceActionsPages.
// Check the length with:
//     len(mockedrdsClient.DescribePendingMaintenanceActionsPagesCalls())
func (mock *rdsClientMock) DescribePendingMaintenanceActionsPagesCalls() []struct {
	DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
	Fn                                     func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
} {
	var calls []struct {
		DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
		Fn                                     func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
	}
	mock.lockDescribePendingMaintenanceActionsPages.RLock()
	calls = mock.calls.DescribePendingMaintenanceActionsPages
	mock.lockDescribePendingMaintenanceActionsPages.RUnlock()
	return calls
}

// DescribePendingMaintenanceActionsPagesWithContext calls DescribePendingMaintenanceActionsPagesWithContextFunc.
func (mock *rdsClientMock) DescribePendingMaintenanceActionsPagesWithContext(contextMoqParam context.Context, describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput, fn func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribePendingMaintenanceActionsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribePendingMaintenanceActionsPagesWithContextFunc: method is nil but rdsClient.DescribePendingMaintenanceActionsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                        context.Context
		DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
		Fn                                     func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
		Options                                []request.Option
	}{
		ContextMoqParam:                        contextMoqParam,
		DescribePendingMaintenanceActionsInput: describePendingMaintenanceActionsInput,
		Fn:                                     fn,
		Options:                                options,
	}
	mock.lockDescribePendingMaintenanceActionsPagesWithContext.Lock()
	mock.calls.DescribePendingMaintenanceActionsPagesWithContext = append(mock.calls.DescribePendingMaintenanceActionsPagesWithContext, callInfo)
	mock.lockDescribePendingMaintenanceActionsPagesWithContext.Unlock()
	return mock.DescribePendingMaintenanceActionsPagesWithContextFunc(contextMoqParam, describePendingMaintenanceActionsInput, fn, options...)
}

// DescribePendingMaintenanceActionsPagesWithContextCalls gets all the calls that were made to DescribePendingMaintenanceActionsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribePendingMaintenanceActionsPagesWithContextCalls())
func (mock *rdsClientMock) DescribePendingMaintenanceActionsPagesWithContextCalls() []struct {
	ContextMoqParam                        context.Context
	DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
	Fn                                     func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
	Options                                []request.Option
} {
	var calls []struct {
		ContextMoqParam                        context.Context
		DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
		Fn                                     func(*rds.DescribePendingMaintenanceActionsOutput, bool) bool
		Options                                []request.Option
	}
	mock.lockDescribePendingMaintenanceActionsPagesWithContext.RLock()
	calls = mock.calls.DescribePendingMaintenanceActionsPagesWithContext
	mock.lockDescribePendingMaintenanceActionsPagesWithContext.RUnlock()
	return calls
}

// DescribePendingMaintenanceActionsRequest calls DescribePendingMaintenanceActionsRequestFunc.
func (mock *rdsClientMock) DescribePendingMaintenanceActionsRequest(describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput) (*request.Request, *rds.DescribePendingMaintenanceActionsOutput) {
	if mock.DescribePendingMaintenanceActionsRequestFunc == nil {
		panic("rdsClientMock.DescribePendingMaintenanceActionsRequestFunc: method is nil but rdsClient.DescribePendingMaintenanceActionsRequest was just called")
	}
	callInfo := struct {
		DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
	}{
		DescribePendingMaintenanceActionsInput: describePendingMaintenanceActionsInput,
	}
	mock.lockDescribePendingMaintenanceActionsRequest.Lock()
	mock.calls.DescribePendingMaintenanceActionsRequest = append(mock.calls.DescribePendingMaintenanceActionsRequest, callInfo)
	mock.lockDescribePendingMaintenanceActionsRequest.Unlock()
	return mock.DescribePendingMaintenanceActionsRequestFunc(describePendingMaintenanceActionsInput)
}

// DescribePendingMaintenanceActionsRequestCalls gets all the calls that were made to DescribePendingMaintenanceActionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribePendingMaintenanceActionsRequestCalls())
func (mock *rdsClientMock) DescribePendingMaintenanceActionsRequestCalls() []struct {
	DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
} {
	var calls []struct {
		DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
	}
	mock.lockDescribePendingMaintenanceActionsRequest.RLock()
	calls = mock.calls.DescribePendingMaintenanceActionsRequest
	mock.lockDescribePendingMaintenanceActionsRequest.RUnlock()
	return calls
}

// DescribePendingMaintenanceActionsWithContext calls DescribePendingMaintenanceActionsWithContextFunc.
func (mock *rdsClientMock) DescribePendingMaintenanceActionsWithContext(contextMoqParam context.Context, describePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput, options ...request.Option) (*rds.DescribePendingMaintenanceActionsOutput, error) {
	if mock.DescribePendingMaintenanceActionsWithContextFunc == nil {
		panic("rdsClientMock.DescribePendingMaintenanceActionsWithContextFunc: method is nil but rdsClient.DescribePendingMaintenanceActionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                        context.Context
		DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
		Options                                []request.Option
	}{
		ContextMoqParam:                        contextMoqParam,
		DescribePendingMaintenanceActionsInput: describePendingMaintenanceActionsInput,
		Options:                                options,
	}
	mock.lockDescribePendingMaintenanceActionsWithContext.Lock()
	mock.calls.DescribePendingMaintenanceActionsWithContext = append(mock.calls.DescribePendingMaintenanceActionsWithContext, callInfo)
	mock.lockDescribePendingMaintenanceActionsWithContext.Unlock()
	return mock.DescribePendingMaintenanceActionsWithContextFunc(contextMoqParam, describePendingMaintenanceActionsInput, options...)
}

// DescribePendingMaintenanceActionsWithContextCalls gets all the calls that were made to DescribePendingMaintenanceActionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribePendingMaintenanceActionsWithContextCalls())
func (mock *rdsClientMock) DescribePendingMaintenanceActionsWithContextCalls() []struct {
	ContextMoqParam                        context.Context
	DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
	Options                                []request.Option
} {
	var calls []struct {
		ContextMoqParam                        context.Context
		DescribePendingMaintenanceActionsInput *rds.DescribePendingMaintenanceActionsInput
		Options                                []request.Option
	}
	mock.lockDescribePendingMaintenanceActionsWithContext.RLock()
	calls = mock.calls.DescribePendingMaintenanceActionsWithContext
	mock.lockDescribePendingMaintenanceActionsWithContext.RUnlock()
	return calls
}

// DescribeReservedDBInstances calls DescribeReservedDBInstancesFunc.
func (mock *rdsClientMock) DescribeReservedDBInstances(describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput) (*rds.DescribeReservedDBInstancesOutput, error) {
	if mock.DescribeReservedDBInstancesFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesFunc: method is nil but rdsClient.DescribeReservedDBInstances was just called")
	}
	callInfo := struct {
		DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
	}{
		DescribeReservedDBInstancesInput: describeReservedDBInstancesInput,
	}
	mock.lockDescribeReservedDBInstances.Lock()
	mock.calls.DescribeReservedDBInstances = append(mock.calls.DescribeReservedDBInstances, callInfo)
	mock.lockDescribeReservedDBInstances.Unlock()
	return mock.DescribeReservedDBInstancesFunc(describeReservedDBInstancesInput)
}

// DescribeReservedDBInstancesCalls gets all the calls that were made to DescribeReservedDBInstances.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesCalls() []struct {
	DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
} {
	var calls []struct {
		DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
	}
	mock.lockDescribeReservedDBInstances.RLock()
	calls = mock.calls.DescribeReservedDBInstances
	mock.lockDescribeReservedDBInstances.RUnlock()
	return calls
}

// DescribeReservedDBInstancesOfferings calls DescribeReservedDBInstancesOfferingsFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferings(describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	if mock.DescribeReservedDBInstancesOfferingsFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesOfferingsFunc: method is nil but rdsClient.DescribeReservedDBInstancesOfferings was just called")
	}
	callInfo := struct {
		DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
	}{
		DescribeReservedDBInstancesOfferingsInput: describeReservedDBInstancesOfferingsInput,
	}
	mock.lockDescribeReservedDBInstancesOfferings.Lock()
	mock.calls.DescribeReservedDBInstancesOfferings = append(mock.calls.DescribeReservedDBInstancesOfferings, callInfo)
	mock.lockDescribeReservedDBInstancesOfferings.Unlock()
	return mock.DescribeReservedDBInstancesOfferingsFunc(describeReservedDBInstancesOfferingsInput)
}

// DescribeReservedDBInstancesOfferingsCalls gets all the calls that were made to DescribeReservedDBInstancesOfferings.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesOfferingsCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsCalls() []struct {
	DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
} {
	var calls []struct {
		DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
	}
	mock.lockDescribeReservedDBInstancesOfferings.RLock()
	calls = mock.calls.DescribeReservedDBInstancesOfferings
	mock.lockDescribeReservedDBInstancesOfferings.RUnlock()
	return calls
}

// DescribeReservedDBInstancesOfferingsPages calls DescribeReservedDBInstancesOfferingsPagesFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsPages(describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput, fn func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool) error {
	if mock.DescribeReservedDBInstancesOfferingsPagesFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesOfferingsPagesFunc: method is nil but rdsClient.DescribeReservedDBInstancesOfferingsPages was just called")
	}
	callInfo := struct {
		DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
		Fn                                        func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
	}{
		DescribeReservedDBInstancesOfferingsInput: describeReservedDBInstancesOfferingsInput,
		Fn: fn,
	}
	mock.lockDescribeReservedDBInstancesOfferingsPages.Lock()
	mock.calls.DescribeReservedDBInstancesOfferingsPages = append(mock.calls.DescribeReservedDBInstancesOfferingsPages, callInfo)
	mock.lockDescribeReservedDBInstancesOfferingsPages.Unlock()
	return mock.DescribeReservedDBInstancesOfferingsPagesFunc(describeReservedDBInstancesOfferingsInput, fn)
}

// DescribeReservedDBInstancesOfferingsPagesCalls gets all the calls that were made to DescribeReservedDBInstancesOfferingsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesOfferingsPagesCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsPagesCalls() []struct {
	DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
	Fn                                        func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
} {
	var calls []struct {
		DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
		Fn                                        func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
	}
	mock.lockDescribeReservedDBInstancesOfferingsPages.RLock()
	calls = mock.calls.DescribeReservedDBInstancesOfferingsPages
	mock.lockDescribeReservedDBInstancesOfferingsPages.RUnlock()
	return calls
}

// DescribeReservedDBInstancesOfferingsPagesWithContext calls DescribeReservedDBInstancesOfferingsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsPagesWithContext(contextMoqParam context.Context, describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput, fn func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeReservedDBInstancesOfferingsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesOfferingsPagesWithContextFunc: method is nil but rdsClient.DescribeReservedDBInstancesOfferingsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                           context.Context
		DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
		Fn                                        func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
		Options                                   []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		DescribeReservedDBInstancesOfferingsInput: describeReservedDBInstancesOfferingsInput,
		Fn:      fn,
		Options: options,
	}
	mock.lockDescribeReservedDBInstancesOfferingsPagesWithContext.Lock()
	mock.calls.DescribeReservedDBInstancesOfferingsPagesWithContext = append(mock.calls.DescribeReservedDBInstancesOfferingsPagesWithContext, callInfo)
	mock.lockDescribeReservedDBInstancesOfferingsPagesWithContext.Unlock()
	return mock.DescribeReservedDBInstancesOfferingsPagesWithContextFunc(contextMoqParam, describeReservedDBInstancesOfferingsInput, fn, options...)
}

// DescribeReservedDBInstancesOfferingsPagesWithContextCalls gets all the calls that were made to DescribeReservedDBInstancesOfferingsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesOfferingsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsPagesWithContextCalls() []struct {
	ContextMoqParam                           context.Context
	DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
	Fn                                        func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
	Options                                   []request.Option
} {
	var calls []struct {
		ContextMoqParam                           context.Context
		DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
		Fn                                        func(*rds.DescribeReservedDBInstancesOfferingsOutput, bool) bool
		Options                                   []request.Option
	}
	mock.lockDescribeReservedDBInstancesOfferingsPagesWithContext.RLock()
	calls = mock.calls.DescribeReservedDBInstancesOfferingsPagesWithContext
	mock.lockDescribeReservedDBInstancesOfferingsPagesWithContext.RUnlock()
	return calls
}

// DescribeReservedDBInstancesOfferingsRequest calls DescribeReservedDBInstancesOfferingsRequestFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsRequest(describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput) (*request.Request, *rds.DescribeReservedDBInstancesOfferingsOutput) {
	if mock.DescribeReservedDBInstancesOfferingsRequestFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesOfferingsRequestFunc: method is nil but rdsClient.DescribeReservedDBInstancesOfferingsRequest was just called")
	}
	callInfo := struct {
		DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
	}{
		DescribeReservedDBInstancesOfferingsInput: describeReservedDBInstancesOfferingsInput,
	}
	mock.lockDescribeReservedDBInstancesOfferingsRequest.Lock()
	mock.calls.DescribeReservedDBInstancesOfferingsRequest = append(mock.calls.DescribeReservedDBInstancesOfferingsRequest, callInfo)
	mock.lockDescribeReservedDBInstancesOfferingsRequest.Unlock()
	return mock.DescribeReservedDBInstancesOfferingsRequestFunc(describeReservedDBInstancesOfferingsInput)
}

// DescribeReservedDBInstancesOfferingsRequestCalls gets all the calls that were made to DescribeReservedDBInstancesOfferingsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesOfferingsRequestCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsRequestCalls() []struct {
	DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
} {
	var calls []struct {
		DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
	}
	mock.lockDescribeReservedDBInstancesOfferingsRequest.RLock()
	calls = mock.calls.DescribeReservedDBInstancesOfferingsRequest
	mock.lockDescribeReservedDBInstancesOfferingsRequest.RUnlock()
	return calls
}

// DescribeReservedDBInstancesOfferingsWithContext calls DescribeReservedDBInstancesOfferingsWithContextFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsWithContext(contextMoqParam context.Context, describeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput, options ...request.Option) (*rds.DescribeReservedDBInstancesOfferingsOutput, error) {
	if mock.DescribeReservedDBInstancesOfferingsWithContextFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesOfferingsWithContextFunc: method is nil but rdsClient.DescribeReservedDBInstancesOfferingsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                           context.Context
		DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
		Options                                   []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		DescribeReservedDBInstancesOfferingsInput: describeReservedDBInstancesOfferingsInput,
		Options: options,
	}
	mock.lockDescribeReservedDBInstancesOfferingsWithContext.Lock()
	mock.calls.DescribeReservedDBInstancesOfferingsWithContext = append(mock.calls.DescribeReservedDBInstancesOfferingsWithContext, callInfo)
	mock.lockDescribeReservedDBInstancesOfferingsWithContext.Unlock()
	return mock.DescribeReservedDBInstancesOfferingsWithContextFunc(contextMoqParam, describeReservedDBInstancesOfferingsInput, options...)
}

// DescribeReservedDBInstancesOfferingsWithContextCalls gets all the calls that were made to DescribeReservedDBInstancesOfferingsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesOfferingsWithContextCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesOfferingsWithContextCalls() []struct {
	ContextMoqParam                           context.Context
	DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
	Options                                   []request.Option
} {
	var calls []struct {
		ContextMoqParam                           context.Context
		DescribeReservedDBInstancesOfferingsInput *rds.DescribeReservedDBInstancesOfferingsInput
		Options                                   []request.Option
	}
	mock.lockDescribeReservedDBInstancesOfferingsWithContext.RLock()
	calls = mock.calls.DescribeReservedDBInstancesOfferingsWithContext
	mock.lockDescribeReservedDBInstancesOfferingsWithContext.RUnlock()
	return calls
}

// DescribeReservedDBInstancesPages calls DescribeReservedDBInstancesPagesFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesPages(describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput, fn func(*rds.DescribeReservedDBInstancesOutput, bool) bool) error {
	if mock.DescribeReservedDBInstancesPagesFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesPagesFunc: method is nil but rdsClient.DescribeReservedDBInstancesPages was just called")
	}
	callInfo := struct {
		DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
		Fn                               func(*rds.DescribeReservedDBInstancesOutput, bool) bool
	}{
		DescribeReservedDBInstancesInput: describeReservedDBInstancesInput,
		Fn:                               fn,
	}
	mock.lockDescribeReservedDBInstancesPages.Lock()
	mock.calls.DescribeReservedDBInstancesPages = append(mock.calls.DescribeReservedDBInstancesPages, callInfo)
	mock.lockDescribeReservedDBInstancesPages.Unlock()
	return mock.DescribeReservedDBInstancesPagesFunc(describeReservedDBInstancesInput, fn)
}

// DescribeReservedDBInstancesPagesCalls gets all the calls that were made to DescribeReservedDBInstancesPages.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesPagesCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesPagesCalls() []struct {
	DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
	Fn                               func(*rds.DescribeReservedDBInstancesOutput, bool) bool
} {
	var calls []struct {
		DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
		Fn                               func(*rds.DescribeReservedDBInstancesOutput, bool) bool
	}
	mock.lockDescribeReservedDBInstancesPages.RLock()
	calls = mock.calls.DescribeReservedDBInstancesPages
	mock.lockDescribeReservedDBInstancesPages.RUnlock()
	return calls
}

// DescribeReservedDBInstancesPagesWithContext calls DescribeReservedDBInstancesPagesWithContextFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesPagesWithContext(contextMoqParam context.Context, describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput, fn func(*rds.DescribeReservedDBInstancesOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeReservedDBInstancesPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesPagesWithContextFunc: method is nil but rdsClient.DescribeReservedDBInstancesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
		Fn                               func(*rds.DescribeReservedDBInstancesOutput, bool) bool
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeReservedDBInstancesInput: describeReservedDBInstancesInput,
		Fn:                               fn,
		Options:                          options,
	}
	mock.lockDescribeReservedDBInstancesPagesWithContext.Lock()
	mock.calls.DescribeReservedDBInstancesPagesWithContext = append(mock.calls.DescribeReservedDBInstancesPagesWithContext, callInfo)
	mock.lockDescribeReservedDBInstancesPagesWithContext.Unlock()
	return mock.DescribeReservedDBInstancesPagesWithContextFunc(contextMoqParam, describeReservedDBInstancesInput, fn, options...)
}

// DescribeReservedDBInstancesPagesWithContextCalls gets all the calls that were made to DescribeReservedDBInstancesPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesPagesWithContextCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesPagesWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
	Fn                               func(*rds.DescribeReservedDBInstancesOutput, bool) bool
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
		Fn                               func(*rds.DescribeReservedDBInstancesOutput, bool) bool
		Options                          []request.Option
	}
	mock.lockDescribeReservedDBInstancesPagesWithContext.RLock()
	calls = mock.calls.DescribeReservedDBInstancesPagesWithContext
	mock.lockDescribeReservedDBInstancesPagesWithContext.RUnlock()
	return calls
}

// DescribeReservedDBInstancesRequest calls DescribeReservedDBInstancesRequestFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesRequest(describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput) (*request.Request, *rds.DescribeReservedDBInstancesOutput) {
	if mock.DescribeReservedDBInstancesRequestFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesRequestFunc: method is nil but rdsClient.DescribeReservedDBInstancesRequest was just called")
	}
	callInfo := struct {
		DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
	}{
		DescribeReservedDBInstancesInput: describeReservedDBInstancesInput,
	}
	mock.lockDescribeReservedDBInstancesRequest.Lock()
	mock.calls.DescribeReservedDBInstancesRequest = append(mock.calls.DescribeReservedDBInstancesRequest, callInfo)
	mock.lockDescribeReservedDBInstancesRequest.Unlock()
	return mock.DescribeReservedDBInstancesRequestFunc(describeReservedDBInstancesInput)
}

// DescribeReservedDBInstancesRequestCalls gets all the calls that were made to DescribeReservedDBInstancesRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesRequestCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesRequestCalls() []struct {
	DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
} {
	var calls []struct {
		DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
	}
	mock.lockDescribeReservedDBInstancesRequest.RLock()
	calls = mock.calls.DescribeReservedDBInstancesRequest
	mock.lockDescribeReservedDBInstancesRequest.RUnlock()
	return calls
}

// DescribeReservedDBInstancesWithContext calls DescribeReservedDBInstancesWithContextFunc.
func (mock *rdsClientMock) DescribeReservedDBInstancesWithContext(contextMoqParam context.Context, describeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput, options ...request.Option) (*rds.DescribeReservedDBInstancesOutput, error) {
	if mock.DescribeReservedDBInstancesWithContextFunc == nil {
		panic("rdsClientMock.DescribeReservedDBInstancesWithContextFunc: method is nil but rdsClient.DescribeReservedDBInstancesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeReservedDBInstancesInput: describeReservedDBInstancesInput,
		Options:                          options,
	}
	mock.lockDescribeReservedDBInstancesWithContext.Lock()
	mock.calls.DescribeReservedDBInstancesWithContext = append(mock.calls.DescribeReservedDBInstancesWithContext, callInfo)
	mock.lockDescribeReservedDBInstancesWithContext.Unlock()
	return mock.DescribeReservedDBInstancesWithContextFunc(contextMoqParam, describeReservedDBInstancesInput, options...)
}

// DescribeReservedDBInstancesWithContextCalls gets all the calls that were made to DescribeReservedDBInstancesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeReservedDBInstancesWithContextCalls())
func (mock *rdsClientMock) DescribeReservedDBInstancesWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeReservedDBInstancesInput *rds.DescribeReservedDBInstancesInput
		Options                          []request.Option
	}
	mock.lockDescribeReservedDBInstancesWithContext.RLock()
	calls = mock.calls.DescribeReservedDBInstancesWithContext
	mock.lockDescribeReservedDBInstancesWithContext.RUnlock()
	return calls
}

// DescribeSourceRegions calls DescribeSourceRegionsFunc.
func (mock *rdsClientMock) DescribeSourceRegions(describeSourceRegionsInput *rds.DescribeSourceRegionsInput) (*rds.DescribeSourceRegionsOutput, error) {
	if mock.DescribeSourceRegionsFunc == nil {
		panic("rdsClientMock.DescribeSourceRegionsFunc: method is nil but rdsClient.DescribeSourceRegions was just called")
	}
	callInfo := struct {
		DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
	}{
		DescribeSourceRegionsInput: describeSourceRegionsInput,
	}
	mock.lockDescribeSourceRegions.Lock()
	mock.calls.DescribeSourceRegions = append(mock.calls.DescribeSourceRegions, callInfo)
	mock.lockDescribeSourceRegions.Unlock()
	return mock.DescribeSourceRegionsFunc(describeSourceRegionsInput)
}

// DescribeSourceRegionsCalls gets all the calls that were made to DescribeSourceRegions.
// Check the length with:
//     len(mockedrdsClient.DescribeSourceRegionsCalls())
func (mock *rdsClientMock) DescribeSourceRegionsCalls() []struct {
	DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
} {
	var calls []struct {
		DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
	}
	mock.lockDescribeSourceRegions.RLock()
	calls = mock.calls.DescribeSourceRegions
	mock.lockDescribeSourceRegions.RUnlock()
	return calls
}

// DescribeSourceRegionsPages calls DescribeSourceRegionsPagesFunc.
func (mock *rdsClientMock) DescribeSourceRegionsPages(describeSourceRegionsInput *rds.DescribeSourceRegionsInput, fn func(*rds.DescribeSourceRegionsOutput, bool) bool) error {
	if mock.DescribeSourceRegionsPagesFunc == nil {
		panic("rdsClientMock.DescribeSourceRegionsPagesFunc: method is nil but rdsClient.DescribeSourceRegionsPages was just called")
	}
	callInfo := struct {
		DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
		Fn                         func(*rds.DescribeSourceRegionsOutput, bool) bool
	}{
		DescribeSourceRegionsInput: describeSourceRegionsInput,
		Fn:                         fn,
	}
	mock.lockDescribeSourceRegionsPages.Lock()
	mock.calls.DescribeSourceRegionsPages = append(mock.calls.DescribeSourceRegionsPages, callInfo)
	mock.lockDescribeSourceRegionsPages.Unlock()
	return mock.DescribeSourceRegionsPagesFunc(describeSourceRegionsInput, fn)
}

// DescribeSourceRegionsPagesCalls gets all the calls that were made to DescribeSourceRegionsPages.
// Check the length with:
//     len(mockedrdsClient.DescribeSourceRegionsPagesCalls())
func (mock *rdsClientMock) DescribeSourceRegionsPagesCalls() []struct {
	DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
	Fn                         func(*rds.DescribeSourceRegionsOutput, bool) bool
} {
	var calls []struct {
		DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
		Fn                         func(*rds.DescribeSourceRegionsOutput, bool) bool
	}
	mock.lockDescribeSourceRegionsPages.RLock()
	calls = mock.calls.DescribeSourceRegionsPages
	mock.lockDescribeSourceRegionsPages.RUnlock()
	return calls
}

// DescribeSourceRegionsPagesWithContext calls DescribeSourceRegionsPagesWithContextFunc.
func (mock *rdsClientMock) DescribeSourceRegionsPagesWithContext(contextMoqParam context.Context, describeSourceRegionsInput *rds.DescribeSourceRegionsInput, fn func(*rds.DescribeSourceRegionsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeSourceRegionsPagesWithContextFunc == nil {
		panic("rdsClientMock.DescribeSourceRegionsPagesWithContextFunc: method is nil but rdsClient.DescribeSourceRegionsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
		Fn                         func(*rds.DescribeSourceRegionsOutput, bool) bool
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		DescribeSourceRegionsInput: describeSourceRegionsInput,
		Fn:                         fn,
		Options:                    options,
	}
	mock.lockDescribeSourceRegionsPagesWithContext.Lock()
	mock.calls.DescribeSourceRegionsPagesWithContext = append(mock.calls.DescribeSourceRegionsPagesWithContext, callInfo)
	mock.lockDescribeSourceRegionsPagesWithContext.Unlock()
	return mock.DescribeSourceRegionsPagesWithContextFunc(contextMoqParam, describeSourceRegionsInput, fn, options...)
}

// DescribeSourceRegionsPagesWithContextCalls gets all the calls that were made to DescribeSourceRegionsPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeSourceRegionsPagesWithContextCalls())
func (mock *rdsClientMock) DescribeSourceRegionsPagesWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
	Fn                         func(*rds.DescribeSourceRegionsOutput, bool) bool
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
		Fn                         func(*rds.DescribeSourceRegionsOutput, bool) bool
		Options                    []request.Option
	}
	mock.lockDescribeSourceRegionsPagesWithContext.RLock()
	calls = mock.calls.DescribeSourceRegionsPagesWithContext
	mock.lockDescribeSourceRegionsPagesWithContext.RUnlock()
	return calls
}

// DescribeSourceRegionsRequest calls DescribeSourceRegionsRequestFunc.
func (mock *rdsClientMock) DescribeSourceRegionsRequest(describeSourceRegionsInput *rds.DescribeSourceRegionsInput) (*request.Request, *rds.DescribeSourceRegionsOutput) {
	if mock.DescribeSourceRegionsRequestFunc == nil {
		panic("rdsClientMock.DescribeSourceRegionsRequestFunc: method is nil but rdsClient.DescribeSourceRegionsRequest was just called")
	}
	callInfo := struct {
		DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
	}{
		DescribeSourceRegionsInput: describeSourceRegionsInput,
	}
	mock.lockDescribeSourceRegionsRequest.Lock()
	mock.calls.DescribeSourceRegionsRequest = append(mock.calls.DescribeSourceRegionsRequest, callInfo)
	mock.lockDescribeSourceRegionsRequest.Unlock()
	return mock.DescribeSourceRegionsRequestFunc(describeSourceRegionsInput)
}

// DescribeSourceRegionsRequestCalls gets all the calls that were made to DescribeSourceRegionsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeSourceRegionsRequestCalls())
func (mock *rdsClientMock) DescribeSourceRegionsRequestCalls() []struct {
	DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
} {
	var calls []struct {
		DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
	}
	mock.lockDescribeSourceRegionsRequest.RLock()
	calls = mock.calls.DescribeSourceRegionsRequest
	mock.lockDescribeSourceRegionsRequest.RUnlock()
	return calls
}

// DescribeSourceRegionsWithContext calls DescribeSourceRegionsWithContextFunc.
func (mock *rdsClientMock) DescribeSourceRegionsWithContext(contextMoqParam context.Context, describeSourceRegionsInput *rds.DescribeSourceRegionsInput, options ...request.Option) (*rds.DescribeSourceRegionsOutput, error) {
	if mock.DescribeSourceRegionsWithContextFunc == nil {
		panic("rdsClientMock.DescribeSourceRegionsWithContextFunc: method is nil but rdsClient.DescribeSourceRegionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		DescribeSourceRegionsInput: describeSourceRegionsInput,
		Options:                    options,
	}
	mock.lockDescribeSourceRegionsWithContext.Lock()
	mock.calls.DescribeSourceRegionsWithContext = append(mock.calls.DescribeSourceRegionsWithContext, callInfo)
	mock.lockDescribeSourceRegionsWithContext.Unlock()
	return mock.DescribeSourceRegionsWithContextFunc(contextMoqParam, describeSourceRegionsInput, options...)
}

// DescribeSourceRegionsWithContextCalls gets all the calls that were made to DescribeSourceRegionsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeSourceRegionsWithContextCalls())
func (mock *rdsClientMock) DescribeSourceRegionsWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DescribeSourceRegionsInput *rds.DescribeSourceRegionsInput
		Options                    []request.Option
	}
	mock.lockDescribeSourceRegionsWithContext.RLock()
	calls = mock.calls.DescribeSourceRegionsWithContext
	mock.lockDescribeSourceRegionsWithContext.RUnlock()
	return calls
}

// DescribeValidDBInstanceModifications calls DescribeValidDBInstanceModificationsFunc.
func (mock *rdsClientMock) DescribeValidDBInstanceModifications(describeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	if mock.DescribeValidDBInstanceModificationsFunc == nil {
		panic("rdsClientMock.DescribeValidDBInstanceModificationsFunc: method is nil but rdsClient.DescribeValidDBInstanceModifications was just called")
	}
	callInfo := struct {
		DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
	}{
		DescribeValidDBInstanceModificationsInput: describeValidDBInstanceModificationsInput,
	}
	mock.lockDescribeValidDBInstanceModifications.Lock()
	mock.calls.DescribeValidDBInstanceModifications = append(mock.calls.DescribeValidDBInstanceModifications, callInfo)
	mock.lockDescribeValidDBInstanceModifications.Unlock()
	return mock.DescribeValidDBInstanceModificationsFunc(describeValidDBInstanceModificationsInput)
}

// DescribeValidDBInstanceModificationsCalls gets all the calls that were made to DescribeValidDBInstanceModifications.
// Check the length with:
//     len(mockedrdsClient.DescribeValidDBInstanceModificationsCalls())
func (mock *rdsClientMock) DescribeValidDBInstanceModificationsCalls() []struct {
	DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
} {
	var calls []struct {
		DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
	}
	mock.lockDescribeValidDBInstanceModifications.RLock()
	calls = mock.calls.DescribeValidDBInstanceModifications
	mock.lockDescribeValidDBInstanceModifications.RUnlock()
	return calls
}

// DescribeValidDBInstanceModificationsRequest calls DescribeValidDBInstanceModificationsRequestFunc.
func (mock *rdsClientMock) DescribeValidDBInstanceModificationsRequest(describeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput) (*request.Request, *rds.DescribeValidDBInstanceModificationsOutput) {
	if mock.DescribeValidDBInstanceModificationsRequestFunc == nil {
		panic("rdsClientMock.DescribeValidDBInstanceModificationsRequestFunc: method is nil but rdsClient.DescribeValidDBInstanceModificationsRequest was just called")
	}
	callInfo := struct {
		DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
	}{
		DescribeValidDBInstanceModificationsInput: describeValidDBInstanceModificationsInput,
	}
	mock.lockDescribeValidDBInstanceModificationsRequest.Lock()
	mock.calls.DescribeValidDBInstanceModificationsRequest = append(mock.calls.DescribeValidDBInstanceModificationsRequest, callInfo)
	mock.lockDescribeValidDBInstanceModificationsRequest.Unlock()
	return mock.DescribeValidDBInstanceModificationsRequestFunc(describeValidDBInstanceModificationsInput)
}

// DescribeValidDBInstanceModificationsRequestCalls gets all the calls that were made to DescribeValidDBInstanceModificationsRequest.
// Check the length with:
//     len(mockedrdsClient.DescribeValidDBInstanceModificationsRequestCalls())
func (mock *rdsClientMock) DescribeValidDBInstanceModificationsRequestCalls() []struct {
	DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
} {
	var calls []struct {
		DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
	}
	mock.lockDescribeValidDBInstanceModificationsRequest.RLock()
	calls = mock.calls.DescribeValidDBInstanceModificationsRequest
	mock.lockDescribeValidDBInstanceModificationsRequest.RUnlock()
	return calls
}

// DescribeValidDBInstanceModificationsWithContext calls DescribeValidDBInstanceModificationsWithContextFunc.
func (mock *rdsClientMock) DescribeValidDBInstanceModificationsWithContext(contextMoqParam context.Context, describeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput, options ...request.Option) (*rds.DescribeValidDBInstanceModificationsOutput, error) {
	if mock.DescribeValidDBInstanceModificationsWithContextFunc == nil {
		panic("rdsClientMock.DescribeValidDBInstanceModificationsWithContextFunc: method is nil but rdsClient.DescribeValidDBInstanceModificationsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                           context.Context
		DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
		Options                                   []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		DescribeValidDBInstanceModificationsInput: describeValidDBInstanceModificationsInput,
		Options: options,
	}
	mock.lockDescribeValidDBInstanceModificationsWithContext.Lock()
	mock.calls.DescribeValidDBInstanceModificationsWithContext = append(mock.calls.DescribeValidDBInstanceModificationsWithContext, callInfo)
	mock.lockDescribeValidDBInstanceModificationsWithContext.Unlock()
	return mock.DescribeValidDBInstanceModificationsWithContextFunc(contextMoqParam, describeValidDBInstanceModificationsInput, options...)
}

// DescribeValidDBInstanceModificationsWithContextCalls gets all the calls that were made to DescribeValidDBInstanceModificationsWithContext.
// Check the length with:
//     len(mockedrdsClient.DescribeValidDBInstanceModificationsWithContextCalls())
func (mock *rdsClientMock) DescribeValidDBInstanceModificationsWithContextCalls() []struct {
	ContextMoqParam                           context.Context
	DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
	Options                                   []request.Option
} {
	var calls []struct {
		ContextMoqParam                           context.Context
		DescribeValidDBInstanceModificationsInput *rds.DescribeValidDBInstanceModificationsInput
		Options                                   []request.Option
	}
	mock.lockDescribeValidDBInstanceModificationsWithContext.RLock()
	calls = mock.calls.DescribeValidDBInstanceModificationsWithContext
	mock.lockDescribeValidDBInstanceModificationsWithContext.RUnlock()
	return calls
}

// DownloadDBLogFilePortion calls DownloadDBLogFilePortionFunc.
func (mock *rdsClientMock) DownloadDBLogFilePortion(downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput) (*rds.DownloadDBLogFilePortionOutput, error) {
	if mock.DownloadDBLogFilePortionFunc == nil {
		panic("rdsClientMock.DownloadDBLogFilePortionFunc: method is nil but rdsClient.DownloadDBLogFilePortion was just called")
	}
	callInfo := struct {
		DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
	}{
		DownloadDBLogFilePortionInput: downloadDBLogFilePortionInput,
	}
	mock.lockDownloadDBLogFilePortion.Lock()
	mock.calls.DownloadDBLogFilePortion = append(mock.calls.DownloadDBLogFilePortion, callInfo)
	mock.lockDownloadDBLogFilePortion.Unlock()
	return mock.DownloadDBLogFilePortionFunc(downloadDBLogFilePortionInput)
}

// DownloadDBLogFilePortionCalls gets all the calls that were made to DownloadDBLogFilePortion.
// Check the length with:
//     len(mockedrdsClient.DownloadDBLogFilePortionCalls())
func (mock *rdsClientMock) DownloadDBLogFilePortionCalls() []struct {
	DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
} {
	var calls []struct {
		DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
	}
	mock.lockDownloadDBLogFilePortion.RLock()
	calls = mock.calls.DownloadDBLogFilePortion
	mock.lockDownloadDBLogFilePortion.RUnlock()
	return calls
}

// DownloadDBLogFilePortionPages calls DownloadDBLogFilePortionPagesFunc.
func (mock *rdsClientMock) DownloadDBLogFilePortionPages(downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput, fn func(*rds.DownloadDBLogFilePortionOutput, bool) bool) error {
	if mock.DownloadDBLogFilePortionPagesFunc == nil {
		panic("rdsClientMock.DownloadDBLogFilePortionPagesFunc: method is nil but rdsClient.DownloadDBLogFilePortionPages was just called")
	}
	callInfo := struct {
		DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
		Fn                            func(*rds.DownloadDBLogFilePortionOutput, bool) bool
	}{
		DownloadDBLogFilePortionInput: downloadDBLogFilePortionInput,
		Fn:                            fn,
	}
	mock.lockDownloadDBLogFilePortionPages.Lock()
	mock.calls.DownloadDBLogFilePortionPages = append(mock.calls.DownloadDBLogFilePortionPages, callInfo)
	mock.lockDownloadDBLogFilePortionPages.Unlock()
	return mock.DownloadDBLogFilePortionPagesFunc(downloadDBLogFilePortionInput, fn)
}

// DownloadDBLogFilePortionPagesCalls gets all the calls that were made to DownloadDBLogFilePortionPages.
// Check the length with:
//     len(mockedrdsClient.DownloadDBLogFilePortionPagesCalls())
func (mock *rdsClientMock) DownloadDBLogFilePortionPagesCalls() []struct {
	DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
	Fn                            func(*rds.DownloadDBLogFilePortionOutput, bool) bool
} {
	var calls []struct {
		DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
		Fn                            func(*rds.DownloadDBLogFilePortionOutput, bool) bool
	}
	mock.lockDownloadDBLogFilePortionPages.RLock()
	calls = mock.calls.DownloadDBLogFilePortionPages
	mock.lockDownloadDBLogFilePortionPages.RUnlock()
	return calls
}

// DownloadDBLogFilePortionPagesWithContext calls DownloadDBLogFilePortionPagesWithContextFunc.
func (mock *rdsClientMock) DownloadDBLogFilePortionPagesWithContext(contextMoqParam context.Context, downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput, fn func(*rds.DownloadDBLogFilePortionOutput, bool) bool, options ...request.Option) error {
	if mock.DownloadDBLogFilePortionPagesWithContextFunc == nil {
		panic("rdsClientMock.DownloadDBLogFilePortionPagesWithContextFunc: method is nil but rdsClient.DownloadDBLogFilePortionPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
		Fn                            func(*rds.DownloadDBLogFilePortionOutput, bool) bool
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DownloadDBLogFilePortionInput: downloadDBLogFilePortionInput,
		Fn:                            fn,
		Options:                       options,
	}
	mock.lockDownloadDBLogFilePortionPagesWithContext.Lock()
	mock.calls.DownloadDBLogFilePortionPagesWithContext = append(mock.calls.DownloadDBLogFilePortionPagesWithContext, callInfo)
	mock.lockDownloadDBLogFilePortionPagesWithContext.Unlock()
	return mock.DownloadDBLogFilePortionPagesWithContextFunc(contextMoqParam, downloadDBLogFilePortionInput, fn, options...)
}

// DownloadDBLogFilePortionPagesWithContextCalls gets all the calls that were made to DownloadDBLogFilePortionPagesWithContext.
// Check the length with:
//     len(mockedrdsClient.DownloadDBLogFilePortionPagesWithContextCalls())
func (mock *rdsClientMock) DownloadDBLogFilePortionPagesWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
	Fn                            func(*rds.DownloadDBLogFilePortionOutput, bool) bool
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
		Fn                            func(*rds.DownloadDBLogFilePortionOutput, bool) bool
		Options                       []request.Option
	}
	mock.lockDownloadDBLogFilePortionPagesWithContext.RLock()
	calls = mock.calls.DownloadDBLogFilePortionPagesWithContext
	mock.lockDownloadDBLogFilePortionPagesWithContext.RUnlock()
	return calls
}

// DownloadDBLogFilePortionRequest calls DownloadDBLogFilePortionRequestFunc.
func (mock *rdsClientMock) DownloadDBLogFilePortionRequest(downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput) (*request.Request, *rds.DownloadDBLogFilePortionOutput) {
	if mock.DownloadDBLogFilePortionRequestFunc == nil {
		panic("rdsClientMock.DownloadDBLogFilePortionRequestFunc: method is nil but rdsClient.DownloadDBLogFilePortionRequest was just called")
	}
	callInfo := struct {
		DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
	}{
		DownloadDBLogFilePortionInput: downloadDBLogFilePortionInput,
	}
	mock.lockDownloadDBLogFilePortionRequest.Lock()
	mock.calls.DownloadDBLogFilePortionRequest = append(mock.calls.DownloadDBLogFilePortionRequest, callInfo)
	mock.lockDownloadDBLogFilePortionRequest.Unlock()
	return mock.DownloadDBLogFilePortionRequestFunc(downloadDBLogFilePortionInput)
}

// DownloadDBLogFilePortionRequestCalls gets all the calls that were made to DownloadDBLogFilePortionRequest.
// Check the length with:
//     len(mockedrdsClient.DownloadDBLogFilePortionRequestCalls())
func (mock *rdsClientMock) DownloadDBLogFilePortionRequestCalls() []struct {
	DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
} {
	var calls []struct {
		DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
	}
	mock.lockDownloadDBLogFilePortionRequest.RLock()
	calls = mock.calls.DownloadDBLogFilePortionRequest
	mock.lockDownloadDBLogFilePortionRequest.RUnlock()
	return calls
}

// DownloadDBLogFilePortionWithContext calls DownloadDBLogFilePortionWithContextFunc.
func (mock *rdsClientMock) DownloadDBLogFilePortionWithContext(contextMoqParam context.Context, downloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput, options ...request.Option) (*rds.DownloadDBLogFilePortionOutput, error) {
	if mock.DownloadDBLogFilePortionWithContextFunc == nil {
		panic("rdsClientMock.DownloadDBLogFilePortionWithContextFunc: method is nil but rdsClient.DownloadDBLogFilePortionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DownloadDBLogFilePortionInput: downloadDBLogFilePortionInput,
		Options:                       options,
	}
	mock.lockDownloadDBLogFilePortionWithContext.Lock()
	mock.calls.DownloadDBLogFilePortionWithContext = append(mock.calls.DownloadDBLogFilePortionWithContext, callInfo)
	mock.lockDownloadDBLogFilePortionWithContext.Unlock()
	return mock.DownloadDBLogFilePortionWithContextFunc(contextMoqParam, downloadDBLogFilePortionInput, options...)
}

// DownloadDBLogFilePortionWithContextCalls gets all the calls that were made to DownloadDBLogFilePortionWithContext.
// Check the length with:
//     len(mockedrdsClient.DownloadDBLogFilePortionWithContextCalls())
func (mock *rdsClientMock) DownloadDBLogFilePortionWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DownloadDBLogFilePortionInput *rds.DownloadDBLogFilePortionInput
		Options                       []request.Option
	}
	mock.lockDownloadDBLogFilePortionWithContext.RLock()
	calls = mock.calls.DownloadDBLogFilePortionWithContext
	mock.lockDownloadDBLogFilePortionWithContext.RUnlock()
	return calls
}

// FailoverDBCluster calls FailoverDBClusterFunc.
func (mock *rdsClientMock) FailoverDBCluster(failoverDBClusterInput *rds.FailoverDBClusterInput) (*rds.FailoverDBClusterOutput, error) {
	if mock.FailoverDBClusterFunc == nil {
		panic("rdsClientMock.FailoverDBClusterFunc: method is nil but rdsClient.FailoverDBCluster was just called")
	}
	callInfo := struct {
		FailoverDBClusterInput *rds.FailoverDBClusterInput
	}{
		FailoverDBClusterInput: failoverDBClusterInput,
	}
	mock.lockFailoverDBCluster.Lock()
	mock.calls.FailoverDBCluster = append(mock.calls.FailoverDBCluster, callInfo)
	mock.lockFailoverDBCluster.Unlock()
	return mock.FailoverDBClusterFunc(failoverDBClusterInput)
}

// FailoverDBClusterCalls gets all the calls that were made to FailoverDBCluster.
// Check the length with:
//     len(mockedrdsClient.FailoverDBClusterCalls())
func (mock *rdsClientMock) FailoverDBClusterCalls() []struct {
	FailoverDBClusterInput *rds.FailoverDBClusterInput
} {
	var calls []struct {
		FailoverDBClusterInput *rds.FailoverDBClusterInput
	}
	mock.lockFailoverDBCluster.RLock()
	calls = mock.calls.FailoverDBCluster
	mock.lockFailoverDBCluster.RUnlock()
	return calls
}

// FailoverDBClusterRequest calls FailoverDBClusterRequestFunc.
func (mock *rdsClientMock) FailoverDBClusterRequest(failoverDBClusterInput *rds.FailoverDBClusterInput) (*request.Request, *rds.FailoverDBClusterOutput) {
	if mock.FailoverDBClusterRequestFunc == nil {
		panic("rdsClientMock.FailoverDBClusterRequestFunc: method is nil but rdsClient.FailoverDBClusterRequest was just called")
	}
	callInfo := struct {
		FailoverDBClusterInput *rds.FailoverDBClusterInput
	}{
		FailoverDBClusterInput: failoverDBClusterInput,
	}
	mock.lockFailoverDBClusterRequest.Lock()
	mock.calls.FailoverDBClusterRequest = append(mock.calls.FailoverDBClusterRequest, callInfo)
	mock.lockFailoverDBClusterRequest.Unlock()
	return mock.FailoverDBClusterRequestFunc(failoverDBClusterInput)
}

// FailoverDBClusterRequestCalls gets all the calls that were made to FailoverDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.FailoverDBClusterRequestCalls())
func (mock *rdsClientMock) FailoverDBClusterRequestCalls() []struct {
	FailoverDBClusterInput *rds.FailoverDBClusterInput
} {
	var calls []struct {
		FailoverDBClusterInput *rds.FailoverDBClusterInput
	}
	mock.lockFailoverDBClusterRequest.RLock()
	calls = mock.calls.FailoverDBClusterRequest
	mock.lockFailoverDBClusterRequest.RUnlock()
	return calls
}

// FailoverDBClusterWithContext calls FailoverDBClusterWithContextFunc.
func (mock *rdsClientMock) FailoverDBClusterWithContext(contextMoqParam context.Context, failoverDBClusterInput *rds.FailoverDBClusterInput, options ...request.Option) (*rds.FailoverDBClusterOutput, error) {
	if mock.FailoverDBClusterWithContextFunc == nil {
		panic("rdsClientMock.FailoverDBClusterWithContextFunc: method is nil but rdsClient.FailoverDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		FailoverDBClusterInput *rds.FailoverDBClusterInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		FailoverDBClusterInput: failoverDBClusterInput,
		Options:                options,
	}
	mock.lockFailoverDBClusterWithContext.Lock()
	mock.calls.FailoverDBClusterWithContext = append(mock.calls.FailoverDBClusterWithContext, callInfo)
	mock.lockFailoverDBClusterWithContext.Unlock()
	return mock.FailoverDBClusterWithContextFunc(contextMoqParam, failoverDBClusterInput, options...)
}

// FailoverDBClusterWithContextCalls gets all the calls that were made to FailoverDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.FailoverDBClusterWithContextCalls())
func (mock *rdsClientMock) FailoverDBClusterWithContextCalls() []struct {
	ContextMoqParam        context.Context
	FailoverDBClusterInput *rds.FailoverDBClusterInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		FailoverDBClusterInput *rds.FailoverDBClusterInput
		Options                []request.Option
	}
	mock.lockFailoverDBClusterWithContext.RLock()
	calls = mock.calls.FailoverDBClusterWithContext
	mock.lockFailoverDBClusterWithContext.RUnlock()
	return calls
}

// FailoverGlobalCluster calls FailoverGlobalClusterFunc.
func (mock *rdsClientMock) FailoverGlobalCluster(failoverGlobalClusterInput *rds.FailoverGlobalClusterInput) (*rds.FailoverGlobalClusterOutput, error) {
	if mock.FailoverGlobalClusterFunc == nil {
		panic("rdsClientMock.FailoverGlobalClusterFunc: method is nil but rdsClient.FailoverGlobalCluster was just called")
	}
	callInfo := struct {
		FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
	}{
		FailoverGlobalClusterInput: failoverGlobalClusterInput,
	}
	mock.lockFailoverGlobalCluster.Lock()
	mock.calls.FailoverGlobalCluster = append(mock.calls.FailoverGlobalCluster, callInfo)
	mock.lockFailoverGlobalCluster.Unlock()
	return mock.FailoverGlobalClusterFunc(failoverGlobalClusterInput)
}

// FailoverGlobalClusterCalls gets all the calls that were made to FailoverGlobalCluster.
// Check the length with:
//     len(mockedrdsClient.FailoverGlobalClusterCalls())
func (mock *rdsClientMock) FailoverGlobalClusterCalls() []struct {
	FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
} {
	var calls []struct {
		FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
	}
	mock.lockFailoverGlobalCluster.RLock()
	calls = mock.calls.FailoverGlobalCluster
	mock.lockFailoverGlobalCluster.RUnlock()
	return calls
}

// FailoverGlobalClusterRequest calls FailoverGlobalClusterRequestFunc.
func (mock *rdsClientMock) FailoverGlobalClusterRequest(failoverGlobalClusterInput *rds.FailoverGlobalClusterInput) (*request.Request, *rds.FailoverGlobalClusterOutput) {
	if mock.FailoverGlobalClusterRequestFunc == nil {
		panic("rdsClientMock.FailoverGlobalClusterRequestFunc: method is nil but rdsClient.FailoverGlobalClusterRequest was just called")
	}
	callInfo := struct {
		FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
	}{
		FailoverGlobalClusterInput: failoverGlobalClusterInput,
	}
	mock.lockFailoverGlobalClusterRequest.Lock()
	mock.calls.FailoverGlobalClusterRequest = append(mock.calls.FailoverGlobalClusterRequest, callInfo)
	mock.lockFailoverGlobalClusterRequest.Unlock()
	return mock.FailoverGlobalClusterRequestFunc(failoverGlobalClusterInput)
}

// FailoverGlobalClusterRequestCalls gets all the calls that were made to FailoverGlobalClusterRequest.
// Check the length with:
//     len(mockedrdsClient.FailoverGlobalClusterRequestCalls())
func (mock *rdsClientMock) FailoverGlobalClusterRequestCalls() []struct {
	FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
} {
	var calls []struct {
		FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
	}
	mock.lockFailoverGlobalClusterRequest.RLock()
	calls = mock.calls.FailoverGlobalClusterRequest
	mock.lockFailoverGlobalClusterRequest.RUnlock()
	return calls
}

// FailoverGlobalClusterWithContext calls FailoverGlobalClusterWithContextFunc.
func (mock *rdsClientMock) FailoverGlobalClusterWithContext(contextMoqParam context.Context, failoverGlobalClusterInput *rds.FailoverGlobalClusterInput, options ...request.Option) (*rds.FailoverGlobalClusterOutput, error) {
	if mock.FailoverGlobalClusterWithContextFunc == nil {
		panic("rdsClientMock.FailoverGlobalClusterWithContextFunc: method is nil but rdsClient.FailoverGlobalClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		FailoverGlobalClusterInput: failoverGlobalClusterInput,
		Options:                    options,
	}
	mock.lockFailoverGlobalClusterWithContext.Lock()
	mock.calls.FailoverGlobalClusterWithContext = append(mock.calls.FailoverGlobalClusterWithContext, callInfo)
	mock.lockFailoverGlobalClusterWithContext.Unlock()
	return mock.FailoverGlobalClusterWithContextFunc(contextMoqParam, failoverGlobalClusterInput, options...)
}

// FailoverGlobalClusterWithContextCalls gets all the calls that were made to FailoverGlobalClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.FailoverGlobalClusterWithContextCalls())
func (mock *rdsClientMock) FailoverGlobalClusterWithContextCalls() []struct {
	ContextMoqParam            context.Context
	FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		FailoverGlobalClusterInput *rds.FailoverGlobalClusterInput
		Options                    []request.Option
	}
	mock.lockFailoverGlobalClusterWithContext.RLock()
	calls = mock.calls.FailoverGlobalClusterWithContext
	mock.lockFailoverGlobalClusterWithContext.RUnlock()
	return calls
}

// ListTagsForResource calls ListTagsForResourceFunc.
func (mock *rdsClientMock) ListTagsForResource(listTagsForResourceInput *rds.ListTagsForResourceInput) (*rds.ListTagsForResourceOutput, error) {
	if mock.ListTagsForResourceFunc == nil {
		panic("rdsClientMock.ListTagsForResourceFunc: method is nil but rdsClient.ListTagsForResource was just called")
	}
	callInfo := struct {
		ListTagsForResourceInput *rds.ListTagsForResourceInput
	}{
		ListTagsForResourceInput: listTagsForResourceInput,
	}
	mock.lockListTagsForResource.Lock()
	mock.calls.ListTagsForResource = append(mock.calls.ListTagsForResource, callInfo)
	mock.lockListTagsForResource.Unlock()
	return mock.ListTagsForResourceFunc(listTagsForResourceInput)
}

// ListTagsForResourceCalls gets all the calls that were made to ListTagsForResource.
// Check the length with:
//     len(mockedrdsClient.ListTagsForResourceCalls())
func (mock *rdsClientMock) ListTagsForResourceCalls() []struct {
	ListTagsForResourceInput *rds.ListTagsForResourceInput
} {
	var calls []struct {
		ListTagsForResourceInput *rds.ListTagsForResourceInput
	}
	mock.lockListTagsForResource.RLock()
	calls = mock.calls.ListTagsForResource
	mock.lockListTagsForResource.RUnlock()
	return calls
}

// ListTagsForResourceRequest calls ListTagsForResourceRequestFunc.
func (mock *rdsClientMock) ListTagsForResourceRequest(listTagsForResourceInput *rds.ListTagsForResourceInput) (*request.Request, *rds.ListTagsForResourceOutput) {
	if mock.ListTagsForResourceRequestFunc == nil {
		panic("rdsClientMock.ListTagsForResourceRequestFunc: method is nil but rdsClient.ListTagsForResourceRequest was just called")
	}
	callInfo := struct {
		ListTagsForResourceInput *rds.ListTagsForResourceInput
	}{
		ListTagsForResourceInput: listTagsForResourceInput,
	}
	mock.lockListTagsForResourceRequest.Lock()
	mock.calls.ListTagsForResourceRequest = append(mock.calls.ListTagsForResourceRequest, callInfo)
	mock.lockListTagsForResourceRequest.Unlock()
	return mock.ListTagsForResourceRequestFunc(listTagsForResourceInput)
}

// ListTagsForResourceRequestCalls gets all the calls that were made to ListTagsForResourceRequest.
// Check the length with:
//     len(mockedrdsClient.ListTagsForResourceRequestCalls())
func (mock *rdsClientMock) ListTagsForResourceRequestCalls() []struct {
	ListTagsForResourceInput *rds.ListTagsForResourceInput
} {
	var calls []struct {
		ListTagsForResourceInput *rds.ListTagsForResourceInput
	}
	mock.lockListTagsForResourceRequest.RLock()
	calls = mock.calls.ListTagsForResourceRequest
	mock.lockListTagsForResourceRequest.RUnlock()
	return calls
}

// ListTagsForResourceWithContext calls ListTagsForResourceWithContextFunc.
func (mock *rdsClientMock) ListTagsForResourceWithContext(contextMoqParam context.Context, listTagsForResourceInput *rds.ListTagsForResourceInput, options ...request.Option) (*rds.ListTagsForResourceOutput, error) {
	if mock.ListTagsForResourceWithContextFunc == nil {
		panic("rdsClientMock.ListTagsForResourceWithContextFunc: method is nil but rdsClient.ListTagsForResourceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		ListTagsForResourceInput *rds.ListTagsForResourceInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		ListTagsForResourceInput: listTagsForResourceInput,
		Options:                  options,
	}
	mock.lockListTagsForResourceWithContext.Lock()
	mock.calls.ListTagsForResourceWithContext = append(mock.calls.ListTagsForResourceWithContext, callInfo)
	mock.lockListTagsForResourceWithContext.Unlock()
	return mock.ListTagsForResourceWithContextFunc(contextMoqParam, listTagsForResourceInput, options...)
}

// ListTagsForResourceWithContextCalls gets all the calls that were made to ListTagsForResourceWithContext.
// Check the length with:
//     len(mockedrdsClient.ListTagsForResourceWithContextCalls())
func (mock *rdsClientMock) ListTagsForResourceWithContextCalls() []struct {
	ContextMoqParam          context.Context
	ListTagsForResourceInput *rds.ListTagsForResourceInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		ListTagsForResourceInput *rds.ListTagsForResourceInput
		Options                  []request.Option
	}
	mock.lockListTagsForResourceWithContext.RLock()
	calls = mock.calls.ListTagsForResourceWithContext
	mock.lockListTagsForResourceWithContext.RUnlock()
	return calls
}

// ModifyActivityStream calls ModifyActivityStreamFunc.
func (mock *rdsClientMock) ModifyActivityStream(modifyActivityStreamInput *rds.ModifyActivityStreamInput) (*rds.ModifyActivityStreamOutput, error) {
	if mock.ModifyActivityStreamFunc == nil {
		panic("rdsClientMock.ModifyActivityStreamFunc: method is nil but rdsClient.ModifyActivityStream was just called")
	}
	callInfo := struct {
		ModifyActivityStreamInput *rds.ModifyActivityStreamInput
	}{
		ModifyActivityStreamInput: modifyActivityStreamInput,
	}
	mock.lockModifyActivityStream.Lock()
	mock.calls.ModifyActivityStream = append(mock.calls.ModifyActivityStream, callInfo)
	mock.lockModifyActivityStream.Unlock()
	return mock.ModifyActivityStreamFunc(modifyActivityStreamInput)
}

// ModifyActivityStreamCalls gets all the calls that were made to ModifyActivityStream.
// Check the length with:
//     len(mockedrdsClient.ModifyActivityStreamCalls())
func (mock *rdsClientMock) ModifyActivityStreamCalls() []struct {
	ModifyActivityStreamInput *rds.ModifyActivityStreamInput
} {
	var calls []struct {
		ModifyActivityStreamInput *rds.ModifyActivityStreamInput
	}
	mock.lockModifyActivityStream.RLock()
	calls = mock.calls.ModifyActivityStream
	mock.lockModifyActivityStream.RUnlock()
	return calls
}

// ModifyActivityStreamRequest calls ModifyActivityStreamRequestFunc.
func (mock *rdsClientMock) ModifyActivityStreamRequest(modifyActivityStreamInput *rds.ModifyActivityStreamInput) (*request.Request, *rds.ModifyActivityStreamOutput) {
	if mock.ModifyActivityStreamRequestFunc == nil {
		panic("rdsClientMock.ModifyActivityStreamRequestFunc: method is nil but rdsClient.ModifyActivityStreamRequest was just called")
	}
	callInfo := struct {
		ModifyActivityStreamInput *rds.ModifyActivityStreamInput
	}{
		ModifyActivityStreamInput: modifyActivityStreamInput,
	}
	mock.lockModifyActivityStreamRequest.Lock()
	mock.calls.ModifyActivityStreamRequest = append(mock.calls.ModifyActivityStreamRequest, callInfo)
	mock.lockModifyActivityStreamRequest.Unlock()
	return mock.ModifyActivityStreamRequestFunc(modifyActivityStreamInput)
}

// ModifyActivityStreamRequestCalls gets all the calls that were made to ModifyActivityStreamRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyActivityStreamRequestCalls())
func (mock *rdsClientMock) ModifyActivityStreamRequestCalls() []struct {
	ModifyActivityStreamInput *rds.ModifyActivityStreamInput
} {
	var calls []struct {
		ModifyActivityStreamInput *rds.ModifyActivityStreamInput
	}
	mock.lockModifyActivityStreamRequest.RLock()
	calls = mock.calls.ModifyActivityStreamRequest
	mock.lockModifyActivityStreamRequest.RUnlock()
	return calls
}

// ModifyActivityStreamWithContext calls ModifyActivityStreamWithContextFunc.
func (mock *rdsClientMock) ModifyActivityStreamWithContext(contextMoqParam context.Context, modifyActivityStreamInput *rds.ModifyActivityStreamInput, options ...request.Option) (*rds.ModifyActivityStreamOutput, error) {
	if mock.ModifyActivityStreamWithContextFunc == nil {
		panic("rdsClientMock.ModifyActivityStreamWithContextFunc: method is nil but rdsClient.ModifyActivityStreamWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		ModifyActivityStreamInput *rds.ModifyActivityStreamInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		ModifyActivityStreamInput: modifyActivityStreamInput,
		Options:                   options,
	}
	mock.lockModifyActivityStreamWithContext.Lock()
	mock.calls.ModifyActivityStreamWithContext = append(mock.calls.ModifyActivityStreamWithContext, callInfo)
	mock.lockModifyActivityStreamWithContext.Unlock()
	return mock.ModifyActivityStreamWithContextFunc(contextMoqParam, modifyActivityStreamInput, options...)
}

// ModifyActivityStreamWithContextCalls gets all the calls that were made to ModifyActivityStreamWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyActivityStreamWithContextCalls())
func (mock *rdsClientMock) ModifyActivityStreamWithContextCalls() []struct {
	ContextMoqParam           context.Context
	ModifyActivityStreamInput *rds.ModifyActivityStreamInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		ModifyActivityStreamInput *rds.ModifyActivityStreamInput
		Options                   []request.Option
	}
	mock.lockModifyActivityStreamWithContext.RLock()
	calls = mock.calls.ModifyActivityStreamWithContext
	mock.lockModifyActivityStreamWithContext.RUnlock()
	return calls
}

// ModifyCertificates calls ModifyCertificatesFunc.
func (mock *rdsClientMock) ModifyCertificates(modifyCertificatesInput *rds.ModifyCertificatesInput) (*rds.ModifyCertificatesOutput, error) {
	if mock.ModifyCertificatesFunc == nil {
		panic("rdsClientMock.ModifyCertificatesFunc: method is nil but rdsClient.ModifyCertificates was just called")
	}
	callInfo := struct {
		ModifyCertificatesInput *rds.ModifyCertificatesInput
	}{
		ModifyCertificatesInput: modifyCertificatesInput,
	}
	mock.lockModifyCertificates.Lock()
	mock.calls.ModifyCertificates = append(mock.calls.ModifyCertificates, callInfo)
	mock.lockModifyCertificates.Unlock()
	return mock.ModifyCertificatesFunc(modifyCertificatesInput)
}

// ModifyCertificatesCalls gets all the calls that were made to ModifyCertificates.
// Check the length with:
//     len(mockedrdsClient.ModifyCertificatesCalls())
func (mock *rdsClientMock) ModifyCertificatesCalls() []struct {
	ModifyCertificatesInput *rds.ModifyCertificatesInput
} {
	var calls []struct {
		ModifyCertificatesInput *rds.ModifyCertificatesInput
	}
	mock.lockModifyCertificates.RLock()
	calls = mock.calls.ModifyCertificates
	mock.lockModifyCertificates.RUnlock()
	return calls
}

// ModifyCertificatesRequest calls ModifyCertificatesRequestFunc.
func (mock *rdsClientMock) ModifyCertificatesRequest(modifyCertificatesInput *rds.ModifyCertificatesInput) (*request.Request, *rds.ModifyCertificatesOutput) {
	if mock.ModifyCertificatesRequestFunc == nil {
		panic("rdsClientMock.ModifyCertificatesRequestFunc: method is nil but rdsClient.ModifyCertificatesRequest was just called")
	}
	callInfo := struct {
		ModifyCertificatesInput *rds.ModifyCertificatesInput
	}{
		ModifyCertificatesInput: modifyCertificatesInput,
	}
	mock.lockModifyCertificatesRequest.Lock()
	mock.calls.ModifyCertificatesRequest = append(mock.calls.ModifyCertificatesRequest, callInfo)
	mock.lockModifyCertificatesRequest.Unlock()
	return mock.ModifyCertificatesRequestFunc(modifyCertificatesInput)
}

// ModifyCertificatesRequestCalls gets all the calls that were made to ModifyCertificatesRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyCertificatesRequestCalls())
func (mock *rdsClientMock) ModifyCertificatesRequestCalls() []struct {
	ModifyCertificatesInput *rds.ModifyCertificatesInput
} {
	var calls []struct {
		ModifyCertificatesInput *rds.ModifyCertificatesInput
	}
	mock.lockModifyCertificatesRequest.RLock()
	calls = mock.calls.ModifyCertificatesRequest
	mock.lockModifyCertificatesRequest.RUnlock()
	return calls
}

// ModifyCertificatesWithContext calls ModifyCertificatesWithContextFunc.
func (mock *rdsClientMock) ModifyCertificatesWithContext(contextMoqParam context.Context, modifyCertificatesInput *rds.ModifyCertificatesInput, options ...request.Option) (*rds.ModifyCertificatesOutput, error) {
	if mock.ModifyCertificatesWithContextFunc == nil {
		panic("rdsClientMock.ModifyCertificatesWithContextFunc: method is nil but rdsClient.ModifyCertificatesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		ModifyCertificatesInput *rds.ModifyCertificatesInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		ModifyCertificatesInput: modifyCertificatesInput,
		Options:                 options,
	}
	mock.lockModifyCertificatesWithContext.Lock()
	mock.calls.ModifyCertificatesWithContext = append(mock.calls.ModifyCertificatesWithContext, callInfo)
	mock.lockModifyCertificatesWithContext.Unlock()
	return mock.ModifyCertificatesWithContextFunc(contextMoqParam, modifyCertificatesInput, options...)
}

// ModifyCertificatesWithContextCalls gets all the calls that were made to ModifyCertificatesWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyCertificatesWithContextCalls())
func (mock *rdsClientMock) ModifyCertificatesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	ModifyCertificatesInput *rds.ModifyCertificatesInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		ModifyCertificatesInput *rds.ModifyCertificatesInput
		Options                 []request.Option
	}
	mock.lockModifyCertificatesWithContext.RLock()
	calls = mock.calls.ModifyCertificatesWithContext
	mock.lockModifyCertificatesWithContext.RUnlock()
	return calls
}

// ModifyCurrentDBClusterCapacity calls ModifyCurrentDBClusterCapacityFunc.
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacity(modifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	if mock.ModifyCurrentDBClusterCapacityFunc == nil {
		panic("rdsClientMock.ModifyCurrentDBClusterCapacityFunc: method is nil but rdsClient.ModifyCurrentDBClusterCapacity was just called")
	}
	callInfo := struct {
		ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
	}{
		ModifyCurrentDBClusterCapacityInput: modifyCurrentDBClusterCapacityInput,
	}
	mock.lockModifyCurrentDBClusterCapacity.Lock()
	mock.calls.ModifyCurrentDBClusterCapacity = append(mock.calls.ModifyCurrentDBClusterCapacity, callInfo)
	mock.lockModifyCurrentDBClusterCapacity.Unlock()
	return mock.ModifyCurrentDBClusterCapacityFunc(modifyCurrentDBClusterCapacityInput)
}

// ModifyCurrentDBClusterCapacityCalls gets all the calls that were made to ModifyCurrentDBClusterCapacity.
// Check the length with:
//     len(mockedrdsClient.ModifyCurrentDBClusterCapacityCalls())
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacityCalls() []struct {
	ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
} {
	var calls []struct {
		ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
	}
	mock.lockModifyCurrentDBClusterCapacity.RLock()
	calls = mock.calls.ModifyCurrentDBClusterCapacity
	mock.lockModifyCurrentDBClusterCapacity.RUnlock()
	return calls
}

// ModifyCurrentDBClusterCapacityRequest calls ModifyCurrentDBClusterCapacityRequestFunc.
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacityRequest(modifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput) (*request.Request, *rds.ModifyCurrentDBClusterCapacityOutput) {
	if mock.ModifyCurrentDBClusterCapacityRequestFunc == nil {
		panic("rdsClientMock.ModifyCurrentDBClusterCapacityRequestFunc: method is nil but rdsClient.ModifyCurrentDBClusterCapacityRequest was just called")
	}
	callInfo := struct {
		ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
	}{
		ModifyCurrentDBClusterCapacityInput: modifyCurrentDBClusterCapacityInput,
	}
	mock.lockModifyCurrentDBClusterCapacityRequest.Lock()
	mock.calls.ModifyCurrentDBClusterCapacityRequest = append(mock.calls.ModifyCurrentDBClusterCapacityRequest, callInfo)
	mock.lockModifyCurrentDBClusterCapacityRequest.Unlock()
	return mock.ModifyCurrentDBClusterCapacityRequestFunc(modifyCurrentDBClusterCapacityInput)
}

// ModifyCurrentDBClusterCapacityRequestCalls gets all the calls that were made to ModifyCurrentDBClusterCapacityRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyCurrentDBClusterCapacityRequestCalls())
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacityRequestCalls() []struct {
	ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
} {
	var calls []struct {
		ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
	}
	mock.lockModifyCurrentDBClusterCapacityRequest.RLock()
	calls = mock.calls.ModifyCurrentDBClusterCapacityRequest
	mock.lockModifyCurrentDBClusterCapacityRequest.RUnlock()
	return calls
}

// ModifyCurrentDBClusterCapacityWithContext calls ModifyCurrentDBClusterCapacityWithContextFunc.
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacityWithContext(contextMoqParam context.Context, modifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput, options ...request.Option) (*rds.ModifyCurrentDBClusterCapacityOutput, error) {
	if mock.ModifyCurrentDBClusterCapacityWithContextFunc == nil {
		panic("rdsClientMock.ModifyCurrentDBClusterCapacityWithContextFunc: method is nil but rdsClient.ModifyCurrentDBClusterCapacityWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                     context.Context
		ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
		Options                             []request.Option
	}{
		ContextMoqParam:                     contextMoqParam,
		ModifyCurrentDBClusterCapacityInput: modifyCurrentDBClusterCapacityInput,
		Options:                             options,
	}
	mock.lockModifyCurrentDBClusterCapacityWithContext.Lock()
	mock.calls.ModifyCurrentDBClusterCapacityWithContext = append(mock.calls.ModifyCurrentDBClusterCapacityWithContext, callInfo)
	mock.lockModifyCurrentDBClusterCapacityWithContext.Unlock()
	return mock.ModifyCurrentDBClusterCapacityWithContextFunc(contextMoqParam, modifyCurrentDBClusterCapacityInput, options...)
}

// ModifyCurrentDBClusterCapacityWithContextCalls gets all the calls that were made to ModifyCurrentDBClusterCapacityWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyCurrentDBClusterCapacityWithContextCalls())
func (mock *rdsClientMock) ModifyCurrentDBClusterCapacityWithContextCalls() []struct {
	ContextMoqParam                     context.Context
	ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
	Options                             []request.Option
} {
	var calls []struct {
		ContextMoqParam                     context.Context
		ModifyCurrentDBClusterCapacityInput *rds.ModifyCurrentDBClusterCapacityInput
		Options                             []request.Option
	}
	mock.lockModifyCurrentDBClusterCapacityWithContext.RLock()
	calls = mock.calls.ModifyCurrentDBClusterCapacityWithContext
	mock.lockModifyCurrentDBClusterCapacityWithContext.RUnlock()
	return calls
}

// ModifyCustomDBEngineVersion calls ModifyCustomDBEngineVersionFunc.
func (mock *rdsClientMock) ModifyCustomDBEngineVersion(modifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput) (*rds.ModifyCustomDBEngineVersionOutput, error) {
	if mock.ModifyCustomDBEngineVersionFunc == nil {
		panic("rdsClientMock.ModifyCustomDBEngineVersionFunc: method is nil but rdsClient.ModifyCustomDBEngineVersion was just called")
	}
	callInfo := struct {
		ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
	}{
		ModifyCustomDBEngineVersionInput: modifyCustomDBEngineVersionInput,
	}
	mock.lockModifyCustomDBEngineVersion.Lock()
	mock.calls.ModifyCustomDBEngineVersion = append(mock.calls.ModifyCustomDBEngineVersion, callInfo)
	mock.lockModifyCustomDBEngineVersion.Unlock()
	return mock.ModifyCustomDBEngineVersionFunc(modifyCustomDBEngineVersionInput)
}

// ModifyCustomDBEngineVersionCalls gets all the calls that were made to ModifyCustomDBEngineVersion.
// Check the length with:
//     len(mockedrdsClient.ModifyCustomDBEngineVersionCalls())
func (mock *rdsClientMock) ModifyCustomDBEngineVersionCalls() []struct {
	ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
} {
	var calls []struct {
		ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
	}
	mock.lockModifyCustomDBEngineVersion.RLock()
	calls = mock.calls.ModifyCustomDBEngineVersion
	mock.lockModifyCustomDBEngineVersion.RUnlock()
	return calls
}

// ModifyCustomDBEngineVersionRequest calls ModifyCustomDBEngineVersionRequestFunc.
func (mock *rdsClientMock) ModifyCustomDBEngineVersionRequest(modifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput) (*request.Request, *rds.ModifyCustomDBEngineVersionOutput) {
	if mock.ModifyCustomDBEngineVersionRequestFunc == nil {
		panic("rdsClientMock.ModifyCustomDBEngineVersionRequestFunc: method is nil but rdsClient.ModifyCustomDBEngineVersionRequest was just called")
	}
	callInfo := struct {
		ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
	}{
		ModifyCustomDBEngineVersionInput: modifyCustomDBEngineVersionInput,
	}
	mock.lockModifyCustomDBEngineVersionRequest.Lock()
	mock.calls.ModifyCustomDBEngineVersionRequest = append(mock.calls.ModifyCustomDBEngineVersionRequest, callInfo)
	mock.lockModifyCustomDBEngineVersionRequest.Unlock()
	return mock.ModifyCustomDBEngineVersionRequestFunc(modifyCustomDBEngineVersionInput)
}

// ModifyCustomDBEngineVersionRequestCalls gets all the calls that were made to ModifyCustomDBEngineVersionRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyCustomDBEngineVersionRequestCalls())
func (mock *rdsClientMock) ModifyCustomDBEngineVersionRequestCalls() []struct {
	ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
} {
	var calls []struct {
		ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
	}
	mock.lockModifyCustomDBEngineVersionRequest.RLock()
	calls = mock.calls.ModifyCustomDBEngineVersionRequest
	mock.lockModifyCustomDBEngineVersionRequest.RUnlock()
	return calls
}

// ModifyCustomDBEngineVersionWithContext calls ModifyCustomDBEngineVersionWithContextFunc.
func (mock *rdsClientMock) ModifyCustomDBEngineVersionWithContext(contextMoqParam context.Context, modifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput, options ...request.Option) (*rds.ModifyCustomDBEngineVersionOutput, error) {
	if mock.ModifyCustomDBEngineVersionWithContextFunc == nil {
		panic("rdsClientMock.ModifyCustomDBEngineVersionWithContextFunc: method is nil but rdsClient.ModifyCustomDBEngineVersionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		ModifyCustomDBEngineVersionInput: modifyCustomDBEngineVersionInput,
		Options:                          options,
	}
	mock.lockModifyCustomDBEngineVersionWithContext.Lock()
	mock.calls.ModifyCustomDBEngineVersionWithContext = append(mock.calls.ModifyCustomDBEngineVersionWithContext, callInfo)
	mock.lockModifyCustomDBEngineVersionWithContext.Unlock()
	return mock.ModifyCustomDBEngineVersionWithContextFunc(contextMoqParam, modifyCustomDBEngineVersionInput, options...)
}

// ModifyCustomDBEngineVersionWithContextCalls gets all the calls that were made to ModifyCustomDBEngineVersionWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyCustomDBEngineVersionWithContextCalls())
func (mock *rdsClientMock) ModifyCustomDBEngineVersionWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		ModifyCustomDBEngineVersionInput *rds.ModifyCustomDBEngineVersionInput
		Options                          []request.Option
	}
	mock.lockModifyCustomDBEngineVersionWithContext.RLock()
	calls = mock.calls.ModifyCustomDBEngineVersionWithContext
	mock.lockModifyCustomDBEngineVersionWithContext.RUnlock()
	return calls
}

// ModifyDBCluster calls ModifyDBClusterFunc.
func (mock *rdsClientMock) ModifyDBCluster(modifyDBClusterInput *rds.ModifyDBClusterInput) (*rds.ModifyDBClusterOutput, error) {
	if mock.ModifyDBClusterFunc == nil {
		panic("rdsClientMock.ModifyDBClusterFunc: method is nil but rdsClient.ModifyDBCluster was just called")
	}
	callInfo := struct {
		ModifyDBClusterInput *rds.ModifyDBClusterInput
	}{
		ModifyDBClusterInput: modifyDBClusterInput,
	}
	mock.lockModifyDBCluster.Lock()
	mock.calls.ModifyDBCluster = append(mock.calls.ModifyDBCluster, callInfo)
	mock.lockModifyDBCluster.Unlock()
	return mock.ModifyDBClusterFunc(modifyDBClusterInput)
}

// ModifyDBClusterCalls gets all the calls that were made to ModifyDBCluster.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterCalls())
func (mock *rdsClientMock) ModifyDBClusterCalls() []struct {
	ModifyDBClusterInput *rds.ModifyDBClusterInput
} {
	var calls []struct {
		ModifyDBClusterInput *rds.ModifyDBClusterInput
	}
	mock.lockModifyDBCluster.RLock()
	calls = mock.calls.ModifyDBCluster
	mock.lockModifyDBCluster.RUnlock()
	return calls
}

// ModifyDBClusterEndpoint calls ModifyDBClusterEndpointFunc.
func (mock *rdsClientMock) ModifyDBClusterEndpoint(modifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput) (*rds.ModifyDBClusterEndpointOutput, error) {
	if mock.ModifyDBClusterEndpointFunc == nil {
		panic("rdsClientMock.ModifyDBClusterEndpointFunc: method is nil but rdsClient.ModifyDBClusterEndpoint was just called")
	}
	callInfo := struct {
		ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
	}{
		ModifyDBClusterEndpointInput: modifyDBClusterEndpointInput,
	}
	mock.lockModifyDBClusterEndpoint.Lock()
	mock.calls.ModifyDBClusterEndpoint = append(mock.calls.ModifyDBClusterEndpoint, callInfo)
	mock.lockModifyDBClusterEndpoint.Unlock()
	return mock.ModifyDBClusterEndpointFunc(modifyDBClusterEndpointInput)
}

// ModifyDBClusterEndpointCalls gets all the calls that were made to ModifyDBClusterEndpoint.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterEndpointCalls())
func (mock *rdsClientMock) ModifyDBClusterEndpointCalls() []struct {
	ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
} {
	var calls []struct {
		ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
	}
	mock.lockModifyDBClusterEndpoint.RLock()
	calls = mock.calls.ModifyDBClusterEndpoint
	mock.lockModifyDBClusterEndpoint.RUnlock()
	return calls
}

// ModifyDBClusterEndpointRequest calls ModifyDBClusterEndpointRequestFunc.
func (mock *rdsClientMock) ModifyDBClusterEndpointRequest(modifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput) (*request.Request, *rds.ModifyDBClusterEndpointOutput) {
	if mock.ModifyDBClusterEndpointRequestFunc == nil {
		panic("rdsClientMock.ModifyDBClusterEndpointRequestFunc: method is nil but rdsClient.ModifyDBClusterEndpointRequest was just called")
	}
	callInfo := struct {
		ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
	}{
		ModifyDBClusterEndpointInput: modifyDBClusterEndpointInput,
	}
	mock.lockModifyDBClusterEndpointRequest.Lock()
	mock.calls.ModifyDBClusterEndpointRequest = append(mock.calls.ModifyDBClusterEndpointRequest, callInfo)
	mock.lockModifyDBClusterEndpointRequest.Unlock()
	return mock.ModifyDBClusterEndpointRequestFunc(modifyDBClusterEndpointInput)
}

// ModifyDBClusterEndpointRequestCalls gets all the calls that were made to ModifyDBClusterEndpointRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterEndpointRequestCalls())
func (mock *rdsClientMock) ModifyDBClusterEndpointRequestCalls() []struct {
	ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
} {
	var calls []struct {
		ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
	}
	mock.lockModifyDBClusterEndpointRequest.RLock()
	calls = mock.calls.ModifyDBClusterEndpointRequest
	mock.lockModifyDBClusterEndpointRequest.RUnlock()
	return calls
}

// ModifyDBClusterEndpointWithContext calls ModifyDBClusterEndpointWithContextFunc.
func (mock *rdsClientMock) ModifyDBClusterEndpointWithContext(contextMoqParam context.Context, modifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput, options ...request.Option) (*rds.ModifyDBClusterEndpointOutput, error) {
	if mock.ModifyDBClusterEndpointWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBClusterEndpointWithContextFunc: method is nil but rdsClient.ModifyDBClusterEndpointWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		ModifyDBClusterEndpointInput: modifyDBClusterEndpointInput,
		Options:                      options,
	}
	mock.lockModifyDBClusterEndpointWithContext.Lock()
	mock.calls.ModifyDBClusterEndpointWithContext = append(mock.calls.ModifyDBClusterEndpointWithContext, callInfo)
	mock.lockModifyDBClusterEndpointWithContext.Unlock()
	return mock.ModifyDBClusterEndpointWithContextFunc(contextMoqParam, modifyDBClusterEndpointInput, options...)
}

// ModifyDBClusterEndpointWithContextCalls gets all the calls that were made to ModifyDBClusterEndpointWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterEndpointWithContextCalls())
func (mock *rdsClientMock) ModifyDBClusterEndpointWithContextCalls() []struct {
	ContextMoqParam              context.Context
	ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		ModifyDBClusterEndpointInput *rds.ModifyDBClusterEndpointInput
		Options                      []request.Option
	}
	mock.lockModifyDBClusterEndpointWithContext.RLock()
	calls = mock.calls.ModifyDBClusterEndpointWithContext
	mock.lockModifyDBClusterEndpointWithContext.RUnlock()
	return calls
}

// ModifyDBClusterParameterGroup calls ModifyDBClusterParameterGroupFunc.
func (mock *rdsClientMock) ModifyDBClusterParameterGroup(modifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	if mock.ModifyDBClusterParameterGroupFunc == nil {
		panic("rdsClientMock.ModifyDBClusterParameterGroupFunc: method is nil but rdsClient.ModifyDBClusterParameterGroup was just called")
	}
	callInfo := struct {
		ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
	}{
		ModifyDBClusterParameterGroupInput: modifyDBClusterParameterGroupInput,
	}
	mock.lockModifyDBClusterParameterGroup.Lock()
	mock.calls.ModifyDBClusterParameterGroup = append(mock.calls.ModifyDBClusterParameterGroup, callInfo)
	mock.lockModifyDBClusterParameterGroup.Unlock()
	return mock.ModifyDBClusterParameterGroupFunc(modifyDBClusterParameterGroupInput)
}

// ModifyDBClusterParameterGroupCalls gets all the calls that were made to ModifyDBClusterParameterGroup.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterParameterGroupCalls())
func (mock *rdsClientMock) ModifyDBClusterParameterGroupCalls() []struct {
	ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
} {
	var calls []struct {
		ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
	}
	mock.lockModifyDBClusterParameterGroup.RLock()
	calls = mock.calls.ModifyDBClusterParameterGroup
	mock.lockModifyDBClusterParameterGroup.RUnlock()
	return calls
}

// ModifyDBClusterParameterGroupRequest calls ModifyDBClusterParameterGroupRequestFunc.
func (mock *rdsClientMock) ModifyDBClusterParameterGroupRequest(modifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage) {
	if mock.ModifyDBClusterParameterGroupRequestFunc == nil {
		panic("rdsClientMock.ModifyDBClusterParameterGroupRequestFunc: method is nil but rdsClient.ModifyDBClusterParameterGroupRequest was just called")
	}
	callInfo := struct {
		ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
	}{
		ModifyDBClusterParameterGroupInput: modifyDBClusterParameterGroupInput,
	}
	mock.lockModifyDBClusterParameterGroupRequest.Lock()
	mock.calls.ModifyDBClusterParameterGroupRequest = append(mock.calls.ModifyDBClusterParameterGroupRequest, callInfo)
	mock.lockModifyDBClusterParameterGroupRequest.Unlock()
	return mock.ModifyDBClusterParameterGroupRequestFunc(modifyDBClusterParameterGroupInput)
}

// ModifyDBClusterParameterGroupRequestCalls gets all the calls that were made to ModifyDBClusterParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterParameterGroupRequestCalls())
func (mock *rdsClientMock) ModifyDBClusterParameterGroupRequestCalls() []struct {
	ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
} {
	var calls []struct {
		ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
	}
	mock.lockModifyDBClusterParameterGroupRequest.RLock()
	calls = mock.calls.ModifyDBClusterParameterGroupRequest
	mock.lockModifyDBClusterParameterGroupRequest.RUnlock()
	return calls
}

// ModifyDBClusterParameterGroupWithContext calls ModifyDBClusterParameterGroupWithContextFunc.
func (mock *rdsClientMock) ModifyDBClusterParameterGroupWithContext(contextMoqParam context.Context, modifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput, options ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
	if mock.ModifyDBClusterParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBClusterParameterGroupWithContextFunc: method is nil but rdsClient.ModifyDBClusterParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		ModifyDBClusterParameterGroupInput: modifyDBClusterParameterGroupInput,
		Options:                            options,
	}
	mock.lockModifyDBClusterParameterGroupWithContext.Lock()
	mock.calls.ModifyDBClusterParameterGroupWithContext = append(mock.calls.ModifyDBClusterParameterGroupWithContext, callInfo)
	mock.lockModifyDBClusterParameterGroupWithContext.Unlock()
	return mock.ModifyDBClusterParameterGroupWithContextFunc(contextMoqParam, modifyDBClusterParameterGroupInput, options...)
}

// ModifyDBClusterParameterGroupWithContextCalls gets all the calls that were made to ModifyDBClusterParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterParameterGroupWithContextCalls())
func (mock *rdsClientMock) ModifyDBClusterParameterGroupWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		ModifyDBClusterParameterGroupInput *rds.ModifyDBClusterParameterGroupInput
		Options                            []request.Option
	}
	mock.lockModifyDBClusterParameterGroupWithContext.RLock()
	calls = mock.calls.ModifyDBClusterParameterGroupWithContext
	mock.lockModifyDBClusterParameterGroupWithContext.RUnlock()
	return calls
}

// ModifyDBClusterRequest calls ModifyDBClusterRequestFunc.
func (mock *rdsClientMock) ModifyDBClusterRequest(modifyDBClusterInput *rds.ModifyDBClusterInput) (*request.Request, *rds.ModifyDBClusterOutput) {
	if mock.ModifyDBClusterRequestFunc == nil {
		panic("rdsClientMock.ModifyDBClusterRequestFunc: method is nil but rdsClient.ModifyDBClusterRequest was just called")
	}
	callInfo := struct {
		ModifyDBClusterInput *rds.ModifyDBClusterInput
	}{
		ModifyDBClusterInput: modifyDBClusterInput,
	}
	mock.lockModifyDBClusterRequest.Lock()
	mock.calls.ModifyDBClusterRequest = append(mock.calls.ModifyDBClusterRequest, callInfo)
	mock.lockModifyDBClusterRequest.Unlock()
	return mock.ModifyDBClusterRequestFunc(modifyDBClusterInput)
}

// ModifyDBClusterRequestCalls gets all the calls that were made to ModifyDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterRequestCalls())
func (mock *rdsClientMock) ModifyDBClusterRequestCalls() []struct {
	ModifyDBClusterInput *rds.ModifyDBClusterInput
} {
	var calls []struct {
		ModifyDBClusterInput *rds.ModifyDBClusterInput
	}
	mock.lockModifyDBClusterRequest.RLock()
	calls = mock.calls.ModifyDBClusterRequest
	mock.lockModifyDBClusterRequest.RUnlock()
	return calls
}

// ModifyDBClusterSnapshotAttribute calls ModifyDBClusterSnapshotAttributeFunc.
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttribute(modifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	if mock.ModifyDBClusterSnapshotAttributeFunc == nil {
		panic("rdsClientMock.ModifyDBClusterSnapshotAttributeFunc: method is nil but rdsClient.ModifyDBClusterSnapshotAttribute was just called")
	}
	callInfo := struct {
		ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
	}{
		ModifyDBClusterSnapshotAttributeInput: modifyDBClusterSnapshotAttributeInput,
	}
	mock.lockModifyDBClusterSnapshotAttribute.Lock()
	mock.calls.ModifyDBClusterSnapshotAttribute = append(mock.calls.ModifyDBClusterSnapshotAttribute, callInfo)
	mock.lockModifyDBClusterSnapshotAttribute.Unlock()
	return mock.ModifyDBClusterSnapshotAttributeFunc(modifyDBClusterSnapshotAttributeInput)
}

// ModifyDBClusterSnapshotAttributeCalls gets all the calls that were made to ModifyDBClusterSnapshotAttribute.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterSnapshotAttributeCalls())
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttributeCalls() []struct {
	ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
} {
	var calls []struct {
		ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
	}
	mock.lockModifyDBClusterSnapshotAttribute.RLock()
	calls = mock.calls.ModifyDBClusterSnapshotAttribute
	mock.lockModifyDBClusterSnapshotAttribute.RUnlock()
	return calls
}

// ModifyDBClusterSnapshotAttributeRequest calls ModifyDBClusterSnapshotAttributeRequestFunc.
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttributeRequest(modifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *rds.ModifyDBClusterSnapshotAttributeOutput) {
	if mock.ModifyDBClusterSnapshotAttributeRequestFunc == nil {
		panic("rdsClientMock.ModifyDBClusterSnapshotAttributeRequestFunc: method is nil but rdsClient.ModifyDBClusterSnapshotAttributeRequest was just called")
	}
	callInfo := struct {
		ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
	}{
		ModifyDBClusterSnapshotAttributeInput: modifyDBClusterSnapshotAttributeInput,
	}
	mock.lockModifyDBClusterSnapshotAttributeRequest.Lock()
	mock.calls.ModifyDBClusterSnapshotAttributeRequest = append(mock.calls.ModifyDBClusterSnapshotAttributeRequest, callInfo)
	mock.lockModifyDBClusterSnapshotAttributeRequest.Unlock()
	return mock.ModifyDBClusterSnapshotAttributeRequestFunc(modifyDBClusterSnapshotAttributeInput)
}

// ModifyDBClusterSnapshotAttributeRequestCalls gets all the calls that were made to ModifyDBClusterSnapshotAttributeRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterSnapshotAttributeRequestCalls())
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttributeRequestCalls() []struct {
	ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
} {
	var calls []struct {
		ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
	}
	mock.lockModifyDBClusterSnapshotAttributeRequest.RLock()
	calls = mock.calls.ModifyDBClusterSnapshotAttributeRequest
	mock.lockModifyDBClusterSnapshotAttributeRequest.RUnlock()
	return calls
}

// ModifyDBClusterSnapshotAttributeWithContext calls ModifyDBClusterSnapshotAttributeWithContextFunc.
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttributeWithContext(contextMoqParam context.Context, modifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput, options ...request.Option) (*rds.ModifyDBClusterSnapshotAttributeOutput, error) {
	if mock.ModifyDBClusterSnapshotAttributeWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBClusterSnapshotAttributeWithContextFunc: method is nil but rdsClient.ModifyDBClusterSnapshotAttributeWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                       context.Context
		ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
		Options                               []request.Option
	}{
		ContextMoqParam:                       contextMoqParam,
		ModifyDBClusterSnapshotAttributeInput: modifyDBClusterSnapshotAttributeInput,
		Options:                               options,
	}
	mock.lockModifyDBClusterSnapshotAttributeWithContext.Lock()
	mock.calls.ModifyDBClusterSnapshotAttributeWithContext = append(mock.calls.ModifyDBClusterSnapshotAttributeWithContext, callInfo)
	mock.lockModifyDBClusterSnapshotAttributeWithContext.Unlock()
	return mock.ModifyDBClusterSnapshotAttributeWithContextFunc(contextMoqParam, modifyDBClusterSnapshotAttributeInput, options...)
}

// ModifyDBClusterSnapshotAttributeWithContextCalls gets all the calls that were made to ModifyDBClusterSnapshotAttributeWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterSnapshotAttributeWithContextCalls())
func (mock *rdsClientMock) ModifyDBClusterSnapshotAttributeWithContextCalls() []struct {
	ContextMoqParam                       context.Context
	ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
	Options                               []request.Option
} {
	var calls []struct {
		ContextMoqParam                       context.Context
		ModifyDBClusterSnapshotAttributeInput *rds.ModifyDBClusterSnapshotAttributeInput
		Options                               []request.Option
	}
	mock.lockModifyDBClusterSnapshotAttributeWithContext.RLock()
	calls = mock.calls.ModifyDBClusterSnapshotAttributeWithContext
	mock.lockModifyDBClusterSnapshotAttributeWithContext.RUnlock()
	return calls
}

// ModifyDBClusterWithContext calls ModifyDBClusterWithContextFunc.
func (mock *rdsClientMock) ModifyDBClusterWithContext(contextMoqParam context.Context, modifyDBClusterInput *rds.ModifyDBClusterInput, options ...request.Option) (*rds.ModifyDBClusterOutput, error) {
	if mock.ModifyDBClusterWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBClusterWithContextFunc: method is nil but rdsClient.ModifyDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		ModifyDBClusterInput *rds.ModifyDBClusterInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		ModifyDBClusterInput: modifyDBClusterInput,
		Options:              options,
	}
	mock.lockModifyDBClusterWithContext.Lock()
	mock.calls.ModifyDBClusterWithContext = append(mock.calls.ModifyDBClusterWithContext, callInfo)
	mock.lockModifyDBClusterWithContext.Unlock()
	return mock.ModifyDBClusterWithContextFunc(contextMoqParam, modifyDBClusterInput, options...)
}

// ModifyDBClusterWithContextCalls gets all the calls that were made to ModifyDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBClusterWithContextCalls())
func (mock *rdsClientMock) ModifyDBClusterWithContextCalls() []struct {
	ContextMoqParam      context.Context
	ModifyDBClusterInput *rds.ModifyDBClusterInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		ModifyDBClusterInput *rds.ModifyDBClusterInput
		Options              []request.Option
	}
	mock.lockModifyDBClusterWithContext.RLock()
	calls = mock.calls.ModifyDBClusterWithContext
	mock.lockModifyDBClusterWithContext.RUnlock()
	return calls
}

// ModifyDBInstance calls ModifyDBInstanceFunc.
func (mock *rdsClientMock) ModifyDBInstance(modifyDBInstanceInput *rds.ModifyDBInstanceInput) (*rds.ModifyDBInstanceOutput, error) {
	if mock.ModifyDBInstanceFunc == nil {
		panic("rdsClientMock.ModifyDBInstanceFunc: method is nil but rdsClient.ModifyDBInstance was just called")
	}
	callInfo := struct {
		ModifyDBInstanceInput *rds.ModifyDBInstanceInput
	}{
		ModifyDBInstanceInput: modifyDBInstanceInput,
	}
	mock.lockModifyDBInstance.Lock()
	mock.calls.ModifyDBInstance = append(mock.calls.ModifyDBInstance, callInfo)
	mock.lockModifyDBInstance.Unlock()
	return mock.ModifyDBInstanceFunc(modifyDBInstanceInput)
}

// ModifyDBInstanceCalls gets all the calls that were made to ModifyDBInstance.
// Check the length with:
//     len(mockedrdsClient.ModifyDBInstanceCalls())
func (mock *rdsClientMock) ModifyDBInstanceCalls() []struct {
	ModifyDBInstanceInput *rds.ModifyDBInstanceInput
} {
	var calls []struct {
		ModifyDBInstanceInput *rds.ModifyDBInstanceInput
	}
	mock.lockModifyDBInstance.RLock()
	calls = mock.calls.ModifyDBInstance
	mock.lockModifyDBInstance.RUnlock()
	return calls
}

// ModifyDBInstanceRequest calls ModifyDBInstanceRequestFunc.
func (mock *rdsClientMock) ModifyDBInstanceRequest(modifyDBInstanceInput *rds.ModifyDBInstanceInput) (*request.Request, *rds.ModifyDBInstanceOutput) {
	if mock.ModifyDBInstanceRequestFunc == nil {
		panic("rdsClientMock.ModifyDBInstanceRequestFunc: method is nil but rdsClient.ModifyDBInstanceRequest was just called")
	}
	callInfo := struct {
		ModifyDBInstanceInput *rds.ModifyDBInstanceInput
	}{
		ModifyDBInstanceInput: modifyDBInstanceInput,
	}
	mock.lockModifyDBInstanceRequest.Lock()
	mock.calls.ModifyDBInstanceRequest = append(mock.calls.ModifyDBInstanceRequest, callInfo)
	mock.lockModifyDBInstanceRequest.Unlock()
	return mock.ModifyDBInstanceRequestFunc(modifyDBInstanceInput)
}

// ModifyDBInstanceRequestCalls gets all the calls that were made to ModifyDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBInstanceRequestCalls())
func (mock *rdsClientMock) ModifyDBInstanceRequestCalls() []struct {
	ModifyDBInstanceInput *rds.ModifyDBInstanceInput
} {
	var calls []struct {
		ModifyDBInstanceInput *rds.ModifyDBInstanceInput
	}
	mock.lockModifyDBInstanceRequest.RLock()
	calls = mock.calls.ModifyDBInstanceRequest
	mock.lockModifyDBInstanceRequest.RUnlock()
	return calls
}

// ModifyDBInstanceWithContext calls ModifyDBInstanceWithContextFunc.
func (mock *rdsClientMock) ModifyDBInstanceWithContext(contextMoqParam context.Context, modifyDBInstanceInput *rds.ModifyDBInstanceInput, options ...request.Option) (*rds.ModifyDBInstanceOutput, error) {
	if mock.ModifyDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBInstanceWithContextFunc: method is nil but rdsClient.ModifyDBInstanceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		ModifyDBInstanceInput *rds.ModifyDBInstanceInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		ModifyDBInstanceInput: modifyDBInstanceInput,
		Options:               options,
	}
	mock.lockModifyDBInstanceWithContext.Lock()
	mock.calls.ModifyDBInstanceWithContext = append(mock.calls.ModifyDBInstanceWithContext, callInfo)
	mock.lockModifyDBInstanceWithContext.Unlock()
	return mock.ModifyDBInstanceWithContextFunc(contextMoqParam, modifyDBInstanceInput, options...)
}

// ModifyDBInstanceWithContextCalls gets all the calls that were made to ModifyDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBInstanceWithContextCalls())
func (mock *rdsClientMock) ModifyDBInstanceWithContextCalls() []struct {
	ContextMoqParam       context.Context
	ModifyDBInstanceInput *rds.ModifyDBInstanceInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		ModifyDBInstanceInput *rds.ModifyDBInstanceInput
		Options               []request.Option
	}
	mock.lockModifyDBInstanceWithContext.RLock()
	calls = mock.calls.ModifyDBInstanceWithContext
	mock.lockModifyDBInstanceWithContext.RUnlock()
	return calls
}

// ModifyDBParameterGroup calls ModifyDBParameterGroupFunc.
func (mock *rdsClientMock) ModifyDBParameterGroup(modifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	if mock.ModifyDBParameterGroupFunc == nil {
		panic("rdsClientMock.ModifyDBParameterGroupFunc: method is nil but rdsClient.ModifyDBParameterGroup was just called")
	}
	callInfo := struct {
		ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
	}{
		ModifyDBParameterGroupInput: modifyDBParameterGroupInput,
	}
	mock.lockModifyDBParameterGroup.Lock()
	mock.calls.ModifyDBParameterGroup = append(mock.calls.ModifyDBParameterGroup, callInfo)
	mock.lockModifyDBParameterGroup.Unlock()
	return mock.ModifyDBParameterGroupFunc(modifyDBParameterGroupInput)
}

// ModifyDBParameterGroupCalls gets all the calls that were made to ModifyDBParameterGroup.
// Check the length with:
//     len(mockedrdsClient.ModifyDBParameterGroupCalls())
func (mock *rdsClientMock) ModifyDBParameterGroupCalls() []struct {
	ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
} {
	var calls []struct {
		ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
	}
	mock.lockModifyDBParameterGroup.RLock()
	calls = mock.calls.ModifyDBParameterGroup
	mock.lockModifyDBParameterGroup.RUnlock()
	return calls
}

// ModifyDBParameterGroupRequest calls ModifyDBParameterGroupRequestFunc.
func (mock *rdsClientMock) ModifyDBParameterGroupRequest(modifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage) {
	if mock.ModifyDBParameterGroupRequestFunc == nil {
		panic("rdsClientMock.ModifyDBParameterGroupRequestFunc: method is nil but rdsClient.ModifyDBParameterGroupRequest was just called")
	}
	callInfo := struct {
		ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
	}{
		ModifyDBParameterGroupInput: modifyDBParameterGroupInput,
	}
	mock.lockModifyDBParameterGroupRequest.Lock()
	mock.calls.ModifyDBParameterGroupRequest = append(mock.calls.ModifyDBParameterGroupRequest, callInfo)
	mock.lockModifyDBParameterGroupRequest.Unlock()
	return mock.ModifyDBParameterGroupRequestFunc(modifyDBParameterGroupInput)
}

// ModifyDBParameterGroupRequestCalls gets all the calls that were made to ModifyDBParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBParameterGroupRequestCalls())
func (mock *rdsClientMock) ModifyDBParameterGroupRequestCalls() []struct {
	ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
} {
	var calls []struct {
		ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
	}
	mock.lockModifyDBParameterGroupRequest.RLock()
	calls = mock.calls.ModifyDBParameterGroupRequest
	mock.lockModifyDBParameterGroupRequest.RUnlock()
	return calls
}

// ModifyDBParameterGroupWithContext calls ModifyDBParameterGroupWithContextFunc.
func (mock *rdsClientMock) ModifyDBParameterGroupWithContext(contextMoqParam context.Context, modifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput, options ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
	if mock.ModifyDBParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBParameterGroupWithContextFunc: method is nil but rdsClient.ModifyDBParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		ModifyDBParameterGroupInput: modifyDBParameterGroupInput,
		Options:                     options,
	}
	mock.lockModifyDBParameterGroupWithContext.Lock()
	mock.calls.ModifyDBParameterGroupWithContext = append(mock.calls.ModifyDBParameterGroupWithContext, callInfo)
	mock.lockModifyDBParameterGroupWithContext.Unlock()
	return mock.ModifyDBParameterGroupWithContextFunc(contextMoqParam, modifyDBParameterGroupInput, options...)
}

// ModifyDBParameterGroupWithContextCalls gets all the calls that were made to ModifyDBParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBParameterGroupWithContextCalls())
func (mock *rdsClientMock) ModifyDBParameterGroupWithContextCalls() []struct {
	ContextMoqParam             context.Context
	ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		ModifyDBParameterGroupInput *rds.ModifyDBParameterGroupInput
		Options                     []request.Option
	}
	mock.lockModifyDBParameterGroupWithContext.RLock()
	calls = mock.calls.ModifyDBParameterGroupWithContext
	mock.lockModifyDBParameterGroupWithContext.RUnlock()
	return calls
}

// ModifyDBProxy calls ModifyDBProxyFunc.
func (mock *rdsClientMock) ModifyDBProxy(modifyDBProxyInput *rds.ModifyDBProxyInput) (*rds.ModifyDBProxyOutput, error) {
	if mock.ModifyDBProxyFunc == nil {
		panic("rdsClientMock.ModifyDBProxyFunc: method is nil but rdsClient.ModifyDBProxy was just called")
	}
	callInfo := struct {
		ModifyDBProxyInput *rds.ModifyDBProxyInput
	}{
		ModifyDBProxyInput: modifyDBProxyInput,
	}
	mock.lockModifyDBProxy.Lock()
	mock.calls.ModifyDBProxy = append(mock.calls.ModifyDBProxy, callInfo)
	mock.lockModifyDBProxy.Unlock()
	return mock.ModifyDBProxyFunc(modifyDBProxyInput)
}

// ModifyDBProxyCalls gets all the calls that were made to ModifyDBProxy.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyCalls())
func (mock *rdsClientMock) ModifyDBProxyCalls() []struct {
	ModifyDBProxyInput *rds.ModifyDBProxyInput
} {
	var calls []struct {
		ModifyDBProxyInput *rds.ModifyDBProxyInput
	}
	mock.lockModifyDBProxy.RLock()
	calls = mock.calls.ModifyDBProxy
	mock.lockModifyDBProxy.RUnlock()
	return calls
}

// ModifyDBProxyEndpoint calls ModifyDBProxyEndpointFunc.
func (mock *rdsClientMock) ModifyDBProxyEndpoint(modifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput) (*rds.ModifyDBProxyEndpointOutput, error) {
	if mock.ModifyDBProxyEndpointFunc == nil {
		panic("rdsClientMock.ModifyDBProxyEndpointFunc: method is nil but rdsClient.ModifyDBProxyEndpoint was just called")
	}
	callInfo := struct {
		ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
	}{
		ModifyDBProxyEndpointInput: modifyDBProxyEndpointInput,
	}
	mock.lockModifyDBProxyEndpoint.Lock()
	mock.calls.ModifyDBProxyEndpoint = append(mock.calls.ModifyDBProxyEndpoint, callInfo)
	mock.lockModifyDBProxyEndpoint.Unlock()
	return mock.ModifyDBProxyEndpointFunc(modifyDBProxyEndpointInput)
}

// ModifyDBProxyEndpointCalls gets all the calls that were made to ModifyDBProxyEndpoint.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyEndpointCalls())
func (mock *rdsClientMock) ModifyDBProxyEndpointCalls() []struct {
	ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
} {
	var calls []struct {
		ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
	}
	mock.lockModifyDBProxyEndpoint.RLock()
	calls = mock.calls.ModifyDBProxyEndpoint
	mock.lockModifyDBProxyEndpoint.RUnlock()
	return calls
}

// ModifyDBProxyEndpointRequest calls ModifyDBProxyEndpointRequestFunc.
func (mock *rdsClientMock) ModifyDBProxyEndpointRequest(modifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput) (*request.Request, *rds.ModifyDBProxyEndpointOutput) {
	if mock.ModifyDBProxyEndpointRequestFunc == nil {
		panic("rdsClientMock.ModifyDBProxyEndpointRequestFunc: method is nil but rdsClient.ModifyDBProxyEndpointRequest was just called")
	}
	callInfo := struct {
		ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
	}{
		ModifyDBProxyEndpointInput: modifyDBProxyEndpointInput,
	}
	mock.lockModifyDBProxyEndpointRequest.Lock()
	mock.calls.ModifyDBProxyEndpointRequest = append(mock.calls.ModifyDBProxyEndpointRequest, callInfo)
	mock.lockModifyDBProxyEndpointRequest.Unlock()
	return mock.ModifyDBProxyEndpointRequestFunc(modifyDBProxyEndpointInput)
}

// ModifyDBProxyEndpointRequestCalls gets all the calls that were made to ModifyDBProxyEndpointRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyEndpointRequestCalls())
func (mock *rdsClientMock) ModifyDBProxyEndpointRequestCalls() []struct {
	ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
} {
	var calls []struct {
		ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
	}
	mock.lockModifyDBProxyEndpointRequest.RLock()
	calls = mock.calls.ModifyDBProxyEndpointRequest
	mock.lockModifyDBProxyEndpointRequest.RUnlock()
	return calls
}

// ModifyDBProxyEndpointWithContext calls ModifyDBProxyEndpointWithContextFunc.
func (mock *rdsClientMock) ModifyDBProxyEndpointWithContext(contextMoqParam context.Context, modifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput, options ...request.Option) (*rds.ModifyDBProxyEndpointOutput, error) {
	if mock.ModifyDBProxyEndpointWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBProxyEndpointWithContextFunc: method is nil but rdsClient.ModifyDBProxyEndpointWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		ModifyDBProxyEndpointInput: modifyDBProxyEndpointInput,
		Options:                    options,
	}
	mock.lockModifyDBProxyEndpointWithContext.Lock()
	mock.calls.ModifyDBProxyEndpointWithContext = append(mock.calls.ModifyDBProxyEndpointWithContext, callInfo)
	mock.lockModifyDBProxyEndpointWithContext.Unlock()
	return mock.ModifyDBProxyEndpointWithContextFunc(contextMoqParam, modifyDBProxyEndpointInput, options...)
}

// ModifyDBProxyEndpointWithContextCalls gets all the calls that were made to ModifyDBProxyEndpointWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyEndpointWithContextCalls())
func (mock *rdsClientMock) ModifyDBProxyEndpointWithContextCalls() []struct {
	ContextMoqParam            context.Context
	ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		ModifyDBProxyEndpointInput *rds.ModifyDBProxyEndpointInput
		Options                    []request.Option
	}
	mock.lockModifyDBProxyEndpointWithContext.RLock()
	calls = mock.calls.ModifyDBProxyEndpointWithContext
	mock.lockModifyDBProxyEndpointWithContext.RUnlock()
	return calls
}

// ModifyDBProxyRequest calls ModifyDBProxyRequestFunc.
func (mock *rdsClientMock) ModifyDBProxyRequest(modifyDBProxyInput *rds.ModifyDBProxyInput) (*request.Request, *rds.ModifyDBProxyOutput) {
	if mock.ModifyDBProxyRequestFunc == nil {
		panic("rdsClientMock.ModifyDBProxyRequestFunc: method is nil but rdsClient.ModifyDBProxyRequest was just called")
	}
	callInfo := struct {
		ModifyDBProxyInput *rds.ModifyDBProxyInput
	}{
		ModifyDBProxyInput: modifyDBProxyInput,
	}
	mock.lockModifyDBProxyRequest.Lock()
	mock.calls.ModifyDBProxyRequest = append(mock.calls.ModifyDBProxyRequest, callInfo)
	mock.lockModifyDBProxyRequest.Unlock()
	return mock.ModifyDBProxyRequestFunc(modifyDBProxyInput)
}

// ModifyDBProxyRequestCalls gets all the calls that were made to ModifyDBProxyRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyRequestCalls())
func (mock *rdsClientMock) ModifyDBProxyRequestCalls() []struct {
	ModifyDBProxyInput *rds.ModifyDBProxyInput
} {
	var calls []struct {
		ModifyDBProxyInput *rds.ModifyDBProxyInput
	}
	mock.lockModifyDBProxyRequest.RLock()
	calls = mock.calls.ModifyDBProxyRequest
	mock.lockModifyDBProxyRequest.RUnlock()
	return calls
}

// ModifyDBProxyTargetGroup calls ModifyDBProxyTargetGroupFunc.
func (mock *rdsClientMock) ModifyDBProxyTargetGroup(modifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	if mock.ModifyDBProxyTargetGroupFunc == nil {
		panic("rdsClientMock.ModifyDBProxyTargetGroupFunc: method is nil but rdsClient.ModifyDBProxyTargetGroup was just called")
	}
	callInfo := struct {
		ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
	}{
		ModifyDBProxyTargetGroupInput: modifyDBProxyTargetGroupInput,
	}
	mock.lockModifyDBProxyTargetGroup.Lock()
	mock.calls.ModifyDBProxyTargetGroup = append(mock.calls.ModifyDBProxyTargetGroup, callInfo)
	mock.lockModifyDBProxyTargetGroup.Unlock()
	return mock.ModifyDBProxyTargetGroupFunc(modifyDBProxyTargetGroupInput)
}

// ModifyDBProxyTargetGroupCalls gets all the calls that were made to ModifyDBProxyTargetGroup.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyTargetGroupCalls())
func (mock *rdsClientMock) ModifyDBProxyTargetGroupCalls() []struct {
	ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
} {
	var calls []struct {
		ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
	}
	mock.lockModifyDBProxyTargetGroup.RLock()
	calls = mock.calls.ModifyDBProxyTargetGroup
	mock.lockModifyDBProxyTargetGroup.RUnlock()
	return calls
}

// ModifyDBProxyTargetGroupRequest calls ModifyDBProxyTargetGroupRequestFunc.
func (mock *rdsClientMock) ModifyDBProxyTargetGroupRequest(modifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput) (*request.Request, *rds.ModifyDBProxyTargetGroupOutput) {
	if mock.ModifyDBProxyTargetGroupRequestFunc == nil {
		panic("rdsClientMock.ModifyDBProxyTargetGroupRequestFunc: method is nil but rdsClient.ModifyDBProxyTargetGroupRequest was just called")
	}
	callInfo := struct {
		ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
	}{
		ModifyDBProxyTargetGroupInput: modifyDBProxyTargetGroupInput,
	}
	mock.lockModifyDBProxyTargetGroupRequest.Lock()
	mock.calls.ModifyDBProxyTargetGroupRequest = append(mock.calls.ModifyDBProxyTargetGroupRequest, callInfo)
	mock.lockModifyDBProxyTargetGroupRequest.Unlock()
	return mock.ModifyDBProxyTargetGroupRequestFunc(modifyDBProxyTargetGroupInput)
}

// ModifyDBProxyTargetGroupRequestCalls gets all the calls that were made to ModifyDBProxyTargetGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyTargetGroupRequestCalls())
func (mock *rdsClientMock) ModifyDBProxyTargetGroupRequestCalls() []struct {
	ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
} {
	var calls []struct {
		ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
	}
	mock.lockModifyDBProxyTargetGroupRequest.RLock()
	calls = mock.calls.ModifyDBProxyTargetGroupRequest
	mock.lockModifyDBProxyTargetGroupRequest.RUnlock()
	return calls
}

// ModifyDBProxyTargetGroupWithContext calls ModifyDBProxyTargetGroupWithContextFunc.
func (mock *rdsClientMock) ModifyDBProxyTargetGroupWithContext(contextMoqParam context.Context, modifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput, options ...request.Option) (*rds.ModifyDBProxyTargetGroupOutput, error) {
	if mock.ModifyDBProxyTargetGroupWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBProxyTargetGroupWithContextFunc: method is nil but rdsClient.ModifyDBProxyTargetGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		ModifyDBProxyTargetGroupInput: modifyDBProxyTargetGroupInput,
		Options:                       options,
	}
	mock.lockModifyDBProxyTargetGroupWithContext.Lock()
	mock.calls.ModifyDBProxyTargetGroupWithContext = append(mock.calls.ModifyDBProxyTargetGroupWithContext, callInfo)
	mock.lockModifyDBProxyTargetGroupWithContext.Unlock()
	return mock.ModifyDBProxyTargetGroupWithContextFunc(contextMoqParam, modifyDBProxyTargetGroupInput, options...)
}

// ModifyDBProxyTargetGroupWithContextCalls gets all the calls that were made to ModifyDBProxyTargetGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyTargetGroupWithContextCalls())
func (mock *rdsClientMock) ModifyDBProxyTargetGroupWithContextCalls() []struct {
	ContextMoqParam               context.Context
	ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		ModifyDBProxyTargetGroupInput *rds.ModifyDBProxyTargetGroupInput
		Options                       []request.Option
	}
	mock.lockModifyDBProxyTargetGroupWithContext.RLock()
	calls = mock.calls.ModifyDBProxyTargetGroupWithContext
	mock.lockModifyDBProxyTargetGroupWithContext.RUnlock()
	return calls
}

// ModifyDBProxyWithContext calls ModifyDBProxyWithContextFunc.
func (mock *rdsClientMock) ModifyDBProxyWithContext(contextMoqParam context.Context, modifyDBProxyInput *rds.ModifyDBProxyInput, options ...request.Option) (*rds.ModifyDBProxyOutput, error) {
	if mock.ModifyDBProxyWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBProxyWithContextFunc: method is nil but rdsClient.ModifyDBProxyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		ModifyDBProxyInput *rds.ModifyDBProxyInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		ModifyDBProxyInput: modifyDBProxyInput,
		Options:            options,
	}
	mock.lockModifyDBProxyWithContext.Lock()
	mock.calls.ModifyDBProxyWithContext = append(mock.calls.ModifyDBProxyWithContext, callInfo)
	mock.lockModifyDBProxyWithContext.Unlock()
	return mock.ModifyDBProxyWithContextFunc(contextMoqParam, modifyDBProxyInput, options...)
}

// ModifyDBProxyWithContextCalls gets all the calls that were made to ModifyDBProxyWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBProxyWithContextCalls())
func (mock *rdsClientMock) ModifyDBProxyWithContextCalls() []struct {
	ContextMoqParam    context.Context
	ModifyDBProxyInput *rds.ModifyDBProxyInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		ModifyDBProxyInput *rds.ModifyDBProxyInput
		Options            []request.Option
	}
	mock.lockModifyDBProxyWithContext.RLock()
	calls = mock.calls.ModifyDBProxyWithContext
	mock.lockModifyDBProxyWithContext.RUnlock()
	return calls
}

// ModifyDBSnapshot calls ModifyDBSnapshotFunc.
func (mock *rdsClientMock) ModifyDBSnapshot(modifyDBSnapshotInput *rds.ModifyDBSnapshotInput) (*rds.ModifyDBSnapshotOutput, error) {
	if mock.ModifyDBSnapshotFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotFunc: method is nil but rdsClient.ModifyDBSnapshot was just called")
	}
	callInfo := struct {
		ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
	}{
		ModifyDBSnapshotInput: modifyDBSnapshotInput,
	}
	mock.lockModifyDBSnapshot.Lock()
	mock.calls.ModifyDBSnapshot = append(mock.calls.ModifyDBSnapshot, callInfo)
	mock.lockModifyDBSnapshot.Unlock()
	return mock.ModifyDBSnapshotFunc(modifyDBSnapshotInput)
}

// ModifyDBSnapshotCalls gets all the calls that were made to ModifyDBSnapshot.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotCalls())
func (mock *rdsClientMock) ModifyDBSnapshotCalls() []struct {
	ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
} {
	var calls []struct {
		ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
	}
	mock.lockModifyDBSnapshot.RLock()
	calls = mock.calls.ModifyDBSnapshot
	mock.lockModifyDBSnapshot.RUnlock()
	return calls
}

// ModifyDBSnapshotAttribute calls ModifyDBSnapshotAttributeFunc.
func (mock *rdsClientMock) ModifyDBSnapshotAttribute(modifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	if mock.ModifyDBSnapshotAttributeFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotAttributeFunc: method is nil but rdsClient.ModifyDBSnapshotAttribute was just called")
	}
	callInfo := struct {
		ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
	}{
		ModifyDBSnapshotAttributeInput: modifyDBSnapshotAttributeInput,
	}
	mock.lockModifyDBSnapshotAttribute.Lock()
	mock.calls.ModifyDBSnapshotAttribute = append(mock.calls.ModifyDBSnapshotAttribute, callInfo)
	mock.lockModifyDBSnapshotAttribute.Unlock()
	return mock.ModifyDBSnapshotAttributeFunc(modifyDBSnapshotAttributeInput)
}

// ModifyDBSnapshotAttributeCalls gets all the calls that were made to ModifyDBSnapshotAttribute.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotAttributeCalls())
func (mock *rdsClientMock) ModifyDBSnapshotAttributeCalls() []struct {
	ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
} {
	var calls []struct {
		ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
	}
	mock.lockModifyDBSnapshotAttribute.RLock()
	calls = mock.calls.ModifyDBSnapshotAttribute
	mock.lockModifyDBSnapshotAttribute.RUnlock()
	return calls
}

// ModifyDBSnapshotAttributeRequest calls ModifyDBSnapshotAttributeRequestFunc.
func (mock *rdsClientMock) ModifyDBSnapshotAttributeRequest(modifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput) (*request.Request, *rds.ModifyDBSnapshotAttributeOutput) {
	if mock.ModifyDBSnapshotAttributeRequestFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotAttributeRequestFunc: method is nil but rdsClient.ModifyDBSnapshotAttributeRequest was just called")
	}
	callInfo := struct {
		ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
	}{
		ModifyDBSnapshotAttributeInput: modifyDBSnapshotAttributeInput,
	}
	mock.lockModifyDBSnapshotAttributeRequest.Lock()
	mock.calls.ModifyDBSnapshotAttributeRequest = append(mock.calls.ModifyDBSnapshotAttributeRequest, callInfo)
	mock.lockModifyDBSnapshotAttributeRequest.Unlock()
	return mock.ModifyDBSnapshotAttributeRequestFunc(modifyDBSnapshotAttributeInput)
}

// ModifyDBSnapshotAttributeRequestCalls gets all the calls that were made to ModifyDBSnapshotAttributeRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotAttributeRequestCalls())
func (mock *rdsClientMock) ModifyDBSnapshotAttributeRequestCalls() []struct {
	ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
} {
	var calls []struct {
		ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
	}
	mock.lockModifyDBSnapshotAttributeRequest.RLock()
	calls = mock.calls.ModifyDBSnapshotAttributeRequest
	mock.lockModifyDBSnapshotAttributeRequest.RUnlock()
	return calls
}

// ModifyDBSnapshotAttributeWithContext calls ModifyDBSnapshotAttributeWithContextFunc.
func (mock *rdsClientMock) ModifyDBSnapshotAttributeWithContext(contextMoqParam context.Context, modifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput, options ...request.Option) (*rds.ModifyDBSnapshotAttributeOutput, error) {
	if mock.ModifyDBSnapshotAttributeWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotAttributeWithContextFunc: method is nil but rdsClient.ModifyDBSnapshotAttributeWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		ModifyDBSnapshotAttributeInput: modifyDBSnapshotAttributeInput,
		Options:                        options,
	}
	mock.lockModifyDBSnapshotAttributeWithContext.Lock()
	mock.calls.ModifyDBSnapshotAttributeWithContext = append(mock.calls.ModifyDBSnapshotAttributeWithContext, callInfo)
	mock.lockModifyDBSnapshotAttributeWithContext.Unlock()
	return mock.ModifyDBSnapshotAttributeWithContextFunc(contextMoqParam, modifyDBSnapshotAttributeInput, options...)
}

// ModifyDBSnapshotAttributeWithContextCalls gets all the calls that were made to ModifyDBSnapshotAttributeWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotAttributeWithContextCalls())
func (mock *rdsClientMock) ModifyDBSnapshotAttributeWithContextCalls() []struct {
	ContextMoqParam                context.Context
	ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		ModifyDBSnapshotAttributeInput *rds.ModifyDBSnapshotAttributeInput
		Options                        []request.Option
	}
	mock.lockModifyDBSnapshotAttributeWithContext.RLock()
	calls = mock.calls.ModifyDBSnapshotAttributeWithContext
	mock.lockModifyDBSnapshotAttributeWithContext.RUnlock()
	return calls
}

// ModifyDBSnapshotRequest calls ModifyDBSnapshotRequestFunc.
func (mock *rdsClientMock) ModifyDBSnapshotRequest(modifyDBSnapshotInput *rds.ModifyDBSnapshotInput) (*request.Request, *rds.ModifyDBSnapshotOutput) {
	if mock.ModifyDBSnapshotRequestFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotRequestFunc: method is nil but rdsClient.ModifyDBSnapshotRequest was just called")
	}
	callInfo := struct {
		ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
	}{
		ModifyDBSnapshotInput: modifyDBSnapshotInput,
	}
	mock.lockModifyDBSnapshotRequest.Lock()
	mock.calls.ModifyDBSnapshotRequest = append(mock.calls.ModifyDBSnapshotRequest, callInfo)
	mock.lockModifyDBSnapshotRequest.Unlock()
	return mock.ModifyDBSnapshotRequestFunc(modifyDBSnapshotInput)
}

// ModifyDBSnapshotRequestCalls gets all the calls that were made to ModifyDBSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotRequestCalls())
func (mock *rdsClientMock) ModifyDBSnapshotRequestCalls() []struct {
	ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
} {
	var calls []struct {
		ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
	}
	mock.lockModifyDBSnapshotRequest.RLock()
	calls = mock.calls.ModifyDBSnapshotRequest
	mock.lockModifyDBSnapshotRequest.RUnlock()
	return calls
}

// ModifyDBSnapshotWithContext calls ModifyDBSnapshotWithContextFunc.
func (mock *rdsClientMock) ModifyDBSnapshotWithContext(contextMoqParam context.Context, modifyDBSnapshotInput *rds.ModifyDBSnapshotInput, options ...request.Option) (*rds.ModifyDBSnapshotOutput, error) {
	if mock.ModifyDBSnapshotWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBSnapshotWithContextFunc: method is nil but rdsClient.ModifyDBSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		ModifyDBSnapshotInput: modifyDBSnapshotInput,
		Options:               options,
	}
	mock.lockModifyDBSnapshotWithContext.Lock()
	mock.calls.ModifyDBSnapshotWithContext = append(mock.calls.ModifyDBSnapshotWithContext, callInfo)
	mock.lockModifyDBSnapshotWithContext.Unlock()
	return mock.ModifyDBSnapshotWithContextFunc(contextMoqParam, modifyDBSnapshotInput, options...)
}

// ModifyDBSnapshotWithContextCalls gets all the calls that were made to ModifyDBSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSnapshotWithContextCalls())
func (mock *rdsClientMock) ModifyDBSnapshotWithContextCalls() []struct {
	ContextMoqParam       context.Context
	ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		ModifyDBSnapshotInput *rds.ModifyDBSnapshotInput
		Options               []request.Option
	}
	mock.lockModifyDBSnapshotWithContext.RLock()
	calls = mock.calls.ModifyDBSnapshotWithContext
	mock.lockModifyDBSnapshotWithContext.RUnlock()
	return calls
}

// ModifyDBSubnetGroup calls ModifyDBSubnetGroupFunc.
func (mock *rdsClientMock) ModifyDBSubnetGroup(modifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput) (*rds.ModifyDBSubnetGroupOutput, error) {
	if mock.ModifyDBSubnetGroupFunc == nil {
		panic("rdsClientMock.ModifyDBSubnetGroupFunc: method is nil but rdsClient.ModifyDBSubnetGroup was just called")
	}
	callInfo := struct {
		ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
	}{
		ModifyDBSubnetGroupInput: modifyDBSubnetGroupInput,
	}
	mock.lockModifyDBSubnetGroup.Lock()
	mock.calls.ModifyDBSubnetGroup = append(mock.calls.ModifyDBSubnetGroup, callInfo)
	mock.lockModifyDBSubnetGroup.Unlock()
	return mock.ModifyDBSubnetGroupFunc(modifyDBSubnetGroupInput)
}

// ModifyDBSubnetGroupCalls gets all the calls that were made to ModifyDBSubnetGroup.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSubnetGroupCalls())
func (mock *rdsClientMock) ModifyDBSubnetGroupCalls() []struct {
	ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
} {
	var calls []struct {
		ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
	}
	mock.lockModifyDBSubnetGroup.RLock()
	calls = mock.calls.ModifyDBSubnetGroup
	mock.lockModifyDBSubnetGroup.RUnlock()
	return calls
}

// ModifyDBSubnetGroupRequest calls ModifyDBSubnetGroupRequestFunc.
func (mock *rdsClientMock) ModifyDBSubnetGroupRequest(modifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput) (*request.Request, *rds.ModifyDBSubnetGroupOutput) {
	if mock.ModifyDBSubnetGroupRequestFunc == nil {
		panic("rdsClientMock.ModifyDBSubnetGroupRequestFunc: method is nil but rdsClient.ModifyDBSubnetGroupRequest was just called")
	}
	callInfo := struct {
		ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
	}{
		ModifyDBSubnetGroupInput: modifyDBSubnetGroupInput,
	}
	mock.lockModifyDBSubnetGroupRequest.Lock()
	mock.calls.ModifyDBSubnetGroupRequest = append(mock.calls.ModifyDBSubnetGroupRequest, callInfo)
	mock.lockModifyDBSubnetGroupRequest.Unlock()
	return mock.ModifyDBSubnetGroupRequestFunc(modifyDBSubnetGroupInput)
}

// ModifyDBSubnetGroupRequestCalls gets all the calls that were made to ModifyDBSubnetGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSubnetGroupRequestCalls())
func (mock *rdsClientMock) ModifyDBSubnetGroupRequestCalls() []struct {
	ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
} {
	var calls []struct {
		ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
	}
	mock.lockModifyDBSubnetGroupRequest.RLock()
	calls = mock.calls.ModifyDBSubnetGroupRequest
	mock.lockModifyDBSubnetGroupRequest.RUnlock()
	return calls
}

// ModifyDBSubnetGroupWithContext calls ModifyDBSubnetGroupWithContextFunc.
func (mock *rdsClientMock) ModifyDBSubnetGroupWithContext(contextMoqParam context.Context, modifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput, options ...request.Option) (*rds.ModifyDBSubnetGroupOutput, error) {
	if mock.ModifyDBSubnetGroupWithContextFunc == nil {
		panic("rdsClientMock.ModifyDBSubnetGroupWithContextFunc: method is nil but rdsClient.ModifyDBSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		ModifyDBSubnetGroupInput: modifyDBSubnetGroupInput,
		Options:                  options,
	}
	mock.lockModifyDBSubnetGroupWithContext.Lock()
	mock.calls.ModifyDBSubnetGroupWithContext = append(mock.calls.ModifyDBSubnetGroupWithContext, callInfo)
	mock.lockModifyDBSubnetGroupWithContext.Unlock()
	return mock.ModifyDBSubnetGroupWithContextFunc(contextMoqParam, modifyDBSubnetGroupInput, options...)
}

// ModifyDBSubnetGroupWithContextCalls gets all the calls that were made to ModifyDBSubnetGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyDBSubnetGroupWithContextCalls())
func (mock *rdsClientMock) ModifyDBSubnetGroupWithContextCalls() []struct {
	ContextMoqParam          context.Context
	ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		ModifyDBSubnetGroupInput *rds.ModifyDBSubnetGroupInput
		Options                  []request.Option
	}
	mock.lockModifyDBSubnetGroupWithContext.RLock()
	calls = mock.calls.ModifyDBSubnetGroupWithContext
	mock.lockModifyDBSubnetGroupWithContext.RUnlock()
	return calls
}

// ModifyEventSubscription calls ModifyEventSubscriptionFunc.
func (mock *rdsClientMock) ModifyEventSubscription(modifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput) (*rds.ModifyEventSubscriptionOutput, error) {
	if mock.ModifyEventSubscriptionFunc == nil {
		panic("rdsClientMock.ModifyEventSubscriptionFunc: method is nil but rdsClient.ModifyEventSubscription was just called")
	}
	callInfo := struct {
		ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
	}{
		ModifyEventSubscriptionInput: modifyEventSubscriptionInput,
	}
	mock.lockModifyEventSubscription.Lock()
	mock.calls.ModifyEventSubscription = append(mock.calls.ModifyEventSubscription, callInfo)
	mock.lockModifyEventSubscription.Unlock()
	return mock.ModifyEventSubscriptionFunc(modifyEventSubscriptionInput)
}

// ModifyEventSubscriptionCalls gets all the calls that were made to ModifyEventSubscription.
// Check the length with:
//     len(mockedrdsClient.ModifyEventSubscriptionCalls())
func (mock *rdsClientMock) ModifyEventSubscriptionCalls() []struct {
	ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
} {
	var calls []struct {
		ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
	}
	mock.lockModifyEventSubscription.RLock()
	calls = mock.calls.ModifyEventSubscription
	mock.lockModifyEventSubscription.RUnlock()
	return calls
}

// ModifyEventSubscriptionRequest calls ModifyEventSubscriptionRequestFunc.
func (mock *rdsClientMock) ModifyEventSubscriptionRequest(modifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput) (*request.Request, *rds.ModifyEventSubscriptionOutput) {
	if mock.ModifyEventSubscriptionRequestFunc == nil {
		panic("rdsClientMock.ModifyEventSubscriptionRequestFunc: method is nil but rdsClient.ModifyEventSubscriptionRequest was just called")
	}
	callInfo := struct {
		ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
	}{
		ModifyEventSubscriptionInput: modifyEventSubscriptionInput,
	}
	mock.lockModifyEventSubscriptionRequest.Lock()
	mock.calls.ModifyEventSubscriptionRequest = append(mock.calls.ModifyEventSubscriptionRequest, callInfo)
	mock.lockModifyEventSubscriptionRequest.Unlock()
	return mock.ModifyEventSubscriptionRequestFunc(modifyEventSubscriptionInput)
}

// ModifyEventSubscriptionRequestCalls gets all the calls that were made to ModifyEventSubscriptionRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyEventSubscriptionRequestCalls())
func (mock *rdsClientMock) ModifyEventSubscriptionRequestCalls() []struct {
	ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
} {
	var calls []struct {
		ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
	}
	mock.lockModifyEventSubscriptionRequest.RLock()
	calls = mock.calls.ModifyEventSubscriptionRequest
	mock.lockModifyEventSubscriptionRequest.RUnlock()
	return calls
}

// ModifyEventSubscriptionWithContext calls ModifyEventSubscriptionWithContextFunc.
func (mock *rdsClientMock) ModifyEventSubscriptionWithContext(contextMoqParam context.Context, modifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput, options ...request.Option) (*rds.ModifyEventSubscriptionOutput, error) {
	if mock.ModifyEventSubscriptionWithContextFunc == nil {
		panic("rdsClientMock.ModifyEventSubscriptionWithContextFunc: method is nil but rdsClient.ModifyEventSubscriptionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		ModifyEventSubscriptionInput: modifyEventSubscriptionInput,
		Options:                      options,
	}
	mock.lockModifyEventSubscriptionWithContext.Lock()
	mock.calls.ModifyEventSubscriptionWithContext = append(mock.calls.ModifyEventSubscriptionWithContext, callInfo)
	mock.lockModifyEventSubscriptionWithContext.Unlock()
	return mock.ModifyEventSubscriptionWithContextFunc(contextMoqParam, modifyEventSubscriptionInput, options...)
}

// ModifyEventSubscriptionWithContextCalls gets all the calls that were made to ModifyEventSubscriptionWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyEventSubscriptionWithContextCalls())
func (mock *rdsClientMock) ModifyEventSubscriptionWithContextCalls() []struct {
	ContextMoqParam              context.Context
	ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		ModifyEventSubscriptionInput *rds.ModifyEventSubscriptionInput
		Options                      []request.Option
	}
	mock.lockModifyEventSubscriptionWithContext.RLock()
	calls = mock.calls.ModifyEventSubscriptionWithContext
	mock.lockModifyEventSubscriptionWithContext.RUnlock()
	return calls
}

// ModifyGlobalCluster calls ModifyGlobalClusterFunc.
func (mock *rdsClientMock) ModifyGlobalCluster(modifyGlobalClusterInput *rds.ModifyGlobalClusterInput) (*rds.ModifyGlobalClusterOutput, error) {
	if mock.ModifyGlobalClusterFunc == nil {
		panic("rdsClientMock.ModifyGlobalClusterFunc: method is nil but rdsClient.ModifyGlobalCluster was just called")
	}
	callInfo := struct {
		ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
	}{
		ModifyGlobalClusterInput: modifyGlobalClusterInput,
	}
	mock.lockModifyGlobalCluster.Lock()
	mock.calls.ModifyGlobalCluster = append(mock.calls.ModifyGlobalCluster, callInfo)
	mock.lockModifyGlobalCluster.Unlock()
	return mock.ModifyGlobalClusterFunc(modifyGlobalClusterInput)
}

// ModifyGlobalClusterCalls gets all the calls that were made to ModifyGlobalCluster.
// Check the length with:
//     len(mockedrdsClient.ModifyGlobalClusterCalls())
func (mock *rdsClientMock) ModifyGlobalClusterCalls() []struct {
	ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
} {
	var calls []struct {
		ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
	}
	mock.lockModifyGlobalCluster.RLock()
	calls = mock.calls.ModifyGlobalCluster
	mock.lockModifyGlobalCluster.RUnlock()
	return calls
}

// ModifyGlobalClusterRequest calls ModifyGlobalClusterRequestFunc.
func (mock *rdsClientMock) ModifyGlobalClusterRequest(modifyGlobalClusterInput *rds.ModifyGlobalClusterInput) (*request.Request, *rds.ModifyGlobalClusterOutput) {
	if mock.ModifyGlobalClusterRequestFunc == nil {
		panic("rdsClientMock.ModifyGlobalClusterRequestFunc: method is nil but rdsClient.ModifyGlobalClusterRequest was just called")
	}
	callInfo := struct {
		ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
	}{
		ModifyGlobalClusterInput: modifyGlobalClusterInput,
	}
	mock.lockModifyGlobalClusterRequest.Lock()
	mock.calls.ModifyGlobalClusterRequest = append(mock.calls.ModifyGlobalClusterRequest, callInfo)
	mock.lockModifyGlobalClusterRequest.Unlock()
	return mock.ModifyGlobalClusterRequestFunc(modifyGlobalClusterInput)
}

// ModifyGlobalClusterRequestCalls gets all the calls that were made to ModifyGlobalClusterRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyGlobalClusterRequestCalls())
func (mock *rdsClientMock) ModifyGlobalClusterRequestCalls() []struct {
	ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
} {
	var calls []struct {
		ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
	}
	mock.lockModifyGlobalClusterRequest.RLock()
	calls = mock.calls.ModifyGlobalClusterRequest
	mock.lockModifyGlobalClusterRequest.RUnlock()
	return calls
}

// ModifyGlobalClusterWithContext calls ModifyGlobalClusterWithContextFunc.
func (mock *rdsClientMock) ModifyGlobalClusterWithContext(contextMoqParam context.Context, modifyGlobalClusterInput *rds.ModifyGlobalClusterInput, options ...request.Option) (*rds.ModifyGlobalClusterOutput, error) {
	if mock.ModifyGlobalClusterWithContextFunc == nil {
		panic("rdsClientMock.ModifyGlobalClusterWithContextFunc: method is nil but rdsClient.ModifyGlobalClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		ModifyGlobalClusterInput: modifyGlobalClusterInput,
		Options:                  options,
	}
	mock.lockModifyGlobalClusterWithContext.Lock()
	mock.calls.ModifyGlobalClusterWithContext = append(mock.calls.ModifyGlobalClusterWithContext, callInfo)
	mock.lockModifyGlobalClusterWithContext.Unlock()
	return mock.ModifyGlobalClusterWithContextFunc(contextMoqParam, modifyGlobalClusterInput, options...)
}

// ModifyGlobalClusterWithContextCalls gets all the calls that were made to ModifyGlobalClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyGlobalClusterWithContextCalls())
func (mock *rdsClientMock) ModifyGlobalClusterWithContextCalls() []struct {
	ContextMoqParam          context.Context
	ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		ModifyGlobalClusterInput *rds.ModifyGlobalClusterInput
		Options                  []request.Option
	}
	mock.lockModifyGlobalClusterWithContext.RLock()
	calls = mock.calls.ModifyGlobalClusterWithContext
	mock.lockModifyGlobalClusterWithContext.RUnlock()
	return calls
}

// ModifyOptionGroup calls ModifyOptionGroupFunc.
func (mock *rdsClientMock) ModifyOptionGroup(modifyOptionGroupInput *rds.ModifyOptionGroupInput) (*rds.ModifyOptionGroupOutput, error) {
	if mock.ModifyOptionGroupFunc == nil {
		panic("rdsClientMock.ModifyOptionGroupFunc: method is nil but rdsClient.ModifyOptionGroup was just called")
	}
	callInfo := struct {
		ModifyOptionGroupInput *rds.ModifyOptionGroupInput
	}{
		ModifyOptionGroupInput: modifyOptionGroupInput,
	}
	mock.lockModifyOptionGroup.Lock()
	mock.calls.ModifyOptionGroup = append(mock.calls.ModifyOptionGroup, callInfo)
	mock.lockModifyOptionGroup.Unlock()
	return mock.ModifyOptionGroupFunc(modifyOptionGroupInput)
}

// ModifyOptionGroupCalls gets all the calls that were made to ModifyOptionGroup.
// Check the length with:
//     len(mockedrdsClient.ModifyOptionGroupCalls())
func (mock *rdsClientMock) ModifyOptionGroupCalls() []struct {
	ModifyOptionGroupInput *rds.ModifyOptionGroupInput
} {
	var calls []struct {
		ModifyOptionGroupInput *rds.ModifyOptionGroupInput
	}
	mock.lockModifyOptionGroup.RLock()
	calls = mock.calls.ModifyOptionGroup
	mock.lockModifyOptionGroup.RUnlock()
	return calls
}

// ModifyOptionGroupRequest calls ModifyOptionGroupRequestFunc.
func (mock *rdsClientMock) ModifyOptionGroupRequest(modifyOptionGroupInput *rds.ModifyOptionGroupInput) (*request.Request, *rds.ModifyOptionGroupOutput) {
	if mock.ModifyOptionGroupRequestFunc == nil {
		panic("rdsClientMock.ModifyOptionGroupRequestFunc: method is nil but rdsClient.ModifyOptionGroupRequest was just called")
	}
	callInfo := struct {
		ModifyOptionGroupInput *rds.ModifyOptionGroupInput
	}{
		ModifyOptionGroupInput: modifyOptionGroupInput,
	}
	mock.lockModifyOptionGroupRequest.Lock()
	mock.calls.ModifyOptionGroupRequest = append(mock.calls.ModifyOptionGroupRequest, callInfo)
	mock.lockModifyOptionGroupRequest.Unlock()
	return mock.ModifyOptionGroupRequestFunc(modifyOptionGroupInput)
}

// ModifyOptionGroupRequestCalls gets all the calls that were made to ModifyOptionGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ModifyOptionGroupRequestCalls())
func (mock *rdsClientMock) ModifyOptionGroupRequestCalls() []struct {
	ModifyOptionGroupInput *rds.ModifyOptionGroupInput
} {
	var calls []struct {
		ModifyOptionGroupInput *rds.ModifyOptionGroupInput
	}
	mock.lockModifyOptionGroupRequest.RLock()
	calls = mock.calls.ModifyOptionGroupRequest
	mock.lockModifyOptionGroupRequest.RUnlock()
	return calls
}

// ModifyOptionGroupWithContext calls ModifyOptionGroupWithContextFunc.
func (mock *rdsClientMock) ModifyOptionGroupWithContext(contextMoqParam context.Context, modifyOptionGroupInput *rds.ModifyOptionGroupInput, options ...request.Option) (*rds.ModifyOptionGroupOutput, error) {
	if mock.ModifyOptionGroupWithContextFunc == nil {
		panic("rdsClientMock.ModifyOptionGroupWithContextFunc: method is nil but rdsClient.ModifyOptionGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		ModifyOptionGroupInput *rds.ModifyOptionGroupInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		ModifyOptionGroupInput: modifyOptionGroupInput,
		Options:                options,
	}
	mock.lockModifyOptionGroupWithContext.Lock()
	mock.calls.ModifyOptionGroupWithContext = append(mock.calls.ModifyOptionGroupWithContext, callInfo)
	mock.lockModifyOptionGroupWithContext.Unlock()
	return mock.ModifyOptionGroupWithContextFunc(contextMoqParam, modifyOptionGroupInput, options...)
}

// ModifyOptionGroupWithContextCalls gets all the calls that were made to ModifyOptionGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ModifyOptionGroupWithContextCalls())
func (mock *rdsClientMock) ModifyOptionGroupWithContextCalls() []struct {
	ContextMoqParam        context.Context
	ModifyOptionGroupInput *rds.ModifyOptionGroupInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		ModifyOptionGroupInput *rds.ModifyOptionGroupInput
		Options                []request.Option
	}
	mock.lockModifyOptionGroupWithContext.RLock()
	calls = mock.calls.ModifyOptionGroupWithContext
	mock.lockModifyOptionGroupWithContext.RUnlock()
	return calls
}

// PromoteReadReplica calls PromoteReadReplicaFunc.
func (mock *rdsClientMock) PromoteReadReplica(promoteReadReplicaInput *rds.PromoteReadReplicaInput) (*rds.PromoteReadReplicaOutput, error) {
	if mock.PromoteReadReplicaFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaFunc: method is nil but rdsClient.PromoteReadReplica was just called")
	}
	callInfo := struct {
		PromoteReadReplicaInput *rds.PromoteReadReplicaInput
	}{
		PromoteReadReplicaInput: promoteReadReplicaInput,
	}
	mock.lockPromoteReadReplica.Lock()
	mock.calls.PromoteReadReplica = append(mock.calls.PromoteReadReplica, callInfo)
	mock.lockPromoteReadReplica.Unlock()
	return mock.PromoteReadReplicaFunc(promoteReadReplicaInput)
}

// PromoteReadReplicaCalls gets all the calls that were made to PromoteReadReplica.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaCalls())
func (mock *rdsClientMock) PromoteReadReplicaCalls() []struct {
	PromoteReadReplicaInput *rds.PromoteReadReplicaInput
} {
	var calls []struct {
		PromoteReadReplicaInput *rds.PromoteReadReplicaInput
	}
	mock.lockPromoteReadReplica.RLock()
	calls = mock.calls.PromoteReadReplica
	mock.lockPromoteReadReplica.RUnlock()
	return calls
}

// PromoteReadReplicaDBCluster calls PromoteReadReplicaDBClusterFunc.
func (mock *rdsClientMock) PromoteReadReplicaDBCluster(promoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	if mock.PromoteReadReplicaDBClusterFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaDBClusterFunc: method is nil but rdsClient.PromoteReadReplicaDBCluster was just called")
	}
	callInfo := struct {
		PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
	}{
		PromoteReadReplicaDBClusterInput: promoteReadReplicaDBClusterInput,
	}
	mock.lockPromoteReadReplicaDBCluster.Lock()
	mock.calls.PromoteReadReplicaDBCluster = append(mock.calls.PromoteReadReplicaDBCluster, callInfo)
	mock.lockPromoteReadReplicaDBCluster.Unlock()
	return mock.PromoteReadReplicaDBClusterFunc(promoteReadReplicaDBClusterInput)
}

// PromoteReadReplicaDBClusterCalls gets all the calls that were made to PromoteReadReplicaDBCluster.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaDBClusterCalls())
func (mock *rdsClientMock) PromoteReadReplicaDBClusterCalls() []struct {
	PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
} {
	var calls []struct {
		PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
	}
	mock.lockPromoteReadReplicaDBCluster.RLock()
	calls = mock.calls.PromoteReadReplicaDBCluster
	mock.lockPromoteReadReplicaDBCluster.RUnlock()
	return calls
}

// PromoteReadReplicaDBClusterRequest calls PromoteReadReplicaDBClusterRequestFunc.
func (mock *rdsClientMock) PromoteReadReplicaDBClusterRequest(promoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput) (*request.Request, *rds.PromoteReadReplicaDBClusterOutput) {
	if mock.PromoteReadReplicaDBClusterRequestFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaDBClusterRequestFunc: method is nil but rdsClient.PromoteReadReplicaDBClusterRequest was just called")
	}
	callInfo := struct {
		PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
	}{
		PromoteReadReplicaDBClusterInput: promoteReadReplicaDBClusterInput,
	}
	mock.lockPromoteReadReplicaDBClusterRequest.Lock()
	mock.calls.PromoteReadReplicaDBClusterRequest = append(mock.calls.PromoteReadReplicaDBClusterRequest, callInfo)
	mock.lockPromoteReadReplicaDBClusterRequest.Unlock()
	return mock.PromoteReadReplicaDBClusterRequestFunc(promoteReadReplicaDBClusterInput)
}

// PromoteReadReplicaDBClusterRequestCalls gets all the calls that were made to PromoteReadReplicaDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaDBClusterRequestCalls())
func (mock *rdsClientMock) PromoteReadReplicaDBClusterRequestCalls() []struct {
	PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
} {
	var calls []struct {
		PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
	}
	mock.lockPromoteReadReplicaDBClusterRequest.RLock()
	calls = mock.calls.PromoteReadReplicaDBClusterRequest
	mock.lockPromoteReadReplicaDBClusterRequest.RUnlock()
	return calls
}

// PromoteReadReplicaDBClusterWithContext calls PromoteReadReplicaDBClusterWithContextFunc.
func (mock *rdsClientMock) PromoteReadReplicaDBClusterWithContext(contextMoqParam context.Context, promoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput, options ...request.Option) (*rds.PromoteReadReplicaDBClusterOutput, error) {
	if mock.PromoteReadReplicaDBClusterWithContextFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaDBClusterWithContextFunc: method is nil but rdsClient.PromoteReadReplicaDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		PromoteReadReplicaDBClusterInput: promoteReadReplicaDBClusterInput,
		Options:                          options,
	}
	mock.lockPromoteReadReplicaDBClusterWithContext.Lock()
	mock.calls.PromoteReadReplicaDBClusterWithContext = append(mock.calls.PromoteReadReplicaDBClusterWithContext, callInfo)
	mock.lockPromoteReadReplicaDBClusterWithContext.Unlock()
	return mock.PromoteReadReplicaDBClusterWithContextFunc(contextMoqParam, promoteReadReplicaDBClusterInput, options...)
}

// PromoteReadReplicaDBClusterWithContextCalls gets all the calls that were made to PromoteReadReplicaDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaDBClusterWithContextCalls())
func (mock *rdsClientMock) PromoteReadReplicaDBClusterWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		PromoteReadReplicaDBClusterInput *rds.PromoteReadReplicaDBClusterInput
		Options                          []request.Option
	}
	mock.lockPromoteReadReplicaDBClusterWithContext.RLock()
	calls = mock.calls.PromoteReadReplicaDBClusterWithContext
	mock.lockPromoteReadReplicaDBClusterWithContext.RUnlock()
	return calls
}

// PromoteReadReplicaRequest calls PromoteReadReplicaRequestFunc.
func (mock *rdsClientMock) PromoteReadReplicaRequest(promoteReadReplicaInput *rds.PromoteReadReplicaInput) (*request.Request, *rds.PromoteReadReplicaOutput) {
	if mock.PromoteReadReplicaRequestFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaRequestFunc: method is nil but rdsClient.PromoteReadReplicaRequest was just called")
	}
	callInfo := struct {
		PromoteReadReplicaInput *rds.PromoteReadReplicaInput
	}{
		PromoteReadReplicaInput: promoteReadReplicaInput,
	}
	mock.lockPromoteReadReplicaRequest.Lock()
	mock.calls.PromoteReadReplicaRequest = append(mock.calls.PromoteReadReplicaRequest, callInfo)
	mock.lockPromoteReadReplicaRequest.Unlock()
	return mock.PromoteReadReplicaRequestFunc(promoteReadReplicaInput)
}

// PromoteReadReplicaRequestCalls gets all the calls that were made to PromoteReadReplicaRequest.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaRequestCalls())
func (mock *rdsClientMock) PromoteReadReplicaRequestCalls() []struct {
	PromoteReadReplicaInput *rds.PromoteReadReplicaInput
} {
	var calls []struct {
		PromoteReadReplicaInput *rds.PromoteReadReplicaInput
	}
	mock.lockPromoteReadReplicaRequest.RLock()
	calls = mock.calls.PromoteReadReplicaRequest
	mock.lockPromoteReadReplicaRequest.RUnlock()
	return calls
}

// PromoteReadReplicaWithContext calls PromoteReadReplicaWithContextFunc.
func (mock *rdsClientMock) PromoteReadReplicaWithContext(contextMoqParam context.Context, promoteReadReplicaInput *rds.PromoteReadReplicaInput, options ...request.Option) (*rds.PromoteReadReplicaOutput, error) {
	if mock.PromoteReadReplicaWithContextFunc == nil {
		panic("rdsClientMock.PromoteReadReplicaWithContextFunc: method is nil but rdsClient.PromoteReadReplicaWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		PromoteReadReplicaInput *rds.PromoteReadReplicaInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		PromoteReadReplicaInput: promoteReadReplicaInput,
		Options:                 options,
	}
	mock.lockPromoteReadReplicaWithContext.Lock()
	mock.calls.PromoteReadReplicaWithContext = append(mock.calls.PromoteReadReplicaWithContext, callInfo)
	mock.lockPromoteReadReplicaWithContext.Unlock()
	return mock.PromoteReadReplicaWithContextFunc(contextMoqParam, promoteReadReplicaInput, options...)
}

// PromoteReadReplicaWithContextCalls gets all the calls that were made to PromoteReadReplicaWithContext.
// Check the length with:
//     len(mockedrdsClient.PromoteReadReplicaWithContextCalls())
func (mock *rdsClientMock) PromoteReadReplicaWithContextCalls() []struct {
	ContextMoqParam         context.Context
	PromoteReadReplicaInput *rds.PromoteReadReplicaInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		PromoteReadReplicaInput *rds.PromoteReadReplicaInput
		Options                 []request.Option
	}
	mock.lockPromoteReadReplicaWithContext.RLock()
	calls = mock.calls.PromoteReadReplicaWithContext
	mock.lockPromoteReadReplicaWithContext.RUnlock()
	return calls
}

// PurchaseReservedDBInstancesOffering calls PurchaseReservedDBInstancesOfferingFunc.
func (mock *rdsClientMock) PurchaseReservedDBInstancesOffering(purchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	if mock.PurchaseReservedDBInstancesOfferingFunc == nil {
		panic("rdsClientMock.PurchaseReservedDBInstancesOfferingFunc: method is nil but rdsClient.PurchaseReservedDBInstancesOffering was just called")
	}
	callInfo := struct {
		PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
	}{
		PurchaseReservedDBInstancesOfferingInput: purchaseReservedDBInstancesOfferingInput,
	}
	mock.lockPurchaseReservedDBInstancesOffering.Lock()
	mock.calls.PurchaseReservedDBInstancesOffering = append(mock.calls.PurchaseReservedDBInstancesOffering, callInfo)
	mock.lockPurchaseReservedDBInstancesOffering.Unlock()
	return mock.PurchaseReservedDBInstancesOfferingFunc(purchaseReservedDBInstancesOfferingInput)
}

// PurchaseReservedDBInstancesOfferingCalls gets all the calls that were made to PurchaseReservedDBInstancesOffering.
// Check the length with:
//     len(mockedrdsClient.PurchaseReservedDBInstancesOfferingCalls())
func (mock *rdsClientMock) PurchaseReservedDBInstancesOfferingCalls() []struct {
	PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
} {
	var calls []struct {
		PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
	}
	mock.lockPurchaseReservedDBInstancesOffering.RLock()
	calls = mock.calls.PurchaseReservedDBInstancesOffering
	mock.lockPurchaseReservedDBInstancesOffering.RUnlock()
	return calls
}

// PurchaseReservedDBInstancesOfferingRequest calls PurchaseReservedDBInstancesOfferingRequestFunc.
func (mock *rdsClientMock) PurchaseReservedDBInstancesOfferingRequest(purchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput) (*request.Request, *rds.PurchaseReservedDBInstancesOfferingOutput) {
	if mock.PurchaseReservedDBInstancesOfferingRequestFunc == nil {
		panic("rdsClientMock.PurchaseReservedDBInstancesOfferingRequestFunc: method is nil but rdsClient.PurchaseReservedDBInstancesOfferingRequest was just called")
	}
	callInfo := struct {
		PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
	}{
		PurchaseReservedDBInstancesOfferingInput: purchaseReservedDBInstancesOfferingInput,
	}
	mock.lockPurchaseReservedDBInstancesOfferingRequest.Lock()
	mock.calls.PurchaseReservedDBInstancesOfferingRequest = append(mock.calls.PurchaseReservedDBInstancesOfferingRequest, callInfo)
	mock.lockPurchaseReservedDBInstancesOfferingRequest.Unlock()
	return mock.PurchaseReservedDBInstancesOfferingRequestFunc(purchaseReservedDBInstancesOfferingInput)
}

// PurchaseReservedDBInstancesOfferingRequestCalls gets all the calls that were made to PurchaseReservedDBInstancesOfferingRequest.
// Check the length with:
//     len(mockedrdsClient.PurchaseReservedDBInstancesOfferingRequestCalls())
func (mock *rdsClientMock) PurchaseReservedDBInstancesOfferingRequestCalls() []struct {
	PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
} {
	var calls []struct {
		PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
	}
	mock.lockPurchaseReservedDBInstancesOfferingRequest.RLock()
	calls = mock.calls.PurchaseReservedDBInstancesOfferingRequest
	mock.lockPurchaseReservedDBInstancesOfferingRequest.RUnlock()
	return calls
}

// PurchaseReservedDBInstancesOfferingWithContext calls PurchaseReservedDBInstancesOfferingWithContextFunc.
func (mock *rdsClientMock) PurchaseReservedDBInstancesOfferingWithContext(contextMoqParam context.Context, purchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput, options ...request.Option) (*rds.PurchaseReservedDBInstancesOfferingOutput, error) {
	if mock.PurchaseReservedDBInstancesOfferingWithContextFunc == nil {
		panic("rdsClientMock.PurchaseReservedDBInstancesOfferingWithContextFunc: method is nil but rdsClient.PurchaseReservedDBInstancesOfferingWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                          context.Context
		PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
		Options                                  []request.Option
	}{
		ContextMoqParam:                          contextMoqParam,
		PurchaseReservedDBInstancesOfferingInput: purchaseReservedDBInstancesOfferingInput,
		Options:                                  options,
	}
	mock.lockPurchaseReservedDBInstancesOfferingWithContext.Lock()
	mock.calls.PurchaseReservedDBInstancesOfferingWithContext = append(mock.calls.PurchaseReservedDBInstancesOfferingWithContext, callInfo)
	mock.lockPurchaseReservedDBInstancesOfferingWithContext.Unlock()
	return mock.PurchaseReservedDBInstancesOfferingWithContextFunc(contextMoqParam, purchaseReservedDBInstancesOfferingInput, options...)
}

// PurchaseReservedDBInstancesOfferingWithContextCalls gets all the calls that were made to PurchaseReservedDBInstancesOfferingWithContext.
// Check the length with:
//     len(mockedrdsClient.PurchaseReservedDBInstancesOfferingWithContextCalls())
func (mock *rdsClientMock) PurchaseReservedDBInstancesOfferingWithContextCalls() []struct {
	ContextMoqParam                          context.Context
	PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
	Options                                  []request.Option
} {
	var calls []struct {
		ContextMoqParam                          context.Context
		PurchaseReservedDBInstancesOfferingInput *rds.PurchaseReservedDBInstancesOfferingInput
		Options                                  []request.Option
	}
	mock.lockPurchaseReservedDBInstancesOfferingWithContext.RLock()
	calls = mock.calls.PurchaseReservedDBInstancesOfferingWithContext
	mock.lockPurchaseReservedDBInstancesOfferingWithContext.RUnlock()
	return calls
}

// RebootDBCluster calls RebootDBClusterFunc.
func (mock *rdsClientMock) RebootDBCluster(rebootDBClusterInput *rds.RebootDBClusterInput) (*rds.RebootDBClusterOutput, error) {
	if mock.RebootDBClusterFunc == nil {
		panic("rdsClientMock.RebootDBClusterFunc: method is nil but rdsClient.RebootDBCluster was just called")
	}
	callInfo := struct {
		RebootDBClusterInput *rds.RebootDBClusterInput
	}{
		RebootDBClusterInput: rebootDBClusterInput,
	}
	mock.lockRebootDBCluster.Lock()
	mock.calls.RebootDBCluster = append(mock.calls.RebootDBCluster, callInfo)
	mock.lockRebootDBCluster.Unlock()
	return mock.RebootDBClusterFunc(rebootDBClusterInput)
}

// RebootDBClusterCalls gets all the calls that were made to RebootDBCluster.
// Check the length with:
//     len(mockedrdsClient.RebootDBClusterCalls())
func (mock *rdsClientMock) RebootDBClusterCalls() []struct {
	RebootDBClusterInput *rds.RebootDBClusterInput
} {
	var calls []struct {
		RebootDBClusterInput *rds.RebootDBClusterInput
	}
	mock.lockRebootDBCluster.RLock()
	calls = mock.calls.RebootDBCluster
	mock.lockRebootDBCluster.RUnlock()
	return calls
}

// RebootDBClusterRequest calls RebootDBClusterRequestFunc.
func (mock *rdsClientMock) RebootDBClusterRequest(rebootDBClusterInput *rds.RebootDBClusterInput) (*request.Request, *rds.RebootDBClusterOutput) {
	if mock.RebootDBClusterRequestFunc == nil {
		panic("rdsClientMock.RebootDBClusterRequestFunc: method is nil but rdsClient.RebootDBClusterRequest was just called")
	}
	callInfo := struct {
		RebootDBClusterInput *rds.RebootDBClusterInput
	}{
		RebootDBClusterInput: rebootDBClusterInput,
	}
	mock.lockRebootDBClusterRequest.Lock()
	mock.calls.RebootDBClusterRequest = append(mock.calls.RebootDBClusterRequest, callInfo)
	mock.lockRebootDBClusterRequest.Unlock()
	return mock.RebootDBClusterRequestFunc(rebootDBClusterInput)
}

// RebootDBClusterRequestCalls gets all the calls that were made to RebootDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.RebootDBClusterRequestCalls())
func (mock *rdsClientMock) RebootDBClusterRequestCalls() []struct {
	RebootDBClusterInput *rds.RebootDBClusterInput
} {
	var calls []struct {
		RebootDBClusterInput *rds.RebootDBClusterInput
	}
	mock.lockRebootDBClusterRequest.RLock()
	calls = mock.calls.RebootDBClusterRequest
	mock.lockRebootDBClusterRequest.RUnlock()
	return calls
}

// RebootDBClusterWithContext calls RebootDBClusterWithContextFunc.
func (mock *rdsClientMock) RebootDBClusterWithContext(contextMoqParam context.Context, rebootDBClusterInput *rds.RebootDBClusterInput, options ...request.Option) (*rds.RebootDBClusterOutput, error) {
	if mock.RebootDBClusterWithContextFunc == nil {
		panic("rdsClientMock.RebootDBClusterWithContextFunc: method is nil but rdsClient.RebootDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		RebootDBClusterInput *rds.RebootDBClusterInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		RebootDBClusterInput: rebootDBClusterInput,
		Options:              options,
	}
	mock.lockRebootDBClusterWithContext.Lock()
	mock.calls.RebootDBClusterWithContext = append(mock.calls.RebootDBClusterWithContext, callInfo)
	mock.lockRebootDBClusterWithContext.Unlock()
	return mock.RebootDBClusterWithContextFunc(contextMoqParam, rebootDBClusterInput, options...)
}

// RebootDBClusterWithContextCalls gets all the calls that were made to RebootDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.RebootDBClusterWithContextCalls())
func (mock *rdsClientMock) RebootDBClusterWithContextCalls() []struct {
	ContextMoqParam      context.Context
	RebootDBClusterInput *rds.RebootDBClusterInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		RebootDBClusterInput *rds.RebootDBClusterInput
		Options              []request.Option
	}
	mock.lockRebootDBClusterWithContext.RLock()
	calls = mock.calls.RebootDBClusterWithContext
	mock.lockRebootDBClusterWithContext.RUnlock()
	return calls
}

// RebootDBInstance calls RebootDBInstanceFunc.
func (mock *rdsClientMock) RebootDBInstance(rebootDBInstanceInput *rds.RebootDBInstanceInput) (*rds.RebootDBInstanceOutput, error) {
	if mock.RebootDBInstanceFunc == nil {
		panic("rdsClientMock.RebootDBInstanceFunc: method is nil but rdsClient.RebootDBInstance was just called")
	}
	callInfo := struct {
		RebootDBInstanceInput *rds.RebootDBInstanceInput
	}{
		RebootDBInstanceInput: rebootDBInstanceInput,
	}
	mock.lockRebootDBInstance.Lock()
	mock.calls.RebootDBInstance = append(mock.calls.RebootDBInstance, callInfo)
	mock.lockRebootDBInstance.Unlock()
	return mock.RebootDBInstanceFunc(rebootDBInstanceInput)
}

// RebootDBInstanceCalls gets all the calls that were made to RebootDBInstance.
// Check the length with:
//     len(mockedrdsClient.RebootDBInstanceCalls())
func (mock *rdsClientMock) RebootDBInstanceCalls() []struct {
	RebootDBInstanceInput *rds.RebootDBInstanceInput
} {
	var calls []struct {
		RebootDBInstanceInput *rds.RebootDBInstanceInput
	}
	mock.lockRebootDBInstance.RLock()
	calls = mock.calls.RebootDBInstance
	mock.lockRebootDBInstance.RUnlock()
	return calls
}

// RebootDBInstanceRequest calls RebootDBInstanceRequestFunc.
func (mock *rdsClientMock) RebootDBInstanceRequest(rebootDBInstanceInput *rds.RebootDBInstanceInput) (*request.Request, *rds.RebootDBInstanceOutput) {
	if mock.RebootDBInstanceRequestFunc == nil {
		panic("rdsClientMock.RebootDBInstanceRequestFunc: method is nil but rdsClient.RebootDBInstanceRequest was just called")
	}
	callInfo := struct {
		RebootDBInstanceInput *rds.RebootDBInstanceInput
	}{
		RebootDBInstanceInput: rebootDBInstanceInput,
	}
	mock.lockRebootDBInstanceRequest.Lock()
	mock.calls.RebootDBInstanceRequest = append(mock.calls.RebootDBInstanceRequest, callInfo)
	mock.lockRebootDBInstanceRequest.Unlock()
	return mock.RebootDBInstanceRequestFunc(rebootDBInstanceInput)
}

// RebootDBInstanceRequestCalls gets all the calls that were made to RebootDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.RebootDBInstanceRequestCalls())
func (mock *rdsClientMock) RebootDBInstanceRequestCalls() []struct {
	RebootDBInstanceInput *rds.RebootDBInstanceInput
} {
	var calls []struct {
		RebootDBInstanceInput *rds.RebootDBInstanceInput
	}
	mock.lockRebootDBInstanceRequest.RLock()
	calls = mock.calls.RebootDBInstanceRequest
	mock.lockRebootDBInstanceRequest.RUnlock()
	return calls
}

// RebootDBInstanceWithContext calls RebootDBInstanceWithContextFunc.
func (mock *rdsClientMock) RebootDBInstanceWithContext(contextMoqParam context.Context, rebootDBInstanceInput *rds.RebootDBInstanceInput, options ...request.Option) (*rds.RebootDBInstanceOutput, error) {
	if mock.RebootDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.RebootDBInstanceWithContextFunc: method is nil but rdsClient.RebootDBInstanceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		RebootDBInstanceInput *rds.RebootDBInstanceInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		RebootDBInstanceInput: rebootDBInstanceInput,
		Options:               options,
	}
	mock.lockRebootDBInstanceWithContext.Lock()
	mock.calls.RebootDBInstanceWithContext = append(mock.calls.RebootDBInstanceWithContext, callInfo)
	mock.lockRebootDBInstanceWithContext.Unlock()
	return mock.RebootDBInstanceWithContextFunc(contextMoqParam, rebootDBInstanceInput, options...)
}

// RebootDBInstanceWithContextCalls gets all the calls that were made to RebootDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.RebootDBInstanceWithContextCalls())
func (mock *rdsClientMock) RebootDBInstanceWithContextCalls() []struct {
	ContextMoqParam       context.Context
	RebootDBInstanceInput *rds.RebootDBInstanceInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		RebootDBInstanceInput *rds.RebootDBInstanceInput
		Options               []request.Option
	}
	mock.lockRebootDBInstanceWithContext.RLock()
	calls = mock.calls.RebootDBInstanceWithContext
	mock.lockRebootDBInstanceWithContext.RUnlock()
	return calls
}

// RegisterDBProxyTargets calls RegisterDBProxyTargetsFunc.
func (mock *rdsClientMock) RegisterDBProxyTargets(registerDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput) (*rds.RegisterDBProxyTargetsOutput, error) {
	if mock.RegisterDBProxyTargetsFunc == nil {
		panic("rdsClientMock.RegisterDBProxyTargetsFunc: method is nil but rdsClient.RegisterDBProxyTargets was just called")
	}
	callInfo := struct {
		RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
	}{
		RegisterDBProxyTargetsInput: registerDBProxyTargetsInput,
	}
	mock.lockRegisterDBProxyTargets.Lock()
	mock.calls.RegisterDBProxyTargets = append(mock.calls.RegisterDBProxyTargets, callInfo)
	mock.lockRegisterDBProxyTargets.Unlock()
	return mock.RegisterDBProxyTargetsFunc(registerDBProxyTargetsInput)
}

// RegisterDBProxyTargetsCalls gets all the calls that were made to RegisterDBProxyTargets.
// Check the length with:
//     len(mockedrdsClient.RegisterDBProxyTargetsCalls())
func (mock *rdsClientMock) RegisterDBProxyTargetsCalls() []struct {
	RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
} {
	var calls []struct {
		RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
	}
	mock.lockRegisterDBProxyTargets.RLock()
	calls = mock.calls.RegisterDBProxyTargets
	mock.lockRegisterDBProxyTargets.RUnlock()
	return calls
}

// RegisterDBProxyTargetsRequest calls RegisterDBProxyTargetsRequestFunc.
func (mock *rdsClientMock) RegisterDBProxyTargetsRequest(registerDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput) (*request.Request, *rds.RegisterDBProxyTargetsOutput) {
	if mock.RegisterDBProxyTargetsRequestFunc == nil {
		panic("rdsClientMock.RegisterDBProxyTargetsRequestFunc: method is nil but rdsClient.RegisterDBProxyTargetsRequest was just called")
	}
	callInfo := struct {
		RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
	}{
		RegisterDBProxyTargetsInput: registerDBProxyTargetsInput,
	}
	mock.lockRegisterDBProxyTargetsRequest.Lock()
	mock.calls.RegisterDBProxyTargetsRequest = append(mock.calls.RegisterDBProxyTargetsRequest, callInfo)
	mock.lockRegisterDBProxyTargetsRequest.Unlock()
	return mock.RegisterDBProxyTargetsRequestFunc(registerDBProxyTargetsInput)
}

// RegisterDBProxyTargetsRequestCalls gets all the calls that were made to RegisterDBProxyTargetsRequest.
// Check the length with:
//     len(mockedrdsClient.RegisterDBProxyTargetsRequestCalls())
func (mock *rdsClientMock) RegisterDBProxyTargetsRequestCalls() []struct {
	RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
} {
	var calls []struct {
		RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
	}
	mock.lockRegisterDBProxyTargetsRequest.RLock()
	calls = mock.calls.RegisterDBProxyTargetsRequest
	mock.lockRegisterDBProxyTargetsRequest.RUnlock()
	return calls
}

// RegisterDBProxyTargetsWithContext calls RegisterDBProxyTargetsWithContextFunc.
func (mock *rdsClientMock) RegisterDBProxyTargetsWithContext(contextMoqParam context.Context, registerDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput, options ...request.Option) (*rds.RegisterDBProxyTargetsOutput, error) {
	if mock.RegisterDBProxyTargetsWithContextFunc == nil {
		panic("rdsClientMock.RegisterDBProxyTargetsWithContextFunc: method is nil but rdsClient.RegisterDBProxyTargetsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		RegisterDBProxyTargetsInput: registerDBProxyTargetsInput,
		Options:                     options,
	}
	mock.lockRegisterDBProxyTargetsWithContext.Lock()
	mock.calls.RegisterDBProxyTargetsWithContext = append(mock.calls.RegisterDBProxyTargetsWithContext, callInfo)
	mock.lockRegisterDBProxyTargetsWithContext.Unlock()
	return mock.RegisterDBProxyTargetsWithContextFunc(contextMoqParam, registerDBProxyTargetsInput, options...)
}

// RegisterDBProxyTargetsWithContextCalls gets all the calls that were made to RegisterDBProxyTargetsWithContext.
// Check the length with:
//     len(mockedrdsClient.RegisterDBProxyTargetsWithContextCalls())
func (mock *rdsClientMock) RegisterDBProxyTargetsWithContextCalls() []struct {
	ContextMoqParam             context.Context
	RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		RegisterDBProxyTargetsInput *rds.RegisterDBProxyTargetsInput
		Options                     []request.Option
	}
	mock.lockRegisterDBProxyTargetsWithContext.RLock()
	calls = mock.calls.RegisterDBProxyTargetsWithContext
	mock.lockRegisterDBProxyTargetsWithContext.RUnlock()
	return calls
}

// RemoveFromGlobalCluster calls RemoveFromGlobalClusterFunc.
func (mock *rdsClientMock) RemoveFromGlobalCluster(removeFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput) (*rds.RemoveFromGlobalClusterOutput, error) {
	if mock.RemoveFromGlobalClusterFunc == nil {
		panic("rdsClientMock.RemoveFromGlobalClusterFunc: method is nil but rdsClient.RemoveFromGlobalCluster was just called")
	}
	callInfo := struct {
		RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
	}{
		RemoveFromGlobalClusterInput: removeFromGlobalClusterInput,
	}
	mock.lockRemoveFromGlobalCluster.Lock()
	mock.calls.RemoveFromGlobalCluster = append(mock.calls.RemoveFromGlobalCluster, callInfo)
	mock.lockRemoveFromGlobalCluster.Unlock()
	return mock.RemoveFromGlobalClusterFunc(removeFromGlobalClusterInput)
}

// RemoveFromGlobalClusterCalls gets all the calls that were made to RemoveFromGlobalCluster.
// Check the length with:
//     len(mockedrdsClient.RemoveFromGlobalClusterCalls())
func (mock *rdsClientMock) RemoveFromGlobalClusterCalls() []struct {
	RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
} {
	var calls []struct {
		RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
	}
	mock.lockRemoveFromGlobalCluster.RLock()
	calls = mock.calls.RemoveFromGlobalCluster
	mock.lockRemoveFromGlobalCluster.RUnlock()
	return calls
}

// RemoveFromGlobalClusterRequest calls RemoveFromGlobalClusterRequestFunc.
func (mock *rdsClientMock) RemoveFromGlobalClusterRequest(removeFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput) (*request.Request, *rds.RemoveFromGlobalClusterOutput) {
	if mock.RemoveFromGlobalClusterRequestFunc == nil {
		panic("rdsClientMock.RemoveFromGlobalClusterRequestFunc: method is nil but rdsClient.RemoveFromGlobalClusterRequest was just called")
	}
	callInfo := struct {
		RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
	}{
		RemoveFromGlobalClusterInput: removeFromGlobalClusterInput,
	}
	mock.lockRemoveFromGlobalClusterRequest.Lock()
	mock.calls.RemoveFromGlobalClusterRequest = append(mock.calls.RemoveFromGlobalClusterRequest, callInfo)
	mock.lockRemoveFromGlobalClusterRequest.Unlock()
	return mock.RemoveFromGlobalClusterRequestFunc(removeFromGlobalClusterInput)
}

// RemoveFromGlobalClusterRequestCalls gets all the calls that were made to RemoveFromGlobalClusterRequest.
// Check the length with:
//     len(mockedrdsClient.RemoveFromGlobalClusterRequestCalls())
func (mock *rdsClientMock) RemoveFromGlobalClusterRequestCalls() []struct {
	RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
} {
	var calls []struct {
		RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
	}
	mock.lockRemoveFromGlobalClusterRequest.RLock()
	calls = mock.calls.RemoveFromGlobalClusterRequest
	mock.lockRemoveFromGlobalClusterRequest.RUnlock()
	return calls
}

// RemoveFromGlobalClusterWithContext calls RemoveFromGlobalClusterWithContextFunc.
func (mock *rdsClientMock) RemoveFromGlobalClusterWithContext(contextMoqParam context.Context, removeFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput, options ...request.Option) (*rds.RemoveFromGlobalClusterOutput, error) {
	if mock.RemoveFromGlobalClusterWithContextFunc == nil {
		panic("rdsClientMock.RemoveFromGlobalClusterWithContextFunc: method is nil but rdsClient.RemoveFromGlobalClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		RemoveFromGlobalClusterInput: removeFromGlobalClusterInput,
		Options:                      options,
	}
	mock.lockRemoveFromGlobalClusterWithContext.Lock()
	mock.calls.RemoveFromGlobalClusterWithContext = append(mock.calls.RemoveFromGlobalClusterWithContext, callInfo)
	mock.lockRemoveFromGlobalClusterWithContext.Unlock()
	return mock.RemoveFromGlobalClusterWithContextFunc(contextMoqParam, removeFromGlobalClusterInput, options...)
}

// RemoveFromGlobalClusterWithContextCalls gets all the calls that were made to RemoveFromGlobalClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.RemoveFromGlobalClusterWithContextCalls())
func (mock *rdsClientMock) RemoveFromGlobalClusterWithContextCalls() []struct {
	ContextMoqParam              context.Context
	RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		RemoveFromGlobalClusterInput *rds.RemoveFromGlobalClusterInput
		Options                      []request.Option
	}
	mock.lockRemoveFromGlobalClusterWithContext.RLock()
	calls = mock.calls.RemoveFromGlobalClusterWithContext
	mock.lockRemoveFromGlobalClusterWithContext.RUnlock()
	return calls
}

// RemoveRoleFromDBCluster calls RemoveRoleFromDBClusterFunc.
func (mock *rdsClientMock) RemoveRoleFromDBCluster(removeRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput) (*rds.RemoveRoleFromDBClusterOutput, error) {
	if mock.RemoveRoleFromDBClusterFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBClusterFunc: method is nil but rdsClient.RemoveRoleFromDBCluster was just called")
	}
	callInfo := struct {
		RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
	}{
		RemoveRoleFromDBClusterInput: removeRoleFromDBClusterInput,
	}
	mock.lockRemoveRoleFromDBCluster.Lock()
	mock.calls.RemoveRoleFromDBCluster = append(mock.calls.RemoveRoleFromDBCluster, callInfo)
	mock.lockRemoveRoleFromDBCluster.Unlock()
	return mock.RemoveRoleFromDBClusterFunc(removeRoleFromDBClusterInput)
}

// RemoveRoleFromDBClusterCalls gets all the calls that were made to RemoveRoleFromDBCluster.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBClusterCalls())
func (mock *rdsClientMock) RemoveRoleFromDBClusterCalls() []struct {
	RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
} {
	var calls []struct {
		RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
	}
	mock.lockRemoveRoleFromDBCluster.RLock()
	calls = mock.calls.RemoveRoleFromDBCluster
	mock.lockRemoveRoleFromDBCluster.RUnlock()
	return calls
}

// RemoveRoleFromDBClusterRequest calls RemoveRoleFromDBClusterRequestFunc.
func (mock *rdsClientMock) RemoveRoleFromDBClusterRequest(removeRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput) (*request.Request, *rds.RemoveRoleFromDBClusterOutput) {
	if mock.RemoveRoleFromDBClusterRequestFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBClusterRequestFunc: method is nil but rdsClient.RemoveRoleFromDBClusterRequest was just called")
	}
	callInfo := struct {
		RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
	}{
		RemoveRoleFromDBClusterInput: removeRoleFromDBClusterInput,
	}
	mock.lockRemoveRoleFromDBClusterRequest.Lock()
	mock.calls.RemoveRoleFromDBClusterRequest = append(mock.calls.RemoveRoleFromDBClusterRequest, callInfo)
	mock.lockRemoveRoleFromDBClusterRequest.Unlock()
	return mock.RemoveRoleFromDBClusterRequestFunc(removeRoleFromDBClusterInput)
}

// RemoveRoleFromDBClusterRequestCalls gets all the calls that were made to RemoveRoleFromDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBClusterRequestCalls())
func (mock *rdsClientMock) RemoveRoleFromDBClusterRequestCalls() []struct {
	RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
} {
	var calls []struct {
		RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
	}
	mock.lockRemoveRoleFromDBClusterRequest.RLock()
	calls = mock.calls.RemoveRoleFromDBClusterRequest
	mock.lockRemoveRoleFromDBClusterRequest.RUnlock()
	return calls
}

// RemoveRoleFromDBClusterWithContext calls RemoveRoleFromDBClusterWithContextFunc.
func (mock *rdsClientMock) RemoveRoleFromDBClusterWithContext(contextMoqParam context.Context, removeRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput, options ...request.Option) (*rds.RemoveRoleFromDBClusterOutput, error) {
	if mock.RemoveRoleFromDBClusterWithContextFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBClusterWithContextFunc: method is nil but rdsClient.RemoveRoleFromDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		RemoveRoleFromDBClusterInput: removeRoleFromDBClusterInput,
		Options:                      options,
	}
	mock.lockRemoveRoleFromDBClusterWithContext.Lock()
	mock.calls.RemoveRoleFromDBClusterWithContext = append(mock.calls.RemoveRoleFromDBClusterWithContext, callInfo)
	mock.lockRemoveRoleFromDBClusterWithContext.Unlock()
	return mock.RemoveRoleFromDBClusterWithContextFunc(contextMoqParam, removeRoleFromDBClusterInput, options...)
}

// RemoveRoleFromDBClusterWithContextCalls gets all the calls that were made to RemoveRoleFromDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBClusterWithContextCalls())
func (mock *rdsClientMock) RemoveRoleFromDBClusterWithContextCalls() []struct {
	ContextMoqParam              context.Context
	RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		RemoveRoleFromDBClusterInput *rds.RemoveRoleFromDBClusterInput
		Options                      []request.Option
	}
	mock.lockRemoveRoleFromDBClusterWithContext.RLock()
	calls = mock.calls.RemoveRoleFromDBClusterWithContext
	mock.lockRemoveRoleFromDBClusterWithContext.RUnlock()
	return calls
}

// RemoveRoleFromDBInstance calls RemoveRoleFromDBInstanceFunc.
func (mock *rdsClientMock) RemoveRoleFromDBInstance(removeRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	if mock.RemoveRoleFromDBInstanceFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBInstanceFunc: method is nil but rdsClient.RemoveRoleFromDBInstance was just called")
	}
	callInfo := struct {
		RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
	}{
		RemoveRoleFromDBInstanceInput: removeRoleFromDBInstanceInput,
	}
	mock.lockRemoveRoleFromDBInstance.Lock()
	mock.calls.RemoveRoleFromDBInstance = append(mock.calls.RemoveRoleFromDBInstance, callInfo)
	mock.lockRemoveRoleFromDBInstance.Unlock()
	return mock.RemoveRoleFromDBInstanceFunc(removeRoleFromDBInstanceInput)
}

// RemoveRoleFromDBInstanceCalls gets all the calls that were made to RemoveRoleFromDBInstance.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBInstanceCalls())
func (mock *rdsClientMock) RemoveRoleFromDBInstanceCalls() []struct {
	RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
} {
	var calls []struct {
		RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
	}
	mock.lockRemoveRoleFromDBInstance.RLock()
	calls = mock.calls.RemoveRoleFromDBInstance
	mock.lockRemoveRoleFromDBInstance.RUnlock()
	return calls
}

// RemoveRoleFromDBInstanceRequest calls RemoveRoleFromDBInstanceRequestFunc.
func (mock *rdsClientMock) RemoveRoleFromDBInstanceRequest(removeRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput) (*request.Request, *rds.RemoveRoleFromDBInstanceOutput) {
	if mock.RemoveRoleFromDBInstanceRequestFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBInstanceRequestFunc: method is nil but rdsClient.RemoveRoleFromDBInstanceRequest was just called")
	}
	callInfo := struct {
		RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
	}{
		RemoveRoleFromDBInstanceInput: removeRoleFromDBInstanceInput,
	}
	mock.lockRemoveRoleFromDBInstanceRequest.Lock()
	mock.calls.RemoveRoleFromDBInstanceRequest = append(mock.calls.RemoveRoleFromDBInstanceRequest, callInfo)
	mock.lockRemoveRoleFromDBInstanceRequest.Unlock()
	return mock.RemoveRoleFromDBInstanceRequestFunc(removeRoleFromDBInstanceInput)
}

// RemoveRoleFromDBInstanceRequestCalls gets all the calls that were made to RemoveRoleFromDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBInstanceRequestCalls())
func (mock *rdsClientMock) RemoveRoleFromDBInstanceRequestCalls() []struct {
	RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
} {
	var calls []struct {
		RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
	}
	mock.lockRemoveRoleFromDBInstanceRequest.RLock()
	calls = mock.calls.RemoveRoleFromDBInstanceRequest
	mock.lockRemoveRoleFromDBInstanceRequest.RUnlock()
	return calls
}

// RemoveRoleFromDBInstanceWithContext calls RemoveRoleFromDBInstanceWithContextFunc.
func (mock *rdsClientMock) RemoveRoleFromDBInstanceWithContext(contextMoqParam context.Context, removeRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput, options ...request.Option) (*rds.RemoveRoleFromDBInstanceOutput, error) {
	if mock.RemoveRoleFromDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.RemoveRoleFromDBInstanceWithContextFunc: method is nil but rdsClient.RemoveRoleFromDBInstanceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		RemoveRoleFromDBInstanceInput: removeRoleFromDBInstanceInput,
		Options:                       options,
	}
	mock.lockRemoveRoleFromDBInstanceWithContext.Lock()
	mock.calls.RemoveRoleFromDBInstanceWithContext = append(mock.calls.RemoveRoleFromDBInstanceWithContext, callInfo)
	mock.lockRemoveRoleFromDBInstanceWithContext.Unlock()
	return mock.RemoveRoleFromDBInstanceWithContextFunc(contextMoqParam, removeRoleFromDBInstanceInput, options...)
}

// RemoveRoleFromDBInstanceWithContextCalls gets all the calls that were made to RemoveRoleFromDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.RemoveRoleFromDBInstanceWithContextCalls())
func (mock *rdsClientMock) RemoveRoleFromDBInstanceWithContextCalls() []struct {
	ContextMoqParam               context.Context
	RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		RemoveRoleFromDBInstanceInput *rds.RemoveRoleFromDBInstanceInput
		Options                       []request.Option
	}
	mock.lockRemoveRoleFromDBInstanceWithContext.RLock()
	calls = mock.calls.RemoveRoleFromDBInstanceWithContext
	mock.lockRemoveRoleFromDBInstanceWithContext.RUnlock()
	return calls
}

// RemoveSourceIdentifierFromSubscription calls RemoveSourceIdentifierFromSubscriptionFunc.
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscription(removeSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	if mock.RemoveSourceIdentifierFromSubscriptionFunc == nil {
		panic("rdsClientMock.RemoveSourceIdentifierFromSubscriptionFunc: method is nil but rdsClient.RemoveSourceIdentifierFromSubscription was just called")
	}
	callInfo := struct {
		RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
	}{
		RemoveSourceIdentifierFromSubscriptionInput: removeSourceIdentifierFromSubscriptionInput,
	}
	mock.lockRemoveSourceIdentifierFromSubscription.Lock()
	mock.calls.RemoveSourceIdentifierFromSubscription = append(mock.calls.RemoveSourceIdentifierFromSubscription, callInfo)
	mock.lockRemoveSourceIdentifierFromSubscription.Unlock()
	return mock.RemoveSourceIdentifierFromSubscriptionFunc(removeSourceIdentifierFromSubscriptionInput)
}

// RemoveSourceIdentifierFromSubscriptionCalls gets all the calls that were made to RemoveSourceIdentifierFromSubscription.
// Check the length with:
//     len(mockedrdsClient.RemoveSourceIdentifierFromSubscriptionCalls())
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscriptionCalls() []struct {
	RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
} {
	var calls []struct {
		RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
	}
	mock.lockRemoveSourceIdentifierFromSubscription.RLock()
	calls = mock.calls.RemoveSourceIdentifierFromSubscription
	mock.lockRemoveSourceIdentifierFromSubscription.RUnlock()
	return calls
}

// RemoveSourceIdentifierFromSubscriptionRequest calls RemoveSourceIdentifierFromSubscriptionRequestFunc.
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscriptionRequest(removeSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput) (*request.Request, *rds.RemoveSourceIdentifierFromSubscriptionOutput) {
	if mock.RemoveSourceIdentifierFromSubscriptionRequestFunc == nil {
		panic("rdsClientMock.RemoveSourceIdentifierFromSubscriptionRequestFunc: method is nil but rdsClient.RemoveSourceIdentifierFromSubscriptionRequest was just called")
	}
	callInfo := struct {
		RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
	}{
		RemoveSourceIdentifierFromSubscriptionInput: removeSourceIdentifierFromSubscriptionInput,
	}
	mock.lockRemoveSourceIdentifierFromSubscriptionRequest.Lock()
	mock.calls.RemoveSourceIdentifierFromSubscriptionRequest = append(mock.calls.RemoveSourceIdentifierFromSubscriptionRequest, callInfo)
	mock.lockRemoveSourceIdentifierFromSubscriptionRequest.Unlock()
	return mock.RemoveSourceIdentifierFromSubscriptionRequestFunc(removeSourceIdentifierFromSubscriptionInput)
}

// RemoveSourceIdentifierFromSubscriptionRequestCalls gets all the calls that were made to RemoveSourceIdentifierFromSubscriptionRequest.
// Check the length with:
//     len(mockedrdsClient.RemoveSourceIdentifierFromSubscriptionRequestCalls())
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscriptionRequestCalls() []struct {
	RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
} {
	var calls []struct {
		RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
	}
	mock.lockRemoveSourceIdentifierFromSubscriptionRequest.RLock()
	calls = mock.calls.RemoveSourceIdentifierFromSubscriptionRequest
	mock.lockRemoveSourceIdentifierFromSubscriptionRequest.RUnlock()
	return calls
}

// RemoveSourceIdentifierFromSubscriptionWithContext calls RemoveSourceIdentifierFromSubscriptionWithContextFunc.
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscriptionWithContext(contextMoqParam context.Context, removeSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput, options ...request.Option) (*rds.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	if mock.RemoveSourceIdentifierFromSubscriptionWithContextFunc == nil {
		panic("rdsClientMock.RemoveSourceIdentifierFromSubscriptionWithContextFunc: method is nil but rdsClient.RemoveSourceIdentifierFromSubscriptionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                             context.Context
		RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
		Options                                     []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		RemoveSourceIdentifierFromSubscriptionInput: removeSourceIdentifierFromSubscriptionInput,
		Options: options,
	}
	mock.lockRemoveSourceIdentifierFromSubscriptionWithContext.Lock()
	mock.calls.RemoveSourceIdentifierFromSubscriptionWithContext = append(mock.calls.RemoveSourceIdentifierFromSubscriptionWithContext, callInfo)
	mock.lockRemoveSourceIdentifierFromSubscriptionWithContext.Unlock()
	return mock.RemoveSourceIdentifierFromSubscriptionWithContextFunc(contextMoqParam, removeSourceIdentifierFromSubscriptionInput, options...)
}

// RemoveSourceIdentifierFromSubscriptionWithContextCalls gets all the calls that were made to RemoveSourceIdentifierFromSubscriptionWithContext.
// Check the length with:
//     len(mockedrdsClient.RemoveSourceIdentifierFromSubscriptionWithContextCalls())
func (mock *rdsClientMock) RemoveSourceIdentifierFromSubscriptionWithContextCalls() []struct {
	ContextMoqParam                             context.Context
	RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
	Options                                     []request.Option
} {
	var calls []struct {
		ContextMoqParam                             context.Context
		RemoveSourceIdentifierFromSubscriptionInput *rds.RemoveSourceIdentifierFromSubscriptionInput
		Options                                     []request.Option
	}
	mock.lockRemoveSourceIdentifierFromSubscriptionWithContext.RLock()
	calls = mock.calls.RemoveSourceIdentifierFromSubscriptionWithContext
	mock.lockRemoveSourceIdentifierFromSubscriptionWithContext.RUnlock()
	return calls
}

// RemoveTagsFromResource calls RemoveTagsFromResourceFunc.
func (mock *rdsClientMock) RemoveTagsFromResource(removeTagsFromResourceInput *rds.RemoveTagsFromResourceInput) (*rds.RemoveTagsFromResourceOutput, error) {
	if mock.RemoveTagsFromResourceFunc == nil {
		panic("rdsClientMock.RemoveTagsFromResourceFunc: method is nil but rdsClient.RemoveTagsFromResource was just called")
	}
	callInfo := struct {
		RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
	}{
		RemoveTagsFromResourceInput: removeTagsFromResourceInput,
	}
	mock.lockRemoveTagsFromResource.Lock()
	mock.calls.RemoveTagsFromResource = append(mock.calls.RemoveTagsFromResource, callInfo)
	mock.lockRemoveTagsFromResource.Unlock()
	return mock.RemoveTagsFromResourceFunc(removeTagsFromResourceInput)
}

// RemoveTagsFromResourceCalls gets all the calls that were made to RemoveTagsFromResource.
// Check the length with:
//     len(mockedrdsClient.RemoveTagsFromResourceCalls())
func (mock *rdsClientMock) RemoveTagsFromResourceCalls() []struct {
	RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
} {
	var calls []struct {
		RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
	}
	mock.lockRemoveTagsFromResource.RLock()
	calls = mock.calls.RemoveTagsFromResource
	mock.lockRemoveTagsFromResource.RUnlock()
	return calls
}

// RemoveTagsFromResourceRequest calls RemoveTagsFromResourceRequestFunc.
func (mock *rdsClientMock) RemoveTagsFromResourceRequest(removeTagsFromResourceInput *rds.RemoveTagsFromResourceInput) (*request.Request, *rds.RemoveTagsFromResourceOutput) {
	if mock.RemoveTagsFromResourceRequestFunc == nil {
		panic("rdsClientMock.RemoveTagsFromResourceRequestFunc: method is nil but rdsClient.RemoveTagsFromResourceRequest was just called")
	}
	callInfo := struct {
		RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
	}{
		RemoveTagsFromResourceInput: removeTagsFromResourceInput,
	}
	mock.lockRemoveTagsFromResourceRequest.Lock()
	mock.calls.RemoveTagsFromResourceRequest = append(mock.calls.RemoveTagsFromResourceRequest, callInfo)
	mock.lockRemoveTagsFromResourceRequest.Unlock()
	return mock.RemoveTagsFromResourceRequestFunc(removeTagsFromResourceInput)
}

// RemoveTagsFromResourceRequestCalls gets all the calls that were made to RemoveTagsFromResourceRequest.
// Check the length with:
//     len(mockedrdsClient.RemoveTagsFromResourceRequestCalls())
func (mock *rdsClientMock) RemoveTagsFromResourceRequestCalls() []struct {
	RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
} {
	var calls []struct {
		RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
	}
	mock.lockRemoveTagsFromResourceRequest.RLock()
	calls = mock.calls.RemoveTagsFromResourceRequest
	mock.lockRemoveTagsFromResourceRequest.RUnlock()
	return calls
}

// RemoveTagsFromResourceWithContext calls RemoveTagsFromResourceWithContextFunc.
func (mock *rdsClientMock) RemoveTagsFromResourceWithContext(contextMoqParam context.Context, removeTagsFromResourceInput *rds.RemoveTagsFromResourceInput, options ...request.Option) (*rds.RemoveTagsFromResourceOutput, error) {
	if mock.RemoveTagsFromResourceWithContextFunc == nil {
		panic("rdsClientMock.RemoveTagsFromResourceWithContextFunc: method is nil but rdsClient.RemoveTagsFromResourceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		RemoveTagsFromResourceInput: removeTagsFromResourceInput,
		Options:                     options,
	}
	mock.lockRemoveTagsFromResourceWithContext.Lock()
	mock.calls.RemoveTagsFromResourceWithContext = append(mock.calls.RemoveTagsFromResourceWithContext, callInfo)
	mock.lockRemoveTagsFromResourceWithContext.Unlock()
	return mock.RemoveTagsFromResourceWithContextFunc(contextMoqParam, removeTagsFromResourceInput, options...)
}

// RemoveTagsFromResourceWithContextCalls gets all the calls that were made to RemoveTagsFromResourceWithContext.
// Check the length with:
//     len(mockedrdsClient.RemoveTagsFromResourceWithContextCalls())
func (mock *rdsClientMock) RemoveTagsFromResourceWithContextCalls() []struct {
	ContextMoqParam             context.Context
	RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		RemoveTagsFromResourceInput *rds.RemoveTagsFromResourceInput
		Options                     []request.Option
	}
	mock.lockRemoveTagsFromResourceWithContext.RLock()
	calls = mock.calls.RemoveTagsFromResourceWithContext
	mock.lockRemoveTagsFromResourceWithContext.RUnlock()
	return calls
}

// ResetDBClusterParameterGroup calls ResetDBClusterParameterGroupFunc.
func (mock *rdsClientMock) ResetDBClusterParameterGroup(resetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput) (*rds.DBClusterParameterGroupNameMessage, error) {
	if mock.ResetDBClusterParameterGroupFunc == nil {
		panic("rdsClientMock.ResetDBClusterParameterGroupFunc: method is nil but rdsClient.ResetDBClusterParameterGroup was just called")
	}
	callInfo := struct {
		ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
	}{
		ResetDBClusterParameterGroupInput: resetDBClusterParameterGroupInput,
	}
	mock.lockResetDBClusterParameterGroup.Lock()
	mock.calls.ResetDBClusterParameterGroup = append(mock.calls.ResetDBClusterParameterGroup, callInfo)
	mock.lockResetDBClusterParameterGroup.Unlock()
	return mock.ResetDBClusterParameterGroupFunc(resetDBClusterParameterGroupInput)
}

// ResetDBClusterParameterGroupCalls gets all the calls that were made to ResetDBClusterParameterGroup.
// Check the length with:
//     len(mockedrdsClient.ResetDBClusterParameterGroupCalls())
func (mock *rdsClientMock) ResetDBClusterParameterGroupCalls() []struct {
	ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
} {
	var calls []struct {
		ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
	}
	mock.lockResetDBClusterParameterGroup.RLock()
	calls = mock.calls.ResetDBClusterParameterGroup
	mock.lockResetDBClusterParameterGroup.RUnlock()
	return calls
}

// ResetDBClusterParameterGroupRequest calls ResetDBClusterParameterGroupRequestFunc.
func (mock *rdsClientMock) ResetDBClusterParameterGroupRequest(resetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput) (*request.Request, *rds.DBClusterParameterGroupNameMessage) {
	if mock.ResetDBClusterParameterGroupRequestFunc == nil {
		panic("rdsClientMock.ResetDBClusterParameterGroupRequestFunc: method is nil but rdsClient.ResetDBClusterParameterGroupRequest was just called")
	}
	callInfo := struct {
		ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
	}{
		ResetDBClusterParameterGroupInput: resetDBClusterParameterGroupInput,
	}
	mock.lockResetDBClusterParameterGroupRequest.Lock()
	mock.calls.ResetDBClusterParameterGroupRequest = append(mock.calls.ResetDBClusterParameterGroupRequest, callInfo)
	mock.lockResetDBClusterParameterGroupRequest.Unlock()
	return mock.ResetDBClusterParameterGroupRequestFunc(resetDBClusterParameterGroupInput)
}

// ResetDBClusterParameterGroupRequestCalls gets all the calls that were made to ResetDBClusterParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ResetDBClusterParameterGroupRequestCalls())
func (mock *rdsClientMock) ResetDBClusterParameterGroupRequestCalls() []struct {
	ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
} {
	var calls []struct {
		ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
	}
	mock.lockResetDBClusterParameterGroupRequest.RLock()
	calls = mock.calls.ResetDBClusterParameterGroupRequest
	mock.lockResetDBClusterParameterGroupRequest.RUnlock()
	return calls
}

// ResetDBClusterParameterGroupWithContext calls ResetDBClusterParameterGroupWithContextFunc.
func (mock *rdsClientMock) ResetDBClusterParameterGroupWithContext(contextMoqParam context.Context, resetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput, options ...request.Option) (*rds.DBClusterParameterGroupNameMessage, error) {
	if mock.ResetDBClusterParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.ResetDBClusterParameterGroupWithContextFunc: method is nil but rdsClient.ResetDBClusterParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		ResetDBClusterParameterGroupInput: resetDBClusterParameterGroupInput,
		Options:                           options,
	}
	mock.lockResetDBClusterParameterGroupWithContext.Lock()
	mock.calls.ResetDBClusterParameterGroupWithContext = append(mock.calls.ResetDBClusterParameterGroupWithContext, callInfo)
	mock.lockResetDBClusterParameterGroupWithContext.Unlock()
	return mock.ResetDBClusterParameterGroupWithContextFunc(contextMoqParam, resetDBClusterParameterGroupInput, options...)
}

// ResetDBClusterParameterGroupWithContextCalls gets all the calls that were made to ResetDBClusterParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ResetDBClusterParameterGroupWithContextCalls())
func (mock *rdsClientMock) ResetDBClusterParameterGroupWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		ResetDBClusterParameterGroupInput *rds.ResetDBClusterParameterGroupInput
		Options                           []request.Option
	}
	mock.lockResetDBClusterParameterGroupWithContext.RLock()
	calls = mock.calls.ResetDBClusterParameterGroupWithContext
	mock.lockResetDBClusterParameterGroupWithContext.RUnlock()
	return calls
}

// ResetDBParameterGroup calls ResetDBParameterGroupFunc.
func (mock *rdsClientMock) ResetDBParameterGroup(resetDBParameterGroupInput *rds.ResetDBParameterGroupInput) (*rds.DBParameterGroupNameMessage, error) {
	if mock.ResetDBParameterGroupFunc == nil {
		panic("rdsClientMock.ResetDBParameterGroupFunc: method is nil but rdsClient.ResetDBParameterGroup was just called")
	}
	callInfo := struct {
		ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
	}{
		ResetDBParameterGroupInput: resetDBParameterGroupInput,
	}
	mock.lockResetDBParameterGroup.Lock()
	mock.calls.ResetDBParameterGroup = append(mock.calls.ResetDBParameterGroup, callInfo)
	mock.lockResetDBParameterGroup.Unlock()
	return mock.ResetDBParameterGroupFunc(resetDBParameterGroupInput)
}

// ResetDBParameterGroupCalls gets all the calls that were made to ResetDBParameterGroup.
// Check the length with:
//     len(mockedrdsClient.ResetDBParameterGroupCalls())
func (mock *rdsClientMock) ResetDBParameterGroupCalls() []struct {
	ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
} {
	var calls []struct {
		ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
	}
	mock.lockResetDBParameterGroup.RLock()
	calls = mock.calls.ResetDBParameterGroup
	mock.lockResetDBParameterGroup.RUnlock()
	return calls
}

// ResetDBParameterGroupRequest calls ResetDBParameterGroupRequestFunc.
func (mock *rdsClientMock) ResetDBParameterGroupRequest(resetDBParameterGroupInput *rds.ResetDBParameterGroupInput) (*request.Request, *rds.DBParameterGroupNameMessage) {
	if mock.ResetDBParameterGroupRequestFunc == nil {
		panic("rdsClientMock.ResetDBParameterGroupRequestFunc: method is nil but rdsClient.ResetDBParameterGroupRequest was just called")
	}
	callInfo := struct {
		ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
	}{
		ResetDBParameterGroupInput: resetDBParameterGroupInput,
	}
	mock.lockResetDBParameterGroupRequest.Lock()
	mock.calls.ResetDBParameterGroupRequest = append(mock.calls.ResetDBParameterGroupRequest, callInfo)
	mock.lockResetDBParameterGroupRequest.Unlock()
	return mock.ResetDBParameterGroupRequestFunc(resetDBParameterGroupInput)
}

// ResetDBParameterGroupRequestCalls gets all the calls that were made to ResetDBParameterGroupRequest.
// Check the length with:
//     len(mockedrdsClient.ResetDBParameterGroupRequestCalls())
func (mock *rdsClientMock) ResetDBParameterGroupRequestCalls() []struct {
	ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
} {
	var calls []struct {
		ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
	}
	mock.lockResetDBParameterGroupRequest.RLock()
	calls = mock.calls.ResetDBParameterGroupRequest
	mock.lockResetDBParameterGroupRequest.RUnlock()
	return calls
}

// ResetDBParameterGroupWithContext calls ResetDBParameterGroupWithContextFunc.
func (mock *rdsClientMock) ResetDBParameterGroupWithContext(contextMoqParam context.Context, resetDBParameterGroupInput *rds.ResetDBParameterGroupInput, options ...request.Option) (*rds.DBParameterGroupNameMessage, error) {
	if mock.ResetDBParameterGroupWithContextFunc == nil {
		panic("rdsClientMock.ResetDBParameterGroupWithContextFunc: method is nil but rdsClient.ResetDBParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		ResetDBParameterGroupInput: resetDBParameterGroupInput,
		Options:                    options,
	}
	mock.lockResetDBParameterGroupWithContext.Lock()
	mock.calls.ResetDBParameterGroupWithContext = append(mock.calls.ResetDBParameterGroupWithContext, callInfo)
	mock.lockResetDBParameterGroupWithContext.Unlock()
	return mock.ResetDBParameterGroupWithContextFunc(contextMoqParam, resetDBParameterGroupInput, options...)
}

// ResetDBParameterGroupWithContextCalls gets all the calls that were made to ResetDBParameterGroupWithContext.
// Check the length with:
//     len(mockedrdsClient.ResetDBParameterGroupWithContextCalls())
func (mock *rdsClientMock) ResetDBParameterGroupWithContextCalls() []struct {
	ContextMoqParam            context.Context
	ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		ResetDBParameterGroupInput *rds.ResetDBParameterGroupInput
		Options                    []request.Option
	}
	mock.lockResetDBParameterGroupWithContext.RLock()
	calls = mock.calls.ResetDBParameterGroupWithContext
	mock.lockResetDBParameterGroupWithContext.RUnlock()
	return calls
}

// RestoreDBClusterFromS3 calls RestoreDBClusterFromS3Func.
func (mock *rdsClientMock) RestoreDBClusterFromS3(restoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input) (*rds.RestoreDBClusterFromS3Output, error) {
	if mock.RestoreDBClusterFromS3Func == nil {
		panic("rdsClientMock.RestoreDBClusterFromS3Func: method is nil but rdsClient.RestoreDBClusterFromS3 was just called")
	}
	callInfo := struct {
		RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
	}{
		RestoreDBClusterFromS3Input: restoreDBClusterFromS3Input,
	}
	mock.lockRestoreDBClusterFromS3.Lock()
	mock.calls.RestoreDBClusterFromS3 = append(mock.calls.RestoreDBClusterFromS3, callInfo)
	mock.lockRestoreDBClusterFromS3.Unlock()
	return mock.RestoreDBClusterFromS3Func(restoreDBClusterFromS3Input)
}

// RestoreDBClusterFromS3Calls gets all the calls that were made to RestoreDBClusterFromS3.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromS3Calls())
func (mock *rdsClientMock) RestoreDBClusterFromS3Calls() []struct {
	RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
} {
	var calls []struct {
		RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
	}
	mock.lockRestoreDBClusterFromS3.RLock()
	calls = mock.calls.RestoreDBClusterFromS3
	mock.lockRestoreDBClusterFromS3.RUnlock()
	return calls
}

// RestoreDBClusterFromS3Request calls RestoreDBClusterFromS3RequestFunc.
func (mock *rdsClientMock) RestoreDBClusterFromS3Request(restoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input) (*request.Request, *rds.RestoreDBClusterFromS3Output) {
	if mock.RestoreDBClusterFromS3RequestFunc == nil {
		panic("rdsClientMock.RestoreDBClusterFromS3RequestFunc: method is nil but rdsClient.RestoreDBClusterFromS3Request was just called")
	}
	callInfo := struct {
		RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
	}{
		RestoreDBClusterFromS3Input: restoreDBClusterFromS3Input,
	}
	mock.lockRestoreDBClusterFromS3Request.Lock()
	mock.calls.RestoreDBClusterFromS3Request = append(mock.calls.RestoreDBClusterFromS3Request, callInfo)
	mock.lockRestoreDBClusterFromS3Request.Unlock()
	return mock.RestoreDBClusterFromS3RequestFunc(restoreDBClusterFromS3Input)
}

// RestoreDBClusterFromS3RequestCalls gets all the calls that were made to RestoreDBClusterFromS3Request.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromS3RequestCalls())
func (mock *rdsClientMock) RestoreDBClusterFromS3RequestCalls() []struct {
	RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
} {
	var calls []struct {
		RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
	}
	mock.lockRestoreDBClusterFromS3Request.RLock()
	calls = mock.calls.RestoreDBClusterFromS3Request
	mock.lockRestoreDBClusterFromS3Request.RUnlock()
	return calls
}

// RestoreDBClusterFromS3WithContext calls RestoreDBClusterFromS3WithContextFunc.
func (mock *rdsClientMock) RestoreDBClusterFromS3WithContext(contextMoqParam context.Context, restoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input, options ...request.Option) (*rds.RestoreDBClusterFromS3Output, error) {
	if mock.RestoreDBClusterFromS3WithContextFunc == nil {
		panic("rdsClientMock.RestoreDBClusterFromS3WithContextFunc: method is nil but rdsClient.RestoreDBClusterFromS3WithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		RestoreDBClusterFromS3Input: restoreDBClusterFromS3Input,
		Options:                     options,
	}
	mock.lockRestoreDBClusterFromS3WithContext.Lock()
	mock.calls.RestoreDBClusterFromS3WithContext = append(mock.calls.RestoreDBClusterFromS3WithContext, callInfo)
	mock.lockRestoreDBClusterFromS3WithContext.Unlock()
	return mock.RestoreDBClusterFromS3WithContextFunc(contextMoqParam, restoreDBClusterFromS3Input, options...)
}

// RestoreDBClusterFromS3WithContextCalls gets all the calls that were made to RestoreDBClusterFromS3WithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromS3WithContextCalls())
func (mock *rdsClientMock) RestoreDBClusterFromS3WithContextCalls() []struct {
	ContextMoqParam             context.Context
	RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		RestoreDBClusterFromS3Input *rds.RestoreDBClusterFromS3Input
		Options                     []request.Option
	}
	mock.lockRestoreDBClusterFromS3WithContext.RLock()
	calls = mock.calls.RestoreDBClusterFromS3WithContext
	mock.lockRestoreDBClusterFromS3WithContext.RUnlock()
	return calls
}

// RestoreDBClusterFromSnapshot calls RestoreDBClusterFromSnapshotFunc.
func (mock *rdsClientMock) RestoreDBClusterFromSnapshot(restoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	if mock.RestoreDBClusterFromSnapshotFunc == nil {
		panic("rdsClientMock.RestoreDBClusterFromSnapshotFunc: method is nil but rdsClient.RestoreDBClusterFromSnapshot was just called")
	}
	callInfo := struct {
		RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
	}{
		RestoreDBClusterFromSnapshotInput: restoreDBClusterFromSnapshotInput,
	}
	mock.lockRestoreDBClusterFromSnapshot.Lock()
	mock.calls.RestoreDBClusterFromSnapshot = append(mock.calls.RestoreDBClusterFromSnapshot, callInfo)
	mock.lockRestoreDBClusterFromSnapshot.Unlock()
	return mock.RestoreDBClusterFromSnapshotFunc(restoreDBClusterFromSnapshotInput)
}

// RestoreDBClusterFromSnapshotCalls gets all the calls that were made to RestoreDBClusterFromSnapshot.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromSnapshotCalls())
func (mock *rdsClientMock) RestoreDBClusterFromSnapshotCalls() []struct {
	RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
} {
	var calls []struct {
		RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
	}
	mock.lockRestoreDBClusterFromSnapshot.RLock()
	calls = mock.calls.RestoreDBClusterFromSnapshot
	mock.lockRestoreDBClusterFromSnapshot.RUnlock()
	return calls
}

// RestoreDBClusterFromSnapshotRequest calls RestoreDBClusterFromSnapshotRequestFunc.
func (mock *rdsClientMock) RestoreDBClusterFromSnapshotRequest(restoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput) (*request.Request, *rds.RestoreDBClusterFromSnapshotOutput) {
	if mock.RestoreDBClusterFromSnapshotRequestFunc == nil {
		panic("rdsClientMock.RestoreDBClusterFromSnapshotRequestFunc: method is nil but rdsClient.RestoreDBClusterFromSnapshotRequest was just called")
	}
	callInfo := struct {
		RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
	}{
		RestoreDBClusterFromSnapshotInput: restoreDBClusterFromSnapshotInput,
	}
	mock.lockRestoreDBClusterFromSnapshotRequest.Lock()
	mock.calls.RestoreDBClusterFromSnapshotRequest = append(mock.calls.RestoreDBClusterFromSnapshotRequest, callInfo)
	mock.lockRestoreDBClusterFromSnapshotRequest.Unlock()
	return mock.RestoreDBClusterFromSnapshotRequestFunc(restoreDBClusterFromSnapshotInput)
}

// RestoreDBClusterFromSnapshotRequestCalls gets all the calls that were made to RestoreDBClusterFromSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromSnapshotRequestCalls())
func (mock *rdsClientMock) RestoreDBClusterFromSnapshotRequestCalls() []struct {
	RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
} {
	var calls []struct {
		RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
	}
	mock.lockRestoreDBClusterFromSnapshotRequest.RLock()
	calls = mock.calls.RestoreDBClusterFromSnapshotRequest
	mock.lockRestoreDBClusterFromSnapshotRequest.RUnlock()
	return calls
}

// RestoreDBClusterFromSnapshotWithContext calls RestoreDBClusterFromSnapshotWithContextFunc.
func (mock *rdsClientMock) RestoreDBClusterFromSnapshotWithContext(contextMoqParam context.Context, restoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput, options ...request.Option) (*rds.RestoreDBClusterFromSnapshotOutput, error) {
	if mock.RestoreDBClusterFromSnapshotWithContextFunc == nil {
		panic("rdsClientMock.RestoreDBClusterFromSnapshotWithContextFunc: method is nil but rdsClient.RestoreDBClusterFromSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		RestoreDBClusterFromSnapshotInput: restoreDBClusterFromSnapshotInput,
		Options:                           options,
	}
	mock.lockRestoreDBClusterFromSnapshotWithContext.Lock()
	mock.calls.RestoreDBClusterFromSnapshotWithContext = append(mock.calls.RestoreDBClusterFromSnapshotWithContext, callInfo)
	mock.lockRestoreDBClusterFromSnapshotWithContext.Unlock()
	return mock.RestoreDBClusterFromSnapshotWithContextFunc(contextMoqParam, restoreDBClusterFromSnapshotInput, options...)
}

// RestoreDBClusterFromSnapshotWithContextCalls gets all the calls that were made to RestoreDBClusterFromSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterFromSnapshotWithContextCalls())
func (mock *rdsClientMock) RestoreDBClusterFromSnapshotWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		RestoreDBClusterFromSnapshotInput *rds.RestoreDBClusterFromSnapshotInput
		Options                           []request.Option
	}
	mock.lockRestoreDBClusterFromSnapshotWithContext.RLock()
	calls = mock.calls.RestoreDBClusterFromSnapshotWithContext
	mock.lockRestoreDBClusterFromSnapshotWithContext.RUnlock()
	return calls
}

// RestoreDBClusterToPointInTime calls RestoreDBClusterToPointInTimeFunc.
func (mock *rdsClientMock) RestoreDBClusterToPointInTime(restoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	if mock.RestoreDBClusterToPointInTimeFunc == nil {
		panic("rdsClientMock.RestoreDBClusterToPointInTimeFunc: method is nil but rdsClient.RestoreDBClusterToPointInTime was just called")
	}
	callInfo := struct {
		RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
	}{
		RestoreDBClusterToPointInTimeInput: restoreDBClusterToPointInTimeInput,
	}
	mock.lockRestoreDBClusterToPointInTime.Lock()
	mock.calls.RestoreDBClusterToPointInTime = append(mock.calls.RestoreDBClusterToPointInTime, callInfo)
	mock.lockRestoreDBClusterToPointInTime.Unlock()
	return mock.RestoreDBClusterToPointInTimeFunc(restoreDBClusterToPointInTimeInput)
}

// RestoreDBClusterToPointInTimeCalls gets all the calls that were made to RestoreDBClusterToPointInTime.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterToPointInTimeCalls())
func (mock *rdsClientMock) RestoreDBClusterToPointInTimeCalls() []struct {
	RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
} {
	var calls []struct {
		RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
	}
	mock.lockRestoreDBClusterToPointInTime.RLock()
	calls = mock.calls.RestoreDBClusterToPointInTime
	mock.lockRestoreDBClusterToPointInTime.RUnlock()
	return calls
}

// RestoreDBClusterToPointInTimeRequest calls RestoreDBClusterToPointInTimeRequestFunc.
func (mock *rdsClientMock) RestoreDBClusterToPointInTimeRequest(restoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput) (*request.Request, *rds.RestoreDBClusterToPointInTimeOutput) {
	if mock.RestoreDBClusterToPointInTimeRequestFunc == nil {
		panic("rdsClientMock.RestoreDBClusterToPointInTimeRequestFunc: method is nil but rdsClient.RestoreDBClusterToPointInTimeRequest was just called")
	}
	callInfo := struct {
		RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
	}{
		RestoreDBClusterToPointInTimeInput: restoreDBClusterToPointInTimeInput,
	}
	mock.lockRestoreDBClusterToPointInTimeRequest.Lock()
	mock.calls.RestoreDBClusterToPointInTimeRequest = append(mock.calls.RestoreDBClusterToPointInTimeRequest, callInfo)
	mock.lockRestoreDBClusterToPointInTimeRequest.Unlock()
	return mock.RestoreDBClusterToPointInTimeRequestFunc(restoreDBClusterToPointInTimeInput)
}

// RestoreDBClusterToPointInTimeRequestCalls gets all the calls that were made to RestoreDBClusterToPointInTimeRequest.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterToPointInTimeRequestCalls())
func (mock *rdsClientMock) RestoreDBClusterToPointInTimeRequestCalls() []struct {
	RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
} {
	var calls []struct {
		RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
	}
	mock.lockRestoreDBClusterToPointInTimeRequest.RLock()
	calls = mock.calls.RestoreDBClusterToPointInTimeRequest
	mock.lockRestoreDBClusterToPointInTimeRequest.RUnlock()
	return calls
}

// RestoreDBClusterToPointInTimeWithContext calls RestoreDBClusterToPointInTimeWithContextFunc.
func (mock *rdsClientMock) RestoreDBClusterToPointInTimeWithContext(contextMoqParam context.Context, restoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput, options ...request.Option) (*rds.RestoreDBClusterToPointInTimeOutput, error) {
	if mock.RestoreDBClusterToPointInTimeWithContextFunc == nil {
		panic("rdsClientMock.RestoreDBClusterToPointInTimeWithContextFunc: method is nil but rdsClient.RestoreDBClusterToPointInTimeWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		RestoreDBClusterToPointInTimeInput: restoreDBClusterToPointInTimeInput,
		Options:                            options,
	}
	mock.lockRestoreDBClusterToPointInTimeWithContext.Lock()
	mock.calls.RestoreDBClusterToPointInTimeWithContext = append(mock.calls.RestoreDBClusterToPointInTimeWithContext, callInfo)
	mock.lockRestoreDBClusterToPointInTimeWithContext.Unlock()
	return mock.RestoreDBClusterToPointInTimeWithContextFunc(contextMoqParam, restoreDBClusterToPointInTimeInput, options...)
}

// RestoreDBClusterToPointInTimeWithContextCalls gets all the calls that were made to RestoreDBClusterToPointInTimeWithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBClusterToPointInTimeWithContextCalls())
func (mock *rdsClientMock) RestoreDBClusterToPointInTimeWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		RestoreDBClusterToPointInTimeInput *rds.RestoreDBClusterToPointInTimeInput
		Options                            []request.Option
	}
	mock.lockRestoreDBClusterToPointInTimeWithContext.RLock()
	calls = mock.calls.RestoreDBClusterToPointInTimeWithContext
	mock.lockRestoreDBClusterToPointInTimeWithContext.RUnlock()
	return calls
}

// RestoreDBInstanceFromDBSnapshot calls RestoreDBInstanceFromDBSnapshotFunc.
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshot(restoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	if mock.RestoreDBInstanceFromDBSnapshotFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceFromDBSnapshotFunc: method is nil but rdsClient.RestoreDBInstanceFromDBSnapshot was just called")
	}
	callInfo := struct {
		RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
	}{
		RestoreDBInstanceFromDBSnapshotInput: restoreDBInstanceFromDBSnapshotInput,
	}
	mock.lockRestoreDBInstanceFromDBSnapshot.Lock()
	mock.calls.RestoreDBInstanceFromDBSnapshot = append(mock.calls.RestoreDBInstanceFromDBSnapshot, callInfo)
	mock.lockRestoreDBInstanceFromDBSnapshot.Unlock()
	return mock.RestoreDBInstanceFromDBSnapshotFunc(restoreDBInstanceFromDBSnapshotInput)
}

// RestoreDBInstanceFromDBSnapshotCalls gets all the calls that were made to RestoreDBInstanceFromDBSnapshot.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromDBSnapshotCalls())
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshotCalls() []struct {
	RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
} {
	var calls []struct {
		RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
	}
	mock.lockRestoreDBInstanceFromDBSnapshot.RLock()
	calls = mock.calls.RestoreDBInstanceFromDBSnapshot
	mock.lockRestoreDBInstanceFromDBSnapshot.RUnlock()
	return calls
}

// RestoreDBInstanceFromDBSnapshotRequest calls RestoreDBInstanceFromDBSnapshotRequestFunc.
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshotRequest(restoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput) (*request.Request, *rds.RestoreDBInstanceFromDBSnapshotOutput) {
	if mock.RestoreDBInstanceFromDBSnapshotRequestFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceFromDBSnapshotRequestFunc: method is nil but rdsClient.RestoreDBInstanceFromDBSnapshotRequest was just called")
	}
	callInfo := struct {
		RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
	}{
		RestoreDBInstanceFromDBSnapshotInput: restoreDBInstanceFromDBSnapshotInput,
	}
	mock.lockRestoreDBInstanceFromDBSnapshotRequest.Lock()
	mock.calls.RestoreDBInstanceFromDBSnapshotRequest = append(mock.calls.RestoreDBInstanceFromDBSnapshotRequest, callInfo)
	mock.lockRestoreDBInstanceFromDBSnapshotRequest.Unlock()
	return mock.RestoreDBInstanceFromDBSnapshotRequestFunc(restoreDBInstanceFromDBSnapshotInput)
}

// RestoreDBInstanceFromDBSnapshotRequestCalls gets all the calls that were made to RestoreDBInstanceFromDBSnapshotRequest.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromDBSnapshotRequestCalls())
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshotRequestCalls() []struct {
	RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
} {
	var calls []struct {
		RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
	}
	mock.lockRestoreDBInstanceFromDBSnapshotRequest.RLock()
	calls = mock.calls.RestoreDBInstanceFromDBSnapshotRequest
	mock.lockRestoreDBInstanceFromDBSnapshotRequest.RUnlock()
	return calls
}

// RestoreDBInstanceFromDBSnapshotWithContext calls RestoreDBInstanceFromDBSnapshotWithContextFunc.
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshotWithContext(contextMoqParam context.Context, restoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput, options ...request.Option) (*rds.RestoreDBInstanceFromDBSnapshotOutput, error) {
	if mock.RestoreDBInstanceFromDBSnapshotWithContextFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceFromDBSnapshotWithContextFunc: method is nil but rdsClient.RestoreDBInstanceFromDBSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		RestoreDBInstanceFromDBSnapshotInput: restoreDBInstanceFromDBSnapshotInput,
		Options:                              options,
	}
	mock.lockRestoreDBInstanceFromDBSnapshotWithContext.Lock()
	mock.calls.RestoreDBInstanceFromDBSnapshotWithContext = append(mock.calls.RestoreDBInstanceFromDBSnapshotWithContext, callInfo)
	mock.lockRestoreDBInstanceFromDBSnapshotWithContext.Unlock()
	return mock.RestoreDBInstanceFromDBSnapshotWithContextFunc(contextMoqParam, restoreDBInstanceFromDBSnapshotInput, options...)
}

// RestoreDBInstanceFromDBSnapshotWithContextCalls gets all the calls that were made to RestoreDBInstanceFromDBSnapshotWithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromDBSnapshotWithContextCalls())
func (mock *rdsClientMock) RestoreDBInstanceFromDBSnapshotWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		RestoreDBInstanceFromDBSnapshotInput *rds.RestoreDBInstanceFromDBSnapshotInput
		Options                              []request.Option
	}
	mock.lockRestoreDBInstanceFromDBSnapshotWithContext.RLock()
	calls = mock.calls.RestoreDBInstanceFromDBSnapshotWithContext
	mock.lockRestoreDBInstanceFromDBSnapshotWithContext.RUnlock()
	return calls
}

// RestoreDBInstanceFromS3 calls RestoreDBInstanceFromS3Func.
func (mock *rdsClientMock) RestoreDBInstanceFromS3(restoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input) (*rds.RestoreDBInstanceFromS3Output, error) {
	if mock.RestoreDBInstanceFromS3Func == nil {
		panic("rdsClientMock.RestoreDBInstanceFromS3Func: method is nil but rdsClient.RestoreDBInstanceFromS3 was just called")
	}
	callInfo := struct {
		RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
	}{
		RestoreDBInstanceFromS3Input: restoreDBInstanceFromS3Input,
	}
	mock.lockRestoreDBInstanceFromS3.Lock()
	mock.calls.RestoreDBInstanceFromS3 = append(mock.calls.RestoreDBInstanceFromS3, callInfo)
	mock.lockRestoreDBInstanceFromS3.Unlock()
	return mock.RestoreDBInstanceFromS3Func(restoreDBInstanceFromS3Input)
}

// RestoreDBInstanceFromS3Calls gets all the calls that were made to RestoreDBInstanceFromS3.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromS3Calls())
func (mock *rdsClientMock) RestoreDBInstanceFromS3Calls() []struct {
	RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
} {
	var calls []struct {
		RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
	}
	mock.lockRestoreDBInstanceFromS3.RLock()
	calls = mock.calls.RestoreDBInstanceFromS3
	mock.lockRestoreDBInstanceFromS3.RUnlock()
	return calls
}

// RestoreDBInstanceFromS3Request calls RestoreDBInstanceFromS3RequestFunc.
func (mock *rdsClientMock) RestoreDBInstanceFromS3Request(restoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input) (*request.Request, *rds.RestoreDBInstanceFromS3Output) {
	if mock.RestoreDBInstanceFromS3RequestFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceFromS3RequestFunc: method is nil but rdsClient.RestoreDBInstanceFromS3Request was just called")
	}
	callInfo := struct {
		RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
	}{
		RestoreDBInstanceFromS3Input: restoreDBInstanceFromS3Input,
	}
	mock.lockRestoreDBInstanceFromS3Request.Lock()
	mock.calls.RestoreDBInstanceFromS3Request = append(mock.calls.RestoreDBInstanceFromS3Request, callInfo)
	mock.lockRestoreDBInstanceFromS3Request.Unlock()
	return mock.RestoreDBInstanceFromS3RequestFunc(restoreDBInstanceFromS3Input)
}

// RestoreDBInstanceFromS3RequestCalls gets all the calls that were made to RestoreDBInstanceFromS3Request.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromS3RequestCalls())
func (mock *rdsClientMock) RestoreDBInstanceFromS3RequestCalls() []struct {
	RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
} {
	var calls []struct {
		RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
	}
	mock.lockRestoreDBInstanceFromS3Request.RLock()
	calls = mock.calls.RestoreDBInstanceFromS3Request
	mock.lockRestoreDBInstanceFromS3Request.RUnlock()
	return calls
}

// RestoreDBInstanceFromS3WithContext calls RestoreDBInstanceFromS3WithContextFunc.
func (mock *rdsClientMock) RestoreDBInstanceFromS3WithContext(contextMoqParam context.Context, restoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input, options ...request.Option) (*rds.RestoreDBInstanceFromS3Output, error) {
	if mock.RestoreDBInstanceFromS3WithContextFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceFromS3WithContextFunc: method is nil but rdsClient.RestoreDBInstanceFromS3WithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		RestoreDBInstanceFromS3Input: restoreDBInstanceFromS3Input,
		Options:                      options,
	}
	mock.lockRestoreDBInstanceFromS3WithContext.Lock()
	mock.calls.RestoreDBInstanceFromS3WithContext = append(mock.calls.RestoreDBInstanceFromS3WithContext, callInfo)
	mock.lockRestoreDBInstanceFromS3WithContext.Unlock()
	return mock.RestoreDBInstanceFromS3WithContextFunc(contextMoqParam, restoreDBInstanceFromS3Input, options...)
}

// RestoreDBInstanceFromS3WithContextCalls gets all the calls that were made to RestoreDBInstanceFromS3WithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceFromS3WithContextCalls())
func (mock *rdsClientMock) RestoreDBInstanceFromS3WithContextCalls() []struct {
	ContextMoqParam              context.Context
	RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		RestoreDBInstanceFromS3Input *rds.RestoreDBInstanceFromS3Input
		Options                      []request.Option
	}
	mock.lockRestoreDBInstanceFromS3WithContext.RLock()
	calls = mock.calls.RestoreDBInstanceFromS3WithContext
	mock.lockRestoreDBInstanceFromS3WithContext.RUnlock()
	return calls
}

// RestoreDBInstanceToPointInTime calls RestoreDBInstanceToPointInTimeFunc.
func (mock *rdsClientMock) RestoreDBInstanceToPointInTime(restoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	if mock.RestoreDBInstanceToPointInTimeFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceToPointInTimeFunc: method is nil but rdsClient.RestoreDBInstanceToPointInTime was just called")
	}
	callInfo := struct {
		RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
	}{
		RestoreDBInstanceToPointInTimeInput: restoreDBInstanceToPointInTimeInput,
	}
	mock.lockRestoreDBInstanceToPointInTime.Lock()
	mock.calls.RestoreDBInstanceToPointInTime = append(mock.calls.RestoreDBInstanceToPointInTime, callInfo)
	mock.lockRestoreDBInstanceToPointInTime.Unlock()
	return mock.RestoreDBInstanceToPointInTimeFunc(restoreDBInstanceToPointInTimeInput)
}

// RestoreDBInstanceToPointInTimeCalls gets all the calls that were made to RestoreDBInstanceToPointInTime.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceToPointInTimeCalls())
func (mock *rdsClientMock) RestoreDBInstanceToPointInTimeCalls() []struct {
	RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
} {
	var calls []struct {
		RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
	}
	mock.lockRestoreDBInstanceToPointInTime.RLock()
	calls = mock.calls.RestoreDBInstanceToPointInTime
	mock.lockRestoreDBInstanceToPointInTime.RUnlock()
	return calls
}

// RestoreDBInstanceToPointInTimeRequest calls RestoreDBInstanceToPointInTimeRequestFunc.
func (mock *rdsClientMock) RestoreDBInstanceToPointInTimeRequest(restoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput) (*request.Request, *rds.RestoreDBInstanceToPointInTimeOutput) {
	if mock.RestoreDBInstanceToPointInTimeRequestFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceToPointInTimeRequestFunc: method is nil but rdsClient.RestoreDBInstanceToPointInTimeRequest was just called")
	}
	callInfo := struct {
		RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
	}{
		RestoreDBInstanceToPointInTimeInput: restoreDBInstanceToPointInTimeInput,
	}
	mock.lockRestoreDBInstanceToPointInTimeRequest.Lock()
	mock.calls.RestoreDBInstanceToPointInTimeRequest = append(mock.calls.RestoreDBInstanceToPointInTimeRequest, callInfo)
	mock.lockRestoreDBInstanceToPointInTimeRequest.Unlock()
	return mock.RestoreDBInstanceToPointInTimeRequestFunc(restoreDBInstanceToPointInTimeInput)
}

// RestoreDBInstanceToPointInTimeRequestCalls gets all the calls that were made to RestoreDBInstanceToPointInTimeRequest.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceToPointInTimeRequestCalls())
func (mock *rdsClientMock) RestoreDBInstanceToPointInTimeRequestCalls() []struct {
	RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
} {
	var calls []struct {
		RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
	}
	mock.lockRestoreDBInstanceToPointInTimeRequest.RLock()
	calls = mock.calls.RestoreDBInstanceToPointInTimeRequest
	mock.lockRestoreDBInstanceToPointInTimeRequest.RUnlock()
	return calls
}

// RestoreDBInstanceToPointInTimeWithContext calls RestoreDBInstanceToPointInTimeWithContextFunc.
func (mock *rdsClientMock) RestoreDBInstanceToPointInTimeWithContext(contextMoqParam context.Context, restoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput, options ...request.Option) (*rds.RestoreDBInstanceToPointInTimeOutput, error) {
	if mock.RestoreDBInstanceToPointInTimeWithContextFunc == nil {
		panic("rdsClientMock.RestoreDBInstanceToPointInTimeWithContextFunc: method is nil but rdsClient.RestoreDBInstanceToPointInTimeWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                     context.Context
		RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
		Options                             []request.Option
	}{
		ContextMoqParam:                     contextMoqParam,
		RestoreDBInstanceToPointInTimeInput: restoreDBInstanceToPointInTimeInput,
		Options:                             options,
	}
	mock.lockRestoreDBInstanceToPointInTimeWithContext.Lock()
	mock.calls.RestoreDBInstanceToPointInTimeWithContext = append(mock.calls.RestoreDBInstanceToPointInTimeWithContext, callInfo)
	mock.lockRestoreDBInstanceToPointInTimeWithContext.Unlock()
	return mock.RestoreDBInstanceToPointInTimeWithContextFunc(contextMoqParam, restoreDBInstanceToPointInTimeInput, options...)
}

// RestoreDBInstanceToPointInTimeWithContextCalls gets all the calls that were made to RestoreDBInstanceToPointInTimeWithContext.
// Check the length with:
//     len(mockedrdsClient.RestoreDBInstanceToPointInTimeWithContextCalls())
func (mock *rdsClientMock) RestoreDBInstanceToPointInTimeWithContextCalls() []struct {
	ContextMoqParam                     context.Context
	RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
	Options                             []request.Option
} {
	var calls []struct {
		ContextMoqParam                     context.Context
		RestoreDBInstanceToPointInTimeInput *rds.RestoreDBInstanceToPointInTimeInput
		Options                             []request.Option
	}
	mock.lockRestoreDBInstanceToPointInTimeWithContext.RLock()
	calls = mock.calls.RestoreDBInstanceToPointInTimeWithContext
	mock.lockRestoreDBInstanceToPointInTimeWithContext.RUnlock()
	return calls
}

// RevokeDBSecurityGroupIngress calls RevokeDBSecurityGroupIngressFunc.
func (mock *rdsClientMock) RevokeDBSecurityGroupIngress(revokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	if mock.RevokeDBSecurityGroupIngressFunc == nil {
		panic("rdsClientMock.RevokeDBSecurityGroupIngressFunc: method is nil but rdsClient.RevokeDBSecurityGroupIngress was just called")
	}
	callInfo := struct {
		RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
	}{
		RevokeDBSecurityGroupIngressInput: revokeDBSecurityGroupIngressInput,
	}
	mock.lockRevokeDBSecurityGroupIngress.Lock()
	mock.calls.RevokeDBSecurityGroupIngress = append(mock.calls.RevokeDBSecurityGroupIngress, callInfo)
	mock.lockRevokeDBSecurityGroupIngress.Unlock()
	return mock.RevokeDBSecurityGroupIngressFunc(revokeDBSecurityGroupIngressInput)
}

// RevokeDBSecurityGroupIngressCalls gets all the calls that were made to RevokeDBSecurityGroupIngress.
// Check the length with:
//     len(mockedrdsClient.RevokeDBSecurityGroupIngressCalls())
func (mock *rdsClientMock) RevokeDBSecurityGroupIngressCalls() []struct {
	RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
} {
	var calls []struct {
		RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
	}
	mock.lockRevokeDBSecurityGroupIngress.RLock()
	calls = mock.calls.RevokeDBSecurityGroupIngress
	mock.lockRevokeDBSecurityGroupIngress.RUnlock()
	return calls
}

// RevokeDBSecurityGroupIngressRequest calls RevokeDBSecurityGroupIngressRequestFunc.
func (mock *rdsClientMock) RevokeDBSecurityGroupIngressRequest(revokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput) (*request.Request, *rds.RevokeDBSecurityGroupIngressOutput) {
	if mock.RevokeDBSecurityGroupIngressRequestFunc == nil {
		panic("rdsClientMock.RevokeDBSecurityGroupIngressRequestFunc: method is nil but rdsClient.RevokeDBSecurityGroupIngressRequest was just called")
	}
	callInfo := struct {
		RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
	}{
		RevokeDBSecurityGroupIngressInput: revokeDBSecurityGroupIngressInput,
	}
	mock.lockRevokeDBSecurityGroupIngressRequest.Lock()
	mock.calls.RevokeDBSecurityGroupIngressRequest = append(mock.calls.RevokeDBSecurityGroupIngressRequest, callInfo)
	mock.lockRevokeDBSecurityGroupIngressRequest.Unlock()
	return mock.RevokeDBSecurityGroupIngressRequestFunc(revokeDBSecurityGroupIngressInput)
}

// RevokeDBSecurityGroupIngressRequestCalls gets all the calls that were made to RevokeDBSecurityGroupIngressRequest.
// Check the length with:
//     len(mockedrdsClient.RevokeDBSecurityGroupIngressRequestCalls())
func (mock *rdsClientMock) RevokeDBSecurityGroupIngressRequestCalls() []struct {
	RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
} {
	var calls []struct {
		RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
	}
	mock.lockRevokeDBSecurityGroupIngressRequest.RLock()
	calls = mock.calls.RevokeDBSecurityGroupIngressRequest
	mock.lockRevokeDBSecurityGroupIngressRequest.RUnlock()
	return calls
}

// RevokeDBSecurityGroupIngressWithContext calls RevokeDBSecurityGroupIngressWithContextFunc.
func (mock *rdsClientMock) RevokeDBSecurityGroupIngressWithContext(contextMoqParam context.Context, revokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput, options ...request.Option) (*rds.RevokeDBSecurityGroupIngressOutput, error) {
	if mock.RevokeDBSecurityGroupIngressWithContextFunc == nil {
		panic("rdsClientMock.RevokeDBSecurityGroupIngressWithContextFunc: method is nil but rdsClient.RevokeDBSecurityGroupIngressWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		RevokeDBSecurityGroupIngressInput: revokeDBSecurityGroupIngressInput,
		Options:                           options,
	}
	mock.lockRevokeDBSecurityGroupIngressWithContext.Lock()
	mock.calls.RevokeDBSecurityGroupIngressWithContext = append(mock.calls.RevokeDBSecurityGroupIngressWithContext, callInfo)
	mock.lockRevokeDBSecurityGroupIngressWithContext.Unlock()
	return mock.RevokeDBSecurityGroupIngressWithContextFunc(contextMoqParam, revokeDBSecurityGroupIngressInput, options...)
}

// RevokeDBSecurityGroupIngressWithContextCalls gets all the calls that were made to RevokeDBSecurityGroupIngressWithContext.
// Check the length with:
//     len(mockedrdsClient.RevokeDBSecurityGroupIngressWithContextCalls())
func (mock *rdsClientMock) RevokeDBSecurityGroupIngressWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		RevokeDBSecurityGroupIngressInput *rds.RevokeDBSecurityGroupIngressInput
		Options                           []request.Option
	}
	mock.lockRevokeDBSecurityGroupIngressWithContext.RLock()
	calls = mock.calls.RevokeDBSecurityGroupIngressWithContext
	mock.lockRevokeDBSecurityGroupIngressWithContext.RUnlock()
	return calls
}

// StartActivityStream calls StartActivityStreamFunc.
func (mock *rdsClientMock) StartActivityStream(startActivityStreamInput *rds.StartActivityStreamInput) (*rds.StartActivityStreamOutput, error) {
	if mock.StartActivityStreamFunc == nil {
		panic("rdsClientMock.StartActivityStreamFunc: method is nil but rdsClient.StartActivityStream was just called")
	}
	callInfo := struct {
		StartActivityStreamInput *rds.StartActivityStreamInput
	}{
		StartActivityStreamInput: startActivityStreamInput,
	}
	mock.lockStartActivityStream.Lock()
	mock.calls.StartActivityStream = append(mock.calls.StartActivityStream, callInfo)
	mock.lockStartActivityStream.Unlock()
	return mock.StartActivityStreamFunc(startActivityStreamInput)
}

// StartActivityStreamCalls gets all the calls that were made to StartActivityStream.
// Check the length with:
//     len(mockedrdsClient.StartActivityStreamCalls())
func (mock *rdsClientMock) StartActivityStreamCalls() []struct {
	StartActivityStreamInput *rds.StartActivityStreamInput
} {
	var calls []struct {
		StartActivityStreamInput *rds.StartActivityStreamInput
	}
	mock.lockStartActivityStream.RLock()
	calls = mock.calls.StartActivityStream
	mock.lockStartActivityStream.RUnlock()
	return calls
}

// StartActivityStreamRequest calls StartActivityStreamRequestFunc.
func (mock *rdsClientMock) StartActivityStreamRequest(startActivityStreamInput *rds.StartActivityStreamInput) (*request.Request, *rds.StartActivityStreamOutput) {
	if mock.StartActivityStreamRequestFunc == nil {
		panic("rdsClientMock.StartActivityStreamRequestFunc: method is nil but rdsClient.StartActivityStreamRequest was just called")
	}
	callInfo := struct {
		StartActivityStreamInput *rds.StartActivityStreamInput
	}{
		StartActivityStreamInput: startActivityStreamInput,
	}
	mock.lockStartActivityStreamRequest.Lock()
	mock.calls.StartActivityStreamRequest = append(mock.calls.StartActivityStreamRequest, callInfo)
	mock.lockStartActivityStreamRequest.Unlock()
	return mock.StartActivityStreamRequestFunc(startActivityStreamInput)
}

// StartActivityStreamRequestCalls gets all the calls that were made to StartActivityStreamRequest.
// Check the length with:
//     len(mockedrdsClient.StartActivityStreamRequestCalls())
func (mock *rdsClientMock) StartActivityStreamRequestCalls() []struct {
	StartActivityStreamInput *rds.StartActivityStreamInput
} {
	var calls []struct {
		StartActivityStreamInput *rds.StartActivityStreamInput
	}
	mock.lockStartActivityStreamRequest.RLock()
	calls = mock.calls.StartActivityStreamRequest
	mock.lockStartActivityStreamRequest.RUnlock()
	return calls
}

// StartActivityStreamWithContext calls StartActivityStreamWithContextFunc.
func (mock *rdsClientMock) StartActivityStreamWithContext(contextMoqParam context.Context, startActivityStreamInput *rds.StartActivityStreamInput, options ...request.Option) (*rds.StartActivityStreamOutput, error) {
	if mock.StartActivityStreamWithContextFunc == nil {
		panic("rdsClientMock.StartActivityStreamWithContextFunc: method is nil but rdsClient.StartActivityStreamWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		StartActivityStreamInput *rds.StartActivityStreamInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		StartActivityStreamInput: startActivityStreamInput,
		Options:                  options,
	}
	mock.lockStartActivityStreamWithContext.Lock()
	mock.calls.StartActivityStreamWithContext = append(mock.calls.StartActivityStreamWithContext, callInfo)
	mock.lockStartActivityStreamWithContext.Unlock()
	return mock.StartActivityStreamWithContextFunc(contextMoqParam, startActivityStreamInput, options...)
}

// StartActivityStreamWithContextCalls gets all the calls that were made to StartActivityStreamWithContext.
// Check the length with:
//     len(mockedrdsClient.StartActivityStreamWithContextCalls())
func (mock *rdsClientMock) StartActivityStreamWithContextCalls() []struct {
	ContextMoqParam          context.Context
	StartActivityStreamInput *rds.StartActivityStreamInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		StartActivityStreamInput *rds.StartActivityStreamInput
		Options                  []request.Option
	}
	mock.lockStartActivityStreamWithContext.RLock()
	calls = mock.calls.StartActivityStreamWithContext
	mock.lockStartActivityStreamWithContext.RUnlock()
	return calls
}

// StartDBCluster calls StartDBClusterFunc.
func (mock *rdsClientMock) StartDBCluster(startDBClusterInput *rds.StartDBClusterInput) (*rds.StartDBClusterOutput, error) {
	if mock.StartDBClusterFunc == nil {
		panic("rdsClientMock.StartDBClusterFunc: method is nil but rdsClient.StartDBCluster was just called")
	}
	callInfo := struct {
		StartDBClusterInput *rds.StartDBClusterInput
	}{
		StartDBClusterInput: startDBClusterInput,
	}
	mock.lockStartDBCluster.Lock()
	mock.calls.StartDBCluster = append(mock.calls.StartDBCluster, callInfo)
	mock.lockStartDBCluster.Unlock()
	return mock.StartDBClusterFunc(startDBClusterInput)
}

// StartDBClusterCalls gets all the calls that were made to StartDBCluster.
// Check the length with:
//     len(mockedrdsClient.StartDBClusterCalls())
func (mock *rdsClientMock) StartDBClusterCalls() []struct {
	StartDBClusterInput *rds.StartDBClusterInput
} {
	var calls []struct {
		StartDBClusterInput *rds.StartDBClusterInput
	}
	mock.lockStartDBCluster.RLock()
	calls = mock.calls.StartDBCluster
	mock.lockStartDBCluster.RUnlock()
	return calls
}

// StartDBClusterRequest calls StartDBClusterRequestFunc.
func (mock *rdsClientMock) StartDBClusterRequest(startDBClusterInput *rds.StartDBClusterInput) (*request.Request, *rds.StartDBClusterOutput) {
	if mock.StartDBClusterRequestFunc == nil {
		panic("rdsClientMock.StartDBClusterRequestFunc: method is nil but rdsClient.StartDBClusterRequest was just called")
	}
	callInfo := struct {
		StartDBClusterInput *rds.StartDBClusterInput
	}{
		StartDBClusterInput: startDBClusterInput,
	}
	mock.lockStartDBClusterRequest.Lock()
	mock.calls.StartDBClusterRequest = append(mock.calls.StartDBClusterRequest, callInfo)
	mock.lockStartDBClusterRequest.Unlock()
	return mock.StartDBClusterRequestFunc(startDBClusterInput)
}

// StartDBClusterRequestCalls gets all the calls that were made to StartDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.StartDBClusterRequestCalls())
func (mock *rdsClientMock) StartDBClusterRequestCalls() []struct {
	StartDBClusterInput *rds.StartDBClusterInput
} {
	var calls []struct {
		StartDBClusterInput *rds.StartDBClusterInput
	}
	mock.lockStartDBClusterRequest.RLock()
	calls = mock.calls.StartDBClusterRequest
	mock.lockStartDBClusterRequest.RUnlock()
	return calls
}

// StartDBClusterWithContext calls StartDBClusterWithContextFunc.
func (mock *rdsClientMock) StartDBClusterWithContext(contextMoqParam context.Context, startDBClusterInput *rds.StartDBClusterInput, options ...request.Option) (*rds.StartDBClusterOutput, error) {
	if mock.StartDBClusterWithContextFunc == nil {
		panic("rdsClientMock.StartDBClusterWithContextFunc: method is nil but rdsClient.StartDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		StartDBClusterInput *rds.StartDBClusterInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		StartDBClusterInput: startDBClusterInput,
		Options:             options,
	}
	mock.lockStartDBClusterWithContext.Lock()
	mock.calls.StartDBClusterWithContext = append(mock.calls.StartDBClusterWithContext, callInfo)
	mock.lockStartDBClusterWithContext.Unlock()
	return mock.StartDBClusterWithContextFunc(contextMoqParam, startDBClusterInput, options...)
}

// StartDBClusterWithContextCalls gets all the calls that were made to StartDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.StartDBClusterWithContextCalls())
func (mock *rdsClientMock) StartDBClusterWithContextCalls() []struct {
	ContextMoqParam     context.Context
	StartDBClusterInput *rds.StartDBClusterInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		StartDBClusterInput *rds.StartDBClusterInput
		Options             []request.Option
	}
	mock.lockStartDBClusterWithContext.RLock()
	calls = mock.calls.StartDBClusterWithContext
	mock.lockStartDBClusterWithContext.RUnlock()
	return calls
}

// StartDBInstance calls StartDBInstanceFunc.
func (mock *rdsClientMock) StartDBInstance(startDBInstanceInput *rds.StartDBInstanceInput) (*rds.StartDBInstanceOutput, error) {
	if mock.StartDBInstanceFunc == nil {
		panic("rdsClientMock.StartDBInstanceFunc: method is nil but rdsClient.StartDBInstance was just called")
	}
	callInfo := struct {
		StartDBInstanceInput *rds.StartDBInstanceInput
	}{
		StartDBInstanceInput: startDBInstanceInput,
	}
	mock.lockStartDBInstance.Lock()
	mock.calls.StartDBInstance = append(mock.calls.StartDBInstance, callInfo)
	mock.lockStartDBInstance.Unlock()
	return mock.StartDBInstanceFunc(startDBInstanceInput)
}

// StartDBInstanceCalls gets all the calls that were made to StartDBInstance.
// Check the length with:
//     len(mockedrdsClient.StartDBInstanceCalls())
func (mock *rdsClientMock) StartDBInstanceCalls() []struct {
	StartDBInstanceInput *rds.StartDBInstanceInput
} {
	var calls []struct {
		StartDBInstanceInput *rds.StartDBInstanceInput
	}
	mock.lockStartDBInstance.RLock()
	calls = mock.calls.StartDBInstance
	mock.lockStartDBInstance.RUnlock()
	return calls
}

// StartDBInstanceAutomatedBackupsReplication calls StartDBInstanceAutomatedBackupsReplicationFunc.
func (mock *rdsClientMock) StartDBInstanceAutomatedBackupsReplication(startDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput) (*rds.StartDBInstanceAutomatedBackupsReplicationOutput, error) {
	if mock.StartDBInstanceAutomatedBackupsReplicationFunc == nil {
		panic("rdsClientMock.StartDBInstanceAutomatedBackupsReplicationFunc: method is nil but rdsClient.StartDBInstanceAutomatedBackupsReplication was just called")
	}
	callInfo := struct {
		StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
	}{
		StartDBInstanceAutomatedBackupsReplicationInput: startDBInstanceAutomatedBackupsReplicationInput,
	}
	mock.lockStartDBInstanceAutomatedBackupsReplication.Lock()
	mock.calls.StartDBInstanceAutomatedBackupsReplication = append(mock.calls.StartDBInstanceAutomatedBackupsReplication, callInfo)
	mock.lockStartDBInstanceAutomatedBackupsReplication.Unlock()
	return mock.StartDBInstanceAutomatedBackupsReplicationFunc(startDBInstanceAutomatedBackupsReplicationInput)
}

// StartDBInstanceAutomatedBackupsReplicationCalls gets all the calls that were made to StartDBInstanceAutomatedBackupsReplication.
// Check the length with:
//     len(mockedrdsClient.StartDBInstanceAutomatedBackupsReplicationCalls())
func (mock *rdsClientMock) StartDBInstanceAutomatedBackupsReplicationCalls() []struct {
	StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
} {
	var calls []struct {
		StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
	}
	mock.lockStartDBInstanceAutomatedBackupsReplication.RLock()
	calls = mock.calls.StartDBInstanceAutomatedBackupsReplication
	mock.lockStartDBInstanceAutomatedBackupsReplication.RUnlock()
	return calls
}

// StartDBInstanceAutomatedBackupsReplicationRequest calls StartDBInstanceAutomatedBackupsReplicationRequestFunc.
func (mock *rdsClientMock) StartDBInstanceAutomatedBackupsReplicationRequest(startDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput) (*request.Request, *rds.StartDBInstanceAutomatedBackupsReplicationOutput) {
	if mock.StartDBInstanceAutomatedBackupsReplicationRequestFunc == nil {
		panic("rdsClientMock.StartDBInstanceAutomatedBackupsReplicationRequestFunc: method is nil but rdsClient.StartDBInstanceAutomatedBackupsReplicationRequest was just called")
	}
	callInfo := struct {
		StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
	}{
		StartDBInstanceAutomatedBackupsReplicationInput: startDBInstanceAutomatedBackupsReplicationInput,
	}
	mock.lockStartDBInstanceAutomatedBackupsReplicationRequest.Lock()
	mock.calls.StartDBInstanceAutomatedBackupsReplicationRequest = append(mock.calls.StartDBInstanceAutomatedBackupsReplicationRequest, callInfo)
	mock.lockStartDBInstanceAutomatedBackupsReplicationRequest.Unlock()
	return mock.StartDBInstanceAutomatedBackupsReplicationRequestFunc(startDBInstanceAutomatedBackupsReplicationInput)
}

// StartDBInstanceAutomatedBackupsReplicationRequestCalls gets all the calls that were made to StartDBInstanceAutomatedBackupsReplicationRequest.
// Check the length with:
//     len(mockedrdsClient.StartDBInstanceAutomatedBackupsReplicationRequestCalls())
func (mock *rdsClientMock) StartDBInstanceAutomatedBackupsReplicationRequestCalls() []struct {
	StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
} {
	var calls []struct {
		StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
	}
	mock.lockStartDBInstanceAutomatedBackupsReplicationRequest.RLock()
	calls = mock.calls.StartDBInstanceAutomatedBackupsReplicationRequest
	mock.lockStartDBInstanceAutomatedBackupsReplicationRequest.RUnlock()
	return calls
}

// StartDBInstanceAutomatedBackupsReplicationWithContext calls StartDBInstanceAutomatedBackupsReplicationWithContextFunc.
func (mock *rdsClientMock) StartDBInstanceAutomatedBackupsReplicationWithContext(contextMoqParam context.Context, startDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput, options ...request.Option) (*rds.StartDBInstanceAutomatedBackupsReplicationOutput, error) {
	if mock.StartDBInstanceAutomatedBackupsReplicationWithContextFunc == nil {
		panic("rdsClientMock.StartDBInstanceAutomatedBackupsReplicationWithContextFunc: method is nil but rdsClient.StartDBInstanceAutomatedBackupsReplicationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                                 context.Context
		StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
		Options                                         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		StartDBInstanceAutomatedBackupsReplicationInput: startDBInstanceAutomatedBackupsReplicationInput,
		Options: options,
	}
	mock.lockStartDBInstanceAutomatedBackupsReplicationWithContext.Lock()
	mock.calls.StartDBInstanceAutomatedBackupsReplicationWithContext = append(mock.calls.StartDBInstanceAutomatedBackupsReplicationWithContext, callInfo)
	mock.lockStartDBInstanceAutomatedBackupsReplicationWithContext.Unlock()
	return mock.StartDBInstanceAutomatedBackupsReplicationWithContextFunc(contextMoqParam, startDBInstanceAutomatedBackupsReplicationInput, options...)
}

// StartDBInstanceAutomatedBackupsReplicationWithContextCalls gets all the calls that were made to StartDBInstanceAutomatedBackupsReplicationWithContext.
// Check the length with:
//     len(mockedrdsClient.StartDBInstanceAutomatedBackupsReplicationWithContextCalls())
func (mock *rdsClientMock) StartDBInstanceAutomatedBackupsReplicationWithContextCalls() []struct {
	ContextMoqParam                                 context.Context
	StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
	Options                                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                                 context.Context
		StartDBInstanceAutomatedBackupsReplicationInput *rds.StartDBInstanceAutomatedBackupsReplicationInput
		Options                                         []request.Option
	}
	mock.lockStartDBInstanceAutomatedBackupsReplicationWithContext.RLock()
	calls = mock.calls.StartDBInstanceAutomatedBackupsReplicationWithContext
	mock.lockStartDBInstanceAutomatedBackupsReplicationWithContext.RUnlock()
	return calls
}

// StartDBInstanceRequest calls StartDBInstanceRequestFunc.
func (mock *rdsClientMock) StartDBInstanceRequest(startDBInstanceInput *rds.StartDBInstanceInput) (*request.Request, *rds.StartDBInstanceOutput) {
	if mock.StartDBInstanceRequestFunc == nil {
		panic("rdsClientMock.StartDBInstanceRequestFunc: method is nil but rdsClient.StartDBInstanceRequest was just called")
	}
	callInfo := struct {
		StartDBInstanceInput *rds.StartDBInstanceInput
	}{
		StartDBInstanceInput: startDBInstanceInput,
	}
	mock.lockStartDBInstanceRequest.Lock()
	mock.calls.StartDBInstanceRequest = append(mock.calls.StartDBInstanceRequest, callInfo)
	mock.lockStartDBInstanceRequest.Unlock()
	return mock.StartDBInstanceRequestFunc(startDBInstanceInput)
}

// StartDBInstanceRequestCalls gets all the calls that were made to StartDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.StartDBInstanceRequestCalls())
func (mock *rdsClientMock) StartDBInstanceRequestCalls() []struct {
	StartDBInstanceInput *rds.StartDBInstanceInput
} {
	var calls []struct {
		StartDBInstanceInput *rds.StartDBInstanceInput
	}
	mock.lockStartDBInstanceRequest.RLock()
	calls = mock.calls.StartDBInstanceRequest
	mock.lockStartDBInstanceRequest.RUnlock()
	return calls
}

// StartDBInstanceWithContext calls StartDBInstanceWithContextFunc.
func (mock *rdsClientMock) StartDBInstanceWithContext(contextMoqParam context.Context, startDBInstanceInput *rds.StartDBInstanceInput, options ...request.Option) (*rds.StartDBInstanceOutput, error) {
	if mock.StartDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.StartDBInstanceWithContextFunc: method is nil but rdsClient.StartDBInstanceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		StartDBInstanceInput *rds.StartDBInstanceInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		StartDBInstanceInput: startDBInstanceInput,
		Options:              options,
	}
	mock.lockStartDBInstanceWithContext.Lock()
	mock.calls.StartDBInstanceWithContext = append(mock.calls.StartDBInstanceWithContext, callInfo)
	mock.lockStartDBInstanceWithContext.Unlock()
	return mock.StartDBInstanceWithContextFunc(contextMoqParam, startDBInstanceInput, options...)
}

// StartDBInstanceWithContextCalls gets all the calls that were made to StartDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.StartDBInstanceWithContextCalls())
func (mock *rdsClientMock) StartDBInstanceWithContextCalls() []struct {
	ContextMoqParam      context.Context
	StartDBInstanceInput *rds.StartDBInstanceInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		StartDBInstanceInput *rds.StartDBInstanceInput
		Options              []request.Option
	}
	mock.lockStartDBInstanceWithContext.RLock()
	calls = mock.calls.StartDBInstanceWithContext
	mock.lockStartDBInstanceWithContext.RUnlock()
	return calls
}

// StartExportTask calls StartExportTaskFunc.
func (mock *rdsClientMock) StartExportTask(startExportTaskInput *rds.StartExportTaskInput) (*rds.StartExportTaskOutput, error) {
	if mock.StartExportTaskFunc == nil {
		panic("rdsClientMock.StartExportTaskFunc: method is nil but rdsClient.StartExportTask was just called")
	}
	callInfo := struct {
		StartExportTaskInput *rds.StartExportTaskInput
	}{
		StartExportTaskInput: startExportTaskInput,
	}
	mock.lockStartExportTask.Lock()
	mock.calls.StartExportTask = append(mock.calls.StartExportTask, callInfo)
	mock.lockStartExportTask.Unlock()
	return mock.StartExportTaskFunc(startExportTaskInput)
}

// StartExportTaskCalls gets all the calls that were made to StartExportTask.
// Check the length with:
//     len(mockedrdsClient.StartExportTaskCalls())
func (mock *rdsClientMock) StartExportTaskCalls() []struct {
	StartExportTaskInput *rds.StartExportTaskInput
} {
	var calls []struct {
		StartExportTaskInput *rds.StartExportTaskInput
	}
	mock.lockStartExportTask.RLock()
	calls = mock.calls.StartExportTask
	mock.lockStartExportTask.RUnlock()
	return calls
}

// StartExportTaskRequest calls StartExportTaskRequestFunc.
func (mock *rdsClientMock) StartExportTaskRequest(startExportTaskInput *rds.StartExportTaskInput) (*request.Request, *rds.StartExportTaskOutput) {
	if mock.StartExportTaskRequestFunc == nil {
		panic("rdsClientMock.StartExportTaskRequestFunc: method is nil but rdsClient.StartExportTaskRequest was just called")
	}
	callInfo := struct {
		StartExportTaskInput *rds.StartExportTaskInput
	}{
		StartExportTaskInput: startExportTaskInput,
	}
	mock.lockStartExportTaskRequest.Lock()
	mock.calls.StartExportTaskRequest = append(mock.calls.StartExportTaskRequest, callInfo)
	mock.lockStartExportTaskRequest.Unlock()
	return mock.StartExportTaskRequestFunc(startExportTaskInput)
}

// StartExportTaskRequestCalls gets all the calls that were made to StartExportTaskRequest.
// Check the length with:
//     len(mockedrdsClient.StartExportTaskRequestCalls())
func (mock *rdsClientMock) StartExportTaskRequestCalls() []struct {
	StartExportTaskInput *rds.StartExportTaskInput
} {
	var calls []struct {
		StartExportTaskInput *rds.StartExportTaskInput
	}
	mock.lockStartExportTaskRequest.RLock()
	calls = mock.calls.StartExportTaskRequest
	mock.lockStartExportTaskRequest.RUnlock()
	return calls
}

// StartExportTaskWithContext calls StartExportTaskWithContextFunc.
func (mock *rdsClientMock) StartExportTaskWithContext(contextMoqParam context.Context, startExportTaskInput *rds.StartExportTaskInput, options ...request.Option) (*rds.StartExportTaskOutput, error) {
	if mock.StartExportTaskWithContextFunc == nil {
		panic("rdsClientMock.StartExportTaskWithContextFunc: method is nil but rdsClient.StartExportTaskWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		StartExportTaskInput *rds.StartExportTaskInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		StartExportTaskInput: startExportTaskInput,
		Options:              options,
	}
	mock.lockStartExportTaskWithContext.Lock()
	mock.calls.StartExportTaskWithContext = append(mock.calls.StartExportTaskWithContext, callInfo)
	mock.lockStartExportTaskWithContext.Unlock()
	return mock.StartExportTaskWithContextFunc(contextMoqParam, startExportTaskInput, options...)
}

// StartExportTaskWithContextCalls gets all the calls that were made to StartExportTaskWithContext.
// Check the length with:
//     len(mockedrdsClient.StartExportTaskWithContextCalls())
func (mock *rdsClientMock) StartExportTaskWithContextCalls() []struct {
	ContextMoqParam      context.Context
	StartExportTaskInput *rds.StartExportTaskInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		StartExportTaskInput *rds.StartExportTaskInput
		Options              []request.Option
	}
	mock.lockStartExportTaskWithContext.RLock()
	calls = mock.calls.StartExportTaskWithContext
	mock.lockStartExportTaskWithContext.RUnlock()
	return calls
}

// StopActivityStream calls StopActivityStreamFunc.
func (mock *rdsClientMock) StopActivityStream(stopActivityStreamInput *rds.StopActivityStreamInput) (*rds.StopActivityStreamOutput, error) {
	if mock.StopActivityStreamFunc == nil {
		panic("rdsClientMock.StopActivityStreamFunc: method is nil but rdsClient.StopActivityStream was just called")
	}
	callInfo := struct {
		StopActivityStreamInput *rds.StopActivityStreamInput
	}{
		StopActivityStreamInput: stopActivityStreamInput,
	}
	mock.lockStopActivityStream.Lock()
	mock.calls.StopActivityStream = append(mock.calls.StopActivityStream, callInfo)
	mock.lockStopActivityStream.Unlock()
	return mock.StopActivityStreamFunc(stopActivityStreamInput)
}

// StopActivityStreamCalls gets all the calls that were made to StopActivityStream.
// Check the length with:
//     len(mockedrdsClient.StopActivityStreamCalls())
func (mock *rdsClientMock) StopActivityStreamCalls() []struct {
	StopActivityStreamInput *rds.StopActivityStreamInput
} {
	var calls []struct {
		StopActivityStreamInput *rds.StopActivityStreamInput
	}
	mock.lockStopActivityStream.RLock()
	calls = mock.calls.StopActivityStream
	mock.lockStopActivityStream.RUnlock()
	return calls
}

// StopActivityStreamRequest calls StopActivityStreamRequestFunc.
func (mock *rdsClientMock) StopActivityStreamRequest(stopActivityStreamInput *rds.StopActivityStreamInput) (*request.Request, *rds.StopActivityStreamOutput) {
	if mock.StopActivityStreamRequestFunc == nil {
		panic("rdsClientMock.StopActivityStreamRequestFunc: method is nil but rdsClient.StopActivityStreamRequest was just called")
	}
	callInfo := struct {
		StopActivityStreamInput *rds.StopActivityStreamInput
	}{
		StopActivityStreamInput: stopActivityStreamInput,
	}
	mock.lockStopActivityStreamRequest.Lock()
	mock.calls.StopActivityStreamRequest = append(mock.calls.StopActivityStreamRequest, callInfo)
	mock.lockStopActivityStreamRequest.Unlock()
	return mock.StopActivityStreamRequestFunc(stopActivityStreamInput)
}

// StopActivityStreamRequestCalls gets all the calls that were made to StopActivityStreamRequest.
// Check the length with:
//     len(mockedrdsClient.StopActivityStreamRequestCalls())
func (mock *rdsClientMock) StopActivityStreamRequestCalls() []struct {
	StopActivityStreamInput *rds.StopActivityStreamInput
} {
	var calls []struct {
		StopActivityStreamInput *rds.StopActivityStreamInput
	}
	mock.lockStopActivityStreamRequest.RLock()
	calls = mock.calls.StopActivityStreamRequest
	mock.lockStopActivityStreamRequest.RUnlock()
	return calls
}

// StopActivityStreamWithContext calls StopActivityStreamWithContextFunc.
func (mock *rdsClientMock) StopActivityStreamWithContext(contextMoqParam context.Context, stopActivityStreamInput *rds.StopActivityStreamInput, options ...request.Option) (*rds.StopActivityStreamOutput, error) {
	if mock.StopActivityStreamWithContextFunc == nil {
		panic("rdsClientMock.StopActivityStreamWithContextFunc: method is nil but rdsClient.StopActivityStreamWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		StopActivityStreamInput *rds.StopActivityStreamInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		StopActivityStreamInput: stopActivityStreamInput,
		Options:                 options,
	}
	mock.lockStopActivityStreamWithContext.Lock()
	mock.calls.StopActivityStreamWithContext = append(mock.calls.StopActivityStreamWithContext, callInfo)
	mock.lockStopActivityStreamWithContext.Unlock()
	return mock.StopActivityStreamWithContextFunc(contextMoqParam, stopActivityStreamInput, options...)
}

// StopActivityStreamWithContextCalls gets all the calls that were made to StopActivityStreamWithContext.
// Check the length with:
//     len(mockedrdsClient.StopActivityStreamWithContextCalls())
func (mock *rdsClientMock) StopActivityStreamWithContextCalls() []struct {
	ContextMoqParam         context.Context
	StopActivityStreamInput *rds.StopActivityStreamInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		StopActivityStreamInput *rds.StopActivityStreamInput
		Options                 []request.Option
	}
	mock.lockStopActivityStreamWithContext.RLock()
	calls = mock.calls.StopActivityStreamWithContext
	mock.lockStopActivityStreamWithContext.RUnlock()
	return calls
}

// StopDBCluster calls StopDBClusterFunc.
func (mock *rdsClientMock) StopDBCluster(stopDBClusterInput *rds.StopDBClusterInput) (*rds.StopDBClusterOutput, error) {
	if mock.StopDBClusterFunc == nil {
		panic("rdsClientMock.StopDBClusterFunc: method is nil but rdsClient.StopDBCluster was just called")
	}
	callInfo := struct {
		StopDBClusterInput *rds.StopDBClusterInput
	}{
		StopDBClusterInput: stopDBClusterInput,
	}
	mock.lockStopDBCluster.Lock()
	mock.calls.StopDBCluster = append(mock.calls.StopDBCluster, callInfo)
	mock.lockStopDBCluster.Unlock()
	return mock.StopDBClusterFunc(stopDBClusterInput)
}

// StopDBClusterCalls gets all the calls that were made to StopDBCluster.
// Check the length with:
//     len(mockedrdsClient.StopDBClusterCalls())
func (mock *rdsClientMock) StopDBClusterCalls() []struct {
	StopDBClusterInput *rds.StopDBClusterInput
} {
	var calls []struct {
		StopDBClusterInput *rds.StopDBClusterInput
	}
	mock.lockStopDBCluster.RLock()
	calls = mock.calls.StopDBCluster
	mock.lockStopDBCluster.RUnlock()
	return calls
}

// StopDBClusterRequest calls StopDBClusterRequestFunc.
func (mock *rdsClientMock) StopDBClusterRequest(stopDBClusterInput *rds.StopDBClusterInput) (*request.Request, *rds.StopDBClusterOutput) {
	if mock.StopDBClusterRequestFunc == nil {
		panic("rdsClientMock.StopDBClusterRequestFunc: method is nil but rdsClient.StopDBClusterRequest was just called")
	}
	callInfo := struct {
		StopDBClusterInput *rds.StopDBClusterInput
	}{
		StopDBClusterInput: stopDBClusterInput,
	}
	mock.lockStopDBClusterRequest.Lock()
	mock.calls.StopDBClusterRequest = append(mock.calls.StopDBClusterRequest, callInfo)
	mock.lockStopDBClusterRequest.Unlock()
	return mock.StopDBClusterRequestFunc(stopDBClusterInput)
}

// StopDBClusterRequestCalls gets all the calls that were made to StopDBClusterRequest.
// Check the length with:
//     len(mockedrdsClient.StopDBClusterRequestCalls())
func (mock *rdsClientMock) StopDBClusterRequestCalls() []struct {
	StopDBClusterInput *rds.StopDBClusterInput
} {
	var calls []struct {
		StopDBClusterInput *rds.StopDBClusterInput
	}
	mock.lockStopDBClusterRequest.RLock()
	calls = mock.calls.StopDBClusterRequest
	mock.lockStopDBClusterRequest.RUnlock()
	return calls
}

// StopDBClusterWithContext calls StopDBClusterWithContextFunc.
func (mock *rdsClientMock) StopDBClusterWithContext(contextMoqParam context.Context, stopDBClusterInput *rds.StopDBClusterInput, options ...request.Option) (*rds.StopDBClusterOutput, error) {
	if mock.StopDBClusterWithContextFunc == nil {
		panic("rdsClientMock.StopDBClusterWithContextFunc: method is nil but rdsClient.StopDBClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		StopDBClusterInput *rds.StopDBClusterInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		StopDBClusterInput: stopDBClusterInput,
		Options:            options,
	}
	mock.lockStopDBClusterWithContext.Lock()
	mock.calls.StopDBClusterWithContext = append(mock.calls.StopDBClusterWithContext, callInfo)
	mock.lockStopDBClusterWithContext.Unlock()
	return mock.StopDBClusterWithContextFunc(contextMoqParam, stopDBClusterInput, options...)
}

// StopDBClusterWithContextCalls gets all the calls that were made to StopDBClusterWithContext.
// Check the length with:
//     len(mockedrdsClient.StopDBClusterWithContextCalls())
func (mock *rdsClientMock) StopDBClusterWithContextCalls() []struct {
	ContextMoqParam    context.Context
	StopDBClusterInput *rds.StopDBClusterInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		StopDBClusterInput *rds.StopDBClusterInput
		Options            []request.Option
	}
	mock.lockStopDBClusterWithContext.RLock()
	calls = mock.calls.StopDBClusterWithContext
	mock.lockStopDBClusterWithContext.RUnlock()
	return calls
}

// StopDBInstance calls StopDBInstanceFunc.
func (mock *rdsClientMock) StopDBInstance(stopDBInstanceInput *rds.StopDBInstanceInput) (*rds.StopDBInstanceOutput, error) {
	if mock.StopDBInstanceFunc == nil {
		panic("rdsClientMock.StopDBInstanceFunc: method is nil but rdsClient.StopDBInstance was just called")
	}
	callInfo := struct {
		StopDBInstanceInput *rds.StopDBInstanceInput
	}{
		StopDBInstanceInput: stopDBInstanceInput,
	}
	mock.lockStopDBInstance.Lock()
	mock.calls.StopDBInstance = append(mock.calls.StopDBInstance, callInfo)
	mock.lockStopDBInstance.Unlock()
	return mock.StopDBInstanceFunc(stopDBInstanceInput)
}

// StopDBInstanceCalls gets all the calls that were made to StopDBInstance.
// Check the length with:
//     len(mockedrdsClient.StopDBInstanceCalls())
func (mock *rdsClientMock) StopDBInstanceCalls() []struct {
	StopDBInstanceInput *rds.StopDBInstanceInput
} {
	var calls []struct {
		StopDBInstanceInput *rds.StopDBInstanceInput
	}
	mock.lockStopDBInstance.RLock()
	calls = mock.calls.StopDBInstance
	mock.lockStopDBInstance.RUnlock()
	return calls
}

// StopDBInstanceAutomatedBackupsReplication calls StopDBInstanceAutomatedBackupsReplicationFunc.
func (mock *rdsClientMock) StopDBInstanceAutomatedBackupsReplication(stopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput) (*rds.StopDBInstanceAutomatedBackupsReplicationOutput, error) {
	if mock.StopDBInstanceAutomatedBackupsReplicationFunc == nil {
		panic("rdsClientMock.StopDBInstanceAutomatedBackupsReplicationFunc: method is nil but rdsClient.StopDBInstanceAutomatedBackupsReplication was just called")
	}
	callInfo := struct {
		StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
	}{
		StopDBInstanceAutomatedBackupsReplicationInput: stopDBInstanceAutomatedBackupsReplicationInput,
	}
	mock.lockStopDBInstanceAutomatedBackupsReplication.Lock()
	mock.calls.StopDBInstanceAutomatedBackupsReplication = append(mock.calls.StopDBInstanceAutomatedBackupsReplication, callInfo)
	mock.lockStopDBInstanceAutomatedBackupsReplication.Unlock()
	return mock.StopDBInstanceAutomatedBackupsReplicationFunc(stopDBInstanceAutomatedBackupsReplicationInput)
}

// StopDBInstanceAutomatedBackupsReplicationCalls gets all the calls that were made to StopDBInstanceAutomatedBackupsReplication.
// Check the length with:
//     len(mockedrdsClient.StopDBInstanceAutomatedBackupsReplicationCalls())
func (mock *rdsClientMock) StopDBInstanceAutomatedBackupsReplicationCalls() []struct {
	StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
} {
	var calls []struct {
		StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
	}
	mock.lockStopDBInstanceAutomatedBackupsReplication.RLock()
	calls = mock.calls.StopDBInstanceAutomatedBackupsReplication
	mock.lockStopDBInstanceAutomatedBackupsReplication.RUnlock()
	return calls
}

// StopDBInstanceAutomatedBackupsReplicationRequest calls StopDBInstanceAutomatedBackupsReplicationRequestFunc.
func (mock *rdsClientMock) StopDBInstanceAutomatedBackupsReplicationRequest(stopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput) (*request.Request, *rds.StopDBInstanceAutomatedBackupsReplicationOutput) {
	if mock.StopDBInstanceAutomatedBackupsReplicationRequestFunc == nil {
		panic("rdsClientMock.StopDBInstanceAutomatedBackupsReplicationRequestFunc: method is nil but rdsClient.StopDBInstanceAutomatedBackupsReplicationRequest was just called")
	}
	callInfo := struct {
		StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
	}{
		StopDBInstanceAutomatedBackupsReplicationInput: stopDBInstanceAutomatedBackupsReplicationInput,
	}
	mock.lockStopDBInstanceAutomatedBackupsReplicationRequest.Lock()
	mock.calls.StopDBInstanceAutomatedBackupsReplicationRequest = append(mock.calls.StopDBInstanceAutomatedBackupsReplicationRequest, callInfo)
	mock.lockStopDBInstanceAutomatedBackupsReplicationRequest.Unlock()
	return mock.StopDBInstanceAutomatedBackupsReplicationRequestFunc(stopDBInstanceAutomatedBackupsReplicationInput)
}

// StopDBInstanceAutomatedBackupsReplicationRequestCalls gets all the calls that were made to StopDBInstanceAutomatedBackupsReplicationRequest.
// Check the length with:
//     len(mockedrdsClient.StopDBInstanceAutomatedBackupsReplicationRequestCalls())
func (mock *rdsClientMock) StopDBInstanceAutomatedBackupsReplicationRequestCalls() []struct {
	StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
} {
	var calls []struct {
		StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
	}
	mock.lockStopDBInstanceAutomatedBackupsReplicationRequest.RLock()
	calls = mock.calls.StopDBInstanceAutomatedBackupsReplicationRequest
	mock.lockStopDBInstanceAutomatedBackupsReplicationRequest.RUnlock()
	return calls
}

// StopDBInstanceAutomatedBackupsReplicationWithContext calls StopDBInstanceAutomatedBackupsReplicationWithContextFunc.
func (mock *rdsClientMock) StopDBInstanceAutomatedBackupsReplicationWithContext(contextMoqParam context.Context, stopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput, options ...request.Option) (*rds.StopDBInstanceAutomatedBackupsReplicationOutput, error) {
	if mock.StopDBInstanceAutomatedBackupsReplicationWithContextFunc == nil {
		panic("rdsClientMock.StopDBInstanceAutomatedBackupsReplicationWithContextFunc: method is nil but rdsClient.StopDBInstanceAutomatedBackupsReplicationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                                context.Context
		StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
		Options                                        []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		StopDBInstanceAutomatedBackupsReplicationInput: stopDBInstanceAutomatedBackupsReplicationInput,
		Options: options,
	}
	mock.lockStopDBInstanceAutomatedBackupsReplicationWithContext.Lock()
	mock.calls.StopDBInstanceAutomatedBackupsReplicationWithContext = append(mock.calls.StopDBInstanceAutomatedBackupsReplicationWithContext, callInfo)
	mock.lockStopDBInstanceAutomatedBackupsReplicationWithContext.Unlock()
	return mock.StopDBInstanceAutomatedBackupsReplicationWithContextFunc(contextMoqParam, stopDBInstanceAutomatedBackupsReplicationInput, options...)
}

// StopDBInstanceAutomatedBackupsReplicationWithContextCalls gets all the calls that were made to StopDBInstanceAutomatedBackupsReplicationWithContext.
// Check the length with:
//     len(mockedrdsClient.StopDBInstanceAutomatedBackupsReplicationWithContextCalls())
func (mock *rdsClientMock) StopDBInstanceAutomatedBackupsReplicationWithContextCalls() []struct {
	ContextMoqParam                                context.Context
	StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
	Options                                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                                context.Context
		StopDBInstanceAutomatedBackupsReplicationInput *rds.StopDBInstanceAutomatedBackupsReplicationInput
		Options                                        []request.Option
	}
	mock.lockStopDBInstanceAutomatedBackupsReplicationWithContext.RLock()
	calls = mock.calls.StopDBInstanceAutomatedBackupsReplicationWithContext
	mock.lockStopDBInstanceAutomatedBackupsReplicationWithContext.RUnlock()
	return calls
}

// StopDBInstanceRequest calls StopDBInstanceRequestFunc.
func (mock *rdsClientMock) StopDBInstanceRequest(stopDBInstanceInput *rds.StopDBInstanceInput) (*request.Request, *rds.StopDBInstanceOutput) {
	if mock.StopDBInstanceRequestFunc == nil {
		panic("rdsClientMock.StopDBInstanceRequestFunc: method is nil but rdsClient.StopDBInstanceRequest was just called")
	}
	callInfo := struct {
		StopDBInstanceInput *rds.StopDBInstanceInput
	}{
		StopDBInstanceInput: stopDBInstanceInput,
	}
	mock.lockStopDBInstanceRequest.Lock()
	mock.calls.StopDBInstanceRequest = append(mock.calls.StopDBInstanceRequest, callInfo)
	mock.lockStopDBInstanceRequest.Unlock()
	return mock.StopDBInstanceRequestFunc(stopDBInstanceInput)
}

// StopDBInstanceRequestCalls gets all the calls that were made to StopDBInstanceRequest.
// Check the length with:
//     len(mockedrdsClient.StopDBInstanceRequestCalls())
func (mock *rdsClientMock) StopDBInstanceRequestCalls() []struct {
	StopDBInstanceInput *rds.StopDBInstanceInput
} {
	var calls []struct {
		StopDBInstanceInput *rds.StopDBInstanceInput
	}
	mock.lockStopDBInstanceRequest.RLock()
	calls = mock.calls.StopDBInstanceRequest
	mock.lockStopDBInstanceRequest.RUnlock()
	return calls
}

// StopDBInstanceWithContext calls StopDBInstanceWithContextFunc.
func (mock *rdsClientMock) StopDBInstanceWithContext(contextMoqParam context.Context, stopDBInstanceInput *rds.StopDBInstanceInput, options ...request.Option) (*rds.StopDBInstanceOutput, error) {
	if mock.StopDBInstanceWithContextFunc == nil {
		panic("rdsClientMock.StopDBInstanceWithContextFunc: method is nil but rdsClient.StopDBInstanceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		StopDBInstanceInput *rds.StopDBInstanceInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		StopDBInstanceInput: stopDBInstanceInput,
		Options:             options,
	}
	mock.lockStopDBInstanceWithContext.Lock()
	mock.calls.StopDBInstanceWithContext = append(mock.calls.StopDBInstanceWithContext, callInfo)
	mock.lockStopDBInstanceWithContext.Unlock()
	return mock.StopDBInstanceWithContextFunc(contextMoqParam, stopDBInstanceInput, options...)
}

// StopDBInstanceWithContextCalls gets all the calls that were made to StopDBInstanceWithContext.
// Check the length with:
//     len(mockedrdsClient.StopDBInstanceWithContextCalls())
func (mock *rdsClientMock) StopDBInstanceWithContextCalls() []struct {
	ContextMoqParam     context.Context
	StopDBInstanceInput *rds.StopDBInstanceInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		StopDBInstanceInput *rds.StopDBInstanceInput
		Options             []request.Option
	}
	mock.lockStopDBInstanceWithContext.RLock()
	calls = mock.calls.StopDBInstanceWithContext
	mock.lockStopDBInstanceWithContext.RUnlock()
	return calls
}

// SwitchoverReadReplica calls SwitchoverReadReplicaFunc.
func (mock *rdsClientMock) SwitchoverReadReplica(switchoverReadReplicaInput *rds.SwitchoverReadReplicaInput) (*rds.SwitchoverReadReplicaOutput, error) {
	if mock.SwitchoverReadReplicaFunc == nil {
		panic("rdsClientMock.SwitchoverReadReplicaFunc: method is nil but rdsClient.SwitchoverReadReplica was just called")
	}
	callInfo := struct {
		SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
	}{
		SwitchoverReadReplicaInput: switchoverReadReplicaInput,
	}
	mock.lockSwitchoverReadReplica.Lock()
	mock.calls.SwitchoverReadReplica = append(mock.calls.SwitchoverReadReplica, callInfo)
	mock.lockSwitchoverReadReplica.Unlock()
	return mock.SwitchoverReadReplicaFunc(switchoverReadReplicaInput)
}

// SwitchoverReadReplicaCalls gets all the calls that were made to SwitchoverReadReplica.
// Check the length with:
//     len(mockedrdsClient.SwitchoverReadReplicaCalls())
func (mock *rdsClientMock) SwitchoverReadReplicaCalls() []struct {
	SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
} {
	var calls []struct {
		SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
	}
	mock.lockSwitchoverReadReplica.RLock()
	calls = mock.calls.SwitchoverReadReplica
	mock.lockSwitchoverReadReplica.RUnlock()
	return calls
}

// SwitchoverReadReplicaRequest calls SwitchoverReadReplicaRequestFunc.
func (mock *rdsClientMock) SwitchoverReadReplicaRequest(switchoverReadReplicaInput *rds.SwitchoverReadReplicaInput) (*request.Request, *rds.SwitchoverReadReplicaOutput) {
	if mock.SwitchoverReadReplicaRequestFunc == nil {
		panic("rdsClientMock.SwitchoverReadReplicaRequestFunc: method is nil but rdsClient.SwitchoverReadReplicaRequest was just called")
	}
	callInfo := struct {
		SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
	}{
		SwitchoverReadReplicaInput: switchoverReadReplicaInput,
	}
	mock.lockSwitchoverReadReplicaRequest.Lock()
	mock.calls.SwitchoverReadReplicaRequest = append(mock.calls.SwitchoverReadReplicaRequest, callInfo)
	mock.lockSwitchoverReadReplicaRequest.Unlock()
	return mock.SwitchoverReadReplicaRequestFunc(switchoverReadReplicaInput)
}

// SwitchoverReadReplicaRequestCalls gets all the calls that were made to SwitchoverReadReplicaRequest.
// Check the length with:
//     len(mockedrdsClient.SwitchoverReadReplicaRequestCalls())
func (mock *rdsClientMock) SwitchoverReadReplicaRequestCalls() []struct {
	SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
} {
	var calls []struct {
		SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
	}
	mock.lockSwitchoverReadReplicaRequest.RLock()
	calls = mock.calls.SwitchoverReadReplicaRequest
	mock.lockSwitchoverReadReplicaRequest.RUnlock()
	return calls
}

// SwitchoverReadReplicaWithContext calls SwitchoverReadReplicaWithContextFunc.
func (mock *rdsClientMock) SwitchoverReadReplicaWithContext(contextMoqParam context.Context, switchoverReadReplicaInput *rds.SwitchoverReadReplicaInput, options ...request.Option) (*rds.SwitchoverReadReplicaOutput, error) {
	if mock.SwitchoverReadReplicaWithContextFunc == nil {
		panic("rdsClientMock.SwitchoverReadReplicaWithContextFunc: method is nil but rdsClient.SwitchoverReadReplicaWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		SwitchoverReadReplicaInput: switchoverReadReplicaInput,
		Options:                    options,
	}
	mock.lockSwitchoverReadReplicaWithContext.Lock()
	mock.calls.SwitchoverReadReplicaWithContext = append(mock.calls.SwitchoverReadReplicaWithContext, callInfo)
	mock.lockSwitchoverReadReplicaWithContext.Unlock()
	return mock.SwitchoverReadReplicaWithContextFunc(contextMoqParam, switchoverReadReplicaInput, options...)
}

// SwitchoverReadReplicaWithContextCalls gets all the calls that were made to SwitchoverReadReplicaWithContext.
// Check the length with:
//     len(mockedrdsClient.SwitchoverReadReplicaWithContextCalls())
func (mock *rdsClientMock) SwitchoverReadReplicaWithContextCalls() []struct {
	ContextMoqParam            context.Context
	SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		SwitchoverReadReplicaInput *rds.SwitchoverReadReplicaInput
		Options                    []request.Option
	}
	mock.lockSwitchoverReadReplicaWithContext.RLock()
	calls = mock.calls.SwitchoverReadReplicaWithContext
	mock.lockSwitchoverReadReplicaWithContext.RUnlock()
	return calls
}

// WaitUntilDBClusterAvailable calls WaitUntilDBClusterAvailableFunc.
func (mock *rdsClientMock) WaitUntilDBClusterAvailable(describeDBClustersInput *rds.DescribeDBClustersInput) error {
	if mock.WaitUntilDBClusterAvailableFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterAvailableFunc: method is nil but rdsClient.WaitUntilDBClusterAvailable was just called")
	}
	callInfo := struct {
		DescribeDBClustersInput *rds.DescribeDBClustersInput
	}{
		DescribeDBClustersInput: describeDBClustersInput,
	}
	mock.lockWaitUntilDBClusterAvailable.Lock()
	mock.calls.WaitUntilDBClusterAvailable = append(mock.calls.WaitUntilDBClusterAvailable, callInfo)
	mock.lockWaitUntilDBClusterAvailable.Unlock()
	return mock.WaitUntilDBClusterAvailableFunc(describeDBClustersInput)
}

// WaitUntilDBClusterAvailableCalls gets all the calls that were made to WaitUntilDBClusterAvailable.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterAvailableCalls())
func (mock *rdsClientMock) WaitUntilDBClusterAvailableCalls() []struct {
	DescribeDBClustersInput *rds.DescribeDBClustersInput
} {
	var calls []struct {
		DescribeDBClustersInput *rds.DescribeDBClustersInput
	}
	mock.lockWaitUntilDBClusterAvailable.RLock()
	calls = mock.calls.WaitUntilDBClusterAvailable
	mock.lockWaitUntilDBClusterAvailable.RUnlock()
	return calls
}

// WaitUntilDBClusterAvailableWithContext calls WaitUntilDBClusterAvailableWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBClusterAvailableWithContext(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilDBClusterAvailableWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterAvailableWithContextFunc: method is nil but rdsClient.WaitUntilDBClusterAvailableWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DescribeDBClustersInput *rds.DescribeDBClustersInput
		WaiterOptions           []request.WaiterOption
	}{
		ContextMoqParam:         contextMoqParam,
		DescribeDBClustersInput: describeDBClustersInput,
		WaiterOptions:           waiterOptions,
	}
	mock.lockWaitUntilDBClusterAvailableWithContext.Lock()
	mock.calls.WaitUntilDBClusterAvailableWithContext = append(mock.calls.WaitUntilDBClusterAvailableWithContext, callInfo)
	mock.lockWaitUntilDBClusterAvailableWithContext.Unlock()
	return mock.WaitUntilDBClusterAvailableWithContextFunc(contextMoqParam, describeDBClustersInput, waiterOptions...)
}

// WaitUntilDBClusterAvailableWithContextCalls gets all the calls that were made to WaitUntilDBClusterAvailableWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterAvailableWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBClusterAvailableWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DescribeDBClustersInput *rds.DescribeDBClustersInput
	WaiterOptions           []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DescribeDBClustersInput *rds.DescribeDBClustersInput
		WaiterOptions           []request.WaiterOption
	}
	mock.lockWaitUntilDBClusterAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilDBClusterAvailableWithContext
	mock.lockWaitUntilDBClusterAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilDBClusterDeleted calls WaitUntilDBClusterDeletedFunc.
func (mock *rdsClientMock) WaitUntilDBClusterDeleted(describeDBClustersInput *rds.DescribeDBClustersInput) error {
	if mock.WaitUntilDBClusterDeletedFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterDeletedFunc: method is nil but rdsClient.WaitUntilDBClusterDeleted was just called")
	}
	callInfo := struct {
		DescribeDBClustersInput *rds.DescribeDBClustersInput
	}{
		DescribeDBClustersInput: describeDBClustersInput,
	}
	mock.lockWaitUntilDBClusterDeleted.Lock()
	mock.calls.WaitUntilDBClusterDeleted = append(mock.calls.WaitUntilDBClusterDeleted, callInfo)
	mock.lockWaitUntilDBClusterDeleted.Unlock()
	return mock.WaitUntilDBClusterDeletedFunc(describeDBClustersInput)
}

// WaitUntilDBClusterDeletedCalls gets all the calls that were made to WaitUntilDBClusterDeleted.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterDeletedCalls())
func (mock *rdsClientMock) WaitUntilDBClusterDeletedCalls() []struct {
	DescribeDBClustersInput *rds.DescribeDBClustersInput
} {
	var calls []struct {
		DescribeDBClustersInput *rds.DescribeDBClustersInput
	}
	mock.lockWaitUntilDBClusterDeleted.RLock()
	calls = mock.calls.WaitUntilDBClusterDeleted
	mock.lockWaitUntilDBClusterDeleted.RUnlock()
	return calls
}

// WaitUntilDBClusterDeletedWithContext calls WaitUntilDBClusterDeletedWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBClusterDeletedWithContext(contextMoqParam context.Context, describeDBClustersInput *rds.DescribeDBClustersInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilDBClusterDeletedWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterDeletedWithContextFunc: method is nil but rdsClient.WaitUntilDBClusterDeletedWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DescribeDBClustersInput *rds.DescribeDBClustersInput
		WaiterOptions           []request.WaiterOption
	}{
		ContextMoqParam:         contextMoqParam,
		DescribeDBClustersInput: describeDBClustersInput,
		WaiterOptions:           waiterOptions,
	}
	mock.lockWaitUntilDBClusterDeletedWithContext.Lock()
	mock.calls.WaitUntilDBClusterDeletedWithContext = append(mock.calls.WaitUntilDBClusterDeletedWithContext, callInfo)
	mock.lockWaitUntilDBClusterDeletedWithContext.Unlock()
	return mock.WaitUntilDBClusterDeletedWithContextFunc(contextMoqParam, describeDBClustersInput, waiterOptions...)
}

// WaitUntilDBClusterDeletedWithContextCalls gets all the calls that were made to WaitUntilDBClusterDeletedWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterDeletedWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBClusterDeletedWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DescribeDBClustersInput *rds.DescribeDBClustersInput
	WaiterOptions           []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DescribeDBClustersInput *rds.DescribeDBClustersInput
		WaiterOptions           []request.WaiterOption
	}
	mock.lockWaitUntilDBClusterDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilDBClusterDeletedWithContext
	mock.lockWaitUntilDBClusterDeletedWithContext.RUnlock()
	return calls
}

// WaitUntilDBClusterSnapshotAvailable calls WaitUntilDBClusterSnapshotAvailableFunc.
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotAvailable(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) error {
	if mock.WaitUntilDBClusterSnapshotAvailableFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterSnapshotAvailableFunc: method is nil but rdsClient.WaitUntilDBClusterSnapshotAvailable was just called")
	}
	callInfo := struct {
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	}{
		DescribeDBClusterSnapshotsInput: describeDBClusterSnapshotsInput,
	}
	mock.lockWaitUntilDBClusterSnapshotAvailable.Lock()
	mock.calls.WaitUntilDBClusterSnapshotAvailable = append(mock.calls.WaitUntilDBClusterSnapshotAvailable, callInfo)
	mock.lockWaitUntilDBClusterSnapshotAvailable.Unlock()
	return mock.WaitUntilDBClusterSnapshotAvailableFunc(describeDBClusterSnapshotsInput)
}

// WaitUntilDBClusterSnapshotAvailableCalls gets all the calls that were made to WaitUntilDBClusterSnapshotAvailable.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterSnapshotAvailableCalls())
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotAvailableCalls() []struct {
	DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
} {
	var calls []struct {
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	}
	mock.lockWaitUntilDBClusterSnapshotAvailable.RLock()
	calls = mock.calls.WaitUntilDBClusterSnapshotAvailable
	mock.lockWaitUntilDBClusterSnapshotAvailable.RUnlock()
	return calls
}

// WaitUntilDBClusterSnapshotAvailableWithContext calls WaitUntilDBClusterSnapshotAvailableWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotAvailableWithContext(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilDBClusterSnapshotAvailableWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterSnapshotAvailableWithContextFunc: method is nil but rdsClient.WaitUntilDBClusterSnapshotAvailableWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		WaiterOptions                   []request.WaiterOption
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeDBClusterSnapshotsInput: describeDBClusterSnapshotsInput,
		WaiterOptions:                   waiterOptions,
	}
	mock.lockWaitUntilDBClusterSnapshotAvailableWithContext.Lock()
	mock.calls.WaitUntilDBClusterSnapshotAvailableWithContext = append(mock.calls.WaitUntilDBClusterSnapshotAvailableWithContext, callInfo)
	mock.lockWaitUntilDBClusterSnapshotAvailableWithContext.Unlock()
	return mock.WaitUntilDBClusterSnapshotAvailableWithContextFunc(contextMoqParam, describeDBClusterSnapshotsInput, waiterOptions...)
}

// WaitUntilDBClusterSnapshotAvailableWithContextCalls gets all the calls that were made to WaitUntilDBClusterSnapshotAvailableWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterSnapshotAvailableWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotAvailableWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	WaiterOptions                   []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		WaiterOptions                   []request.WaiterOption
	}
	mock.lockWaitUntilDBClusterSnapshotAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilDBClusterSnapshotAvailableWithContext
	mock.lockWaitUntilDBClusterSnapshotAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilDBClusterSnapshotDeleted calls WaitUntilDBClusterSnapshotDeletedFunc.
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotDeleted(describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput) error {
	if mock.WaitUntilDBClusterSnapshotDeletedFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterSnapshotDeletedFunc: method is nil but rdsClient.WaitUntilDBClusterSnapshotDeleted was just called")
	}
	callInfo := struct {
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	}{
		DescribeDBClusterSnapshotsInput: describeDBClusterSnapshotsInput,
	}
	mock.lockWaitUntilDBClusterSnapshotDeleted.Lock()
	mock.calls.WaitUntilDBClusterSnapshotDeleted = append(mock.calls.WaitUntilDBClusterSnapshotDeleted, callInfo)
	mock.lockWaitUntilDBClusterSnapshotDeleted.Unlock()
	return mock.WaitUntilDBClusterSnapshotDeletedFunc(describeDBClusterSnapshotsInput)
}

// WaitUntilDBClusterSnapshotDeletedCalls gets all the calls that were made to WaitUntilDBClusterSnapshotDeleted.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterSnapshotDeletedCalls())
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotDeletedCalls() []struct {
	DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
} {
	var calls []struct {
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	}
	mock.lockWaitUntilDBClusterSnapshotDeleted.RLock()
	calls = mock.calls.WaitUntilDBClusterSnapshotDeleted
	mock.lockWaitUntilDBClusterSnapshotDeleted.RUnlock()
	return calls
}

// WaitUntilDBClusterSnapshotDeletedWithContext calls WaitUntilDBClusterSnapshotDeletedWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotDeletedWithContext(contextMoqParam context.Context, describeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilDBClusterSnapshotDeletedWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBClusterSnapshotDeletedWithContextFunc: method is nil but rdsClient.WaitUntilDBClusterSnapshotDeletedWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		WaiterOptions                   []request.WaiterOption
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeDBClusterSnapshotsInput: describeDBClusterSnapshotsInput,
		WaiterOptions:                   waiterOptions,
	}
	mock.lockWaitUntilDBClusterSnapshotDeletedWithContext.Lock()
	mock.calls.WaitUntilDBClusterSnapshotDeletedWithContext = append(mock.calls.WaitUntilDBClusterSnapshotDeletedWithContext, callInfo)
	mock.lockWaitUntilDBClusterSnapshotDeletedWithContext.Unlock()
	return mock.WaitUntilDBClusterSnapshotDeletedWithContextFunc(contextMoqParam, describeDBClusterSnapshotsInput, waiterOptions...)
}

// WaitUntilDBClusterSnapshotDeletedWithContextCalls gets all the calls that were made to WaitUntilDBClusterSnapshotDeletedWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBClusterSnapshotDeletedWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBClusterSnapshotDeletedWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
	WaiterOptions                   []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeDBClusterSnapshotsInput *rds.DescribeDBClusterSnapshotsInput
		WaiterOptions                   []request.WaiterOption
	}
	mock.lockWaitUntilDBClusterSnapshotDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilDBClusterSnapshotDeletedWithContext
	mock.lockWaitUntilDBClusterSnapshotDeletedWithContext.RUnlock()
	return calls
}

// WaitUntilDBInstanceAvailable calls WaitUntilDBInstanceAvailableFunc.
func (mock *rdsClientMock) WaitUntilDBInstanceAvailable(describeDBInstancesInput *rds.DescribeDBInstancesInput) error {
	if mock.WaitUntilDBInstanceAvailableFunc == nil {
		panic("rdsClientMock.WaitUntilDBInstanceAvailableFunc: method is nil but rdsClient.WaitUntilDBInstanceAvailable was just called")
	}
	callInfo := struct {
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	}{
		DescribeDBInstancesInput: describeDBInstancesInput,
	}
	mock.lockWaitUntilDBInstanceAvailable.Lock()
	mock.calls.WaitUntilDBInstanceAvailable = append(mock.calls.WaitUntilDBInstanceAvailable, callInfo)
	mock.lockWaitUntilDBInstanceAvailable.Unlock()
	return mock.WaitUntilDBInstanceAvailableFunc(describeDBInstancesInput)
}

// WaitUntilDBInstanceAvailableCalls gets all the calls that were made to WaitUntilDBInstanceAvailable.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBInstanceAvailableCalls())
func (mock *rdsClientMock) WaitUntilDBInstanceAvailableCalls() []struct {
	DescribeDBInstancesInput *rds.DescribeDBInstancesInput
} {
	var calls []struct {
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	}
	mock.lockWaitUntilDBInstanceAvailable.RLock()
	calls = mock.calls.WaitUntilDBInstanceAvailable
	mock.lockWaitUntilDBInstanceAvailable.RUnlock()
	return calls
}

// WaitUntilDBInstanceAvailableWithContext calls WaitUntilDBInstanceAvailableWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBInstanceAvailableWithContext(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilDBInstanceAvailableWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBInstanceAvailableWithContextFunc: method is nil but rdsClient.WaitUntilDBInstanceAvailableWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		WaiterOptions            []request.WaiterOption
	}{
		ContextMoqParam:          contextMoqParam,
		DescribeDBInstancesInput: describeDBInstancesInput,
		WaiterOptions:            waiterOptions,
	}
	mock.lockWaitUntilDBInstanceAvailableWithContext.Lock()
	mock.calls.WaitUntilDBInstanceAvailableWithContext = append(mock.calls.WaitUntilDBInstanceAvailableWithContext, callInfo)
	mock.lockWaitUntilDBInstanceAvailableWithContext.Unlock()
	return mock.WaitUntilDBInstanceAvailableWithContextFunc(contextMoqParam, describeDBInstancesInput, waiterOptions...)
}

// WaitUntilDBInstanceAvailableWithContextCalls gets all the calls that were made to WaitUntilDBInstanceAvailableWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBInstanceAvailableWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBInstanceAvailableWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	WaiterOptions            []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		WaiterOptions            []request.WaiterOption
	}
	mock.lockWaitUntilDBInstanceAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilDBInstanceAvailableWithContext
	mock.lockWaitUntilDBInstanceAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilDBInstanceDeleted calls WaitUntilDBInstanceDeletedFunc.
func (mock *rdsClientMock) WaitUntilDBInstanceDeleted(describeDBInstancesInput *rds.DescribeDBInstancesInput) error {
	if mock.WaitUntilDBInstanceDeletedFunc == nil {
		panic("rdsClientMock.WaitUntilDBInstanceDeletedFunc: method is nil but rdsClient.WaitUntilDBInstanceDeleted was just called")
	}
	callInfo := struct {
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	}{
		DescribeDBInstancesInput: describeDBInstancesInput,
	}
	mock.lockWaitUntilDBInstanceDeleted.Lock()
	mock.calls.WaitUntilDBInstanceDeleted = append(mock.calls.WaitUntilDBInstanceDeleted, callInfo)
	mock.lockWaitUntilDBInstanceDeleted.Unlock()
	return mock.WaitUntilDBInstanceDeletedFunc(describeDBInstancesInput)
}

// WaitUntilDBInstanceDeletedCalls gets all the calls that were made to WaitUntilDBInstanceDeleted.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBInstanceDeletedCalls())
func (mock *rdsClientMock) WaitUntilDBInstanceDeletedCalls() []struct {
	DescribeDBInstancesInput *rds.DescribeDBInstancesInput
} {
	var calls []struct {
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	}
	mock.lockWaitUntilDBInstanceDeleted.RLock()
	calls = mock.calls.WaitUntilDBInstanceDeleted
	mock.lockWaitUntilDBInstanceDeleted.RUnlock()
	return calls
}

// WaitUntilDBInstanceDeletedWithContext calls WaitUntilDBInstanceDeletedWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBInstanceDeletedWithContext(contextMoqParam context.Context, describeDBInstancesInput *rds.DescribeDBInstancesInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilDBInstanceDeletedWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBInstanceDeletedWithContextFunc: method is nil but rdsClient.WaitUntilDBInstanceDeletedWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		WaiterOptions            []request.WaiterOption
	}{
		ContextMoqParam:          contextMoqParam,
		DescribeDBInstancesInput: describeDBInstancesInput,
		WaiterOptions:            waiterOptions,
	}
	mock.lockWaitUntilDBInstanceDeletedWithContext.Lock()
	mock.calls.WaitUntilDBInstanceDeletedWithContext = append(mock.calls.WaitUntilDBInstanceDeletedWithContext, callInfo)
	mock.lockWaitUntilDBInstanceDeletedWithContext.Unlock()
	return mock.WaitUntilDBInstanceDeletedWithContextFunc(contextMoqParam, describeDBInstancesInput, waiterOptions...)
}

// WaitUntilDBInstanceDeletedWithContextCalls gets all the calls that were made to WaitUntilDBInstanceDeletedWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBInstanceDeletedWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBInstanceDeletedWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DescribeDBInstancesInput *rds.DescribeDBInstancesInput
	WaiterOptions            []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DescribeDBInstancesInput *rds.DescribeDBInstancesInput
		WaiterOptions            []request.WaiterOption
	}
	mock.lockWaitUntilDBInstanceDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilDBInstanceDeletedWithContext
	mock.lockWaitUntilDBInstanceDeletedWithContext.RUnlock()
	return calls
}

// WaitUntilDBSnapshotAvailable calls WaitUntilDBSnapshotAvailableFunc.
func (mock *rdsClientMock) WaitUntilDBSnapshotAvailable(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) error {
	if mock.WaitUntilDBSnapshotAvailableFunc == nil {
		panic("rdsClientMock.WaitUntilDBSnapshotAvailableFunc: method is nil but rdsClient.WaitUntilDBSnapshotAvailable was just called")
	}
	callInfo := struct {
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	}{
		DescribeDBSnapshotsInput: describeDBSnapshotsInput,
	}
	mock.lockWaitUntilDBSnapshotAvailable.Lock()
	mock.calls.WaitUntilDBSnapshotAvailable = append(mock.calls.WaitUntilDBSnapshotAvailable, callInfo)
	mock.lockWaitUntilDBSnapshotAvailable.Unlock()
	return mock.WaitUntilDBSnapshotAvailableFunc(describeDBSnapshotsInput)
}

// WaitUntilDBSnapshotAvailableCalls gets all the calls that were made to WaitUntilDBSnapshotAvailable.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBSnapshotAvailableCalls())
func (mock *rdsClientMock) WaitUntilDBSnapshotAvailableCalls() []struct {
	DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
} {
	var calls []struct {
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	}
	mock.lockWaitUntilDBSnapshotAvailable.RLock()
	calls = mock.calls.WaitUntilDBSnapshotAvailable
	mock.lockWaitUntilDBSnapshotAvailable.RUnlock()
	return calls
}

// WaitUntilDBSnapshotAvailableWithContext calls WaitUntilDBSnapshotAvailableWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBSnapshotAvailableWithContext(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilDBSnapshotAvailableWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBSnapshotAvailableWithContextFunc: method is nil but rdsClient.WaitUntilDBSnapshotAvailableWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		WaiterOptions            []request.WaiterOption
	}{
		ContextMoqParam:          contextMoqParam,
		DescribeDBSnapshotsInput: describeDBSnapshotsInput,
		WaiterOptions:            waiterOptions,
	}
	mock.lockWaitUntilDBSnapshotAvailableWithContext.Lock()
	mock.calls.WaitUntilDBSnapshotAvailableWithContext = append(mock.calls.WaitUntilDBSnapshotAvailableWithContext, callInfo)
	mock.lockWaitUntilDBSnapshotAvailableWithContext.Unlock()
	return mock.WaitUntilDBSnapshotAvailableWithContextFunc(contextMoqParam, describeDBSnapshotsInput, waiterOptions...)
}

// WaitUntilDBSnapshotAvailableWithContextCalls gets all the calls that were made to WaitUntilDBSnapshotAvailableWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBSnapshotAvailableWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBSnapshotAvailableWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	WaiterOptions            []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		WaiterOptions            []request.WaiterOption
	}
	mock.lockWaitUntilDBSnapshotAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilDBSnapshotAvailableWithContext
	mock.lockWaitUntilDBSnapshotAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilDBSnapshotDeleted calls WaitUntilDBSnapshotDeletedFunc.
func (mock *rdsClientMock) WaitUntilDBSnapshotDeleted(describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput) error {
	if mock.WaitUntilDBSnapshotDeletedFunc == nil {
		panic("rdsClientMock.WaitUntilDBSnapshotDeletedFunc: method is nil but rdsClient.WaitUntilDBSnapshotDeleted was just called")
	}
	callInfo := struct {
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	}{
		DescribeDBSnapshotsInput: describeDBSnapshotsInput,
	}
	mock.lockWaitUntilDBSnapshotDeleted.Lock()
	mock.calls.WaitUntilDBSnapshotDeleted = append(mock.calls.WaitUntilDBSnapshotDeleted, callInfo)
	mock.lockWaitUntilDBSnapshotDeleted.Unlock()
	return mock.WaitUntilDBSnapshotDeletedFunc(describeDBSnapshotsInput)
}

// WaitUntilDBSnapshotDeletedCalls gets all the calls that were made to WaitUntilDBSnapshotDeleted.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBSnapshotDeletedCalls())
func (mock *rdsClientMock) WaitUntilDBSnapshotDeletedCalls() []struct {
	DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
} {
	var calls []struct {
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	}
	mock.lockWaitUntilDBSnapshotDeleted.RLock()
	calls = mock.calls.WaitUntilDBSnapshotDeleted
	mock.lockWaitUntilDBSnapshotDeleted.RUnlock()
	return calls
}

// WaitUntilDBSnapshotDeletedWithContext calls WaitUntilDBSnapshotDeletedWithContextFunc.
func (mock *rdsClientMock) WaitUntilDBSnapshotDeletedWithContext(contextMoqParam context.Context, describeDBSnapshotsInput *rds.DescribeDBSnapshotsInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilDBSnapshotDeletedWithContextFunc == nil {
		panic("rdsClientMock.WaitUntilDBSnapshotDeletedWithContextFunc: method is nil but rdsClient.WaitUntilDBSnapshotDeletedWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		WaiterOptions            []request.WaiterOption
	}{
		ContextMoqParam:          contextMoqParam,
		DescribeDBSnapshotsInput: describeDBSnapshotsInput,
		WaiterOptions:            waiterOptions,
	}
	mock.lockWaitUntilDBSnapshotDeletedWithContext.Lock()
	mock.calls.WaitUntilDBSnapshotDeletedWithContext = append(mock.calls.WaitUntilDBSnapshotDeletedWithContext, callInfo)
	mock.lockWaitUntilDBSnapshotDeletedWithContext.Unlock()
	return mock.WaitUntilDBSnapshotDeletedWithContextFunc(contextMoqParam, describeDBSnapshotsInput, waiterOptions...)
}

// WaitUntilDBSnapshotDeletedWithContextCalls gets all the calls that were made to WaitUntilDBSnapshotDeletedWithContext.
// Check the length with:
//     len(mockedrdsClient.WaitUntilDBSnapshotDeletedWithContextCalls())
func (mock *rdsClientMock) WaitUntilDBSnapshotDeletedWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
	WaiterOptions            []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DescribeDBSnapshotsInput *rds.DescribeDBSnapshotsInput
		WaiterOptions            []request.WaiterOption
	}
	mock.lockWaitUntilDBSnapshotDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilDBSnapshotDeletedWithContext
	mock.lockWaitUntilDBSnapshotDeletedWithContext.RUnlock()
	return calls
}
