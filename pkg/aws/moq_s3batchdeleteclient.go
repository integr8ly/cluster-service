// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"sync"
)

// Ensure, that s3BatchDeleteClientMock does implement s3BatchDeleteClient.
// If this is not the case, regenerate this file with moq.
var _ s3BatchDeleteClient = &s3BatchDeleteClientMock{}

// s3BatchDeleteClientMock is a mock implementation of s3BatchDeleteClient.
//
// 	func TestSomethingThatUsess3BatchDeleteClient(t *testing.T) {
//
// 		// make and configure a mocked s3BatchDeleteClient
// 		mockeds3BatchDeleteClient := &s3BatchDeleteClientMock{
// 			DeleteFunc: func(contextMoqParam context.Context, batchDeleteIterator s3manager.BatchDeleteIterator) error {
// 				panic("mock out the Delete method")
// 			},
// 		}
//
// 		// use mockeds3BatchDeleteClient in code that requires s3BatchDeleteClient
// 		// and then make assertions.
//
// 	}
type s3BatchDeleteClientMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(contextMoqParam context.Context, batchDeleteIterator s3manager.BatchDeleteIterator) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// BatchDeleteIterator is the batchDeleteIterator argument value.
			BatchDeleteIterator s3manager.BatchDeleteIterator
		}
	}
	lockDelete sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *s3BatchDeleteClientMock) Delete(contextMoqParam context.Context, batchDeleteIterator s3manager.BatchDeleteIterator) error {
	if mock.DeleteFunc == nil {
		panic("s3BatchDeleteClientMock.DeleteFunc: method is nil but s3BatchDeleteClient.Delete was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		BatchDeleteIterator s3manager.BatchDeleteIterator
	}{
		ContextMoqParam:     contextMoqParam,
		BatchDeleteIterator: batchDeleteIterator,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(contextMoqParam, batchDeleteIterator)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockeds3BatchDeleteClient.DeleteCalls())
func (mock *s3BatchDeleteClientMock) DeleteCalls() []struct {
	ContextMoqParam     context.Context
	BatchDeleteIterator s3manager.BatchDeleteIterator
} {
	var calls []struct {
		ContextMoqParam     context.Context
		BatchDeleteIterator s3manager.BatchDeleteIterator
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}
