// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/s3"
	"sync"
)

// Ensure, that s3ClientMock does implement s3Client.
// If this is not the case, regenerate this file with moq.
var _ s3Client = &s3ClientMock{}

// s3ClientMock is a mock implementation of s3Client.
//
// 	func TestSomethingThatUsess3Client(t *testing.T) {
//
// 		// make and configure a mocked s3Client
// 		mockeds3Client := &s3ClientMock{
// 			AbortMultipartUploadFunc: func(abortMultipartUploadInput *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
// 				panic("mock out the AbortMultipartUpload method")
// 			},
// 			AbortMultipartUploadRequestFunc: func(abortMultipartUploadInput *s3.AbortMultipartUploadInput) (*request.Request, *s3.AbortMultipartUploadOutput) {
// 				panic("mock out the AbortMultipartUploadRequest method")
// 			},
// 			AbortMultipartUploadWithContextFunc: func(contextMoqParam context.Context, abortMultipartUploadInput *s3.AbortMultipartUploadInput, options ...request.Option) (*s3.AbortMultipartUploadOutput, error) {
// 				panic("mock out the AbortMultipartUploadWithContext method")
// 			},
// 			CompleteMultipartUploadFunc: func(completeMultipartUploadInput *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
// 				panic("mock out the CompleteMultipartUpload method")
// 			},
// 			CompleteMultipartUploadRequestFunc: func(completeMultipartUploadInput *s3.CompleteMultipartUploadInput) (*request.Request, *s3.CompleteMultipartUploadOutput) {
// 				panic("mock out the CompleteMultipartUploadRequest method")
// 			},
// 			CompleteMultipartUploadWithContextFunc: func(contextMoqParam context.Context, completeMultipartUploadInput *s3.CompleteMultipartUploadInput, options ...request.Option) (*s3.CompleteMultipartUploadOutput, error) {
// 				panic("mock out the CompleteMultipartUploadWithContext method")
// 			},
// 			CopyObjectFunc: func(copyObjectInput *s3.CopyObjectInput) (*s3.CopyObjectOutput, error) {
// 				panic("mock out the CopyObject method")
// 			},
// 			CopyObjectRequestFunc: func(copyObjectInput *s3.CopyObjectInput) (*request.Request, *s3.CopyObjectOutput) {
// 				panic("mock out the CopyObjectRequest method")
// 			},
// 			CopyObjectWithContextFunc: func(contextMoqParam context.Context, copyObjectInput *s3.CopyObjectInput, options ...request.Option) (*s3.CopyObjectOutput, error) {
// 				panic("mock out the CopyObjectWithContext method")
// 			},
// 			CreateBucketFunc: func(createBucketInput *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
// 				panic("mock out the CreateBucket method")
// 			},
// 			CreateBucketRequestFunc: func(createBucketInput *s3.CreateBucketInput) (*request.Request, *s3.CreateBucketOutput) {
// 				panic("mock out the CreateBucketRequest method")
// 			},
// 			CreateBucketWithContextFunc: func(contextMoqParam context.Context, createBucketInput *s3.CreateBucketInput, options ...request.Option) (*s3.CreateBucketOutput, error) {
// 				panic("mock out the CreateBucketWithContext method")
// 			},
// 			CreateMultipartUploadFunc: func(createMultipartUploadInput *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
// 				panic("mock out the CreateMultipartUpload method")
// 			},
// 			CreateMultipartUploadRequestFunc: func(createMultipartUploadInput *s3.CreateMultipartUploadInput) (*request.Request, *s3.CreateMultipartUploadOutput) {
// 				panic("mock out the CreateMultipartUploadRequest method")
// 			},
// 			CreateMultipartUploadWithContextFunc: func(contextMoqParam context.Context, createMultipartUploadInput *s3.CreateMultipartUploadInput, options ...request.Option) (*s3.CreateMultipartUploadOutput, error) {
// 				panic("mock out the CreateMultipartUploadWithContext method")
// 			},
// 			DeleteBucketFunc: func(deleteBucketInput *s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error) {
// 				panic("mock out the DeleteBucket method")
// 			},
// 			DeleteBucketAnalyticsConfigurationFunc: func(deleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
// 				panic("mock out the DeleteBucketAnalyticsConfiguration method")
// 			},
// 			DeleteBucketAnalyticsConfigurationRequestFunc: func(deleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput) (*request.Request, *s3.DeleteBucketAnalyticsConfigurationOutput) {
// 				panic("mock out the DeleteBucketAnalyticsConfigurationRequest method")
// 			},
// 			DeleteBucketAnalyticsConfigurationWithContextFunc: func(contextMoqParam context.Context, deleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput, options ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
// 				panic("mock out the DeleteBucketAnalyticsConfigurationWithContext method")
// 			},
// 			DeleteBucketCorsFunc: func(deleteBucketCorsInput *s3.DeleteBucketCorsInput) (*s3.DeleteBucketCorsOutput, error) {
// 				panic("mock out the DeleteBucketCors method")
// 			},
// 			DeleteBucketCorsRequestFunc: func(deleteBucketCorsInput *s3.DeleteBucketCorsInput) (*request.Request, *s3.DeleteBucketCorsOutput) {
// 				panic("mock out the DeleteBucketCorsRequest method")
// 			},
// 			DeleteBucketCorsWithContextFunc: func(contextMoqParam context.Context, deleteBucketCorsInput *s3.DeleteBucketCorsInput, options ...request.Option) (*s3.DeleteBucketCorsOutput, error) {
// 				panic("mock out the DeleteBucketCorsWithContext method")
// 			},
// 			DeleteBucketEncryptionFunc: func(deleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput) (*s3.DeleteBucketEncryptionOutput, error) {
// 				panic("mock out the DeleteBucketEncryption method")
// 			},
// 			DeleteBucketEncryptionRequestFunc: func(deleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput) (*request.Request, *s3.DeleteBucketEncryptionOutput) {
// 				panic("mock out the DeleteBucketEncryptionRequest method")
// 			},
// 			DeleteBucketEncryptionWithContextFunc: func(contextMoqParam context.Context, deleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput, options ...request.Option) (*s3.DeleteBucketEncryptionOutput, error) {
// 				panic("mock out the DeleteBucketEncryptionWithContext method")
// 			},
// 			DeleteBucketIntelligentTieringConfigurationFunc: func(deleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error) {
// 				panic("mock out the DeleteBucketIntelligentTieringConfiguration method")
// 			},
// 			DeleteBucketIntelligentTieringConfigurationRequestFunc: func(deleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput) (*request.Request, *s3.DeleteBucketIntelligentTieringConfigurationOutput) {
// 				panic("mock out the DeleteBucketIntelligentTieringConfigurationRequest method")
// 			},
// 			DeleteBucketIntelligentTieringConfigurationWithContextFunc: func(contextMoqParam context.Context, deleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput, options ...request.Option) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error) {
// 				panic("mock out the DeleteBucketIntelligentTieringConfigurationWithContext method")
// 			},
// 			DeleteBucketInventoryConfigurationFunc: func(deleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
// 				panic("mock out the DeleteBucketInventoryConfiguration method")
// 			},
// 			DeleteBucketInventoryConfigurationRequestFunc: func(deleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput) (*request.Request, *s3.DeleteBucketInventoryConfigurationOutput) {
// 				panic("mock out the DeleteBucketInventoryConfigurationRequest method")
// 			},
// 			DeleteBucketInventoryConfigurationWithContextFunc: func(contextMoqParam context.Context, deleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput, options ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
// 				panic("mock out the DeleteBucketInventoryConfigurationWithContext method")
// 			},
// 			DeleteBucketLifecycleFunc: func(deleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput) (*s3.DeleteBucketLifecycleOutput, error) {
// 				panic("mock out the DeleteBucketLifecycle method")
// 			},
// 			DeleteBucketLifecycleRequestFunc: func(deleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput) (*request.Request, *s3.DeleteBucketLifecycleOutput) {
// 				panic("mock out the DeleteBucketLifecycleRequest method")
// 			},
// 			DeleteBucketLifecycleWithContextFunc: func(contextMoqParam context.Context, deleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput, options ...request.Option) (*s3.DeleteBucketLifecycleOutput, error) {
// 				panic("mock out the DeleteBucketLifecycleWithContext method")
// 			},
// 			DeleteBucketMetricsConfigurationFunc: func(deleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
// 				panic("mock out the DeleteBucketMetricsConfiguration method")
// 			},
// 			DeleteBucketMetricsConfigurationRequestFunc: func(deleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput) (*request.Request, *s3.DeleteBucketMetricsConfigurationOutput) {
// 				panic("mock out the DeleteBucketMetricsConfigurationRequest method")
// 			},
// 			DeleteBucketMetricsConfigurationWithContextFunc: func(contextMoqParam context.Context, deleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput, options ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
// 				panic("mock out the DeleteBucketMetricsConfigurationWithContext method")
// 			},
// 			DeleteBucketOwnershipControlsFunc: func(deleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput) (*s3.DeleteBucketOwnershipControlsOutput, error) {
// 				panic("mock out the DeleteBucketOwnershipControls method")
// 			},
// 			DeleteBucketOwnershipControlsRequestFunc: func(deleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput) (*request.Request, *s3.DeleteBucketOwnershipControlsOutput) {
// 				panic("mock out the DeleteBucketOwnershipControlsRequest method")
// 			},
// 			DeleteBucketOwnershipControlsWithContextFunc: func(contextMoqParam context.Context, deleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput, options ...request.Option) (*s3.DeleteBucketOwnershipControlsOutput, error) {
// 				panic("mock out the DeleteBucketOwnershipControlsWithContext method")
// 			},
// 			DeleteBucketPolicyFunc: func(deleteBucketPolicyInput *s3.DeleteBucketPolicyInput) (*s3.DeleteBucketPolicyOutput, error) {
// 				panic("mock out the DeleteBucketPolicy method")
// 			},
// 			DeleteBucketPolicyRequestFunc: func(deleteBucketPolicyInput *s3.DeleteBucketPolicyInput) (*request.Request, *s3.DeleteBucketPolicyOutput) {
// 				panic("mock out the DeleteBucketPolicyRequest method")
// 			},
// 			DeleteBucketPolicyWithContextFunc: func(contextMoqParam context.Context, deleteBucketPolicyInput *s3.DeleteBucketPolicyInput, options ...request.Option) (*s3.DeleteBucketPolicyOutput, error) {
// 				panic("mock out the DeleteBucketPolicyWithContext method")
// 			},
// 			DeleteBucketReplicationFunc: func(deleteBucketReplicationInput *s3.DeleteBucketReplicationInput) (*s3.DeleteBucketReplicationOutput, error) {
// 				panic("mock out the DeleteBucketReplication method")
// 			},
// 			DeleteBucketReplicationRequestFunc: func(deleteBucketReplicationInput *s3.DeleteBucketReplicationInput) (*request.Request, *s3.DeleteBucketReplicationOutput) {
// 				panic("mock out the DeleteBucketReplicationRequest method")
// 			},
// 			DeleteBucketReplicationWithContextFunc: func(contextMoqParam context.Context, deleteBucketReplicationInput *s3.DeleteBucketReplicationInput, options ...request.Option) (*s3.DeleteBucketReplicationOutput, error) {
// 				panic("mock out the DeleteBucketReplicationWithContext method")
// 			},
// 			DeleteBucketRequestFunc: func(deleteBucketInput *s3.DeleteBucketInput) (*request.Request, *s3.DeleteBucketOutput) {
// 				panic("mock out the DeleteBucketRequest method")
// 			},
// 			DeleteBucketTaggingFunc: func(deleteBucketTaggingInput *s3.DeleteBucketTaggingInput) (*s3.DeleteBucketTaggingOutput, error) {
// 				panic("mock out the DeleteBucketTagging method")
// 			},
// 			DeleteBucketTaggingRequestFunc: func(deleteBucketTaggingInput *s3.DeleteBucketTaggingInput) (*request.Request, *s3.DeleteBucketTaggingOutput) {
// 				panic("mock out the DeleteBucketTaggingRequest method")
// 			},
// 			DeleteBucketTaggingWithContextFunc: func(contextMoqParam context.Context, deleteBucketTaggingInput *s3.DeleteBucketTaggingInput, options ...request.Option) (*s3.DeleteBucketTaggingOutput, error) {
// 				panic("mock out the DeleteBucketTaggingWithContext method")
// 			},
// 			DeleteBucketWebsiteFunc: func(deleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput) (*s3.DeleteBucketWebsiteOutput, error) {
// 				panic("mock out the DeleteBucketWebsite method")
// 			},
// 			DeleteBucketWebsiteRequestFunc: func(deleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput) (*request.Request, *s3.DeleteBucketWebsiteOutput) {
// 				panic("mock out the DeleteBucketWebsiteRequest method")
// 			},
// 			DeleteBucketWebsiteWithContextFunc: func(contextMoqParam context.Context, deleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput, options ...request.Option) (*s3.DeleteBucketWebsiteOutput, error) {
// 				panic("mock out the DeleteBucketWebsiteWithContext method")
// 			},
// 			DeleteBucketWithContextFunc: func(contextMoqParam context.Context, deleteBucketInput *s3.DeleteBucketInput, options ...request.Option) (*s3.DeleteBucketOutput, error) {
// 				panic("mock out the DeleteBucketWithContext method")
// 			},
// 			DeleteObjectFunc: func(deleteObjectInput *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
// 				panic("mock out the DeleteObject method")
// 			},
// 			DeleteObjectRequestFunc: func(deleteObjectInput *s3.DeleteObjectInput) (*request.Request, *s3.DeleteObjectOutput) {
// 				panic("mock out the DeleteObjectRequest method")
// 			},
// 			DeleteObjectTaggingFunc: func(deleteObjectTaggingInput *s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error) {
// 				panic("mock out the DeleteObjectTagging method")
// 			},
// 			DeleteObjectTaggingRequestFunc: func(deleteObjectTaggingInput *s3.DeleteObjectTaggingInput) (*request.Request, *s3.DeleteObjectTaggingOutput) {
// 				panic("mock out the DeleteObjectTaggingRequest method")
// 			},
// 			DeleteObjectTaggingWithContextFunc: func(contextMoqParam context.Context, deleteObjectTaggingInput *s3.DeleteObjectTaggingInput, options ...request.Option) (*s3.DeleteObjectTaggingOutput, error) {
// 				panic("mock out the DeleteObjectTaggingWithContext method")
// 			},
// 			DeleteObjectWithContextFunc: func(contextMoqParam context.Context, deleteObjectInput *s3.DeleteObjectInput, options ...request.Option) (*s3.DeleteObjectOutput, error) {
// 				panic("mock out the DeleteObjectWithContext method")
// 			},
// 			DeleteObjectsFunc: func(deleteObjectsInput *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error) {
// 				panic("mock out the DeleteObjects method")
// 			},
// 			DeleteObjectsRequestFunc: func(deleteObjectsInput *s3.DeleteObjectsInput) (*request.Request, *s3.DeleteObjectsOutput) {
// 				panic("mock out the DeleteObjectsRequest method")
// 			},
// 			DeleteObjectsWithContextFunc: func(contextMoqParam context.Context, deleteObjectsInput *s3.DeleteObjectsInput, options ...request.Option) (*s3.DeleteObjectsOutput, error) {
// 				panic("mock out the DeleteObjectsWithContext method")
// 			},
// 			DeletePublicAccessBlockFunc: func(deletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput) (*s3.DeletePublicAccessBlockOutput, error) {
// 				panic("mock out the DeletePublicAccessBlock method")
// 			},
// 			DeletePublicAccessBlockRequestFunc: func(deletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput) (*request.Request, *s3.DeletePublicAccessBlockOutput) {
// 				panic("mock out the DeletePublicAccessBlockRequest method")
// 			},
// 			DeletePublicAccessBlockWithContextFunc: func(contextMoqParam context.Context, deletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput, options ...request.Option) (*s3.DeletePublicAccessBlockOutput, error) {
// 				panic("mock out the DeletePublicAccessBlockWithContext method")
// 			},
// 			GetBucketAccelerateConfigurationFunc: func(getBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput) (*s3.GetBucketAccelerateConfigurationOutput, error) {
// 				panic("mock out the GetBucketAccelerateConfiguration method")
// 			},
// 			GetBucketAccelerateConfigurationRequestFunc: func(getBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput) (*request.Request, *s3.GetBucketAccelerateConfigurationOutput) {
// 				panic("mock out the GetBucketAccelerateConfigurationRequest method")
// 			},
// 			GetBucketAccelerateConfigurationWithContextFunc: func(contextMoqParam context.Context, getBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput, options ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error) {
// 				panic("mock out the GetBucketAccelerateConfigurationWithContext method")
// 			},
// 			GetBucketAclFunc: func(getBucketAclInput *s3.GetBucketAclInput) (*s3.GetBucketAclOutput, error) {
// 				panic("mock out the GetBucketAcl method")
// 			},
// 			GetBucketAclRequestFunc: func(getBucketAclInput *s3.GetBucketAclInput) (*request.Request, *s3.GetBucketAclOutput) {
// 				panic("mock out the GetBucketAclRequest method")
// 			},
// 			GetBucketAclWithContextFunc: func(contextMoqParam context.Context, getBucketAclInput *s3.GetBucketAclInput, options ...request.Option) (*s3.GetBucketAclOutput, error) {
// 				panic("mock out the GetBucketAclWithContext method")
// 			},
// 			GetBucketAnalyticsConfigurationFunc: func(getBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
// 				panic("mock out the GetBucketAnalyticsConfiguration method")
// 			},
// 			GetBucketAnalyticsConfigurationRequestFunc: func(getBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput) (*request.Request, *s3.GetBucketAnalyticsConfigurationOutput) {
// 				panic("mock out the GetBucketAnalyticsConfigurationRequest method")
// 			},
// 			GetBucketAnalyticsConfigurationWithContextFunc: func(contextMoqParam context.Context, getBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput, options ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
// 				panic("mock out the GetBucketAnalyticsConfigurationWithContext method")
// 			},
// 			GetBucketCorsFunc: func(getBucketCorsInput *s3.GetBucketCorsInput) (*s3.GetBucketCorsOutput, error) {
// 				panic("mock out the GetBucketCors method")
// 			},
// 			GetBucketCorsRequestFunc: func(getBucketCorsInput *s3.GetBucketCorsInput) (*request.Request, *s3.GetBucketCorsOutput) {
// 				panic("mock out the GetBucketCorsRequest method")
// 			},
// 			GetBucketCorsWithContextFunc: func(contextMoqParam context.Context, getBucketCorsInput *s3.GetBucketCorsInput, options ...request.Option) (*s3.GetBucketCorsOutput, error) {
// 				panic("mock out the GetBucketCorsWithContext method")
// 			},
// 			GetBucketEncryptionFunc: func(getBucketEncryptionInput *s3.GetBucketEncryptionInput) (*s3.GetBucketEncryptionOutput, error) {
// 				panic("mock out the GetBucketEncryption method")
// 			},
// 			GetBucketEncryptionRequestFunc: func(getBucketEncryptionInput *s3.GetBucketEncryptionInput) (*request.Request, *s3.GetBucketEncryptionOutput) {
// 				panic("mock out the GetBucketEncryptionRequest method")
// 			},
// 			GetBucketEncryptionWithContextFunc: func(contextMoqParam context.Context, getBucketEncryptionInput *s3.GetBucketEncryptionInput, options ...request.Option) (*s3.GetBucketEncryptionOutput, error) {
// 				panic("mock out the GetBucketEncryptionWithContext method")
// 			},
// 			GetBucketIntelligentTieringConfigurationFunc: func(getBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput) (*s3.GetBucketIntelligentTieringConfigurationOutput, error) {
// 				panic("mock out the GetBucketIntelligentTieringConfiguration method")
// 			},
// 			GetBucketIntelligentTieringConfigurationRequestFunc: func(getBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput) (*request.Request, *s3.GetBucketIntelligentTieringConfigurationOutput) {
// 				panic("mock out the GetBucketIntelligentTieringConfigurationRequest method")
// 			},
// 			GetBucketIntelligentTieringConfigurationWithContextFunc: func(contextMoqParam context.Context, getBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput, options ...request.Option) (*s3.GetBucketIntelligentTieringConfigurationOutput, error) {
// 				panic("mock out the GetBucketIntelligentTieringConfigurationWithContext method")
// 			},
// 			GetBucketInventoryConfigurationFunc: func(getBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput) (*s3.GetBucketInventoryConfigurationOutput, error) {
// 				panic("mock out the GetBucketInventoryConfiguration method")
// 			},
// 			GetBucketInventoryConfigurationRequestFunc: func(getBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput) (*request.Request, *s3.GetBucketInventoryConfigurationOutput) {
// 				panic("mock out the GetBucketInventoryConfigurationRequest method")
// 			},
// 			GetBucketInventoryConfigurationWithContextFunc: func(contextMoqParam context.Context, getBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput, options ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error) {
// 				panic("mock out the GetBucketInventoryConfigurationWithContext method")
// 			},
// 			GetBucketLifecycleFunc: func(getBucketLifecycleInput *s3.GetBucketLifecycleInput) (*s3.GetBucketLifecycleOutput, error) {
// 				panic("mock out the GetBucketLifecycle method")
// 			},
// 			GetBucketLifecycleConfigurationFunc: func(getBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput) (*s3.GetBucketLifecycleConfigurationOutput, error) {
// 				panic("mock out the GetBucketLifecycleConfiguration method")
// 			},
// 			GetBucketLifecycleConfigurationRequestFunc: func(getBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput) (*request.Request, *s3.GetBucketLifecycleConfigurationOutput) {
// 				panic("mock out the GetBucketLifecycleConfigurationRequest method")
// 			},
// 			GetBucketLifecycleConfigurationWithContextFunc: func(contextMoqParam context.Context, getBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput, options ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error) {
// 				panic("mock out the GetBucketLifecycleConfigurationWithContext method")
// 			},
// 			GetBucketLifecycleRequestFunc: func(getBucketLifecycleInput *s3.GetBucketLifecycleInput) (*request.Request, *s3.GetBucketLifecycleOutput) {
// 				panic("mock out the GetBucketLifecycleRequest method")
// 			},
// 			GetBucketLifecycleWithContextFunc: func(contextMoqParam context.Context, getBucketLifecycleInput *s3.GetBucketLifecycleInput, options ...request.Option) (*s3.GetBucketLifecycleOutput, error) {
// 				panic("mock out the GetBucketLifecycleWithContext method")
// 			},
// 			GetBucketLocationFunc: func(getBucketLocationInput *s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error) {
// 				panic("mock out the GetBucketLocation method")
// 			},
// 			GetBucketLocationRequestFunc: func(getBucketLocationInput *s3.GetBucketLocationInput) (*request.Request, *s3.GetBucketLocationOutput) {
// 				panic("mock out the GetBucketLocationRequest method")
// 			},
// 			GetBucketLocationWithContextFunc: func(contextMoqParam context.Context, getBucketLocationInput *s3.GetBucketLocationInput, options ...request.Option) (*s3.GetBucketLocationOutput, error) {
// 				panic("mock out the GetBucketLocationWithContext method")
// 			},
// 			GetBucketLoggingFunc: func(getBucketLoggingInput *s3.GetBucketLoggingInput) (*s3.GetBucketLoggingOutput, error) {
// 				panic("mock out the GetBucketLogging method")
// 			},
// 			GetBucketLoggingRequestFunc: func(getBucketLoggingInput *s3.GetBucketLoggingInput) (*request.Request, *s3.GetBucketLoggingOutput) {
// 				panic("mock out the GetBucketLoggingRequest method")
// 			},
// 			GetBucketLoggingWithContextFunc: func(contextMoqParam context.Context, getBucketLoggingInput *s3.GetBucketLoggingInput, options ...request.Option) (*s3.GetBucketLoggingOutput, error) {
// 				panic("mock out the GetBucketLoggingWithContext method")
// 			},
// 			GetBucketMetricsConfigurationFunc: func(getBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput) (*s3.GetBucketMetricsConfigurationOutput, error) {
// 				panic("mock out the GetBucketMetricsConfiguration method")
// 			},
// 			GetBucketMetricsConfigurationRequestFunc: func(getBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput) (*request.Request, *s3.GetBucketMetricsConfigurationOutput) {
// 				panic("mock out the GetBucketMetricsConfigurationRequest method")
// 			},
// 			GetBucketMetricsConfigurationWithContextFunc: func(contextMoqParam context.Context, getBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput, options ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error) {
// 				panic("mock out the GetBucketMetricsConfigurationWithContext method")
// 			},
// 			GetBucketNotificationFunc: func(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfigurationDeprecated, error) {
// 				panic("mock out the GetBucketNotification method")
// 			},
// 			GetBucketNotificationConfigurationFunc: func(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfiguration, error) {
// 				panic("mock out the GetBucketNotificationConfiguration method")
// 			},
// 			GetBucketNotificationConfigurationRequestFunc: func(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfiguration) {
// 				panic("mock out the GetBucketNotificationConfigurationRequest method")
// 			},
// 			GetBucketNotificationConfigurationWithContextFunc: func(contextMoqParam context.Context, getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest, options ...request.Option) (*s3.NotificationConfiguration, error) {
// 				panic("mock out the GetBucketNotificationConfigurationWithContext method")
// 			},
// 			GetBucketNotificationRequestFunc: func(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfigurationDeprecated) {
// 				panic("mock out the GetBucketNotificationRequest method")
// 			},
// 			GetBucketNotificationWithContextFunc: func(contextMoqParam context.Context, getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest, options ...request.Option) (*s3.NotificationConfigurationDeprecated, error) {
// 				panic("mock out the GetBucketNotificationWithContext method")
// 			},
// 			GetBucketOwnershipControlsFunc: func(getBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput) (*s3.GetBucketOwnershipControlsOutput, error) {
// 				panic("mock out the GetBucketOwnershipControls method")
// 			},
// 			GetBucketOwnershipControlsRequestFunc: func(getBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput) (*request.Request, *s3.GetBucketOwnershipControlsOutput) {
// 				panic("mock out the GetBucketOwnershipControlsRequest method")
// 			},
// 			GetBucketOwnershipControlsWithContextFunc: func(contextMoqParam context.Context, getBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput, options ...request.Option) (*s3.GetBucketOwnershipControlsOutput, error) {
// 				panic("mock out the GetBucketOwnershipControlsWithContext method")
// 			},
// 			GetBucketPolicyFunc: func(getBucketPolicyInput *s3.GetBucketPolicyInput) (*s3.GetBucketPolicyOutput, error) {
// 				panic("mock out the GetBucketPolicy method")
// 			},
// 			GetBucketPolicyRequestFunc: func(getBucketPolicyInput *s3.GetBucketPolicyInput) (*request.Request, *s3.GetBucketPolicyOutput) {
// 				panic("mock out the GetBucketPolicyRequest method")
// 			},
// 			GetBucketPolicyStatusFunc: func(getBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput) (*s3.GetBucketPolicyStatusOutput, error) {
// 				panic("mock out the GetBucketPolicyStatus method")
// 			},
// 			GetBucketPolicyStatusRequestFunc: func(getBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput) (*request.Request, *s3.GetBucketPolicyStatusOutput) {
// 				panic("mock out the GetBucketPolicyStatusRequest method")
// 			},
// 			GetBucketPolicyStatusWithContextFunc: func(contextMoqParam context.Context, getBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput, options ...request.Option) (*s3.GetBucketPolicyStatusOutput, error) {
// 				panic("mock out the GetBucketPolicyStatusWithContext method")
// 			},
// 			GetBucketPolicyWithContextFunc: func(contextMoqParam context.Context, getBucketPolicyInput *s3.GetBucketPolicyInput, options ...request.Option) (*s3.GetBucketPolicyOutput, error) {
// 				panic("mock out the GetBucketPolicyWithContext method")
// 			},
// 			GetBucketReplicationFunc: func(getBucketReplicationInput *s3.GetBucketReplicationInput) (*s3.GetBucketReplicationOutput, error) {
// 				panic("mock out the GetBucketReplication method")
// 			},
// 			GetBucketReplicationRequestFunc: func(getBucketReplicationInput *s3.GetBucketReplicationInput) (*request.Request, *s3.GetBucketReplicationOutput) {
// 				panic("mock out the GetBucketReplicationRequest method")
// 			},
// 			GetBucketReplicationWithContextFunc: func(contextMoqParam context.Context, getBucketReplicationInput *s3.GetBucketReplicationInput, options ...request.Option) (*s3.GetBucketReplicationOutput, error) {
// 				panic("mock out the GetBucketReplicationWithContext method")
// 			},
// 			GetBucketRequestPaymentFunc: func(getBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput) (*s3.GetBucketRequestPaymentOutput, error) {
// 				panic("mock out the GetBucketRequestPayment method")
// 			},
// 			GetBucketRequestPaymentRequestFunc: func(getBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput) (*request.Request, *s3.GetBucketRequestPaymentOutput) {
// 				panic("mock out the GetBucketRequestPaymentRequest method")
// 			},
// 			GetBucketRequestPaymentWithContextFunc: func(contextMoqParam context.Context, getBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput, options ...request.Option) (*s3.GetBucketRequestPaymentOutput, error) {
// 				panic("mock out the GetBucketRequestPaymentWithContext method")
// 			},
// 			GetBucketTaggingFunc: func(getBucketTaggingInput *s3.GetBucketTaggingInput) (*s3.GetBucketTaggingOutput, error) {
// 				panic("mock out the GetBucketTagging method")
// 			},
// 			GetBucketTaggingRequestFunc: func(getBucketTaggingInput *s3.GetBucketTaggingInput) (*request.Request, *s3.GetBucketTaggingOutput) {
// 				panic("mock out the GetBucketTaggingRequest method")
// 			},
// 			GetBucketTaggingWithContextFunc: func(contextMoqParam context.Context, getBucketTaggingInput *s3.GetBucketTaggingInput, options ...request.Option) (*s3.GetBucketTaggingOutput, error) {
// 				panic("mock out the GetBucketTaggingWithContext method")
// 			},
// 			GetBucketVersioningFunc: func(getBucketVersioningInput *s3.GetBucketVersioningInput) (*s3.GetBucketVersioningOutput, error) {
// 				panic("mock out the GetBucketVersioning method")
// 			},
// 			GetBucketVersioningRequestFunc: func(getBucketVersioningInput *s3.GetBucketVersioningInput) (*request.Request, *s3.GetBucketVersioningOutput) {
// 				panic("mock out the GetBucketVersioningRequest method")
// 			},
// 			GetBucketVersioningWithContextFunc: func(contextMoqParam context.Context, getBucketVersioningInput *s3.GetBucketVersioningInput, options ...request.Option) (*s3.GetBucketVersioningOutput, error) {
// 				panic("mock out the GetBucketVersioningWithContext method")
// 			},
// 			GetBucketWebsiteFunc: func(getBucketWebsiteInput *s3.GetBucketWebsiteInput) (*s3.GetBucketWebsiteOutput, error) {
// 				panic("mock out the GetBucketWebsite method")
// 			},
// 			GetBucketWebsiteRequestFunc: func(getBucketWebsiteInput *s3.GetBucketWebsiteInput) (*request.Request, *s3.GetBucketWebsiteOutput) {
// 				panic("mock out the GetBucketWebsiteRequest method")
// 			},
// 			GetBucketWebsiteWithContextFunc: func(contextMoqParam context.Context, getBucketWebsiteInput *s3.GetBucketWebsiteInput, options ...request.Option) (*s3.GetBucketWebsiteOutput, error) {
// 				panic("mock out the GetBucketWebsiteWithContext method")
// 			},
// 			GetObjectFunc: func(getObjectInput *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
// 				panic("mock out the GetObject method")
// 			},
// 			GetObjectAclFunc: func(getObjectAclInput *s3.GetObjectAclInput) (*s3.GetObjectAclOutput, error) {
// 				panic("mock out the GetObjectAcl method")
// 			},
// 			GetObjectAclRequestFunc: func(getObjectAclInput *s3.GetObjectAclInput) (*request.Request, *s3.GetObjectAclOutput) {
// 				panic("mock out the GetObjectAclRequest method")
// 			},
// 			GetObjectAclWithContextFunc: func(contextMoqParam context.Context, getObjectAclInput *s3.GetObjectAclInput, options ...request.Option) (*s3.GetObjectAclOutput, error) {
// 				panic("mock out the GetObjectAclWithContext method")
// 			},
// 			GetObjectAttributesFunc: func(getObjectAttributesInput *s3.GetObjectAttributesInput) (*s3.GetObjectAttributesOutput, error) {
// 				panic("mock out the GetObjectAttributes method")
// 			},
// 			GetObjectAttributesRequestFunc: func(getObjectAttributesInput *s3.GetObjectAttributesInput) (*request.Request, *s3.GetObjectAttributesOutput) {
// 				panic("mock out the GetObjectAttributesRequest method")
// 			},
// 			GetObjectAttributesWithContextFunc: func(contextMoqParam context.Context, getObjectAttributesInput *s3.GetObjectAttributesInput, options ...request.Option) (*s3.GetObjectAttributesOutput, error) {
// 				panic("mock out the GetObjectAttributesWithContext method")
// 			},
// 			GetObjectLegalHoldFunc: func(getObjectLegalHoldInput *s3.GetObjectLegalHoldInput) (*s3.GetObjectLegalHoldOutput, error) {
// 				panic("mock out the GetObjectLegalHold method")
// 			},
// 			GetObjectLegalHoldRequestFunc: func(getObjectLegalHoldInput *s3.GetObjectLegalHoldInput) (*request.Request, *s3.GetObjectLegalHoldOutput) {
// 				panic("mock out the GetObjectLegalHoldRequest method")
// 			},
// 			GetObjectLegalHoldWithContextFunc: func(contextMoqParam context.Context, getObjectLegalHoldInput *s3.GetObjectLegalHoldInput, options ...request.Option) (*s3.GetObjectLegalHoldOutput, error) {
// 				panic("mock out the GetObjectLegalHoldWithContext method")
// 			},
// 			GetObjectLockConfigurationFunc: func(getObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput) (*s3.GetObjectLockConfigurationOutput, error) {
// 				panic("mock out the GetObjectLockConfiguration method")
// 			},
// 			GetObjectLockConfigurationRequestFunc: func(getObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput) (*request.Request, *s3.GetObjectLockConfigurationOutput) {
// 				panic("mock out the GetObjectLockConfigurationRequest method")
// 			},
// 			GetObjectLockConfigurationWithContextFunc: func(contextMoqParam context.Context, getObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput, options ...request.Option) (*s3.GetObjectLockConfigurationOutput, error) {
// 				panic("mock out the GetObjectLockConfigurationWithContext method")
// 			},
// 			GetObjectRequestFunc: func(getObjectInput *s3.GetObjectInput) (*request.Request, *s3.GetObjectOutput) {
// 				panic("mock out the GetObjectRequest method")
// 			},
// 			GetObjectRetentionFunc: func(getObjectRetentionInput *s3.GetObjectRetentionInput) (*s3.GetObjectRetentionOutput, error) {
// 				panic("mock out the GetObjectRetention method")
// 			},
// 			GetObjectRetentionRequestFunc: func(getObjectRetentionInput *s3.GetObjectRetentionInput) (*request.Request, *s3.GetObjectRetentionOutput) {
// 				panic("mock out the GetObjectRetentionRequest method")
// 			},
// 			GetObjectRetentionWithContextFunc: func(contextMoqParam context.Context, getObjectRetentionInput *s3.GetObjectRetentionInput, options ...request.Option) (*s3.GetObjectRetentionOutput, error) {
// 				panic("mock out the GetObjectRetentionWithContext method")
// 			},
// 			GetObjectTaggingFunc: func(getObjectTaggingInput *s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error) {
// 				panic("mock out the GetObjectTagging method")
// 			},
// 			GetObjectTaggingRequestFunc: func(getObjectTaggingInput *s3.GetObjectTaggingInput) (*request.Request, *s3.GetObjectTaggingOutput) {
// 				panic("mock out the GetObjectTaggingRequest method")
// 			},
// 			GetObjectTaggingWithContextFunc: func(contextMoqParam context.Context, getObjectTaggingInput *s3.GetObjectTaggingInput, options ...request.Option) (*s3.GetObjectTaggingOutput, error) {
// 				panic("mock out the GetObjectTaggingWithContext method")
// 			},
// 			GetObjectTorrentFunc: func(getObjectTorrentInput *s3.GetObjectTorrentInput) (*s3.GetObjectTorrentOutput, error) {
// 				panic("mock out the GetObjectTorrent method")
// 			},
// 			GetObjectTorrentRequestFunc: func(getObjectTorrentInput *s3.GetObjectTorrentInput) (*request.Request, *s3.GetObjectTorrentOutput) {
// 				panic("mock out the GetObjectTorrentRequest method")
// 			},
// 			GetObjectTorrentWithContextFunc: func(contextMoqParam context.Context, getObjectTorrentInput *s3.GetObjectTorrentInput, options ...request.Option) (*s3.GetObjectTorrentOutput, error) {
// 				panic("mock out the GetObjectTorrentWithContext method")
// 			},
// 			GetObjectWithContextFunc: func(contextMoqParam context.Context, getObjectInput *s3.GetObjectInput, options ...request.Option) (*s3.GetObjectOutput, error) {
// 				panic("mock out the GetObjectWithContext method")
// 			},
// 			GetPublicAccessBlockFunc: func(getPublicAccessBlockInput *s3.GetPublicAccessBlockInput) (*s3.GetPublicAccessBlockOutput, error) {
// 				panic("mock out the GetPublicAccessBlock method")
// 			},
// 			GetPublicAccessBlockRequestFunc: func(getPublicAccessBlockInput *s3.GetPublicAccessBlockInput) (*request.Request, *s3.GetPublicAccessBlockOutput) {
// 				panic("mock out the GetPublicAccessBlockRequest method")
// 			},
// 			GetPublicAccessBlockWithContextFunc: func(contextMoqParam context.Context, getPublicAccessBlockInput *s3.GetPublicAccessBlockInput, options ...request.Option) (*s3.GetPublicAccessBlockOutput, error) {
// 				panic("mock out the GetPublicAccessBlockWithContext method")
// 			},
// 			HeadBucketFunc: func(headBucketInput *s3.HeadBucketInput) (*s3.HeadBucketOutput, error) {
// 				panic("mock out the HeadBucket method")
// 			},
// 			HeadBucketRequestFunc: func(headBucketInput *s3.HeadBucketInput) (*request.Request, *s3.HeadBucketOutput) {
// 				panic("mock out the HeadBucketRequest method")
// 			},
// 			HeadBucketWithContextFunc: func(contextMoqParam context.Context, headBucketInput *s3.HeadBucketInput, options ...request.Option) (*s3.HeadBucketOutput, error) {
// 				panic("mock out the HeadBucketWithContext method")
// 			},
// 			HeadObjectFunc: func(headObjectInput *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
// 				panic("mock out the HeadObject method")
// 			},
// 			HeadObjectRequestFunc: func(headObjectInput *s3.HeadObjectInput) (*request.Request, *s3.HeadObjectOutput) {
// 				panic("mock out the HeadObjectRequest method")
// 			},
// 			HeadObjectWithContextFunc: func(contextMoqParam context.Context, headObjectInput *s3.HeadObjectInput, options ...request.Option) (*s3.HeadObjectOutput, error) {
// 				panic("mock out the HeadObjectWithContext method")
// 			},
// 			ListBucketAnalyticsConfigurationsFunc: func(listBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
// 				panic("mock out the ListBucketAnalyticsConfigurations method")
// 			},
// 			ListBucketAnalyticsConfigurationsRequestFunc: func(listBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput) (*request.Request, *s3.ListBucketAnalyticsConfigurationsOutput) {
// 				panic("mock out the ListBucketAnalyticsConfigurationsRequest method")
// 			},
// 			ListBucketAnalyticsConfigurationsWithContextFunc: func(contextMoqParam context.Context, listBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput, options ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
// 				panic("mock out the ListBucketAnalyticsConfigurationsWithContext method")
// 			},
// 			ListBucketIntelligentTieringConfigurationsFunc: func(listBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error) {
// 				panic("mock out the ListBucketIntelligentTieringConfigurations method")
// 			},
// 			ListBucketIntelligentTieringConfigurationsRequestFunc: func(listBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput) (*request.Request, *s3.ListBucketIntelligentTieringConfigurationsOutput) {
// 				panic("mock out the ListBucketIntelligentTieringConfigurationsRequest method")
// 			},
// 			ListBucketIntelligentTieringConfigurationsWithContextFunc: func(contextMoqParam context.Context, listBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput, options ...request.Option) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error) {
// 				panic("mock out the ListBucketIntelligentTieringConfigurationsWithContext method")
// 			},
// 			ListBucketInventoryConfigurationsFunc: func(listBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput) (*s3.ListBucketInventoryConfigurationsOutput, error) {
// 				panic("mock out the ListBucketInventoryConfigurations method")
// 			},
// 			ListBucketInventoryConfigurationsRequestFunc: func(listBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput) (*request.Request, *s3.ListBucketInventoryConfigurationsOutput) {
// 				panic("mock out the ListBucketInventoryConfigurationsRequest method")
// 			},
// 			ListBucketInventoryConfigurationsWithContextFunc: func(contextMoqParam context.Context, listBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput, options ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error) {
// 				panic("mock out the ListBucketInventoryConfigurationsWithContext method")
// 			},
// 			ListBucketMetricsConfigurationsFunc: func(listBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput) (*s3.ListBucketMetricsConfigurationsOutput, error) {
// 				panic("mock out the ListBucketMetricsConfigurations method")
// 			},
// 			ListBucketMetricsConfigurationsRequestFunc: func(listBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput) (*request.Request, *s3.ListBucketMetricsConfigurationsOutput) {
// 				panic("mock out the ListBucketMetricsConfigurationsRequest method")
// 			},
// 			ListBucketMetricsConfigurationsWithContextFunc: func(contextMoqParam context.Context, listBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput, options ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error) {
// 				panic("mock out the ListBucketMetricsConfigurationsWithContext method")
// 			},
// 			ListBucketsFunc: func(listBucketsInput *s3.ListBucketsInput) (*s3.ListBucketsOutput, error) {
// 				panic("mock out the ListBuckets method")
// 			},
// 			ListBucketsRequestFunc: func(listBucketsInput *s3.ListBucketsInput) (*request.Request, *s3.ListBucketsOutput) {
// 				panic("mock out the ListBucketsRequest method")
// 			},
// 			ListBucketsWithContextFunc: func(contextMoqParam context.Context, listBucketsInput *s3.ListBucketsInput, options ...request.Option) (*s3.ListBucketsOutput, error) {
// 				panic("mock out the ListBucketsWithContext method")
// 			},
// 			ListMultipartUploadsFunc: func(listMultipartUploadsInput *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error) {
// 				panic("mock out the ListMultipartUploads method")
// 			},
// 			ListMultipartUploadsPagesFunc: func(listMultipartUploadsInput *s3.ListMultipartUploadsInput, fn func(*s3.ListMultipartUploadsOutput, bool) bool) error {
// 				panic("mock out the ListMultipartUploadsPages method")
// 			},
// 			ListMultipartUploadsPagesWithContextFunc: func(contextMoqParam context.Context, listMultipartUploadsInput *s3.ListMultipartUploadsInput, fn func(*s3.ListMultipartUploadsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the ListMultipartUploadsPagesWithContext method")
// 			},
// 			ListMultipartUploadsRequestFunc: func(listMultipartUploadsInput *s3.ListMultipartUploadsInput) (*request.Request, *s3.ListMultipartUploadsOutput) {
// 				panic("mock out the ListMultipartUploadsRequest method")
// 			},
// 			ListMultipartUploadsWithContextFunc: func(contextMoqParam context.Context, listMultipartUploadsInput *s3.ListMultipartUploadsInput, options ...request.Option) (*s3.ListMultipartUploadsOutput, error) {
// 				panic("mock out the ListMultipartUploadsWithContext method")
// 			},
// 			ListObjectVersionsFunc: func(listObjectVersionsInput *s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error) {
// 				panic("mock out the ListObjectVersions method")
// 			},
// 			ListObjectVersionsPagesFunc: func(listObjectVersionsInput *s3.ListObjectVersionsInput, fn func(*s3.ListObjectVersionsOutput, bool) bool) error {
// 				panic("mock out the ListObjectVersionsPages method")
// 			},
// 			ListObjectVersionsPagesWithContextFunc: func(contextMoqParam context.Context, listObjectVersionsInput *s3.ListObjectVersionsInput, fn func(*s3.ListObjectVersionsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the ListObjectVersionsPagesWithContext method")
// 			},
// 			ListObjectVersionsRequestFunc: func(listObjectVersionsInput *s3.ListObjectVersionsInput) (*request.Request, *s3.ListObjectVersionsOutput) {
// 				panic("mock out the ListObjectVersionsRequest method")
// 			},
// 			ListObjectVersionsWithContextFunc: func(contextMoqParam context.Context, listObjectVersionsInput *s3.ListObjectVersionsInput, options ...request.Option) (*s3.ListObjectVersionsOutput, error) {
// 				panic("mock out the ListObjectVersionsWithContext method")
// 			},
// 			ListObjectsFunc: func(listObjectsInput *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {
// 				panic("mock out the ListObjects method")
// 			},
// 			ListObjectsPagesFunc: func(listObjectsInput *s3.ListObjectsInput, fn func(*s3.ListObjectsOutput, bool) bool) error {
// 				panic("mock out the ListObjectsPages method")
// 			},
// 			ListObjectsPagesWithContextFunc: func(contextMoqParam context.Context, listObjectsInput *s3.ListObjectsInput, fn func(*s3.ListObjectsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the ListObjectsPagesWithContext method")
// 			},
// 			ListObjectsRequestFunc: func(listObjectsInput *s3.ListObjectsInput) (*request.Request, *s3.ListObjectsOutput) {
// 				panic("mock out the ListObjectsRequest method")
// 			},
// 			ListObjectsV2Func: func(listObjectsV2Input *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error) {
// 				panic("mock out the ListObjectsV2 method")
// 			},
// 			ListObjectsV2PagesFunc: func(listObjectsV2Input *s3.ListObjectsV2Input, fn func(*s3.ListObjectsV2Output, bool) bool) error {
// 				panic("mock out the ListObjectsV2Pages method")
// 			},
// 			ListObjectsV2PagesWithContextFunc: func(contextMoqParam context.Context, listObjectsV2Input *s3.ListObjectsV2Input, fn func(*s3.ListObjectsV2Output, bool) bool, options ...request.Option) error {
// 				panic("mock out the ListObjectsV2PagesWithContext method")
// 			},
// 			ListObjectsV2RequestFunc: func(listObjectsV2Input *s3.ListObjectsV2Input) (*request.Request, *s3.ListObjectsV2Output) {
// 				panic("mock out the ListObjectsV2Request method")
// 			},
// 			ListObjectsV2WithContextFunc: func(contextMoqParam context.Context, listObjectsV2Input *s3.ListObjectsV2Input, options ...request.Option) (*s3.ListObjectsV2Output, error) {
// 				panic("mock out the ListObjectsV2WithContext method")
// 			},
// 			ListObjectsWithContextFunc: func(contextMoqParam context.Context, listObjectsInput *s3.ListObjectsInput, options ...request.Option) (*s3.ListObjectsOutput, error) {
// 				panic("mock out the ListObjectsWithContext method")
// 			},
// 			ListPartsFunc: func(listPartsInput *s3.ListPartsInput) (*s3.ListPartsOutput, error) {
// 				panic("mock out the ListParts method")
// 			},
// 			ListPartsPagesFunc: func(listPartsInput *s3.ListPartsInput, fn func(*s3.ListPartsOutput, bool) bool) error {
// 				panic("mock out the ListPartsPages method")
// 			},
// 			ListPartsPagesWithContextFunc: func(contextMoqParam context.Context, listPartsInput *s3.ListPartsInput, fn func(*s3.ListPartsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the ListPartsPagesWithContext method")
// 			},
// 			ListPartsRequestFunc: func(listPartsInput *s3.ListPartsInput) (*request.Request, *s3.ListPartsOutput) {
// 				panic("mock out the ListPartsRequest method")
// 			},
// 			ListPartsWithContextFunc: func(contextMoqParam context.Context, listPartsInput *s3.ListPartsInput, options ...request.Option) (*s3.ListPartsOutput, error) {
// 				panic("mock out the ListPartsWithContext method")
// 			},
// 			PutBucketAccelerateConfigurationFunc: func(putBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput) (*s3.PutBucketAccelerateConfigurationOutput, error) {
// 				panic("mock out the PutBucketAccelerateConfiguration method")
// 			},
// 			PutBucketAccelerateConfigurationRequestFunc: func(putBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput) (*request.Request, *s3.PutBucketAccelerateConfigurationOutput) {
// 				panic("mock out the PutBucketAccelerateConfigurationRequest method")
// 			},
// 			PutBucketAccelerateConfigurationWithContextFunc: func(contextMoqParam context.Context, putBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput, options ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error) {
// 				panic("mock out the PutBucketAccelerateConfigurationWithContext method")
// 			},
// 			PutBucketAclFunc: func(putBucketAclInput *s3.PutBucketAclInput) (*s3.PutBucketAclOutput, error) {
// 				panic("mock out the PutBucketAcl method")
// 			},
// 			PutBucketAclRequestFunc: func(putBucketAclInput *s3.PutBucketAclInput) (*request.Request, *s3.PutBucketAclOutput) {
// 				panic("mock out the PutBucketAclRequest method")
// 			},
// 			PutBucketAclWithContextFunc: func(contextMoqParam context.Context, putBucketAclInput *s3.PutBucketAclInput, options ...request.Option) (*s3.PutBucketAclOutput, error) {
// 				panic("mock out the PutBucketAclWithContext method")
// 			},
// 			PutBucketAnalyticsConfigurationFunc: func(putBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
// 				panic("mock out the PutBucketAnalyticsConfiguration method")
// 			},
// 			PutBucketAnalyticsConfigurationRequestFunc: func(putBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput) (*request.Request, *s3.PutBucketAnalyticsConfigurationOutput) {
// 				panic("mock out the PutBucketAnalyticsConfigurationRequest method")
// 			},
// 			PutBucketAnalyticsConfigurationWithContextFunc: func(contextMoqParam context.Context, putBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput, options ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
// 				panic("mock out the PutBucketAnalyticsConfigurationWithContext method")
// 			},
// 			PutBucketCorsFunc: func(putBucketCorsInput *s3.PutBucketCorsInput) (*s3.PutBucketCorsOutput, error) {
// 				panic("mock out the PutBucketCors method")
// 			},
// 			PutBucketCorsRequestFunc: func(putBucketCorsInput *s3.PutBucketCorsInput) (*request.Request, *s3.PutBucketCorsOutput) {
// 				panic("mock out the PutBucketCorsRequest method")
// 			},
// 			PutBucketCorsWithContextFunc: func(contextMoqParam context.Context, putBucketCorsInput *s3.PutBucketCorsInput, options ...request.Option) (*s3.PutBucketCorsOutput, error) {
// 				panic("mock out the PutBucketCorsWithContext method")
// 			},
// 			PutBucketEncryptionFunc: func(putBucketEncryptionInput *s3.PutBucketEncryptionInput) (*s3.PutBucketEncryptionOutput, error) {
// 				panic("mock out the PutBucketEncryption method")
// 			},
// 			PutBucketEncryptionRequestFunc: func(putBucketEncryptionInput *s3.PutBucketEncryptionInput) (*request.Request, *s3.PutBucketEncryptionOutput) {
// 				panic("mock out the PutBucketEncryptionRequest method")
// 			},
// 			PutBucketEncryptionWithContextFunc: func(contextMoqParam context.Context, putBucketEncryptionInput *s3.PutBucketEncryptionInput, options ...request.Option) (*s3.PutBucketEncryptionOutput, error) {
// 				panic("mock out the PutBucketEncryptionWithContext method")
// 			},
// 			PutBucketIntelligentTieringConfigurationFunc: func(putBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput) (*s3.PutBucketIntelligentTieringConfigurationOutput, error) {
// 				panic("mock out the PutBucketIntelligentTieringConfiguration method")
// 			},
// 			PutBucketIntelligentTieringConfigurationRequestFunc: func(putBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput) (*request.Request, *s3.PutBucketIntelligentTieringConfigurationOutput) {
// 				panic("mock out the PutBucketIntelligentTieringConfigurationRequest method")
// 			},
// 			PutBucketIntelligentTieringConfigurationWithContextFunc: func(contextMoqParam context.Context, putBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput, options ...request.Option) (*s3.PutBucketIntelligentTieringConfigurationOutput, error) {
// 				panic("mock out the PutBucketIntelligentTieringConfigurationWithContext method")
// 			},
// 			PutBucketInventoryConfigurationFunc: func(putBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput) (*s3.PutBucketInventoryConfigurationOutput, error) {
// 				panic("mock out the PutBucketInventoryConfiguration method")
// 			},
// 			PutBucketInventoryConfigurationRequestFunc: func(putBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput) (*request.Request, *s3.PutBucketInventoryConfigurationOutput) {
// 				panic("mock out the PutBucketInventoryConfigurationRequest method")
// 			},
// 			PutBucketInventoryConfigurationWithContextFunc: func(contextMoqParam context.Context, putBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput, options ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error) {
// 				panic("mock out the PutBucketInventoryConfigurationWithContext method")
// 			},
// 			PutBucketLifecycleFunc: func(putBucketLifecycleInput *s3.PutBucketLifecycleInput) (*s3.PutBucketLifecycleOutput, error) {
// 				panic("mock out the PutBucketLifecycle method")
// 			},
// 			PutBucketLifecycleConfigurationFunc: func(putBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
// 				panic("mock out the PutBucketLifecycleConfiguration method")
// 			},
// 			PutBucketLifecycleConfigurationRequestFunc: func(putBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput) (*request.Request, *s3.PutBucketLifecycleConfigurationOutput) {
// 				panic("mock out the PutBucketLifecycleConfigurationRequest method")
// 			},
// 			PutBucketLifecycleConfigurationWithContextFunc: func(contextMoqParam context.Context, putBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput, options ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error) {
// 				panic("mock out the PutBucketLifecycleConfigurationWithContext method")
// 			},
// 			PutBucketLifecycleRequestFunc: func(putBucketLifecycleInput *s3.PutBucketLifecycleInput) (*request.Request, *s3.PutBucketLifecycleOutput) {
// 				panic("mock out the PutBucketLifecycleRequest method")
// 			},
// 			PutBucketLifecycleWithContextFunc: func(contextMoqParam context.Context, putBucketLifecycleInput *s3.PutBucketLifecycleInput, options ...request.Option) (*s3.PutBucketLifecycleOutput, error) {
// 				panic("mock out the PutBucketLifecycleWithContext method")
// 			},
// 			PutBucketLoggingFunc: func(putBucketLoggingInput *s3.PutBucketLoggingInput) (*s3.PutBucketLoggingOutput, error) {
// 				panic("mock out the PutBucketLogging method")
// 			},
// 			PutBucketLoggingRequestFunc: func(putBucketLoggingInput *s3.PutBucketLoggingInput) (*request.Request, *s3.PutBucketLoggingOutput) {
// 				panic("mock out the PutBucketLoggingRequest method")
// 			},
// 			PutBucketLoggingWithContextFunc: func(contextMoqParam context.Context, putBucketLoggingInput *s3.PutBucketLoggingInput, options ...request.Option) (*s3.PutBucketLoggingOutput, error) {
// 				panic("mock out the PutBucketLoggingWithContext method")
// 			},
// 			PutBucketMetricsConfigurationFunc: func(putBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput) (*s3.PutBucketMetricsConfigurationOutput, error) {
// 				panic("mock out the PutBucketMetricsConfiguration method")
// 			},
// 			PutBucketMetricsConfigurationRequestFunc: func(putBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput) (*request.Request, *s3.PutBucketMetricsConfigurationOutput) {
// 				panic("mock out the PutBucketMetricsConfigurationRequest method")
// 			},
// 			PutBucketMetricsConfigurationWithContextFunc: func(contextMoqParam context.Context, putBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput, options ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error) {
// 				panic("mock out the PutBucketMetricsConfigurationWithContext method")
// 			},
// 			PutBucketNotificationFunc: func(putBucketNotificationInput *s3.PutBucketNotificationInput) (*s3.PutBucketNotificationOutput, error) {
// 				panic("mock out the PutBucketNotification method")
// 			},
// 			PutBucketNotificationConfigurationFunc: func(putBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput) (*s3.PutBucketNotificationConfigurationOutput, error) {
// 				panic("mock out the PutBucketNotificationConfiguration method")
// 			},
// 			PutBucketNotificationConfigurationRequestFunc: func(putBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput) (*request.Request, *s3.PutBucketNotificationConfigurationOutput) {
// 				panic("mock out the PutBucketNotificationConfigurationRequest method")
// 			},
// 			PutBucketNotificationConfigurationWithContextFunc: func(contextMoqParam context.Context, putBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput, options ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error) {
// 				panic("mock out the PutBucketNotificationConfigurationWithContext method")
// 			},
// 			PutBucketNotificationRequestFunc: func(putBucketNotificationInput *s3.PutBucketNotificationInput) (*request.Request, *s3.PutBucketNotificationOutput) {
// 				panic("mock out the PutBucketNotificationRequest method")
// 			},
// 			PutBucketNotificationWithContextFunc: func(contextMoqParam context.Context, putBucketNotificationInput *s3.PutBucketNotificationInput, options ...request.Option) (*s3.PutBucketNotificationOutput, error) {
// 				panic("mock out the PutBucketNotificationWithContext method")
// 			},
// 			PutBucketOwnershipControlsFunc: func(putBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput) (*s3.PutBucketOwnershipControlsOutput, error) {
// 				panic("mock out the PutBucketOwnershipControls method")
// 			},
// 			PutBucketOwnershipControlsRequestFunc: func(putBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput) (*request.Request, *s3.PutBucketOwnershipControlsOutput) {
// 				panic("mock out the PutBucketOwnershipControlsRequest method")
// 			},
// 			PutBucketOwnershipControlsWithContextFunc: func(contextMoqParam context.Context, putBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput, options ...request.Option) (*s3.PutBucketOwnershipControlsOutput, error) {
// 				panic("mock out the PutBucketOwnershipControlsWithContext method")
// 			},
// 			PutBucketPolicyFunc: func(putBucketPolicyInput *s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error) {
// 				panic("mock out the PutBucketPolicy method")
// 			},
// 			PutBucketPolicyRequestFunc: func(putBucketPolicyInput *s3.PutBucketPolicyInput) (*request.Request, *s3.PutBucketPolicyOutput) {
// 				panic("mock out the PutBucketPolicyRequest method")
// 			},
// 			PutBucketPolicyWithContextFunc: func(contextMoqParam context.Context, putBucketPolicyInput *s3.PutBucketPolicyInput, options ...request.Option) (*s3.PutBucketPolicyOutput, error) {
// 				panic("mock out the PutBucketPolicyWithContext method")
// 			},
// 			PutBucketReplicationFunc: func(putBucketReplicationInput *s3.PutBucketReplicationInput) (*s3.PutBucketReplicationOutput, error) {
// 				panic("mock out the PutBucketReplication method")
// 			},
// 			PutBucketReplicationRequestFunc: func(putBucketReplicationInput *s3.PutBucketReplicationInput) (*request.Request, *s3.PutBucketReplicationOutput) {
// 				panic("mock out the PutBucketReplicationRequest method")
// 			},
// 			PutBucketReplicationWithContextFunc: func(contextMoqParam context.Context, putBucketReplicationInput *s3.PutBucketReplicationInput, options ...request.Option) (*s3.PutBucketReplicationOutput, error) {
// 				panic("mock out the PutBucketReplicationWithContext method")
// 			},
// 			PutBucketRequestPaymentFunc: func(putBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput) (*s3.PutBucketRequestPaymentOutput, error) {
// 				panic("mock out the PutBucketRequestPayment method")
// 			},
// 			PutBucketRequestPaymentRequestFunc: func(putBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput) (*request.Request, *s3.PutBucketRequestPaymentOutput) {
// 				panic("mock out the PutBucketRequestPaymentRequest method")
// 			},
// 			PutBucketRequestPaymentWithContextFunc: func(contextMoqParam context.Context, putBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput, options ...request.Option) (*s3.PutBucketRequestPaymentOutput, error) {
// 				panic("mock out the PutBucketRequestPaymentWithContext method")
// 			},
// 			PutBucketTaggingFunc: func(putBucketTaggingInput *s3.PutBucketTaggingInput) (*s3.PutBucketTaggingOutput, error) {
// 				panic("mock out the PutBucketTagging method")
// 			},
// 			PutBucketTaggingRequestFunc: func(putBucketTaggingInput *s3.PutBucketTaggingInput) (*request.Request, *s3.PutBucketTaggingOutput) {
// 				panic("mock out the PutBucketTaggingRequest method")
// 			},
// 			PutBucketTaggingWithContextFunc: func(contextMoqParam context.Context, putBucketTaggingInput *s3.PutBucketTaggingInput, options ...request.Option) (*s3.PutBucketTaggingOutput, error) {
// 				panic("mock out the PutBucketTaggingWithContext method")
// 			},
// 			PutBucketVersioningFunc: func(putBucketVersioningInput *s3.PutBucketVersioningInput) (*s3.PutBucketVersioningOutput, error) {
// 				panic("mock out the PutBucketVersioning method")
// 			},
// 			PutBucketVersioningRequestFunc: func(putBucketVersioningInput *s3.PutBucketVersioningInput) (*request.Request, *s3.PutBucketVersioningOutput) {
// 				panic("mock out the PutBucketVersioningRequest method")
// 			},
// 			PutBucketVersioningWithContextFunc: func(contextMoqParam context.Context, putBucketVersioningInput *s3.PutBucketVersioningInput, options ...request.Option) (*s3.PutBucketVersioningOutput, error) {
// 				panic("mock out the PutBucketVersioningWithContext method")
// 			},
// 			PutBucketWebsiteFunc: func(putBucketWebsiteInput *s3.PutBucketWebsiteInput) (*s3.PutBucketWebsiteOutput, error) {
// 				panic("mock out the PutBucketWebsite method")
// 			},
// 			PutBucketWebsiteRequestFunc: func(putBucketWebsiteInput *s3.PutBucketWebsiteInput) (*request.Request, *s3.PutBucketWebsiteOutput) {
// 				panic("mock out the PutBucketWebsiteRequest method")
// 			},
// 			PutBucketWebsiteWithContextFunc: func(contextMoqParam context.Context, putBucketWebsiteInput *s3.PutBucketWebsiteInput, options ...request.Option) (*s3.PutBucketWebsiteOutput, error) {
// 				panic("mock out the PutBucketWebsiteWithContext method")
// 			},
// 			PutObjectFunc: func(putObjectInput *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
// 				panic("mock out the PutObject method")
// 			},
// 			PutObjectAclFunc: func(putObjectAclInput *s3.PutObjectAclInput) (*s3.PutObjectAclOutput, error) {
// 				panic("mock out the PutObjectAcl method")
// 			},
// 			PutObjectAclRequestFunc: func(putObjectAclInput *s3.PutObjectAclInput) (*request.Request, *s3.PutObjectAclOutput) {
// 				panic("mock out the PutObjectAclRequest method")
// 			},
// 			PutObjectAclWithContextFunc: func(contextMoqParam context.Context, putObjectAclInput *s3.PutObjectAclInput, options ...request.Option) (*s3.PutObjectAclOutput, error) {
// 				panic("mock out the PutObjectAclWithContext method")
// 			},
// 			PutObjectLegalHoldFunc: func(putObjectLegalHoldInput *s3.PutObjectLegalHoldInput) (*s3.PutObjectLegalHoldOutput, error) {
// 				panic("mock out the PutObjectLegalHold method")
// 			},
// 			PutObjectLegalHoldRequestFunc: func(putObjectLegalHoldInput *s3.PutObjectLegalHoldInput) (*request.Request, *s3.PutObjectLegalHoldOutput) {
// 				panic("mock out the PutObjectLegalHoldRequest method")
// 			},
// 			PutObjectLegalHoldWithContextFunc: func(contextMoqParam context.Context, putObjectLegalHoldInput *s3.PutObjectLegalHoldInput, options ...request.Option) (*s3.PutObjectLegalHoldOutput, error) {
// 				panic("mock out the PutObjectLegalHoldWithContext method")
// 			},
// 			PutObjectLockConfigurationFunc: func(putObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput) (*s3.PutObjectLockConfigurationOutput, error) {
// 				panic("mock out the PutObjectLockConfiguration method")
// 			},
// 			PutObjectLockConfigurationRequestFunc: func(putObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput) (*request.Request, *s3.PutObjectLockConfigurationOutput) {
// 				panic("mock out the PutObjectLockConfigurationRequest method")
// 			},
// 			PutObjectLockConfigurationWithContextFunc: func(contextMoqParam context.Context, putObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput, options ...request.Option) (*s3.PutObjectLockConfigurationOutput, error) {
// 				panic("mock out the PutObjectLockConfigurationWithContext method")
// 			},
// 			PutObjectRequestFunc: func(putObjectInput *s3.PutObjectInput) (*request.Request, *s3.PutObjectOutput) {
// 				panic("mock out the PutObjectRequest method")
// 			},
// 			PutObjectRetentionFunc: func(putObjectRetentionInput *s3.PutObjectRetentionInput) (*s3.PutObjectRetentionOutput, error) {
// 				panic("mock out the PutObjectRetention method")
// 			},
// 			PutObjectRetentionRequestFunc: func(putObjectRetentionInput *s3.PutObjectRetentionInput) (*request.Request, *s3.PutObjectRetentionOutput) {
// 				panic("mock out the PutObjectRetentionRequest method")
// 			},
// 			PutObjectRetentionWithContextFunc: func(contextMoqParam context.Context, putObjectRetentionInput *s3.PutObjectRetentionInput, options ...request.Option) (*s3.PutObjectRetentionOutput, error) {
// 				panic("mock out the PutObjectRetentionWithContext method")
// 			},
// 			PutObjectTaggingFunc: func(putObjectTaggingInput *s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error) {
// 				panic("mock out the PutObjectTagging method")
// 			},
// 			PutObjectTaggingRequestFunc: func(putObjectTaggingInput *s3.PutObjectTaggingInput) (*request.Request, *s3.PutObjectTaggingOutput) {
// 				panic("mock out the PutObjectTaggingRequest method")
// 			},
// 			PutObjectTaggingWithContextFunc: func(contextMoqParam context.Context, putObjectTaggingInput *s3.PutObjectTaggingInput, options ...request.Option) (*s3.PutObjectTaggingOutput, error) {
// 				panic("mock out the PutObjectTaggingWithContext method")
// 			},
// 			PutObjectWithContextFunc: func(contextMoqParam context.Context, putObjectInput *s3.PutObjectInput, options ...request.Option) (*s3.PutObjectOutput, error) {
// 				panic("mock out the PutObjectWithContext method")
// 			},
// 			PutPublicAccessBlockFunc: func(putPublicAccessBlockInput *s3.PutPublicAccessBlockInput) (*s3.PutPublicAccessBlockOutput, error) {
// 				panic("mock out the PutPublicAccessBlock method")
// 			},
// 			PutPublicAccessBlockRequestFunc: func(putPublicAccessBlockInput *s3.PutPublicAccessBlockInput) (*request.Request, *s3.PutPublicAccessBlockOutput) {
// 				panic("mock out the PutPublicAccessBlockRequest method")
// 			},
// 			PutPublicAccessBlockWithContextFunc: func(contextMoqParam context.Context, putPublicAccessBlockInput *s3.PutPublicAccessBlockInput, options ...request.Option) (*s3.PutPublicAccessBlockOutput, error) {
// 				panic("mock out the PutPublicAccessBlockWithContext method")
// 			},
// 			RestoreObjectFunc: func(restoreObjectInput *s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error) {
// 				panic("mock out the RestoreObject method")
// 			},
// 			RestoreObjectRequestFunc: func(restoreObjectInput *s3.RestoreObjectInput) (*request.Request, *s3.RestoreObjectOutput) {
// 				panic("mock out the RestoreObjectRequest method")
// 			},
// 			RestoreObjectWithContextFunc: func(contextMoqParam context.Context, restoreObjectInput *s3.RestoreObjectInput, options ...request.Option) (*s3.RestoreObjectOutput, error) {
// 				panic("mock out the RestoreObjectWithContext method")
// 			},
// 			SelectObjectContentFunc: func(selectObjectContentInput *s3.SelectObjectContentInput) (*s3.SelectObjectContentOutput, error) {
// 				panic("mock out the SelectObjectContent method")
// 			},
// 			SelectObjectContentRequestFunc: func(selectObjectContentInput *s3.SelectObjectContentInput) (*request.Request, *s3.SelectObjectContentOutput) {
// 				panic("mock out the SelectObjectContentRequest method")
// 			},
// 			SelectObjectContentWithContextFunc: func(contextMoqParam context.Context, selectObjectContentInput *s3.SelectObjectContentInput, options ...request.Option) (*s3.SelectObjectContentOutput, error) {
// 				panic("mock out the SelectObjectContentWithContext method")
// 			},
// 			UploadPartFunc: func(uploadPartInput *s3.UploadPartInput) (*s3.UploadPartOutput, error) {
// 				panic("mock out the UploadPart method")
// 			},
// 			UploadPartCopyFunc: func(uploadPartCopyInput *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
// 				panic("mock out the UploadPartCopy method")
// 			},
// 			UploadPartCopyRequestFunc: func(uploadPartCopyInput *s3.UploadPartCopyInput) (*request.Request, *s3.UploadPartCopyOutput) {
// 				panic("mock out the UploadPartCopyRequest method")
// 			},
// 			UploadPartCopyWithContextFunc: func(contextMoqParam context.Context, uploadPartCopyInput *s3.UploadPartCopyInput, options ...request.Option) (*s3.UploadPartCopyOutput, error) {
// 				panic("mock out the UploadPartCopyWithContext method")
// 			},
// 			UploadPartRequestFunc: func(uploadPartInput *s3.UploadPartInput) (*request.Request, *s3.UploadPartOutput) {
// 				panic("mock out the UploadPartRequest method")
// 			},
// 			UploadPartWithContextFunc: func(contextMoqParam context.Context, uploadPartInput *s3.UploadPartInput, options ...request.Option) (*s3.UploadPartOutput, error) {
// 				panic("mock out the UploadPartWithContext method")
// 			},
// 			WaitUntilBucketExistsFunc: func(headBucketInput *s3.HeadBucketInput) error {
// 				panic("mock out the WaitUntilBucketExists method")
// 			},
// 			WaitUntilBucketExistsWithContextFunc: func(contextMoqParam context.Context, headBucketInput *s3.HeadBucketInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilBucketExistsWithContext method")
// 			},
// 			WaitUntilBucketNotExistsFunc: func(headBucketInput *s3.HeadBucketInput) error {
// 				panic("mock out the WaitUntilBucketNotExists method")
// 			},
// 			WaitUntilBucketNotExistsWithContextFunc: func(contextMoqParam context.Context, headBucketInput *s3.HeadBucketInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilBucketNotExistsWithContext method")
// 			},
// 			WaitUntilObjectExistsFunc: func(headObjectInput *s3.HeadObjectInput) error {
// 				panic("mock out the WaitUntilObjectExists method")
// 			},
// 			WaitUntilObjectExistsWithContextFunc: func(contextMoqParam context.Context, headObjectInput *s3.HeadObjectInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilObjectExistsWithContext method")
// 			},
// 			WaitUntilObjectNotExistsFunc: func(headObjectInput *s3.HeadObjectInput) error {
// 				panic("mock out the WaitUntilObjectNotExists method")
// 			},
// 			WaitUntilObjectNotExistsWithContextFunc: func(contextMoqParam context.Context, headObjectInput *s3.HeadObjectInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilObjectNotExistsWithContext method")
// 			},
// 			WriteGetObjectResponseFunc: func(writeGetObjectResponseInput *s3.WriteGetObjectResponseInput) (*s3.WriteGetObjectResponseOutput, error) {
// 				panic("mock out the WriteGetObjectResponse method")
// 			},
// 			WriteGetObjectResponseRequestFunc: func(writeGetObjectResponseInput *s3.WriteGetObjectResponseInput) (*request.Request, *s3.WriteGetObjectResponseOutput) {
// 				panic("mock out the WriteGetObjectResponseRequest method")
// 			},
// 			WriteGetObjectResponseWithContextFunc: func(contextMoqParam context.Context, writeGetObjectResponseInput *s3.WriteGetObjectResponseInput, options ...request.Option) (*s3.WriteGetObjectResponseOutput, error) {
// 				panic("mock out the WriteGetObjectResponseWithContext method")
// 			},
// 		}
//
// 		// use mockeds3Client in code that requires s3Client
// 		// and then make assertions.
//
// 	}
type s3ClientMock struct {
	// AbortMultipartUploadFunc mocks the AbortMultipartUpload method.
	AbortMultipartUploadFunc func(abortMultipartUploadInput *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error)

	// AbortMultipartUploadRequestFunc mocks the AbortMultipartUploadRequest method.
	AbortMultipartUploadRequestFunc func(abortMultipartUploadInput *s3.AbortMultipartUploadInput) (*request.Request, *s3.AbortMultipartUploadOutput)

	// AbortMultipartUploadWithContextFunc mocks the AbortMultipartUploadWithContext method.
	AbortMultipartUploadWithContextFunc func(contextMoqParam context.Context, abortMultipartUploadInput *s3.AbortMultipartUploadInput, options ...request.Option) (*s3.AbortMultipartUploadOutput, error)

	// CompleteMultipartUploadFunc mocks the CompleteMultipartUpload method.
	CompleteMultipartUploadFunc func(completeMultipartUploadInput *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error)

	// CompleteMultipartUploadRequestFunc mocks the CompleteMultipartUploadRequest method.
	CompleteMultipartUploadRequestFunc func(completeMultipartUploadInput *s3.CompleteMultipartUploadInput) (*request.Request, *s3.CompleteMultipartUploadOutput)

	// CompleteMultipartUploadWithContextFunc mocks the CompleteMultipartUploadWithContext method.
	CompleteMultipartUploadWithContextFunc func(contextMoqParam context.Context, completeMultipartUploadInput *s3.CompleteMultipartUploadInput, options ...request.Option) (*s3.CompleteMultipartUploadOutput, error)

	// CopyObjectFunc mocks the CopyObject method.
	CopyObjectFunc func(copyObjectInput *s3.CopyObjectInput) (*s3.CopyObjectOutput, error)

	// CopyObjectRequestFunc mocks the CopyObjectRequest method.
	CopyObjectRequestFunc func(copyObjectInput *s3.CopyObjectInput) (*request.Request, *s3.CopyObjectOutput)

	// CopyObjectWithContextFunc mocks the CopyObjectWithContext method.
	CopyObjectWithContextFunc func(contextMoqParam context.Context, copyObjectInput *s3.CopyObjectInput, options ...request.Option) (*s3.CopyObjectOutput, error)

	// CreateBucketFunc mocks the CreateBucket method.
	CreateBucketFunc func(createBucketInput *s3.CreateBucketInput) (*s3.CreateBucketOutput, error)

	// CreateBucketRequestFunc mocks the CreateBucketRequest method.
	CreateBucketRequestFunc func(createBucketInput *s3.CreateBucketInput) (*request.Request, *s3.CreateBucketOutput)

	// CreateBucketWithContextFunc mocks the CreateBucketWithContext method.
	CreateBucketWithContextFunc func(contextMoqParam context.Context, createBucketInput *s3.CreateBucketInput, options ...request.Option) (*s3.CreateBucketOutput, error)

	// CreateMultipartUploadFunc mocks the CreateMultipartUpload method.
	CreateMultipartUploadFunc func(createMultipartUploadInput *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error)

	// CreateMultipartUploadRequestFunc mocks the CreateMultipartUploadRequest method.
	CreateMultipartUploadRequestFunc func(createMultipartUploadInput *s3.CreateMultipartUploadInput) (*request.Request, *s3.CreateMultipartUploadOutput)

	// CreateMultipartUploadWithContextFunc mocks the CreateMultipartUploadWithContext method.
	CreateMultipartUploadWithContextFunc func(contextMoqParam context.Context, createMultipartUploadInput *s3.CreateMultipartUploadInput, options ...request.Option) (*s3.CreateMultipartUploadOutput, error)

	// DeleteBucketFunc mocks the DeleteBucket method.
	DeleteBucketFunc func(deleteBucketInput *s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error)

	// DeleteBucketAnalyticsConfigurationFunc mocks the DeleteBucketAnalyticsConfiguration method.
	DeleteBucketAnalyticsConfigurationFunc func(deleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)

	// DeleteBucketAnalyticsConfigurationRequestFunc mocks the DeleteBucketAnalyticsConfigurationRequest method.
	DeleteBucketAnalyticsConfigurationRequestFunc func(deleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput) (*request.Request, *s3.DeleteBucketAnalyticsConfigurationOutput)

	// DeleteBucketAnalyticsConfigurationWithContextFunc mocks the DeleteBucketAnalyticsConfigurationWithContext method.
	DeleteBucketAnalyticsConfigurationWithContextFunc func(contextMoqParam context.Context, deleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput, options ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error)

	// DeleteBucketCorsFunc mocks the DeleteBucketCors method.
	DeleteBucketCorsFunc func(deleteBucketCorsInput *s3.DeleteBucketCorsInput) (*s3.DeleteBucketCorsOutput, error)

	// DeleteBucketCorsRequestFunc mocks the DeleteBucketCorsRequest method.
	DeleteBucketCorsRequestFunc func(deleteBucketCorsInput *s3.DeleteBucketCorsInput) (*request.Request, *s3.DeleteBucketCorsOutput)

	// DeleteBucketCorsWithContextFunc mocks the DeleteBucketCorsWithContext method.
	DeleteBucketCorsWithContextFunc func(contextMoqParam context.Context, deleteBucketCorsInput *s3.DeleteBucketCorsInput, options ...request.Option) (*s3.DeleteBucketCorsOutput, error)

	// DeleteBucketEncryptionFunc mocks the DeleteBucketEncryption method.
	DeleteBucketEncryptionFunc func(deleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput) (*s3.DeleteBucketEncryptionOutput, error)

	// DeleteBucketEncryptionRequestFunc mocks the DeleteBucketEncryptionRequest method.
	DeleteBucketEncryptionRequestFunc func(deleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput) (*request.Request, *s3.DeleteBucketEncryptionOutput)

	// DeleteBucketEncryptionWithContextFunc mocks the DeleteBucketEncryptionWithContext method.
	DeleteBucketEncryptionWithContextFunc func(contextMoqParam context.Context, deleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput, options ...request.Option) (*s3.DeleteBucketEncryptionOutput, error)

	// DeleteBucketIntelligentTieringConfigurationFunc mocks the DeleteBucketIntelligentTieringConfiguration method.
	DeleteBucketIntelligentTieringConfigurationFunc func(deleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error)

	// DeleteBucketIntelligentTieringConfigurationRequestFunc mocks the DeleteBucketIntelligentTieringConfigurationRequest method.
	DeleteBucketIntelligentTieringConfigurationRequestFunc func(deleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput) (*request.Request, *s3.DeleteBucketIntelligentTieringConfigurationOutput)

	// DeleteBucketIntelligentTieringConfigurationWithContextFunc mocks the DeleteBucketIntelligentTieringConfigurationWithContext method.
	DeleteBucketIntelligentTieringConfigurationWithContextFunc func(contextMoqParam context.Context, deleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput, options ...request.Option) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error)

	// DeleteBucketInventoryConfigurationFunc mocks the DeleteBucketInventoryConfiguration method.
	DeleteBucketInventoryConfigurationFunc func(deleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput) (*s3.DeleteBucketInventoryConfigurationOutput, error)

	// DeleteBucketInventoryConfigurationRequestFunc mocks the DeleteBucketInventoryConfigurationRequest method.
	DeleteBucketInventoryConfigurationRequestFunc func(deleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput) (*request.Request, *s3.DeleteBucketInventoryConfigurationOutput)

	// DeleteBucketInventoryConfigurationWithContextFunc mocks the DeleteBucketInventoryConfigurationWithContext method.
	DeleteBucketInventoryConfigurationWithContextFunc func(contextMoqParam context.Context, deleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput, options ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error)

	// DeleteBucketLifecycleFunc mocks the DeleteBucketLifecycle method.
	DeleteBucketLifecycleFunc func(deleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput) (*s3.DeleteBucketLifecycleOutput, error)

	// DeleteBucketLifecycleRequestFunc mocks the DeleteBucketLifecycleRequest method.
	DeleteBucketLifecycleRequestFunc func(deleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput) (*request.Request, *s3.DeleteBucketLifecycleOutput)

	// DeleteBucketLifecycleWithContextFunc mocks the DeleteBucketLifecycleWithContext method.
	DeleteBucketLifecycleWithContextFunc func(contextMoqParam context.Context, deleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput, options ...request.Option) (*s3.DeleteBucketLifecycleOutput, error)

	// DeleteBucketMetricsConfigurationFunc mocks the DeleteBucketMetricsConfiguration method.
	DeleteBucketMetricsConfigurationFunc func(deleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput) (*s3.DeleteBucketMetricsConfigurationOutput, error)

	// DeleteBucketMetricsConfigurationRequestFunc mocks the DeleteBucketMetricsConfigurationRequest method.
	DeleteBucketMetricsConfigurationRequestFunc func(deleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput) (*request.Request, *s3.DeleteBucketMetricsConfigurationOutput)

	// DeleteBucketMetricsConfigurationWithContextFunc mocks the DeleteBucketMetricsConfigurationWithContext method.
	DeleteBucketMetricsConfigurationWithContextFunc func(contextMoqParam context.Context, deleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput, options ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error)

	// DeleteBucketOwnershipControlsFunc mocks the DeleteBucketOwnershipControls method.
	DeleteBucketOwnershipControlsFunc func(deleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput) (*s3.DeleteBucketOwnershipControlsOutput, error)

	// DeleteBucketOwnershipControlsRequestFunc mocks the DeleteBucketOwnershipControlsRequest method.
	DeleteBucketOwnershipControlsRequestFunc func(deleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput) (*request.Request, *s3.DeleteBucketOwnershipControlsOutput)

	// DeleteBucketOwnershipControlsWithContextFunc mocks the DeleteBucketOwnershipControlsWithContext method.
	DeleteBucketOwnershipControlsWithContextFunc func(contextMoqParam context.Context, deleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput, options ...request.Option) (*s3.DeleteBucketOwnershipControlsOutput, error)

	// DeleteBucketPolicyFunc mocks the DeleteBucketPolicy method.
	DeleteBucketPolicyFunc func(deleteBucketPolicyInput *s3.DeleteBucketPolicyInput) (*s3.DeleteBucketPolicyOutput, error)

	// DeleteBucketPolicyRequestFunc mocks the DeleteBucketPolicyRequest method.
	DeleteBucketPolicyRequestFunc func(deleteBucketPolicyInput *s3.DeleteBucketPolicyInput) (*request.Request, *s3.DeleteBucketPolicyOutput)

	// DeleteBucketPolicyWithContextFunc mocks the DeleteBucketPolicyWithContext method.
	DeleteBucketPolicyWithContextFunc func(contextMoqParam context.Context, deleteBucketPolicyInput *s3.DeleteBucketPolicyInput, options ...request.Option) (*s3.DeleteBucketPolicyOutput, error)

	// DeleteBucketReplicationFunc mocks the DeleteBucketReplication method.
	DeleteBucketReplicationFunc func(deleteBucketReplicationInput *s3.DeleteBucketReplicationInput) (*s3.DeleteBucketReplicationOutput, error)

	// DeleteBucketReplicationRequestFunc mocks the DeleteBucketReplicationRequest method.
	DeleteBucketReplicationRequestFunc func(deleteBucketReplicationInput *s3.DeleteBucketReplicationInput) (*request.Request, *s3.DeleteBucketReplicationOutput)

	// DeleteBucketReplicationWithContextFunc mocks the DeleteBucketReplicationWithContext method.
	DeleteBucketReplicationWithContextFunc func(contextMoqParam context.Context, deleteBucketReplicationInput *s3.DeleteBucketReplicationInput, options ...request.Option) (*s3.DeleteBucketReplicationOutput, error)

	// DeleteBucketRequestFunc mocks the DeleteBucketRequest method.
	DeleteBucketRequestFunc func(deleteBucketInput *s3.DeleteBucketInput) (*request.Request, *s3.DeleteBucketOutput)

	// DeleteBucketTaggingFunc mocks the DeleteBucketTagging method.
	DeleteBucketTaggingFunc func(deleteBucketTaggingInput *s3.DeleteBucketTaggingInput) (*s3.DeleteBucketTaggingOutput, error)

	// DeleteBucketTaggingRequestFunc mocks the DeleteBucketTaggingRequest method.
	DeleteBucketTaggingRequestFunc func(deleteBucketTaggingInput *s3.DeleteBucketTaggingInput) (*request.Request, *s3.DeleteBucketTaggingOutput)

	// DeleteBucketTaggingWithContextFunc mocks the DeleteBucketTaggingWithContext method.
	DeleteBucketTaggingWithContextFunc func(contextMoqParam context.Context, deleteBucketTaggingInput *s3.DeleteBucketTaggingInput, options ...request.Option) (*s3.DeleteBucketTaggingOutput, error)

	// DeleteBucketWebsiteFunc mocks the DeleteBucketWebsite method.
	DeleteBucketWebsiteFunc func(deleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput) (*s3.DeleteBucketWebsiteOutput, error)

	// DeleteBucketWebsiteRequestFunc mocks the DeleteBucketWebsiteRequest method.
	DeleteBucketWebsiteRequestFunc func(deleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput) (*request.Request, *s3.DeleteBucketWebsiteOutput)

	// DeleteBucketWebsiteWithContextFunc mocks the DeleteBucketWebsiteWithContext method.
	DeleteBucketWebsiteWithContextFunc func(contextMoqParam context.Context, deleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput, options ...request.Option) (*s3.DeleteBucketWebsiteOutput, error)

	// DeleteBucketWithContextFunc mocks the DeleteBucketWithContext method.
	DeleteBucketWithContextFunc func(contextMoqParam context.Context, deleteBucketInput *s3.DeleteBucketInput, options ...request.Option) (*s3.DeleteBucketOutput, error)

	// DeleteObjectFunc mocks the DeleteObject method.
	DeleteObjectFunc func(deleteObjectInput *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)

	// DeleteObjectRequestFunc mocks the DeleteObjectRequest method.
	DeleteObjectRequestFunc func(deleteObjectInput *s3.DeleteObjectInput) (*request.Request, *s3.DeleteObjectOutput)

	// DeleteObjectTaggingFunc mocks the DeleteObjectTagging method.
	DeleteObjectTaggingFunc func(deleteObjectTaggingInput *s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error)

	// DeleteObjectTaggingRequestFunc mocks the DeleteObjectTaggingRequest method.
	DeleteObjectTaggingRequestFunc func(deleteObjectTaggingInput *s3.DeleteObjectTaggingInput) (*request.Request, *s3.DeleteObjectTaggingOutput)

	// DeleteObjectTaggingWithContextFunc mocks the DeleteObjectTaggingWithContext method.
	DeleteObjectTaggingWithContextFunc func(contextMoqParam context.Context, deleteObjectTaggingInput *s3.DeleteObjectTaggingInput, options ...request.Option) (*s3.DeleteObjectTaggingOutput, error)

	// DeleteObjectWithContextFunc mocks the DeleteObjectWithContext method.
	DeleteObjectWithContextFunc func(contextMoqParam context.Context, deleteObjectInput *s3.DeleteObjectInput, options ...request.Option) (*s3.DeleteObjectOutput, error)

	// DeleteObjectsFunc mocks the DeleteObjects method.
	DeleteObjectsFunc func(deleteObjectsInput *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error)

	// DeleteObjectsRequestFunc mocks the DeleteObjectsRequest method.
	DeleteObjectsRequestFunc func(deleteObjectsInput *s3.DeleteObjectsInput) (*request.Request, *s3.DeleteObjectsOutput)

	// DeleteObjectsWithContextFunc mocks the DeleteObjectsWithContext method.
	DeleteObjectsWithContextFunc func(contextMoqParam context.Context, deleteObjectsInput *s3.DeleteObjectsInput, options ...request.Option) (*s3.DeleteObjectsOutput, error)

	// DeletePublicAccessBlockFunc mocks the DeletePublicAccessBlock method.
	DeletePublicAccessBlockFunc func(deletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput) (*s3.DeletePublicAccessBlockOutput, error)

	// DeletePublicAccessBlockRequestFunc mocks the DeletePublicAccessBlockRequest method.
	DeletePublicAccessBlockRequestFunc func(deletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput) (*request.Request, *s3.DeletePublicAccessBlockOutput)

	// DeletePublicAccessBlockWithContextFunc mocks the DeletePublicAccessBlockWithContext method.
	DeletePublicAccessBlockWithContextFunc func(contextMoqParam context.Context, deletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput, options ...request.Option) (*s3.DeletePublicAccessBlockOutput, error)

	// GetBucketAccelerateConfigurationFunc mocks the GetBucketAccelerateConfiguration method.
	GetBucketAccelerateConfigurationFunc func(getBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput) (*s3.GetBucketAccelerateConfigurationOutput, error)

	// GetBucketAccelerateConfigurationRequestFunc mocks the GetBucketAccelerateConfigurationRequest method.
	GetBucketAccelerateConfigurationRequestFunc func(getBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput) (*request.Request, *s3.GetBucketAccelerateConfigurationOutput)

	// GetBucketAccelerateConfigurationWithContextFunc mocks the GetBucketAccelerateConfigurationWithContext method.
	GetBucketAccelerateConfigurationWithContextFunc func(contextMoqParam context.Context, getBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput, options ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error)

	// GetBucketAclFunc mocks the GetBucketAcl method.
	GetBucketAclFunc func(getBucketAclInput *s3.GetBucketAclInput) (*s3.GetBucketAclOutput, error)

	// GetBucketAclRequestFunc mocks the GetBucketAclRequest method.
	GetBucketAclRequestFunc func(getBucketAclInput *s3.GetBucketAclInput) (*request.Request, *s3.GetBucketAclOutput)

	// GetBucketAclWithContextFunc mocks the GetBucketAclWithContext method.
	GetBucketAclWithContextFunc func(contextMoqParam context.Context, getBucketAclInput *s3.GetBucketAclInput, options ...request.Option) (*s3.GetBucketAclOutput, error)

	// GetBucketAnalyticsConfigurationFunc mocks the GetBucketAnalyticsConfiguration method.
	GetBucketAnalyticsConfigurationFunc func(getBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput) (*s3.GetBucketAnalyticsConfigurationOutput, error)

	// GetBucketAnalyticsConfigurationRequestFunc mocks the GetBucketAnalyticsConfigurationRequest method.
	GetBucketAnalyticsConfigurationRequestFunc func(getBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput) (*request.Request, *s3.GetBucketAnalyticsConfigurationOutput)

	// GetBucketAnalyticsConfigurationWithContextFunc mocks the GetBucketAnalyticsConfigurationWithContext method.
	GetBucketAnalyticsConfigurationWithContextFunc func(contextMoqParam context.Context, getBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput, options ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error)

	// GetBucketCorsFunc mocks the GetBucketCors method.
	GetBucketCorsFunc func(getBucketCorsInput *s3.GetBucketCorsInput) (*s3.GetBucketCorsOutput, error)

	// GetBucketCorsRequestFunc mocks the GetBucketCorsRequest method.
	GetBucketCorsRequestFunc func(getBucketCorsInput *s3.GetBucketCorsInput) (*request.Request, *s3.GetBucketCorsOutput)

	// GetBucketCorsWithContextFunc mocks the GetBucketCorsWithContext method.
	GetBucketCorsWithContextFunc func(contextMoqParam context.Context, getBucketCorsInput *s3.GetBucketCorsInput, options ...request.Option) (*s3.GetBucketCorsOutput, error)

	// GetBucketEncryptionFunc mocks the GetBucketEncryption method.
	GetBucketEncryptionFunc func(getBucketEncryptionInput *s3.GetBucketEncryptionInput) (*s3.GetBucketEncryptionOutput, error)

	// GetBucketEncryptionRequestFunc mocks the GetBucketEncryptionRequest method.
	GetBucketEncryptionRequestFunc func(getBucketEncryptionInput *s3.GetBucketEncryptionInput) (*request.Request, *s3.GetBucketEncryptionOutput)

	// GetBucketEncryptionWithContextFunc mocks the GetBucketEncryptionWithContext method.
	GetBucketEncryptionWithContextFunc func(contextMoqParam context.Context, getBucketEncryptionInput *s3.GetBucketEncryptionInput, options ...request.Option) (*s3.GetBucketEncryptionOutput, error)

	// GetBucketIntelligentTieringConfigurationFunc mocks the GetBucketIntelligentTieringConfiguration method.
	GetBucketIntelligentTieringConfigurationFunc func(getBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput) (*s3.GetBucketIntelligentTieringConfigurationOutput, error)

	// GetBucketIntelligentTieringConfigurationRequestFunc mocks the GetBucketIntelligentTieringConfigurationRequest method.
	GetBucketIntelligentTieringConfigurationRequestFunc func(getBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput) (*request.Request, *s3.GetBucketIntelligentTieringConfigurationOutput)

	// GetBucketIntelligentTieringConfigurationWithContextFunc mocks the GetBucketIntelligentTieringConfigurationWithContext method.
	GetBucketIntelligentTieringConfigurationWithContextFunc func(contextMoqParam context.Context, getBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput, options ...request.Option) (*s3.GetBucketIntelligentTieringConfigurationOutput, error)

	// GetBucketInventoryConfigurationFunc mocks the GetBucketInventoryConfiguration method.
	GetBucketInventoryConfigurationFunc func(getBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput) (*s3.GetBucketInventoryConfigurationOutput, error)

	// GetBucketInventoryConfigurationRequestFunc mocks the GetBucketInventoryConfigurationRequest method.
	GetBucketInventoryConfigurationRequestFunc func(getBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput) (*request.Request, *s3.GetBucketInventoryConfigurationOutput)

	// GetBucketInventoryConfigurationWithContextFunc mocks the GetBucketInventoryConfigurationWithContext method.
	GetBucketInventoryConfigurationWithContextFunc func(contextMoqParam context.Context, getBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput, options ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error)

	// GetBucketLifecycleFunc mocks the GetBucketLifecycle method.
	GetBucketLifecycleFunc func(getBucketLifecycleInput *s3.GetBucketLifecycleInput) (*s3.GetBucketLifecycleOutput, error)

	// GetBucketLifecycleConfigurationFunc mocks the GetBucketLifecycleConfiguration method.
	GetBucketLifecycleConfigurationFunc func(getBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput) (*s3.GetBucketLifecycleConfigurationOutput, error)

	// GetBucketLifecycleConfigurationRequestFunc mocks the GetBucketLifecycleConfigurationRequest method.
	GetBucketLifecycleConfigurationRequestFunc func(getBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput) (*request.Request, *s3.GetBucketLifecycleConfigurationOutput)

	// GetBucketLifecycleConfigurationWithContextFunc mocks the GetBucketLifecycleConfigurationWithContext method.
	GetBucketLifecycleConfigurationWithContextFunc func(contextMoqParam context.Context, getBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput, options ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error)

	// GetBucketLifecycleRequestFunc mocks the GetBucketLifecycleRequest method.
	GetBucketLifecycleRequestFunc func(getBucketLifecycleInput *s3.GetBucketLifecycleInput) (*request.Request, *s3.GetBucketLifecycleOutput)

	// GetBucketLifecycleWithContextFunc mocks the GetBucketLifecycleWithContext method.
	GetBucketLifecycleWithContextFunc func(contextMoqParam context.Context, getBucketLifecycleInput *s3.GetBucketLifecycleInput, options ...request.Option) (*s3.GetBucketLifecycleOutput, error)

	// GetBucketLocationFunc mocks the GetBucketLocation method.
	GetBucketLocationFunc func(getBucketLocationInput *s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error)

	// GetBucketLocationRequestFunc mocks the GetBucketLocationRequest method.
	GetBucketLocationRequestFunc func(getBucketLocationInput *s3.GetBucketLocationInput) (*request.Request, *s3.GetBucketLocationOutput)

	// GetBucketLocationWithContextFunc mocks the GetBucketLocationWithContext method.
	GetBucketLocationWithContextFunc func(contextMoqParam context.Context, getBucketLocationInput *s3.GetBucketLocationInput, options ...request.Option) (*s3.GetBucketLocationOutput, error)

	// GetBucketLoggingFunc mocks the GetBucketLogging method.
	GetBucketLoggingFunc func(getBucketLoggingInput *s3.GetBucketLoggingInput) (*s3.GetBucketLoggingOutput, error)

	// GetBucketLoggingRequestFunc mocks the GetBucketLoggingRequest method.
	GetBucketLoggingRequestFunc func(getBucketLoggingInput *s3.GetBucketLoggingInput) (*request.Request, *s3.GetBucketLoggingOutput)

	// GetBucketLoggingWithContextFunc mocks the GetBucketLoggingWithContext method.
	GetBucketLoggingWithContextFunc func(contextMoqParam context.Context, getBucketLoggingInput *s3.GetBucketLoggingInput, options ...request.Option) (*s3.GetBucketLoggingOutput, error)

	// GetBucketMetricsConfigurationFunc mocks the GetBucketMetricsConfiguration method.
	GetBucketMetricsConfigurationFunc func(getBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput) (*s3.GetBucketMetricsConfigurationOutput, error)

	// GetBucketMetricsConfigurationRequestFunc mocks the GetBucketMetricsConfigurationRequest method.
	GetBucketMetricsConfigurationRequestFunc func(getBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput) (*request.Request, *s3.GetBucketMetricsConfigurationOutput)

	// GetBucketMetricsConfigurationWithContextFunc mocks the GetBucketMetricsConfigurationWithContext method.
	GetBucketMetricsConfigurationWithContextFunc func(contextMoqParam context.Context, getBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput, options ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error)

	// GetBucketNotificationFunc mocks the GetBucketNotification method.
	GetBucketNotificationFunc func(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfigurationDeprecated, error)

	// GetBucketNotificationConfigurationFunc mocks the GetBucketNotificationConfiguration method.
	GetBucketNotificationConfigurationFunc func(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfiguration, error)

	// GetBucketNotificationConfigurationRequestFunc mocks the GetBucketNotificationConfigurationRequest method.
	GetBucketNotificationConfigurationRequestFunc func(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfiguration)

	// GetBucketNotificationConfigurationWithContextFunc mocks the GetBucketNotificationConfigurationWithContext method.
	GetBucketNotificationConfigurationWithContextFunc func(contextMoqParam context.Context, getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest, options ...request.Option) (*s3.NotificationConfiguration, error)

	// GetBucketNotificationRequestFunc mocks the GetBucketNotificationRequest method.
	GetBucketNotificationRequestFunc func(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfigurationDeprecated)

	// GetBucketNotificationWithContextFunc mocks the GetBucketNotificationWithContext method.
	GetBucketNotificationWithContextFunc func(contextMoqParam context.Context, getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest, options ...request.Option) (*s3.NotificationConfigurationDeprecated, error)

	// GetBucketOwnershipControlsFunc mocks the GetBucketOwnershipControls method.
	GetBucketOwnershipControlsFunc func(getBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput) (*s3.GetBucketOwnershipControlsOutput, error)

	// GetBucketOwnershipControlsRequestFunc mocks the GetBucketOwnershipControlsRequest method.
	GetBucketOwnershipControlsRequestFunc func(getBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput) (*request.Request, *s3.GetBucketOwnershipControlsOutput)

	// GetBucketOwnershipControlsWithContextFunc mocks the GetBucketOwnershipControlsWithContext method.
	GetBucketOwnershipControlsWithContextFunc func(contextMoqParam context.Context, getBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput, options ...request.Option) (*s3.GetBucketOwnershipControlsOutput, error)

	// GetBucketPolicyFunc mocks the GetBucketPolicy method.
	GetBucketPolicyFunc func(getBucketPolicyInput *s3.GetBucketPolicyInput) (*s3.GetBucketPolicyOutput, error)

	// GetBucketPolicyRequestFunc mocks the GetBucketPolicyRequest method.
	GetBucketPolicyRequestFunc func(getBucketPolicyInput *s3.GetBucketPolicyInput) (*request.Request, *s3.GetBucketPolicyOutput)

	// GetBucketPolicyStatusFunc mocks the GetBucketPolicyStatus method.
	GetBucketPolicyStatusFunc func(getBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput) (*s3.GetBucketPolicyStatusOutput, error)

	// GetBucketPolicyStatusRequestFunc mocks the GetBucketPolicyStatusRequest method.
	GetBucketPolicyStatusRequestFunc func(getBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput) (*request.Request, *s3.GetBucketPolicyStatusOutput)

	// GetBucketPolicyStatusWithContextFunc mocks the GetBucketPolicyStatusWithContext method.
	GetBucketPolicyStatusWithContextFunc func(contextMoqParam context.Context, getBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput, options ...request.Option) (*s3.GetBucketPolicyStatusOutput, error)

	// GetBucketPolicyWithContextFunc mocks the GetBucketPolicyWithContext method.
	GetBucketPolicyWithContextFunc func(contextMoqParam context.Context, getBucketPolicyInput *s3.GetBucketPolicyInput, options ...request.Option) (*s3.GetBucketPolicyOutput, error)

	// GetBucketReplicationFunc mocks the GetBucketReplication method.
	GetBucketReplicationFunc func(getBucketReplicationInput *s3.GetBucketReplicationInput) (*s3.GetBucketReplicationOutput, error)

	// GetBucketReplicationRequestFunc mocks the GetBucketReplicationRequest method.
	GetBucketReplicationRequestFunc func(getBucketReplicationInput *s3.GetBucketReplicationInput) (*request.Request, *s3.GetBucketReplicationOutput)

	// GetBucketReplicationWithContextFunc mocks the GetBucketReplicationWithContext method.
	GetBucketReplicationWithContextFunc func(contextMoqParam context.Context, getBucketReplicationInput *s3.GetBucketReplicationInput, options ...request.Option) (*s3.GetBucketReplicationOutput, error)

	// GetBucketRequestPaymentFunc mocks the GetBucketRequestPayment method.
	GetBucketRequestPaymentFunc func(getBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput) (*s3.GetBucketRequestPaymentOutput, error)

	// GetBucketRequestPaymentRequestFunc mocks the GetBucketRequestPaymentRequest method.
	GetBucketRequestPaymentRequestFunc func(getBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput) (*request.Request, *s3.GetBucketRequestPaymentOutput)

	// GetBucketRequestPaymentWithContextFunc mocks the GetBucketRequestPaymentWithContext method.
	GetBucketRequestPaymentWithContextFunc func(contextMoqParam context.Context, getBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput, options ...request.Option) (*s3.GetBucketRequestPaymentOutput, error)

	// GetBucketTaggingFunc mocks the GetBucketTagging method.
	GetBucketTaggingFunc func(getBucketTaggingInput *s3.GetBucketTaggingInput) (*s3.GetBucketTaggingOutput, error)

	// GetBucketTaggingRequestFunc mocks the GetBucketTaggingRequest method.
	GetBucketTaggingRequestFunc func(getBucketTaggingInput *s3.GetBucketTaggingInput) (*request.Request, *s3.GetBucketTaggingOutput)

	// GetBucketTaggingWithContextFunc mocks the GetBucketTaggingWithContext method.
	GetBucketTaggingWithContextFunc func(contextMoqParam context.Context, getBucketTaggingInput *s3.GetBucketTaggingInput, options ...request.Option) (*s3.GetBucketTaggingOutput, error)

	// GetBucketVersioningFunc mocks the GetBucketVersioning method.
	GetBucketVersioningFunc func(getBucketVersioningInput *s3.GetBucketVersioningInput) (*s3.GetBucketVersioningOutput, error)

	// GetBucketVersioningRequestFunc mocks the GetBucketVersioningRequest method.
	GetBucketVersioningRequestFunc func(getBucketVersioningInput *s3.GetBucketVersioningInput) (*request.Request, *s3.GetBucketVersioningOutput)

	// GetBucketVersioningWithContextFunc mocks the GetBucketVersioningWithContext method.
	GetBucketVersioningWithContextFunc func(contextMoqParam context.Context, getBucketVersioningInput *s3.GetBucketVersioningInput, options ...request.Option) (*s3.GetBucketVersioningOutput, error)

	// GetBucketWebsiteFunc mocks the GetBucketWebsite method.
	GetBucketWebsiteFunc func(getBucketWebsiteInput *s3.GetBucketWebsiteInput) (*s3.GetBucketWebsiteOutput, error)

	// GetBucketWebsiteRequestFunc mocks the GetBucketWebsiteRequest method.
	GetBucketWebsiteRequestFunc func(getBucketWebsiteInput *s3.GetBucketWebsiteInput) (*request.Request, *s3.GetBucketWebsiteOutput)

	// GetBucketWebsiteWithContextFunc mocks the GetBucketWebsiteWithContext method.
	GetBucketWebsiteWithContextFunc func(contextMoqParam context.Context, getBucketWebsiteInput *s3.GetBucketWebsiteInput, options ...request.Option) (*s3.GetBucketWebsiteOutput, error)

	// GetObjectFunc mocks the GetObject method.
	GetObjectFunc func(getObjectInput *s3.GetObjectInput) (*s3.GetObjectOutput, error)

	// GetObjectAclFunc mocks the GetObjectAcl method.
	GetObjectAclFunc func(getObjectAclInput *s3.GetObjectAclInput) (*s3.GetObjectAclOutput, error)

	// GetObjectAclRequestFunc mocks the GetObjectAclRequest method.
	GetObjectAclRequestFunc func(getObjectAclInput *s3.GetObjectAclInput) (*request.Request, *s3.GetObjectAclOutput)

	// GetObjectAclWithContextFunc mocks the GetObjectAclWithContext method.
	GetObjectAclWithContextFunc func(contextMoqParam context.Context, getObjectAclInput *s3.GetObjectAclInput, options ...request.Option) (*s3.GetObjectAclOutput, error)

	// GetObjectAttributesFunc mocks the GetObjectAttributes method.
	GetObjectAttributesFunc func(getObjectAttributesInput *s3.GetObjectAttributesInput) (*s3.GetObjectAttributesOutput, error)

	// GetObjectAttributesRequestFunc mocks the GetObjectAttributesRequest method.
	GetObjectAttributesRequestFunc func(getObjectAttributesInput *s3.GetObjectAttributesInput) (*request.Request, *s3.GetObjectAttributesOutput)

	// GetObjectAttributesWithContextFunc mocks the GetObjectAttributesWithContext method.
	GetObjectAttributesWithContextFunc func(contextMoqParam context.Context, getObjectAttributesInput *s3.GetObjectAttributesInput, options ...request.Option) (*s3.GetObjectAttributesOutput, error)

	// GetObjectLegalHoldFunc mocks the GetObjectLegalHold method.
	GetObjectLegalHoldFunc func(getObjectLegalHoldInput *s3.GetObjectLegalHoldInput) (*s3.GetObjectLegalHoldOutput, error)

	// GetObjectLegalHoldRequestFunc mocks the GetObjectLegalHoldRequest method.
	GetObjectLegalHoldRequestFunc func(getObjectLegalHoldInput *s3.GetObjectLegalHoldInput) (*request.Request, *s3.GetObjectLegalHoldOutput)

	// GetObjectLegalHoldWithContextFunc mocks the GetObjectLegalHoldWithContext method.
	GetObjectLegalHoldWithContextFunc func(contextMoqParam context.Context, getObjectLegalHoldInput *s3.GetObjectLegalHoldInput, options ...request.Option) (*s3.GetObjectLegalHoldOutput, error)

	// GetObjectLockConfigurationFunc mocks the GetObjectLockConfiguration method.
	GetObjectLockConfigurationFunc func(getObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput) (*s3.GetObjectLockConfigurationOutput, error)

	// GetObjectLockConfigurationRequestFunc mocks the GetObjectLockConfigurationRequest method.
	GetObjectLockConfigurationRequestFunc func(getObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput) (*request.Request, *s3.GetObjectLockConfigurationOutput)

	// GetObjectLockConfigurationWithContextFunc mocks the GetObjectLockConfigurationWithContext method.
	GetObjectLockConfigurationWithContextFunc func(contextMoqParam context.Context, getObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput, options ...request.Option) (*s3.GetObjectLockConfigurationOutput, error)

	// GetObjectRequestFunc mocks the GetObjectRequest method.
	GetObjectRequestFunc func(getObjectInput *s3.GetObjectInput) (*request.Request, *s3.GetObjectOutput)

	// GetObjectRetentionFunc mocks the GetObjectRetention method.
	GetObjectRetentionFunc func(getObjectRetentionInput *s3.GetObjectRetentionInput) (*s3.GetObjectRetentionOutput, error)

	// GetObjectRetentionRequestFunc mocks the GetObjectRetentionRequest method.
	GetObjectRetentionRequestFunc func(getObjectRetentionInput *s3.GetObjectRetentionInput) (*request.Request, *s3.GetObjectRetentionOutput)

	// GetObjectRetentionWithContextFunc mocks the GetObjectRetentionWithContext method.
	GetObjectRetentionWithContextFunc func(contextMoqParam context.Context, getObjectRetentionInput *s3.GetObjectRetentionInput, options ...request.Option) (*s3.GetObjectRetentionOutput, error)

	// GetObjectTaggingFunc mocks the GetObjectTagging method.
	GetObjectTaggingFunc func(getObjectTaggingInput *s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error)

	// GetObjectTaggingRequestFunc mocks the GetObjectTaggingRequest method.
	GetObjectTaggingRequestFunc func(getObjectTaggingInput *s3.GetObjectTaggingInput) (*request.Request, *s3.GetObjectTaggingOutput)

	// GetObjectTaggingWithContextFunc mocks the GetObjectTaggingWithContext method.
	GetObjectTaggingWithContextFunc func(contextMoqParam context.Context, getObjectTaggingInput *s3.GetObjectTaggingInput, options ...request.Option) (*s3.GetObjectTaggingOutput, error)

	// GetObjectTorrentFunc mocks the GetObjectTorrent method.
	GetObjectTorrentFunc func(getObjectTorrentInput *s3.GetObjectTorrentInput) (*s3.GetObjectTorrentOutput, error)

	// GetObjectTorrentRequestFunc mocks the GetObjectTorrentRequest method.
	GetObjectTorrentRequestFunc func(getObjectTorrentInput *s3.GetObjectTorrentInput) (*request.Request, *s3.GetObjectTorrentOutput)

	// GetObjectTorrentWithContextFunc mocks the GetObjectTorrentWithContext method.
	GetObjectTorrentWithContextFunc func(contextMoqParam context.Context, getObjectTorrentInput *s3.GetObjectTorrentInput, options ...request.Option) (*s3.GetObjectTorrentOutput, error)

	// GetObjectWithContextFunc mocks the GetObjectWithContext method.
	GetObjectWithContextFunc func(contextMoqParam context.Context, getObjectInput *s3.GetObjectInput, options ...request.Option) (*s3.GetObjectOutput, error)

	// GetPublicAccessBlockFunc mocks the GetPublicAccessBlock method.
	GetPublicAccessBlockFunc func(getPublicAccessBlockInput *s3.GetPublicAccessBlockInput) (*s3.GetPublicAccessBlockOutput, error)

	// GetPublicAccessBlockRequestFunc mocks the GetPublicAccessBlockRequest method.
	GetPublicAccessBlockRequestFunc func(getPublicAccessBlockInput *s3.GetPublicAccessBlockInput) (*request.Request, *s3.GetPublicAccessBlockOutput)

	// GetPublicAccessBlockWithContextFunc mocks the GetPublicAccessBlockWithContext method.
	GetPublicAccessBlockWithContextFunc func(contextMoqParam context.Context, getPublicAccessBlockInput *s3.GetPublicAccessBlockInput, options ...request.Option) (*s3.GetPublicAccessBlockOutput, error)

	// HeadBucketFunc mocks the HeadBucket method.
	HeadBucketFunc func(headBucketInput *s3.HeadBucketInput) (*s3.HeadBucketOutput, error)

	// HeadBucketRequestFunc mocks the HeadBucketRequest method.
	HeadBucketRequestFunc func(headBucketInput *s3.HeadBucketInput) (*request.Request, *s3.HeadBucketOutput)

	// HeadBucketWithContextFunc mocks the HeadBucketWithContext method.
	HeadBucketWithContextFunc func(contextMoqParam context.Context, headBucketInput *s3.HeadBucketInput, options ...request.Option) (*s3.HeadBucketOutput, error)

	// HeadObjectFunc mocks the HeadObject method.
	HeadObjectFunc func(headObjectInput *s3.HeadObjectInput) (*s3.HeadObjectOutput, error)

	// HeadObjectRequestFunc mocks the HeadObjectRequest method.
	HeadObjectRequestFunc func(headObjectInput *s3.HeadObjectInput) (*request.Request, *s3.HeadObjectOutput)

	// HeadObjectWithContextFunc mocks the HeadObjectWithContext method.
	HeadObjectWithContextFunc func(contextMoqParam context.Context, headObjectInput *s3.HeadObjectInput, options ...request.Option) (*s3.HeadObjectOutput, error)

	// ListBucketAnalyticsConfigurationsFunc mocks the ListBucketAnalyticsConfigurations method.
	ListBucketAnalyticsConfigurationsFunc func(listBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput) (*s3.ListBucketAnalyticsConfigurationsOutput, error)

	// ListBucketAnalyticsConfigurationsRequestFunc mocks the ListBucketAnalyticsConfigurationsRequest method.
	ListBucketAnalyticsConfigurationsRequestFunc func(listBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput) (*request.Request, *s3.ListBucketAnalyticsConfigurationsOutput)

	// ListBucketAnalyticsConfigurationsWithContextFunc mocks the ListBucketAnalyticsConfigurationsWithContext method.
	ListBucketAnalyticsConfigurationsWithContextFunc func(contextMoqParam context.Context, listBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput, options ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error)

	// ListBucketIntelligentTieringConfigurationsFunc mocks the ListBucketIntelligentTieringConfigurations method.
	ListBucketIntelligentTieringConfigurationsFunc func(listBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error)

	// ListBucketIntelligentTieringConfigurationsRequestFunc mocks the ListBucketIntelligentTieringConfigurationsRequest method.
	ListBucketIntelligentTieringConfigurationsRequestFunc func(listBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput) (*request.Request, *s3.ListBucketIntelligentTieringConfigurationsOutput)

	// ListBucketIntelligentTieringConfigurationsWithContextFunc mocks the ListBucketIntelligentTieringConfigurationsWithContext method.
	ListBucketIntelligentTieringConfigurationsWithContextFunc func(contextMoqParam context.Context, listBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput, options ...request.Option) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error)

	// ListBucketInventoryConfigurationsFunc mocks the ListBucketInventoryConfigurations method.
	ListBucketInventoryConfigurationsFunc func(listBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput) (*s3.ListBucketInventoryConfigurationsOutput, error)

	// ListBucketInventoryConfigurationsRequestFunc mocks the ListBucketInventoryConfigurationsRequest method.
	ListBucketInventoryConfigurationsRequestFunc func(listBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput) (*request.Request, *s3.ListBucketInventoryConfigurationsOutput)

	// ListBucketInventoryConfigurationsWithContextFunc mocks the ListBucketInventoryConfigurationsWithContext method.
	ListBucketInventoryConfigurationsWithContextFunc func(contextMoqParam context.Context, listBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput, options ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error)

	// ListBucketMetricsConfigurationsFunc mocks the ListBucketMetricsConfigurations method.
	ListBucketMetricsConfigurationsFunc func(listBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput) (*s3.ListBucketMetricsConfigurationsOutput, error)

	// ListBucketMetricsConfigurationsRequestFunc mocks the ListBucketMetricsConfigurationsRequest method.
	ListBucketMetricsConfigurationsRequestFunc func(listBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput) (*request.Request, *s3.ListBucketMetricsConfigurationsOutput)

	// ListBucketMetricsConfigurationsWithContextFunc mocks the ListBucketMetricsConfigurationsWithContext method.
	ListBucketMetricsConfigurationsWithContextFunc func(contextMoqParam context.Context, listBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput, options ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error)

	// ListBucketsFunc mocks the ListBuckets method.
	ListBucketsFunc func(listBucketsInput *s3.ListBucketsInput) (*s3.ListBucketsOutput, error)

	// ListBucketsRequestFunc mocks the ListBucketsRequest method.
	ListBucketsRequestFunc func(listBucketsInput *s3.ListBucketsInput) (*request.Request, *s3.ListBucketsOutput)

	// ListBucketsWithContextFunc mocks the ListBucketsWithContext method.
	ListBucketsWithContextFunc func(contextMoqParam context.Context, listBucketsInput *s3.ListBucketsInput, options ...request.Option) (*s3.ListBucketsOutput, error)

	// ListMultipartUploadsFunc mocks the ListMultipartUploads method.
	ListMultipartUploadsFunc func(listMultipartUploadsInput *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error)

	// ListMultipartUploadsPagesFunc mocks the ListMultipartUploadsPages method.
	ListMultipartUploadsPagesFunc func(listMultipartUploadsInput *s3.ListMultipartUploadsInput, fn func(*s3.ListMultipartUploadsOutput, bool) bool) error

	// ListMultipartUploadsPagesWithContextFunc mocks the ListMultipartUploadsPagesWithContext method.
	ListMultipartUploadsPagesWithContextFunc func(contextMoqParam context.Context, listMultipartUploadsInput *s3.ListMultipartUploadsInput, fn func(*s3.ListMultipartUploadsOutput, bool) bool, options ...request.Option) error

	// ListMultipartUploadsRequestFunc mocks the ListMultipartUploadsRequest method.
	ListMultipartUploadsRequestFunc func(listMultipartUploadsInput *s3.ListMultipartUploadsInput) (*request.Request, *s3.ListMultipartUploadsOutput)

	// ListMultipartUploadsWithContextFunc mocks the ListMultipartUploadsWithContext method.
	ListMultipartUploadsWithContextFunc func(contextMoqParam context.Context, listMultipartUploadsInput *s3.ListMultipartUploadsInput, options ...request.Option) (*s3.ListMultipartUploadsOutput, error)

	// ListObjectVersionsFunc mocks the ListObjectVersions method.
	ListObjectVersionsFunc func(listObjectVersionsInput *s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error)

	// ListObjectVersionsPagesFunc mocks the ListObjectVersionsPages method.
	ListObjectVersionsPagesFunc func(listObjectVersionsInput *s3.ListObjectVersionsInput, fn func(*s3.ListObjectVersionsOutput, bool) bool) error

	// ListObjectVersionsPagesWithContextFunc mocks the ListObjectVersionsPagesWithContext method.
	ListObjectVersionsPagesWithContextFunc func(contextMoqParam context.Context, listObjectVersionsInput *s3.ListObjectVersionsInput, fn func(*s3.ListObjectVersionsOutput, bool) bool, options ...request.Option) error

	// ListObjectVersionsRequestFunc mocks the ListObjectVersionsRequest method.
	ListObjectVersionsRequestFunc func(listObjectVersionsInput *s3.ListObjectVersionsInput) (*request.Request, *s3.ListObjectVersionsOutput)

	// ListObjectVersionsWithContextFunc mocks the ListObjectVersionsWithContext method.
	ListObjectVersionsWithContextFunc func(contextMoqParam context.Context, listObjectVersionsInput *s3.ListObjectVersionsInput, options ...request.Option) (*s3.ListObjectVersionsOutput, error)

	// ListObjectsFunc mocks the ListObjects method.
	ListObjectsFunc func(listObjectsInput *s3.ListObjectsInput) (*s3.ListObjectsOutput, error)

	// ListObjectsPagesFunc mocks the ListObjectsPages method.
	ListObjectsPagesFunc func(listObjectsInput *s3.ListObjectsInput, fn func(*s3.ListObjectsOutput, bool) bool) error

	// ListObjectsPagesWithContextFunc mocks the ListObjectsPagesWithContext method.
	ListObjectsPagesWithContextFunc func(contextMoqParam context.Context, listObjectsInput *s3.ListObjectsInput, fn func(*s3.ListObjectsOutput, bool) bool, options ...request.Option) error

	// ListObjectsRequestFunc mocks the ListObjectsRequest method.
	ListObjectsRequestFunc func(listObjectsInput *s3.ListObjectsInput) (*request.Request, *s3.ListObjectsOutput)

	// ListObjectsV2Func mocks the ListObjectsV2 method.
	ListObjectsV2Func func(listObjectsV2Input *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error)

	// ListObjectsV2PagesFunc mocks the ListObjectsV2Pages method.
	ListObjectsV2PagesFunc func(listObjectsV2Input *s3.ListObjectsV2Input, fn func(*s3.ListObjectsV2Output, bool) bool) error

	// ListObjectsV2PagesWithContextFunc mocks the ListObjectsV2PagesWithContext method.
	ListObjectsV2PagesWithContextFunc func(contextMoqParam context.Context, listObjectsV2Input *s3.ListObjectsV2Input, fn func(*s3.ListObjectsV2Output, bool) bool, options ...request.Option) error

	// ListObjectsV2RequestFunc mocks the ListObjectsV2Request method.
	ListObjectsV2RequestFunc func(listObjectsV2Input *s3.ListObjectsV2Input) (*request.Request, *s3.ListObjectsV2Output)

	// ListObjectsV2WithContextFunc mocks the ListObjectsV2WithContext method.
	ListObjectsV2WithContextFunc func(contextMoqParam context.Context, listObjectsV2Input *s3.ListObjectsV2Input, options ...request.Option) (*s3.ListObjectsV2Output, error)

	// ListObjectsWithContextFunc mocks the ListObjectsWithContext method.
	ListObjectsWithContextFunc func(contextMoqParam context.Context, listObjectsInput *s3.ListObjectsInput, options ...request.Option) (*s3.ListObjectsOutput, error)

	// ListPartsFunc mocks the ListParts method.
	ListPartsFunc func(listPartsInput *s3.ListPartsInput) (*s3.ListPartsOutput, error)

	// ListPartsPagesFunc mocks the ListPartsPages method.
	ListPartsPagesFunc func(listPartsInput *s3.ListPartsInput, fn func(*s3.ListPartsOutput, bool) bool) error

	// ListPartsPagesWithContextFunc mocks the ListPartsPagesWithContext method.
	ListPartsPagesWithContextFunc func(contextMoqParam context.Context, listPartsInput *s3.ListPartsInput, fn func(*s3.ListPartsOutput, bool) bool, options ...request.Option) error

	// ListPartsRequestFunc mocks the ListPartsRequest method.
	ListPartsRequestFunc func(listPartsInput *s3.ListPartsInput) (*request.Request, *s3.ListPartsOutput)

	// ListPartsWithContextFunc mocks the ListPartsWithContext method.
	ListPartsWithContextFunc func(contextMoqParam context.Context, listPartsInput *s3.ListPartsInput, options ...request.Option) (*s3.ListPartsOutput, error)

	// PutBucketAccelerateConfigurationFunc mocks the PutBucketAccelerateConfiguration method.
	PutBucketAccelerateConfigurationFunc func(putBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput) (*s3.PutBucketAccelerateConfigurationOutput, error)

	// PutBucketAccelerateConfigurationRequestFunc mocks the PutBucketAccelerateConfigurationRequest method.
	PutBucketAccelerateConfigurationRequestFunc func(putBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput) (*request.Request, *s3.PutBucketAccelerateConfigurationOutput)

	// PutBucketAccelerateConfigurationWithContextFunc mocks the PutBucketAccelerateConfigurationWithContext method.
	PutBucketAccelerateConfigurationWithContextFunc func(contextMoqParam context.Context, putBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput, options ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error)

	// PutBucketAclFunc mocks the PutBucketAcl method.
	PutBucketAclFunc func(putBucketAclInput *s3.PutBucketAclInput) (*s3.PutBucketAclOutput, error)

	// PutBucketAclRequestFunc mocks the PutBucketAclRequest method.
	PutBucketAclRequestFunc func(putBucketAclInput *s3.PutBucketAclInput) (*request.Request, *s3.PutBucketAclOutput)

	// PutBucketAclWithContextFunc mocks the PutBucketAclWithContext method.
	PutBucketAclWithContextFunc func(contextMoqParam context.Context, putBucketAclInput *s3.PutBucketAclInput, options ...request.Option) (*s3.PutBucketAclOutput, error)

	// PutBucketAnalyticsConfigurationFunc mocks the PutBucketAnalyticsConfiguration method.
	PutBucketAnalyticsConfigurationFunc func(putBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput) (*s3.PutBucketAnalyticsConfigurationOutput, error)

	// PutBucketAnalyticsConfigurationRequestFunc mocks the PutBucketAnalyticsConfigurationRequest method.
	PutBucketAnalyticsConfigurationRequestFunc func(putBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput) (*request.Request, *s3.PutBucketAnalyticsConfigurationOutput)

	// PutBucketAnalyticsConfigurationWithContextFunc mocks the PutBucketAnalyticsConfigurationWithContext method.
	PutBucketAnalyticsConfigurationWithContextFunc func(contextMoqParam context.Context, putBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput, options ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error)

	// PutBucketCorsFunc mocks the PutBucketCors method.
	PutBucketCorsFunc func(putBucketCorsInput *s3.PutBucketCorsInput) (*s3.PutBucketCorsOutput, error)

	// PutBucketCorsRequestFunc mocks the PutBucketCorsRequest method.
	PutBucketCorsRequestFunc func(putBucketCorsInput *s3.PutBucketCorsInput) (*request.Request, *s3.PutBucketCorsOutput)

	// PutBucketCorsWithContextFunc mocks the PutBucketCorsWithContext method.
	PutBucketCorsWithContextFunc func(contextMoqParam context.Context, putBucketCorsInput *s3.PutBucketCorsInput, options ...request.Option) (*s3.PutBucketCorsOutput, error)

	// PutBucketEncryptionFunc mocks the PutBucketEncryption method.
	PutBucketEncryptionFunc func(putBucketEncryptionInput *s3.PutBucketEncryptionInput) (*s3.PutBucketEncryptionOutput, error)

	// PutBucketEncryptionRequestFunc mocks the PutBucketEncryptionRequest method.
	PutBucketEncryptionRequestFunc func(putBucketEncryptionInput *s3.PutBucketEncryptionInput) (*request.Request, *s3.PutBucketEncryptionOutput)

	// PutBucketEncryptionWithContextFunc mocks the PutBucketEncryptionWithContext method.
	PutBucketEncryptionWithContextFunc func(contextMoqParam context.Context, putBucketEncryptionInput *s3.PutBucketEncryptionInput, options ...request.Option) (*s3.PutBucketEncryptionOutput, error)

	// PutBucketIntelligentTieringConfigurationFunc mocks the PutBucketIntelligentTieringConfiguration method.
	PutBucketIntelligentTieringConfigurationFunc func(putBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput) (*s3.PutBucketIntelligentTieringConfigurationOutput, error)

	// PutBucketIntelligentTieringConfigurationRequestFunc mocks the PutBucketIntelligentTieringConfigurationRequest method.
	PutBucketIntelligentTieringConfigurationRequestFunc func(putBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput) (*request.Request, *s3.PutBucketIntelligentTieringConfigurationOutput)

	// PutBucketIntelligentTieringConfigurationWithContextFunc mocks the PutBucketIntelligentTieringConfigurationWithContext method.
	PutBucketIntelligentTieringConfigurationWithContextFunc func(contextMoqParam context.Context, putBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput, options ...request.Option) (*s3.PutBucketIntelligentTieringConfigurationOutput, error)

	// PutBucketInventoryConfigurationFunc mocks the PutBucketInventoryConfiguration method.
	PutBucketInventoryConfigurationFunc func(putBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput) (*s3.PutBucketInventoryConfigurationOutput, error)

	// PutBucketInventoryConfigurationRequestFunc mocks the PutBucketInventoryConfigurationRequest method.
	PutBucketInventoryConfigurationRequestFunc func(putBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput) (*request.Request, *s3.PutBucketInventoryConfigurationOutput)

	// PutBucketInventoryConfigurationWithContextFunc mocks the PutBucketInventoryConfigurationWithContext method.
	PutBucketInventoryConfigurationWithContextFunc func(contextMoqParam context.Context, putBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput, options ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error)

	// PutBucketLifecycleFunc mocks the PutBucketLifecycle method.
	PutBucketLifecycleFunc func(putBucketLifecycleInput *s3.PutBucketLifecycleInput) (*s3.PutBucketLifecycleOutput, error)

	// PutBucketLifecycleConfigurationFunc mocks the PutBucketLifecycleConfiguration method.
	PutBucketLifecycleConfigurationFunc func(putBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error)

	// PutBucketLifecycleConfigurationRequestFunc mocks the PutBucketLifecycleConfigurationRequest method.
	PutBucketLifecycleConfigurationRequestFunc func(putBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput) (*request.Request, *s3.PutBucketLifecycleConfigurationOutput)

	// PutBucketLifecycleConfigurationWithContextFunc mocks the PutBucketLifecycleConfigurationWithContext method.
	PutBucketLifecycleConfigurationWithContextFunc func(contextMoqParam context.Context, putBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput, options ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error)

	// PutBucketLifecycleRequestFunc mocks the PutBucketLifecycleRequest method.
	PutBucketLifecycleRequestFunc func(putBucketLifecycleInput *s3.PutBucketLifecycleInput) (*request.Request, *s3.PutBucketLifecycleOutput)

	// PutBucketLifecycleWithContextFunc mocks the PutBucketLifecycleWithContext method.
	PutBucketLifecycleWithContextFunc func(contextMoqParam context.Context, putBucketLifecycleInput *s3.PutBucketLifecycleInput, options ...request.Option) (*s3.PutBucketLifecycleOutput, error)

	// PutBucketLoggingFunc mocks the PutBucketLogging method.
	PutBucketLoggingFunc func(putBucketLoggingInput *s3.PutBucketLoggingInput) (*s3.PutBucketLoggingOutput, error)

	// PutBucketLoggingRequestFunc mocks the PutBucketLoggingRequest method.
	PutBucketLoggingRequestFunc func(putBucketLoggingInput *s3.PutBucketLoggingInput) (*request.Request, *s3.PutBucketLoggingOutput)

	// PutBucketLoggingWithContextFunc mocks the PutBucketLoggingWithContext method.
	PutBucketLoggingWithContextFunc func(contextMoqParam context.Context, putBucketLoggingInput *s3.PutBucketLoggingInput, options ...request.Option) (*s3.PutBucketLoggingOutput, error)

	// PutBucketMetricsConfigurationFunc mocks the PutBucketMetricsConfiguration method.
	PutBucketMetricsConfigurationFunc func(putBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput) (*s3.PutBucketMetricsConfigurationOutput, error)

	// PutBucketMetricsConfigurationRequestFunc mocks the PutBucketMetricsConfigurationRequest method.
	PutBucketMetricsConfigurationRequestFunc func(putBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput) (*request.Request, *s3.PutBucketMetricsConfigurationOutput)

	// PutBucketMetricsConfigurationWithContextFunc mocks the PutBucketMetricsConfigurationWithContext method.
	PutBucketMetricsConfigurationWithContextFunc func(contextMoqParam context.Context, putBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput, options ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error)

	// PutBucketNotificationFunc mocks the PutBucketNotification method.
	PutBucketNotificationFunc func(putBucketNotificationInput *s3.PutBucketNotificationInput) (*s3.PutBucketNotificationOutput, error)

	// PutBucketNotificationConfigurationFunc mocks the PutBucketNotificationConfiguration method.
	PutBucketNotificationConfigurationFunc func(putBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput) (*s3.PutBucketNotificationConfigurationOutput, error)

	// PutBucketNotificationConfigurationRequestFunc mocks the PutBucketNotificationConfigurationRequest method.
	PutBucketNotificationConfigurationRequestFunc func(putBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput) (*request.Request, *s3.PutBucketNotificationConfigurationOutput)

	// PutBucketNotificationConfigurationWithContextFunc mocks the PutBucketNotificationConfigurationWithContext method.
	PutBucketNotificationConfigurationWithContextFunc func(contextMoqParam context.Context, putBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput, options ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error)

	// PutBucketNotificationRequestFunc mocks the PutBucketNotificationRequest method.
	PutBucketNotificationRequestFunc func(putBucketNotificationInput *s3.PutBucketNotificationInput) (*request.Request, *s3.PutBucketNotificationOutput)

	// PutBucketNotificationWithContextFunc mocks the PutBucketNotificationWithContext method.
	PutBucketNotificationWithContextFunc func(contextMoqParam context.Context, putBucketNotificationInput *s3.PutBucketNotificationInput, options ...request.Option) (*s3.PutBucketNotificationOutput, error)

	// PutBucketOwnershipControlsFunc mocks the PutBucketOwnershipControls method.
	PutBucketOwnershipControlsFunc func(putBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput) (*s3.PutBucketOwnershipControlsOutput, error)

	// PutBucketOwnershipControlsRequestFunc mocks the PutBucketOwnershipControlsRequest method.
	PutBucketOwnershipControlsRequestFunc func(putBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput) (*request.Request, *s3.PutBucketOwnershipControlsOutput)

	// PutBucketOwnershipControlsWithContextFunc mocks the PutBucketOwnershipControlsWithContext method.
	PutBucketOwnershipControlsWithContextFunc func(contextMoqParam context.Context, putBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput, options ...request.Option) (*s3.PutBucketOwnershipControlsOutput, error)

	// PutBucketPolicyFunc mocks the PutBucketPolicy method.
	PutBucketPolicyFunc func(putBucketPolicyInput *s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error)

	// PutBucketPolicyRequestFunc mocks the PutBucketPolicyRequest method.
	PutBucketPolicyRequestFunc func(putBucketPolicyInput *s3.PutBucketPolicyInput) (*request.Request, *s3.PutBucketPolicyOutput)

	// PutBucketPolicyWithContextFunc mocks the PutBucketPolicyWithContext method.
	PutBucketPolicyWithContextFunc func(contextMoqParam context.Context, putBucketPolicyInput *s3.PutBucketPolicyInput, options ...request.Option) (*s3.PutBucketPolicyOutput, error)

	// PutBucketReplicationFunc mocks the PutBucketReplication method.
	PutBucketReplicationFunc func(putBucketReplicationInput *s3.PutBucketReplicationInput) (*s3.PutBucketReplicationOutput, error)

	// PutBucketReplicationRequestFunc mocks the PutBucketReplicationRequest method.
	PutBucketReplicationRequestFunc func(putBucketReplicationInput *s3.PutBucketReplicationInput) (*request.Request, *s3.PutBucketReplicationOutput)

	// PutBucketReplicationWithContextFunc mocks the PutBucketReplicationWithContext method.
	PutBucketReplicationWithContextFunc func(contextMoqParam context.Context, putBucketReplicationInput *s3.PutBucketReplicationInput, options ...request.Option) (*s3.PutBucketReplicationOutput, error)

	// PutBucketRequestPaymentFunc mocks the PutBucketRequestPayment method.
	PutBucketRequestPaymentFunc func(putBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput) (*s3.PutBucketRequestPaymentOutput, error)

	// PutBucketRequestPaymentRequestFunc mocks the PutBucketRequestPaymentRequest method.
	PutBucketRequestPaymentRequestFunc func(putBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput) (*request.Request, *s3.PutBucketRequestPaymentOutput)

	// PutBucketRequestPaymentWithContextFunc mocks the PutBucketRequestPaymentWithContext method.
	PutBucketRequestPaymentWithContextFunc func(contextMoqParam context.Context, putBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput, options ...request.Option) (*s3.PutBucketRequestPaymentOutput, error)

	// PutBucketTaggingFunc mocks the PutBucketTagging method.
	PutBucketTaggingFunc func(putBucketTaggingInput *s3.PutBucketTaggingInput) (*s3.PutBucketTaggingOutput, error)

	// PutBucketTaggingRequestFunc mocks the PutBucketTaggingRequest method.
	PutBucketTaggingRequestFunc func(putBucketTaggingInput *s3.PutBucketTaggingInput) (*request.Request, *s3.PutBucketTaggingOutput)

	// PutBucketTaggingWithContextFunc mocks the PutBucketTaggingWithContext method.
	PutBucketTaggingWithContextFunc func(contextMoqParam context.Context, putBucketTaggingInput *s3.PutBucketTaggingInput, options ...request.Option) (*s3.PutBucketTaggingOutput, error)

	// PutBucketVersioningFunc mocks the PutBucketVersioning method.
	PutBucketVersioningFunc func(putBucketVersioningInput *s3.PutBucketVersioningInput) (*s3.PutBucketVersioningOutput, error)

	// PutBucketVersioningRequestFunc mocks the PutBucketVersioningRequest method.
	PutBucketVersioningRequestFunc func(putBucketVersioningInput *s3.PutBucketVersioningInput) (*request.Request, *s3.PutBucketVersioningOutput)

	// PutBucketVersioningWithContextFunc mocks the PutBucketVersioningWithContext method.
	PutBucketVersioningWithContextFunc func(contextMoqParam context.Context, putBucketVersioningInput *s3.PutBucketVersioningInput, options ...request.Option) (*s3.PutBucketVersioningOutput, error)

	// PutBucketWebsiteFunc mocks the PutBucketWebsite method.
	PutBucketWebsiteFunc func(putBucketWebsiteInput *s3.PutBucketWebsiteInput) (*s3.PutBucketWebsiteOutput, error)

	// PutBucketWebsiteRequestFunc mocks the PutBucketWebsiteRequest method.
	PutBucketWebsiteRequestFunc func(putBucketWebsiteInput *s3.PutBucketWebsiteInput) (*request.Request, *s3.PutBucketWebsiteOutput)

	// PutBucketWebsiteWithContextFunc mocks the PutBucketWebsiteWithContext method.
	PutBucketWebsiteWithContextFunc func(contextMoqParam context.Context, putBucketWebsiteInput *s3.PutBucketWebsiteInput, options ...request.Option) (*s3.PutBucketWebsiteOutput, error)

	// PutObjectFunc mocks the PutObject method.
	PutObjectFunc func(putObjectInput *s3.PutObjectInput) (*s3.PutObjectOutput, error)

	// PutObjectAclFunc mocks the PutObjectAcl method.
	PutObjectAclFunc func(putObjectAclInput *s3.PutObjectAclInput) (*s3.PutObjectAclOutput, error)

	// PutObjectAclRequestFunc mocks the PutObjectAclRequest method.
	PutObjectAclRequestFunc func(putObjectAclInput *s3.PutObjectAclInput) (*request.Request, *s3.PutObjectAclOutput)

	// PutObjectAclWithContextFunc mocks the PutObjectAclWithContext method.
	PutObjectAclWithContextFunc func(contextMoqParam context.Context, putObjectAclInput *s3.PutObjectAclInput, options ...request.Option) (*s3.PutObjectAclOutput, error)

	// PutObjectLegalHoldFunc mocks the PutObjectLegalHold method.
	PutObjectLegalHoldFunc func(putObjectLegalHoldInput *s3.PutObjectLegalHoldInput) (*s3.PutObjectLegalHoldOutput, error)

	// PutObjectLegalHoldRequestFunc mocks the PutObjectLegalHoldRequest method.
	PutObjectLegalHoldRequestFunc func(putObjectLegalHoldInput *s3.PutObjectLegalHoldInput) (*request.Request, *s3.PutObjectLegalHoldOutput)

	// PutObjectLegalHoldWithContextFunc mocks the PutObjectLegalHoldWithContext method.
	PutObjectLegalHoldWithContextFunc func(contextMoqParam context.Context, putObjectLegalHoldInput *s3.PutObjectLegalHoldInput, options ...request.Option) (*s3.PutObjectLegalHoldOutput, error)

	// PutObjectLockConfigurationFunc mocks the PutObjectLockConfiguration method.
	PutObjectLockConfigurationFunc func(putObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput) (*s3.PutObjectLockConfigurationOutput, error)

	// PutObjectLockConfigurationRequestFunc mocks the PutObjectLockConfigurationRequest method.
	PutObjectLockConfigurationRequestFunc func(putObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput) (*request.Request, *s3.PutObjectLockConfigurationOutput)

	// PutObjectLockConfigurationWithContextFunc mocks the PutObjectLockConfigurationWithContext method.
	PutObjectLockConfigurationWithContextFunc func(contextMoqParam context.Context, putObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput, options ...request.Option) (*s3.PutObjectLockConfigurationOutput, error)

	// PutObjectRequestFunc mocks the PutObjectRequest method.
	PutObjectRequestFunc func(putObjectInput *s3.PutObjectInput) (*request.Request, *s3.PutObjectOutput)

	// PutObjectRetentionFunc mocks the PutObjectRetention method.
	PutObjectRetentionFunc func(putObjectRetentionInput *s3.PutObjectRetentionInput) (*s3.PutObjectRetentionOutput, error)

	// PutObjectRetentionRequestFunc mocks the PutObjectRetentionRequest method.
	PutObjectRetentionRequestFunc func(putObjectRetentionInput *s3.PutObjectRetentionInput) (*request.Request, *s3.PutObjectRetentionOutput)

	// PutObjectRetentionWithContextFunc mocks the PutObjectRetentionWithContext method.
	PutObjectRetentionWithContextFunc func(contextMoqParam context.Context, putObjectRetentionInput *s3.PutObjectRetentionInput, options ...request.Option) (*s3.PutObjectRetentionOutput, error)

	// PutObjectTaggingFunc mocks the PutObjectTagging method.
	PutObjectTaggingFunc func(putObjectTaggingInput *s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error)

	// PutObjectTaggingRequestFunc mocks the PutObjectTaggingRequest method.
	PutObjectTaggingRequestFunc func(putObjectTaggingInput *s3.PutObjectTaggingInput) (*request.Request, *s3.PutObjectTaggingOutput)

	// PutObjectTaggingWithContextFunc mocks the PutObjectTaggingWithContext method.
	PutObjectTaggingWithContextFunc func(contextMoqParam context.Context, putObjectTaggingInput *s3.PutObjectTaggingInput, options ...request.Option) (*s3.PutObjectTaggingOutput, error)

	// PutObjectWithContextFunc mocks the PutObjectWithContext method.
	PutObjectWithContextFunc func(contextMoqParam context.Context, putObjectInput *s3.PutObjectInput, options ...request.Option) (*s3.PutObjectOutput, error)

	// PutPublicAccessBlockFunc mocks the PutPublicAccessBlock method.
	PutPublicAccessBlockFunc func(putPublicAccessBlockInput *s3.PutPublicAccessBlockInput) (*s3.PutPublicAccessBlockOutput, error)

	// PutPublicAccessBlockRequestFunc mocks the PutPublicAccessBlockRequest method.
	PutPublicAccessBlockRequestFunc func(putPublicAccessBlockInput *s3.PutPublicAccessBlockInput) (*request.Request, *s3.PutPublicAccessBlockOutput)

	// PutPublicAccessBlockWithContextFunc mocks the PutPublicAccessBlockWithContext method.
	PutPublicAccessBlockWithContextFunc func(contextMoqParam context.Context, putPublicAccessBlockInput *s3.PutPublicAccessBlockInput, options ...request.Option) (*s3.PutPublicAccessBlockOutput, error)

	// RestoreObjectFunc mocks the RestoreObject method.
	RestoreObjectFunc func(restoreObjectInput *s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error)

	// RestoreObjectRequestFunc mocks the RestoreObjectRequest method.
	RestoreObjectRequestFunc func(restoreObjectInput *s3.RestoreObjectInput) (*request.Request, *s3.RestoreObjectOutput)

	// RestoreObjectWithContextFunc mocks the RestoreObjectWithContext method.
	RestoreObjectWithContextFunc func(contextMoqParam context.Context, restoreObjectInput *s3.RestoreObjectInput, options ...request.Option) (*s3.RestoreObjectOutput, error)

	// SelectObjectContentFunc mocks the SelectObjectContent method.
	SelectObjectContentFunc func(selectObjectContentInput *s3.SelectObjectContentInput) (*s3.SelectObjectContentOutput, error)

	// SelectObjectContentRequestFunc mocks the SelectObjectContentRequest method.
	SelectObjectContentRequestFunc func(selectObjectContentInput *s3.SelectObjectContentInput) (*request.Request, *s3.SelectObjectContentOutput)

	// SelectObjectContentWithContextFunc mocks the SelectObjectContentWithContext method.
	SelectObjectContentWithContextFunc func(contextMoqParam context.Context, selectObjectContentInput *s3.SelectObjectContentInput, options ...request.Option) (*s3.SelectObjectContentOutput, error)

	// UploadPartFunc mocks the UploadPart method.
	UploadPartFunc func(uploadPartInput *s3.UploadPartInput) (*s3.UploadPartOutput, error)

	// UploadPartCopyFunc mocks the UploadPartCopy method.
	UploadPartCopyFunc func(uploadPartCopyInput *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error)

	// UploadPartCopyRequestFunc mocks the UploadPartCopyRequest method.
	UploadPartCopyRequestFunc func(uploadPartCopyInput *s3.UploadPartCopyInput) (*request.Request, *s3.UploadPartCopyOutput)

	// UploadPartCopyWithContextFunc mocks the UploadPartCopyWithContext method.
	UploadPartCopyWithContextFunc func(contextMoqParam context.Context, uploadPartCopyInput *s3.UploadPartCopyInput, options ...request.Option) (*s3.UploadPartCopyOutput, error)

	// UploadPartRequestFunc mocks the UploadPartRequest method.
	UploadPartRequestFunc func(uploadPartInput *s3.UploadPartInput) (*request.Request, *s3.UploadPartOutput)

	// UploadPartWithContextFunc mocks the UploadPartWithContext method.
	UploadPartWithContextFunc func(contextMoqParam context.Context, uploadPartInput *s3.UploadPartInput, options ...request.Option) (*s3.UploadPartOutput, error)

	// WaitUntilBucketExistsFunc mocks the WaitUntilBucketExists method.
	WaitUntilBucketExistsFunc func(headBucketInput *s3.HeadBucketInput) error

	// WaitUntilBucketExistsWithContextFunc mocks the WaitUntilBucketExistsWithContext method.
	WaitUntilBucketExistsWithContextFunc func(contextMoqParam context.Context, headBucketInput *s3.HeadBucketInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilBucketNotExistsFunc mocks the WaitUntilBucketNotExists method.
	WaitUntilBucketNotExistsFunc func(headBucketInput *s3.HeadBucketInput) error

	// WaitUntilBucketNotExistsWithContextFunc mocks the WaitUntilBucketNotExistsWithContext method.
	WaitUntilBucketNotExistsWithContextFunc func(contextMoqParam context.Context, headBucketInput *s3.HeadBucketInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilObjectExistsFunc mocks the WaitUntilObjectExists method.
	WaitUntilObjectExistsFunc func(headObjectInput *s3.HeadObjectInput) error

	// WaitUntilObjectExistsWithContextFunc mocks the WaitUntilObjectExistsWithContext method.
	WaitUntilObjectExistsWithContextFunc func(contextMoqParam context.Context, headObjectInput *s3.HeadObjectInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilObjectNotExistsFunc mocks the WaitUntilObjectNotExists method.
	WaitUntilObjectNotExistsFunc func(headObjectInput *s3.HeadObjectInput) error

	// WaitUntilObjectNotExistsWithContextFunc mocks the WaitUntilObjectNotExistsWithContext method.
	WaitUntilObjectNotExistsWithContextFunc func(contextMoqParam context.Context, headObjectInput *s3.HeadObjectInput, waiterOptions ...request.WaiterOption) error

	// WriteGetObjectResponseFunc mocks the WriteGetObjectResponse method.
	WriteGetObjectResponseFunc func(writeGetObjectResponseInput *s3.WriteGetObjectResponseInput) (*s3.WriteGetObjectResponseOutput, error)

	// WriteGetObjectResponseRequestFunc mocks the WriteGetObjectResponseRequest method.
	WriteGetObjectResponseRequestFunc func(writeGetObjectResponseInput *s3.WriteGetObjectResponseInput) (*request.Request, *s3.WriteGetObjectResponseOutput)

	// WriteGetObjectResponseWithContextFunc mocks the WriteGetObjectResponseWithContext method.
	WriteGetObjectResponseWithContextFunc func(contextMoqParam context.Context, writeGetObjectResponseInput *s3.WriteGetObjectResponseInput, options ...request.Option) (*s3.WriteGetObjectResponseOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// AbortMultipartUpload holds details about calls to the AbortMultipartUpload method.
		AbortMultipartUpload []struct {
			// AbortMultipartUploadInput is the abortMultipartUploadInput argument value.
			AbortMultipartUploadInput *s3.AbortMultipartUploadInput
		}
		// AbortMultipartUploadRequest holds details about calls to the AbortMultipartUploadRequest method.
		AbortMultipartUploadRequest []struct {
			// AbortMultipartUploadInput is the abortMultipartUploadInput argument value.
			AbortMultipartUploadInput *s3.AbortMultipartUploadInput
		}
		// AbortMultipartUploadWithContext holds details about calls to the AbortMultipartUploadWithContext method.
		AbortMultipartUploadWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AbortMultipartUploadInput is the abortMultipartUploadInput argument value.
			AbortMultipartUploadInput *s3.AbortMultipartUploadInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CompleteMultipartUpload holds details about calls to the CompleteMultipartUpload method.
		CompleteMultipartUpload []struct {
			// CompleteMultipartUploadInput is the completeMultipartUploadInput argument value.
			CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
		}
		// CompleteMultipartUploadRequest holds details about calls to the CompleteMultipartUploadRequest method.
		CompleteMultipartUploadRequest []struct {
			// CompleteMultipartUploadInput is the completeMultipartUploadInput argument value.
			CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
		}
		// CompleteMultipartUploadWithContext holds details about calls to the CompleteMultipartUploadWithContext method.
		CompleteMultipartUploadWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CompleteMultipartUploadInput is the completeMultipartUploadInput argument value.
			CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CopyObject holds details about calls to the CopyObject method.
		CopyObject []struct {
			// CopyObjectInput is the copyObjectInput argument value.
			CopyObjectInput *s3.CopyObjectInput
		}
		// CopyObjectRequest holds details about calls to the CopyObjectRequest method.
		CopyObjectRequest []struct {
			// CopyObjectInput is the copyObjectInput argument value.
			CopyObjectInput *s3.CopyObjectInput
		}
		// CopyObjectWithContext holds details about calls to the CopyObjectWithContext method.
		CopyObjectWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CopyObjectInput is the copyObjectInput argument value.
			CopyObjectInput *s3.CopyObjectInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateBucket holds details about calls to the CreateBucket method.
		CreateBucket []struct {
			// CreateBucketInput is the createBucketInput argument value.
			CreateBucketInput *s3.CreateBucketInput
		}
		// CreateBucketRequest holds details about calls to the CreateBucketRequest method.
		CreateBucketRequest []struct {
			// CreateBucketInput is the createBucketInput argument value.
			CreateBucketInput *s3.CreateBucketInput
		}
		// CreateBucketWithContext holds details about calls to the CreateBucketWithContext method.
		CreateBucketWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateBucketInput is the createBucketInput argument value.
			CreateBucketInput *s3.CreateBucketInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateMultipartUpload holds details about calls to the CreateMultipartUpload method.
		CreateMultipartUpload []struct {
			// CreateMultipartUploadInput is the createMultipartUploadInput argument value.
			CreateMultipartUploadInput *s3.CreateMultipartUploadInput
		}
		// CreateMultipartUploadRequest holds details about calls to the CreateMultipartUploadRequest method.
		CreateMultipartUploadRequest []struct {
			// CreateMultipartUploadInput is the createMultipartUploadInput argument value.
			CreateMultipartUploadInput *s3.CreateMultipartUploadInput
		}
		// CreateMultipartUploadWithContext holds details about calls to the CreateMultipartUploadWithContext method.
		CreateMultipartUploadWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateMultipartUploadInput is the createMultipartUploadInput argument value.
			CreateMultipartUploadInput *s3.CreateMultipartUploadInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucket holds details about calls to the DeleteBucket method.
		DeleteBucket []struct {
			// DeleteBucketInput is the deleteBucketInput argument value.
			DeleteBucketInput *s3.DeleteBucketInput
		}
		// DeleteBucketAnalyticsConfiguration holds details about calls to the DeleteBucketAnalyticsConfiguration method.
		DeleteBucketAnalyticsConfiguration []struct {
			// DeleteBucketAnalyticsConfigurationInput is the deleteBucketAnalyticsConfigurationInput argument value.
			DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
		}
		// DeleteBucketAnalyticsConfigurationRequest holds details about calls to the DeleteBucketAnalyticsConfigurationRequest method.
		DeleteBucketAnalyticsConfigurationRequest []struct {
			// DeleteBucketAnalyticsConfigurationInput is the deleteBucketAnalyticsConfigurationInput argument value.
			DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
		}
		// DeleteBucketAnalyticsConfigurationWithContext holds details about calls to the DeleteBucketAnalyticsConfigurationWithContext method.
		DeleteBucketAnalyticsConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketAnalyticsConfigurationInput is the deleteBucketAnalyticsConfigurationInput argument value.
			DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketCors holds details about calls to the DeleteBucketCors method.
		DeleteBucketCors []struct {
			// DeleteBucketCorsInput is the deleteBucketCorsInput argument value.
			DeleteBucketCorsInput *s3.DeleteBucketCorsInput
		}
		// DeleteBucketCorsRequest holds details about calls to the DeleteBucketCorsRequest method.
		DeleteBucketCorsRequest []struct {
			// DeleteBucketCorsInput is the deleteBucketCorsInput argument value.
			DeleteBucketCorsInput *s3.DeleteBucketCorsInput
		}
		// DeleteBucketCorsWithContext holds details about calls to the DeleteBucketCorsWithContext method.
		DeleteBucketCorsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketCorsInput is the deleteBucketCorsInput argument value.
			DeleteBucketCorsInput *s3.DeleteBucketCorsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketEncryption holds details about calls to the DeleteBucketEncryption method.
		DeleteBucketEncryption []struct {
			// DeleteBucketEncryptionInput is the deleteBucketEncryptionInput argument value.
			DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
		}
		// DeleteBucketEncryptionRequest holds details about calls to the DeleteBucketEncryptionRequest method.
		DeleteBucketEncryptionRequest []struct {
			// DeleteBucketEncryptionInput is the deleteBucketEncryptionInput argument value.
			DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
		}
		// DeleteBucketEncryptionWithContext holds details about calls to the DeleteBucketEncryptionWithContext method.
		DeleteBucketEncryptionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketEncryptionInput is the deleteBucketEncryptionInput argument value.
			DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketIntelligentTieringConfiguration holds details about calls to the DeleteBucketIntelligentTieringConfiguration method.
		DeleteBucketIntelligentTieringConfiguration []struct {
			// DeleteBucketIntelligentTieringConfigurationInput is the deleteBucketIntelligentTieringConfigurationInput argument value.
			DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
		}
		// DeleteBucketIntelligentTieringConfigurationRequest holds details about calls to the DeleteBucketIntelligentTieringConfigurationRequest method.
		DeleteBucketIntelligentTieringConfigurationRequest []struct {
			// DeleteBucketIntelligentTieringConfigurationInput is the deleteBucketIntelligentTieringConfigurationInput argument value.
			DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
		}
		// DeleteBucketIntelligentTieringConfigurationWithContext holds details about calls to the DeleteBucketIntelligentTieringConfigurationWithContext method.
		DeleteBucketIntelligentTieringConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketIntelligentTieringConfigurationInput is the deleteBucketIntelligentTieringConfigurationInput argument value.
			DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketInventoryConfiguration holds details about calls to the DeleteBucketInventoryConfiguration method.
		DeleteBucketInventoryConfiguration []struct {
			// DeleteBucketInventoryConfigurationInput is the deleteBucketInventoryConfigurationInput argument value.
			DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
		}
		// DeleteBucketInventoryConfigurationRequest holds details about calls to the DeleteBucketInventoryConfigurationRequest method.
		DeleteBucketInventoryConfigurationRequest []struct {
			// DeleteBucketInventoryConfigurationInput is the deleteBucketInventoryConfigurationInput argument value.
			DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
		}
		// DeleteBucketInventoryConfigurationWithContext holds details about calls to the DeleteBucketInventoryConfigurationWithContext method.
		DeleteBucketInventoryConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketInventoryConfigurationInput is the deleteBucketInventoryConfigurationInput argument value.
			DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketLifecycle holds details about calls to the DeleteBucketLifecycle method.
		DeleteBucketLifecycle []struct {
			// DeleteBucketLifecycleInput is the deleteBucketLifecycleInput argument value.
			DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
		}
		// DeleteBucketLifecycleRequest holds details about calls to the DeleteBucketLifecycleRequest method.
		DeleteBucketLifecycleRequest []struct {
			// DeleteBucketLifecycleInput is the deleteBucketLifecycleInput argument value.
			DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
		}
		// DeleteBucketLifecycleWithContext holds details about calls to the DeleteBucketLifecycleWithContext method.
		DeleteBucketLifecycleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketLifecycleInput is the deleteBucketLifecycleInput argument value.
			DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketMetricsConfiguration holds details about calls to the DeleteBucketMetricsConfiguration method.
		DeleteBucketMetricsConfiguration []struct {
			// DeleteBucketMetricsConfigurationInput is the deleteBucketMetricsConfigurationInput argument value.
			DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
		}
		// DeleteBucketMetricsConfigurationRequest holds details about calls to the DeleteBucketMetricsConfigurationRequest method.
		DeleteBucketMetricsConfigurationRequest []struct {
			// DeleteBucketMetricsConfigurationInput is the deleteBucketMetricsConfigurationInput argument value.
			DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
		}
		// DeleteBucketMetricsConfigurationWithContext holds details about calls to the DeleteBucketMetricsConfigurationWithContext method.
		DeleteBucketMetricsConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketMetricsConfigurationInput is the deleteBucketMetricsConfigurationInput argument value.
			DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketOwnershipControls holds details about calls to the DeleteBucketOwnershipControls method.
		DeleteBucketOwnershipControls []struct {
			// DeleteBucketOwnershipControlsInput is the deleteBucketOwnershipControlsInput argument value.
			DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
		}
		// DeleteBucketOwnershipControlsRequest holds details about calls to the DeleteBucketOwnershipControlsRequest method.
		DeleteBucketOwnershipControlsRequest []struct {
			// DeleteBucketOwnershipControlsInput is the deleteBucketOwnershipControlsInput argument value.
			DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
		}
		// DeleteBucketOwnershipControlsWithContext holds details about calls to the DeleteBucketOwnershipControlsWithContext method.
		DeleteBucketOwnershipControlsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketOwnershipControlsInput is the deleteBucketOwnershipControlsInput argument value.
			DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketPolicy holds details about calls to the DeleteBucketPolicy method.
		DeleteBucketPolicy []struct {
			// DeleteBucketPolicyInput is the deleteBucketPolicyInput argument value.
			DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
		}
		// DeleteBucketPolicyRequest holds details about calls to the DeleteBucketPolicyRequest method.
		DeleteBucketPolicyRequest []struct {
			// DeleteBucketPolicyInput is the deleteBucketPolicyInput argument value.
			DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
		}
		// DeleteBucketPolicyWithContext holds details about calls to the DeleteBucketPolicyWithContext method.
		DeleteBucketPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketPolicyInput is the deleteBucketPolicyInput argument value.
			DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketReplication holds details about calls to the DeleteBucketReplication method.
		DeleteBucketReplication []struct {
			// DeleteBucketReplicationInput is the deleteBucketReplicationInput argument value.
			DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
		}
		// DeleteBucketReplicationRequest holds details about calls to the DeleteBucketReplicationRequest method.
		DeleteBucketReplicationRequest []struct {
			// DeleteBucketReplicationInput is the deleteBucketReplicationInput argument value.
			DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
		}
		// DeleteBucketReplicationWithContext holds details about calls to the DeleteBucketReplicationWithContext method.
		DeleteBucketReplicationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketReplicationInput is the deleteBucketReplicationInput argument value.
			DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketRequest holds details about calls to the DeleteBucketRequest method.
		DeleteBucketRequest []struct {
			// DeleteBucketInput is the deleteBucketInput argument value.
			DeleteBucketInput *s3.DeleteBucketInput
		}
		// DeleteBucketTagging holds details about calls to the DeleteBucketTagging method.
		DeleteBucketTagging []struct {
			// DeleteBucketTaggingInput is the deleteBucketTaggingInput argument value.
			DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
		}
		// DeleteBucketTaggingRequest holds details about calls to the DeleteBucketTaggingRequest method.
		DeleteBucketTaggingRequest []struct {
			// DeleteBucketTaggingInput is the deleteBucketTaggingInput argument value.
			DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
		}
		// DeleteBucketTaggingWithContext holds details about calls to the DeleteBucketTaggingWithContext method.
		DeleteBucketTaggingWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketTaggingInput is the deleteBucketTaggingInput argument value.
			DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketWebsite holds details about calls to the DeleteBucketWebsite method.
		DeleteBucketWebsite []struct {
			// DeleteBucketWebsiteInput is the deleteBucketWebsiteInput argument value.
			DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
		}
		// DeleteBucketWebsiteRequest holds details about calls to the DeleteBucketWebsiteRequest method.
		DeleteBucketWebsiteRequest []struct {
			// DeleteBucketWebsiteInput is the deleteBucketWebsiteInput argument value.
			DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
		}
		// DeleteBucketWebsiteWithContext holds details about calls to the DeleteBucketWebsiteWithContext method.
		DeleteBucketWebsiteWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketWebsiteInput is the deleteBucketWebsiteInput argument value.
			DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteBucketWithContext holds details about calls to the DeleteBucketWithContext method.
		DeleteBucketWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteBucketInput is the deleteBucketInput argument value.
			DeleteBucketInput *s3.DeleteBucketInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteObject holds details about calls to the DeleteObject method.
		DeleteObject []struct {
			// DeleteObjectInput is the deleteObjectInput argument value.
			DeleteObjectInput *s3.DeleteObjectInput
		}
		// DeleteObjectRequest holds details about calls to the DeleteObjectRequest method.
		DeleteObjectRequest []struct {
			// DeleteObjectInput is the deleteObjectInput argument value.
			DeleteObjectInput *s3.DeleteObjectInput
		}
		// DeleteObjectTagging holds details about calls to the DeleteObjectTagging method.
		DeleteObjectTagging []struct {
			// DeleteObjectTaggingInput is the deleteObjectTaggingInput argument value.
			DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
		}
		// DeleteObjectTaggingRequest holds details about calls to the DeleteObjectTaggingRequest method.
		DeleteObjectTaggingRequest []struct {
			// DeleteObjectTaggingInput is the deleteObjectTaggingInput argument value.
			DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
		}
		// DeleteObjectTaggingWithContext holds details about calls to the DeleteObjectTaggingWithContext method.
		DeleteObjectTaggingWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteObjectTaggingInput is the deleteObjectTaggingInput argument value.
			DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteObjectWithContext holds details about calls to the DeleteObjectWithContext method.
		DeleteObjectWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteObjectInput is the deleteObjectInput argument value.
			DeleteObjectInput *s3.DeleteObjectInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteObjects holds details about calls to the DeleteObjects method.
		DeleteObjects []struct {
			// DeleteObjectsInput is the deleteObjectsInput argument value.
			DeleteObjectsInput *s3.DeleteObjectsInput
		}
		// DeleteObjectsRequest holds details about calls to the DeleteObjectsRequest method.
		DeleteObjectsRequest []struct {
			// DeleteObjectsInput is the deleteObjectsInput argument value.
			DeleteObjectsInput *s3.DeleteObjectsInput
		}
		// DeleteObjectsWithContext holds details about calls to the DeleteObjectsWithContext method.
		DeleteObjectsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteObjectsInput is the deleteObjectsInput argument value.
			DeleteObjectsInput *s3.DeleteObjectsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeletePublicAccessBlock holds details about calls to the DeletePublicAccessBlock method.
		DeletePublicAccessBlock []struct {
			// DeletePublicAccessBlockInput is the deletePublicAccessBlockInput argument value.
			DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
		}
		// DeletePublicAccessBlockRequest holds details about calls to the DeletePublicAccessBlockRequest method.
		DeletePublicAccessBlockRequest []struct {
			// DeletePublicAccessBlockInput is the deletePublicAccessBlockInput argument value.
			DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
		}
		// DeletePublicAccessBlockWithContext holds details about calls to the DeletePublicAccessBlockWithContext method.
		DeletePublicAccessBlockWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeletePublicAccessBlockInput is the deletePublicAccessBlockInput argument value.
			DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketAccelerateConfiguration holds details about calls to the GetBucketAccelerateConfiguration method.
		GetBucketAccelerateConfiguration []struct {
			// GetBucketAccelerateConfigurationInput is the getBucketAccelerateConfigurationInput argument value.
			GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
		}
		// GetBucketAccelerateConfigurationRequest holds details about calls to the GetBucketAccelerateConfigurationRequest method.
		GetBucketAccelerateConfigurationRequest []struct {
			// GetBucketAccelerateConfigurationInput is the getBucketAccelerateConfigurationInput argument value.
			GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
		}
		// GetBucketAccelerateConfigurationWithContext holds details about calls to the GetBucketAccelerateConfigurationWithContext method.
		GetBucketAccelerateConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketAccelerateConfigurationInput is the getBucketAccelerateConfigurationInput argument value.
			GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketAcl holds details about calls to the GetBucketAcl method.
		GetBucketAcl []struct {
			// GetBucketAclInput is the getBucketAclInput argument value.
			GetBucketAclInput *s3.GetBucketAclInput
		}
		// GetBucketAclRequest holds details about calls to the GetBucketAclRequest method.
		GetBucketAclRequest []struct {
			// GetBucketAclInput is the getBucketAclInput argument value.
			GetBucketAclInput *s3.GetBucketAclInput
		}
		// GetBucketAclWithContext holds details about calls to the GetBucketAclWithContext method.
		GetBucketAclWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketAclInput is the getBucketAclInput argument value.
			GetBucketAclInput *s3.GetBucketAclInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketAnalyticsConfiguration holds details about calls to the GetBucketAnalyticsConfiguration method.
		GetBucketAnalyticsConfiguration []struct {
			// GetBucketAnalyticsConfigurationInput is the getBucketAnalyticsConfigurationInput argument value.
			GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
		}
		// GetBucketAnalyticsConfigurationRequest holds details about calls to the GetBucketAnalyticsConfigurationRequest method.
		GetBucketAnalyticsConfigurationRequest []struct {
			// GetBucketAnalyticsConfigurationInput is the getBucketAnalyticsConfigurationInput argument value.
			GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
		}
		// GetBucketAnalyticsConfigurationWithContext holds details about calls to the GetBucketAnalyticsConfigurationWithContext method.
		GetBucketAnalyticsConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketAnalyticsConfigurationInput is the getBucketAnalyticsConfigurationInput argument value.
			GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketCors holds details about calls to the GetBucketCors method.
		GetBucketCors []struct {
			// GetBucketCorsInput is the getBucketCorsInput argument value.
			GetBucketCorsInput *s3.GetBucketCorsInput
		}
		// GetBucketCorsRequest holds details about calls to the GetBucketCorsRequest method.
		GetBucketCorsRequest []struct {
			// GetBucketCorsInput is the getBucketCorsInput argument value.
			GetBucketCorsInput *s3.GetBucketCorsInput
		}
		// GetBucketCorsWithContext holds details about calls to the GetBucketCorsWithContext method.
		GetBucketCorsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketCorsInput is the getBucketCorsInput argument value.
			GetBucketCorsInput *s3.GetBucketCorsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketEncryption holds details about calls to the GetBucketEncryption method.
		GetBucketEncryption []struct {
			// GetBucketEncryptionInput is the getBucketEncryptionInput argument value.
			GetBucketEncryptionInput *s3.GetBucketEncryptionInput
		}
		// GetBucketEncryptionRequest holds details about calls to the GetBucketEncryptionRequest method.
		GetBucketEncryptionRequest []struct {
			// GetBucketEncryptionInput is the getBucketEncryptionInput argument value.
			GetBucketEncryptionInput *s3.GetBucketEncryptionInput
		}
		// GetBucketEncryptionWithContext holds details about calls to the GetBucketEncryptionWithContext method.
		GetBucketEncryptionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketEncryptionInput is the getBucketEncryptionInput argument value.
			GetBucketEncryptionInput *s3.GetBucketEncryptionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketIntelligentTieringConfiguration holds details about calls to the GetBucketIntelligentTieringConfiguration method.
		GetBucketIntelligentTieringConfiguration []struct {
			// GetBucketIntelligentTieringConfigurationInput is the getBucketIntelligentTieringConfigurationInput argument value.
			GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
		}
		// GetBucketIntelligentTieringConfigurationRequest holds details about calls to the GetBucketIntelligentTieringConfigurationRequest method.
		GetBucketIntelligentTieringConfigurationRequest []struct {
			// GetBucketIntelligentTieringConfigurationInput is the getBucketIntelligentTieringConfigurationInput argument value.
			GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
		}
		// GetBucketIntelligentTieringConfigurationWithContext holds details about calls to the GetBucketIntelligentTieringConfigurationWithContext method.
		GetBucketIntelligentTieringConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketIntelligentTieringConfigurationInput is the getBucketIntelligentTieringConfigurationInput argument value.
			GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketInventoryConfiguration holds details about calls to the GetBucketInventoryConfiguration method.
		GetBucketInventoryConfiguration []struct {
			// GetBucketInventoryConfigurationInput is the getBucketInventoryConfigurationInput argument value.
			GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
		}
		// GetBucketInventoryConfigurationRequest holds details about calls to the GetBucketInventoryConfigurationRequest method.
		GetBucketInventoryConfigurationRequest []struct {
			// GetBucketInventoryConfigurationInput is the getBucketInventoryConfigurationInput argument value.
			GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
		}
		// GetBucketInventoryConfigurationWithContext holds details about calls to the GetBucketInventoryConfigurationWithContext method.
		GetBucketInventoryConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketInventoryConfigurationInput is the getBucketInventoryConfigurationInput argument value.
			GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketLifecycle holds details about calls to the GetBucketLifecycle method.
		GetBucketLifecycle []struct {
			// GetBucketLifecycleInput is the getBucketLifecycleInput argument value.
			GetBucketLifecycleInput *s3.GetBucketLifecycleInput
		}
		// GetBucketLifecycleConfiguration holds details about calls to the GetBucketLifecycleConfiguration method.
		GetBucketLifecycleConfiguration []struct {
			// GetBucketLifecycleConfigurationInput is the getBucketLifecycleConfigurationInput argument value.
			GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
		}
		// GetBucketLifecycleConfigurationRequest holds details about calls to the GetBucketLifecycleConfigurationRequest method.
		GetBucketLifecycleConfigurationRequest []struct {
			// GetBucketLifecycleConfigurationInput is the getBucketLifecycleConfigurationInput argument value.
			GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
		}
		// GetBucketLifecycleConfigurationWithContext holds details about calls to the GetBucketLifecycleConfigurationWithContext method.
		GetBucketLifecycleConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketLifecycleConfigurationInput is the getBucketLifecycleConfigurationInput argument value.
			GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketLifecycleRequest holds details about calls to the GetBucketLifecycleRequest method.
		GetBucketLifecycleRequest []struct {
			// GetBucketLifecycleInput is the getBucketLifecycleInput argument value.
			GetBucketLifecycleInput *s3.GetBucketLifecycleInput
		}
		// GetBucketLifecycleWithContext holds details about calls to the GetBucketLifecycleWithContext method.
		GetBucketLifecycleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketLifecycleInput is the getBucketLifecycleInput argument value.
			GetBucketLifecycleInput *s3.GetBucketLifecycleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketLocation holds details about calls to the GetBucketLocation method.
		GetBucketLocation []struct {
			// GetBucketLocationInput is the getBucketLocationInput argument value.
			GetBucketLocationInput *s3.GetBucketLocationInput
		}
		// GetBucketLocationRequest holds details about calls to the GetBucketLocationRequest method.
		GetBucketLocationRequest []struct {
			// GetBucketLocationInput is the getBucketLocationInput argument value.
			GetBucketLocationInput *s3.GetBucketLocationInput
		}
		// GetBucketLocationWithContext holds details about calls to the GetBucketLocationWithContext method.
		GetBucketLocationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketLocationInput is the getBucketLocationInput argument value.
			GetBucketLocationInput *s3.GetBucketLocationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketLogging holds details about calls to the GetBucketLogging method.
		GetBucketLogging []struct {
			// GetBucketLoggingInput is the getBucketLoggingInput argument value.
			GetBucketLoggingInput *s3.GetBucketLoggingInput
		}
		// GetBucketLoggingRequest holds details about calls to the GetBucketLoggingRequest method.
		GetBucketLoggingRequest []struct {
			// GetBucketLoggingInput is the getBucketLoggingInput argument value.
			GetBucketLoggingInput *s3.GetBucketLoggingInput
		}
		// GetBucketLoggingWithContext holds details about calls to the GetBucketLoggingWithContext method.
		GetBucketLoggingWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketLoggingInput is the getBucketLoggingInput argument value.
			GetBucketLoggingInput *s3.GetBucketLoggingInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketMetricsConfiguration holds details about calls to the GetBucketMetricsConfiguration method.
		GetBucketMetricsConfiguration []struct {
			// GetBucketMetricsConfigurationInput is the getBucketMetricsConfigurationInput argument value.
			GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
		}
		// GetBucketMetricsConfigurationRequest holds details about calls to the GetBucketMetricsConfigurationRequest method.
		GetBucketMetricsConfigurationRequest []struct {
			// GetBucketMetricsConfigurationInput is the getBucketMetricsConfigurationInput argument value.
			GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
		}
		// GetBucketMetricsConfigurationWithContext holds details about calls to the GetBucketMetricsConfigurationWithContext method.
		GetBucketMetricsConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketMetricsConfigurationInput is the getBucketMetricsConfigurationInput argument value.
			GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketNotification holds details about calls to the GetBucketNotification method.
		GetBucketNotification []struct {
			// GetBucketNotificationConfigurationRequest is the getBucketNotificationConfigurationRequest argument value.
			GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
		}
		// GetBucketNotificationConfiguration holds details about calls to the GetBucketNotificationConfiguration method.
		GetBucketNotificationConfiguration []struct {
			// GetBucketNotificationConfigurationRequest is the getBucketNotificationConfigurationRequest argument value.
			GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
		}
		// GetBucketNotificationConfigurationRequest holds details about calls to the GetBucketNotificationConfigurationRequest method.
		GetBucketNotificationConfigurationRequest []struct {
			// GetBucketNotificationConfigurationRequest is the getBucketNotificationConfigurationRequest argument value.
			GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
		}
		// GetBucketNotificationConfigurationWithContext holds details about calls to the GetBucketNotificationConfigurationWithContext method.
		GetBucketNotificationConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketNotificationConfigurationRequest is the getBucketNotificationConfigurationRequest argument value.
			GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketNotificationRequest holds details about calls to the GetBucketNotificationRequest method.
		GetBucketNotificationRequest []struct {
			// GetBucketNotificationConfigurationRequest is the getBucketNotificationConfigurationRequest argument value.
			GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
		}
		// GetBucketNotificationWithContext holds details about calls to the GetBucketNotificationWithContext method.
		GetBucketNotificationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketNotificationConfigurationRequest is the getBucketNotificationConfigurationRequest argument value.
			GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketOwnershipControls holds details about calls to the GetBucketOwnershipControls method.
		GetBucketOwnershipControls []struct {
			// GetBucketOwnershipControlsInput is the getBucketOwnershipControlsInput argument value.
			GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
		}
		// GetBucketOwnershipControlsRequest holds details about calls to the GetBucketOwnershipControlsRequest method.
		GetBucketOwnershipControlsRequest []struct {
			// GetBucketOwnershipControlsInput is the getBucketOwnershipControlsInput argument value.
			GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
		}
		// GetBucketOwnershipControlsWithContext holds details about calls to the GetBucketOwnershipControlsWithContext method.
		GetBucketOwnershipControlsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketOwnershipControlsInput is the getBucketOwnershipControlsInput argument value.
			GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketPolicy holds details about calls to the GetBucketPolicy method.
		GetBucketPolicy []struct {
			// GetBucketPolicyInput is the getBucketPolicyInput argument value.
			GetBucketPolicyInput *s3.GetBucketPolicyInput
		}
		// GetBucketPolicyRequest holds details about calls to the GetBucketPolicyRequest method.
		GetBucketPolicyRequest []struct {
			// GetBucketPolicyInput is the getBucketPolicyInput argument value.
			GetBucketPolicyInput *s3.GetBucketPolicyInput
		}
		// GetBucketPolicyStatus holds details about calls to the GetBucketPolicyStatus method.
		GetBucketPolicyStatus []struct {
			// GetBucketPolicyStatusInput is the getBucketPolicyStatusInput argument value.
			GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
		}
		// GetBucketPolicyStatusRequest holds details about calls to the GetBucketPolicyStatusRequest method.
		GetBucketPolicyStatusRequest []struct {
			// GetBucketPolicyStatusInput is the getBucketPolicyStatusInput argument value.
			GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
		}
		// GetBucketPolicyStatusWithContext holds details about calls to the GetBucketPolicyStatusWithContext method.
		GetBucketPolicyStatusWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketPolicyStatusInput is the getBucketPolicyStatusInput argument value.
			GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketPolicyWithContext holds details about calls to the GetBucketPolicyWithContext method.
		GetBucketPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketPolicyInput is the getBucketPolicyInput argument value.
			GetBucketPolicyInput *s3.GetBucketPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketReplication holds details about calls to the GetBucketReplication method.
		GetBucketReplication []struct {
			// GetBucketReplicationInput is the getBucketReplicationInput argument value.
			GetBucketReplicationInput *s3.GetBucketReplicationInput
		}
		// GetBucketReplicationRequest holds details about calls to the GetBucketReplicationRequest method.
		GetBucketReplicationRequest []struct {
			// GetBucketReplicationInput is the getBucketReplicationInput argument value.
			GetBucketReplicationInput *s3.GetBucketReplicationInput
		}
		// GetBucketReplicationWithContext holds details about calls to the GetBucketReplicationWithContext method.
		GetBucketReplicationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketReplicationInput is the getBucketReplicationInput argument value.
			GetBucketReplicationInput *s3.GetBucketReplicationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketRequestPayment holds details about calls to the GetBucketRequestPayment method.
		GetBucketRequestPayment []struct {
			// GetBucketRequestPaymentInput is the getBucketRequestPaymentInput argument value.
			GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
		}
		// GetBucketRequestPaymentRequest holds details about calls to the GetBucketRequestPaymentRequest method.
		GetBucketRequestPaymentRequest []struct {
			// GetBucketRequestPaymentInput is the getBucketRequestPaymentInput argument value.
			GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
		}
		// GetBucketRequestPaymentWithContext holds details about calls to the GetBucketRequestPaymentWithContext method.
		GetBucketRequestPaymentWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketRequestPaymentInput is the getBucketRequestPaymentInput argument value.
			GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketTagging holds details about calls to the GetBucketTagging method.
		GetBucketTagging []struct {
			// GetBucketTaggingInput is the getBucketTaggingInput argument value.
			GetBucketTaggingInput *s3.GetBucketTaggingInput
		}
		// GetBucketTaggingRequest holds details about calls to the GetBucketTaggingRequest method.
		GetBucketTaggingRequest []struct {
			// GetBucketTaggingInput is the getBucketTaggingInput argument value.
			GetBucketTaggingInput *s3.GetBucketTaggingInput
		}
		// GetBucketTaggingWithContext holds details about calls to the GetBucketTaggingWithContext method.
		GetBucketTaggingWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketTaggingInput is the getBucketTaggingInput argument value.
			GetBucketTaggingInput *s3.GetBucketTaggingInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketVersioning holds details about calls to the GetBucketVersioning method.
		GetBucketVersioning []struct {
			// GetBucketVersioningInput is the getBucketVersioningInput argument value.
			GetBucketVersioningInput *s3.GetBucketVersioningInput
		}
		// GetBucketVersioningRequest holds details about calls to the GetBucketVersioningRequest method.
		GetBucketVersioningRequest []struct {
			// GetBucketVersioningInput is the getBucketVersioningInput argument value.
			GetBucketVersioningInput *s3.GetBucketVersioningInput
		}
		// GetBucketVersioningWithContext holds details about calls to the GetBucketVersioningWithContext method.
		GetBucketVersioningWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketVersioningInput is the getBucketVersioningInput argument value.
			GetBucketVersioningInput *s3.GetBucketVersioningInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetBucketWebsite holds details about calls to the GetBucketWebsite method.
		GetBucketWebsite []struct {
			// GetBucketWebsiteInput is the getBucketWebsiteInput argument value.
			GetBucketWebsiteInput *s3.GetBucketWebsiteInput
		}
		// GetBucketWebsiteRequest holds details about calls to the GetBucketWebsiteRequest method.
		GetBucketWebsiteRequest []struct {
			// GetBucketWebsiteInput is the getBucketWebsiteInput argument value.
			GetBucketWebsiteInput *s3.GetBucketWebsiteInput
		}
		// GetBucketWebsiteWithContext holds details about calls to the GetBucketWebsiteWithContext method.
		GetBucketWebsiteWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetBucketWebsiteInput is the getBucketWebsiteInput argument value.
			GetBucketWebsiteInput *s3.GetBucketWebsiteInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetObject holds details about calls to the GetObject method.
		GetObject []struct {
			// GetObjectInput is the getObjectInput argument value.
			GetObjectInput *s3.GetObjectInput
		}
		// GetObjectAcl holds details about calls to the GetObjectAcl method.
		GetObjectAcl []struct {
			// GetObjectAclInput is the getObjectAclInput argument value.
			GetObjectAclInput *s3.GetObjectAclInput
		}
		// GetObjectAclRequest holds details about calls to the GetObjectAclRequest method.
		GetObjectAclRequest []struct {
			// GetObjectAclInput is the getObjectAclInput argument value.
			GetObjectAclInput *s3.GetObjectAclInput
		}
		// GetObjectAclWithContext holds details about calls to the GetObjectAclWithContext method.
		GetObjectAclWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetObjectAclInput is the getObjectAclInput argument value.
			GetObjectAclInput *s3.GetObjectAclInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetObjectAttributes holds details about calls to the GetObjectAttributes method.
		GetObjectAttributes []struct {
			// GetObjectAttributesInput is the getObjectAttributesInput argument value.
			GetObjectAttributesInput *s3.GetObjectAttributesInput
		}
		// GetObjectAttributesRequest holds details about calls to the GetObjectAttributesRequest method.
		GetObjectAttributesRequest []struct {
			// GetObjectAttributesInput is the getObjectAttributesInput argument value.
			GetObjectAttributesInput *s3.GetObjectAttributesInput
		}
		// GetObjectAttributesWithContext holds details about calls to the GetObjectAttributesWithContext method.
		GetObjectAttributesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetObjectAttributesInput is the getObjectAttributesInput argument value.
			GetObjectAttributesInput *s3.GetObjectAttributesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetObjectLegalHold holds details about calls to the GetObjectLegalHold method.
		GetObjectLegalHold []struct {
			// GetObjectLegalHoldInput is the getObjectLegalHoldInput argument value.
			GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
		}
		// GetObjectLegalHoldRequest holds details about calls to the GetObjectLegalHoldRequest method.
		GetObjectLegalHoldRequest []struct {
			// GetObjectLegalHoldInput is the getObjectLegalHoldInput argument value.
			GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
		}
		// GetObjectLegalHoldWithContext holds details about calls to the GetObjectLegalHoldWithContext method.
		GetObjectLegalHoldWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetObjectLegalHoldInput is the getObjectLegalHoldInput argument value.
			GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetObjectLockConfiguration holds details about calls to the GetObjectLockConfiguration method.
		GetObjectLockConfiguration []struct {
			// GetObjectLockConfigurationInput is the getObjectLockConfigurationInput argument value.
			GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
		}
		// GetObjectLockConfigurationRequest holds details about calls to the GetObjectLockConfigurationRequest method.
		GetObjectLockConfigurationRequest []struct {
			// GetObjectLockConfigurationInput is the getObjectLockConfigurationInput argument value.
			GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
		}
		// GetObjectLockConfigurationWithContext holds details about calls to the GetObjectLockConfigurationWithContext method.
		GetObjectLockConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetObjectLockConfigurationInput is the getObjectLockConfigurationInput argument value.
			GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetObjectRequest holds details about calls to the GetObjectRequest method.
		GetObjectRequest []struct {
			// GetObjectInput is the getObjectInput argument value.
			GetObjectInput *s3.GetObjectInput
		}
		// GetObjectRetention holds details about calls to the GetObjectRetention method.
		GetObjectRetention []struct {
			// GetObjectRetentionInput is the getObjectRetentionInput argument value.
			GetObjectRetentionInput *s3.GetObjectRetentionInput
		}
		// GetObjectRetentionRequest holds details about calls to the GetObjectRetentionRequest method.
		GetObjectRetentionRequest []struct {
			// GetObjectRetentionInput is the getObjectRetentionInput argument value.
			GetObjectRetentionInput *s3.GetObjectRetentionInput
		}
		// GetObjectRetentionWithContext holds details about calls to the GetObjectRetentionWithContext method.
		GetObjectRetentionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetObjectRetentionInput is the getObjectRetentionInput argument value.
			GetObjectRetentionInput *s3.GetObjectRetentionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetObjectTagging holds details about calls to the GetObjectTagging method.
		GetObjectTagging []struct {
			// GetObjectTaggingInput is the getObjectTaggingInput argument value.
			GetObjectTaggingInput *s3.GetObjectTaggingInput
		}
		// GetObjectTaggingRequest holds details about calls to the GetObjectTaggingRequest method.
		GetObjectTaggingRequest []struct {
			// GetObjectTaggingInput is the getObjectTaggingInput argument value.
			GetObjectTaggingInput *s3.GetObjectTaggingInput
		}
		// GetObjectTaggingWithContext holds details about calls to the GetObjectTaggingWithContext method.
		GetObjectTaggingWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetObjectTaggingInput is the getObjectTaggingInput argument value.
			GetObjectTaggingInput *s3.GetObjectTaggingInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetObjectTorrent holds details about calls to the GetObjectTorrent method.
		GetObjectTorrent []struct {
			// GetObjectTorrentInput is the getObjectTorrentInput argument value.
			GetObjectTorrentInput *s3.GetObjectTorrentInput
		}
		// GetObjectTorrentRequest holds details about calls to the GetObjectTorrentRequest method.
		GetObjectTorrentRequest []struct {
			// GetObjectTorrentInput is the getObjectTorrentInput argument value.
			GetObjectTorrentInput *s3.GetObjectTorrentInput
		}
		// GetObjectTorrentWithContext holds details about calls to the GetObjectTorrentWithContext method.
		GetObjectTorrentWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetObjectTorrentInput is the getObjectTorrentInput argument value.
			GetObjectTorrentInput *s3.GetObjectTorrentInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetObjectWithContext holds details about calls to the GetObjectWithContext method.
		GetObjectWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetObjectInput is the getObjectInput argument value.
			GetObjectInput *s3.GetObjectInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetPublicAccessBlock holds details about calls to the GetPublicAccessBlock method.
		GetPublicAccessBlock []struct {
			// GetPublicAccessBlockInput is the getPublicAccessBlockInput argument value.
			GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
		}
		// GetPublicAccessBlockRequest holds details about calls to the GetPublicAccessBlockRequest method.
		GetPublicAccessBlockRequest []struct {
			// GetPublicAccessBlockInput is the getPublicAccessBlockInput argument value.
			GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
		}
		// GetPublicAccessBlockWithContext holds details about calls to the GetPublicAccessBlockWithContext method.
		GetPublicAccessBlockWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetPublicAccessBlockInput is the getPublicAccessBlockInput argument value.
			GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
			// Options is the options argument value.
			Options []request.Option
		}
		// HeadBucket holds details about calls to the HeadBucket method.
		HeadBucket []struct {
			// HeadBucketInput is the headBucketInput argument value.
			HeadBucketInput *s3.HeadBucketInput
		}
		// HeadBucketRequest holds details about calls to the HeadBucketRequest method.
		HeadBucketRequest []struct {
			// HeadBucketInput is the headBucketInput argument value.
			HeadBucketInput *s3.HeadBucketInput
		}
		// HeadBucketWithContext holds details about calls to the HeadBucketWithContext method.
		HeadBucketWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// HeadBucketInput is the headBucketInput argument value.
			HeadBucketInput *s3.HeadBucketInput
			// Options is the options argument value.
			Options []request.Option
		}
		// HeadObject holds details about calls to the HeadObject method.
		HeadObject []struct {
			// HeadObjectInput is the headObjectInput argument value.
			HeadObjectInput *s3.HeadObjectInput
		}
		// HeadObjectRequest holds details about calls to the HeadObjectRequest method.
		HeadObjectRequest []struct {
			// HeadObjectInput is the headObjectInput argument value.
			HeadObjectInput *s3.HeadObjectInput
		}
		// HeadObjectWithContext holds details about calls to the HeadObjectWithContext method.
		HeadObjectWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// HeadObjectInput is the headObjectInput argument value.
			HeadObjectInput *s3.HeadObjectInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListBucketAnalyticsConfigurations holds details about calls to the ListBucketAnalyticsConfigurations method.
		ListBucketAnalyticsConfigurations []struct {
			// ListBucketAnalyticsConfigurationsInput is the listBucketAnalyticsConfigurationsInput argument value.
			ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
		}
		// ListBucketAnalyticsConfigurationsRequest holds details about calls to the ListBucketAnalyticsConfigurationsRequest method.
		ListBucketAnalyticsConfigurationsRequest []struct {
			// ListBucketAnalyticsConfigurationsInput is the listBucketAnalyticsConfigurationsInput argument value.
			ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
		}
		// ListBucketAnalyticsConfigurationsWithContext holds details about calls to the ListBucketAnalyticsConfigurationsWithContext method.
		ListBucketAnalyticsConfigurationsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListBucketAnalyticsConfigurationsInput is the listBucketAnalyticsConfigurationsInput argument value.
			ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListBucketIntelligentTieringConfigurations holds details about calls to the ListBucketIntelligentTieringConfigurations method.
		ListBucketIntelligentTieringConfigurations []struct {
			// ListBucketIntelligentTieringConfigurationsInput is the listBucketIntelligentTieringConfigurationsInput argument value.
			ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
		}
		// ListBucketIntelligentTieringConfigurationsRequest holds details about calls to the ListBucketIntelligentTieringConfigurationsRequest method.
		ListBucketIntelligentTieringConfigurationsRequest []struct {
			// ListBucketIntelligentTieringConfigurationsInput is the listBucketIntelligentTieringConfigurationsInput argument value.
			ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
		}
		// ListBucketIntelligentTieringConfigurationsWithContext holds details about calls to the ListBucketIntelligentTieringConfigurationsWithContext method.
		ListBucketIntelligentTieringConfigurationsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListBucketIntelligentTieringConfigurationsInput is the listBucketIntelligentTieringConfigurationsInput argument value.
			ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListBucketInventoryConfigurations holds details about calls to the ListBucketInventoryConfigurations method.
		ListBucketInventoryConfigurations []struct {
			// ListBucketInventoryConfigurationsInput is the listBucketInventoryConfigurationsInput argument value.
			ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
		}
		// ListBucketInventoryConfigurationsRequest holds details about calls to the ListBucketInventoryConfigurationsRequest method.
		ListBucketInventoryConfigurationsRequest []struct {
			// ListBucketInventoryConfigurationsInput is the listBucketInventoryConfigurationsInput argument value.
			ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
		}
		// ListBucketInventoryConfigurationsWithContext holds details about calls to the ListBucketInventoryConfigurationsWithContext method.
		ListBucketInventoryConfigurationsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListBucketInventoryConfigurationsInput is the listBucketInventoryConfigurationsInput argument value.
			ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListBucketMetricsConfigurations holds details about calls to the ListBucketMetricsConfigurations method.
		ListBucketMetricsConfigurations []struct {
			// ListBucketMetricsConfigurationsInput is the listBucketMetricsConfigurationsInput argument value.
			ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
		}
		// ListBucketMetricsConfigurationsRequest holds details about calls to the ListBucketMetricsConfigurationsRequest method.
		ListBucketMetricsConfigurationsRequest []struct {
			// ListBucketMetricsConfigurationsInput is the listBucketMetricsConfigurationsInput argument value.
			ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
		}
		// ListBucketMetricsConfigurationsWithContext holds details about calls to the ListBucketMetricsConfigurationsWithContext method.
		ListBucketMetricsConfigurationsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListBucketMetricsConfigurationsInput is the listBucketMetricsConfigurationsInput argument value.
			ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListBuckets holds details about calls to the ListBuckets method.
		ListBuckets []struct {
			// ListBucketsInput is the listBucketsInput argument value.
			ListBucketsInput *s3.ListBucketsInput
		}
		// ListBucketsRequest holds details about calls to the ListBucketsRequest method.
		ListBucketsRequest []struct {
			// ListBucketsInput is the listBucketsInput argument value.
			ListBucketsInput *s3.ListBucketsInput
		}
		// ListBucketsWithContext holds details about calls to the ListBucketsWithContext method.
		ListBucketsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListBucketsInput is the listBucketsInput argument value.
			ListBucketsInput *s3.ListBucketsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListMultipartUploads holds details about calls to the ListMultipartUploads method.
		ListMultipartUploads []struct {
			// ListMultipartUploadsInput is the listMultipartUploadsInput argument value.
			ListMultipartUploadsInput *s3.ListMultipartUploadsInput
		}
		// ListMultipartUploadsPages holds details about calls to the ListMultipartUploadsPages method.
		ListMultipartUploadsPages []struct {
			// ListMultipartUploadsInput is the listMultipartUploadsInput argument value.
			ListMultipartUploadsInput *s3.ListMultipartUploadsInput
			// Fn is the fn argument value.
			Fn func(*s3.ListMultipartUploadsOutput, bool) bool
		}
		// ListMultipartUploadsPagesWithContext holds details about calls to the ListMultipartUploadsPagesWithContext method.
		ListMultipartUploadsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListMultipartUploadsInput is the listMultipartUploadsInput argument value.
			ListMultipartUploadsInput *s3.ListMultipartUploadsInput
			// Fn is the fn argument value.
			Fn func(*s3.ListMultipartUploadsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListMultipartUploadsRequest holds details about calls to the ListMultipartUploadsRequest method.
		ListMultipartUploadsRequest []struct {
			// ListMultipartUploadsInput is the listMultipartUploadsInput argument value.
			ListMultipartUploadsInput *s3.ListMultipartUploadsInput
		}
		// ListMultipartUploadsWithContext holds details about calls to the ListMultipartUploadsWithContext method.
		ListMultipartUploadsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListMultipartUploadsInput is the listMultipartUploadsInput argument value.
			ListMultipartUploadsInput *s3.ListMultipartUploadsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListObjectVersions holds details about calls to the ListObjectVersions method.
		ListObjectVersions []struct {
			// ListObjectVersionsInput is the listObjectVersionsInput argument value.
			ListObjectVersionsInput *s3.ListObjectVersionsInput
		}
		// ListObjectVersionsPages holds details about calls to the ListObjectVersionsPages method.
		ListObjectVersionsPages []struct {
			// ListObjectVersionsInput is the listObjectVersionsInput argument value.
			ListObjectVersionsInput *s3.ListObjectVersionsInput
			// Fn is the fn argument value.
			Fn func(*s3.ListObjectVersionsOutput, bool) bool
		}
		// ListObjectVersionsPagesWithContext holds details about calls to the ListObjectVersionsPagesWithContext method.
		ListObjectVersionsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListObjectVersionsInput is the listObjectVersionsInput argument value.
			ListObjectVersionsInput *s3.ListObjectVersionsInput
			// Fn is the fn argument value.
			Fn func(*s3.ListObjectVersionsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListObjectVersionsRequest holds details about calls to the ListObjectVersionsRequest method.
		ListObjectVersionsRequest []struct {
			// ListObjectVersionsInput is the listObjectVersionsInput argument value.
			ListObjectVersionsInput *s3.ListObjectVersionsInput
		}
		// ListObjectVersionsWithContext holds details about calls to the ListObjectVersionsWithContext method.
		ListObjectVersionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListObjectVersionsInput is the listObjectVersionsInput argument value.
			ListObjectVersionsInput *s3.ListObjectVersionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListObjects holds details about calls to the ListObjects method.
		ListObjects []struct {
			// ListObjectsInput is the listObjectsInput argument value.
			ListObjectsInput *s3.ListObjectsInput
		}
		// ListObjectsPages holds details about calls to the ListObjectsPages method.
		ListObjectsPages []struct {
			// ListObjectsInput is the listObjectsInput argument value.
			ListObjectsInput *s3.ListObjectsInput
			// Fn is the fn argument value.
			Fn func(*s3.ListObjectsOutput, bool) bool
		}
		// ListObjectsPagesWithContext holds details about calls to the ListObjectsPagesWithContext method.
		ListObjectsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListObjectsInput is the listObjectsInput argument value.
			ListObjectsInput *s3.ListObjectsInput
			// Fn is the fn argument value.
			Fn func(*s3.ListObjectsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListObjectsRequest holds details about calls to the ListObjectsRequest method.
		ListObjectsRequest []struct {
			// ListObjectsInput is the listObjectsInput argument value.
			ListObjectsInput *s3.ListObjectsInput
		}
		// ListObjectsV2 holds details about calls to the ListObjectsV2 method.
		ListObjectsV2 []struct {
			// ListObjectsV2Input is the listObjectsV2Input argument value.
			ListObjectsV2Input *s3.ListObjectsV2Input
		}
		// ListObjectsV2Pages holds details about calls to the ListObjectsV2Pages method.
		ListObjectsV2Pages []struct {
			// ListObjectsV2Input is the listObjectsV2Input argument value.
			ListObjectsV2Input *s3.ListObjectsV2Input
			// Fn is the fn argument value.
			Fn func(*s3.ListObjectsV2Output, bool) bool
		}
		// ListObjectsV2PagesWithContext holds details about calls to the ListObjectsV2PagesWithContext method.
		ListObjectsV2PagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListObjectsV2Input is the listObjectsV2Input argument value.
			ListObjectsV2Input *s3.ListObjectsV2Input
			// Fn is the fn argument value.
			Fn func(*s3.ListObjectsV2Output, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListObjectsV2Request holds details about calls to the ListObjectsV2Request method.
		ListObjectsV2Request []struct {
			// ListObjectsV2Input is the listObjectsV2Input argument value.
			ListObjectsV2Input *s3.ListObjectsV2Input
		}
		// ListObjectsV2WithContext holds details about calls to the ListObjectsV2WithContext method.
		ListObjectsV2WithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListObjectsV2Input is the listObjectsV2Input argument value.
			ListObjectsV2Input *s3.ListObjectsV2Input
			// Options is the options argument value.
			Options []request.Option
		}
		// ListObjectsWithContext holds details about calls to the ListObjectsWithContext method.
		ListObjectsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListObjectsInput is the listObjectsInput argument value.
			ListObjectsInput *s3.ListObjectsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListParts holds details about calls to the ListParts method.
		ListParts []struct {
			// ListPartsInput is the listPartsInput argument value.
			ListPartsInput *s3.ListPartsInput
		}
		// ListPartsPages holds details about calls to the ListPartsPages method.
		ListPartsPages []struct {
			// ListPartsInput is the listPartsInput argument value.
			ListPartsInput *s3.ListPartsInput
			// Fn is the fn argument value.
			Fn func(*s3.ListPartsOutput, bool) bool
		}
		// ListPartsPagesWithContext holds details about calls to the ListPartsPagesWithContext method.
		ListPartsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListPartsInput is the listPartsInput argument value.
			ListPartsInput *s3.ListPartsInput
			// Fn is the fn argument value.
			Fn func(*s3.ListPartsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListPartsRequest holds details about calls to the ListPartsRequest method.
		ListPartsRequest []struct {
			// ListPartsInput is the listPartsInput argument value.
			ListPartsInput *s3.ListPartsInput
		}
		// ListPartsWithContext holds details about calls to the ListPartsWithContext method.
		ListPartsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListPartsInput is the listPartsInput argument value.
			ListPartsInput *s3.ListPartsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketAccelerateConfiguration holds details about calls to the PutBucketAccelerateConfiguration method.
		PutBucketAccelerateConfiguration []struct {
			// PutBucketAccelerateConfigurationInput is the putBucketAccelerateConfigurationInput argument value.
			PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
		}
		// PutBucketAccelerateConfigurationRequest holds details about calls to the PutBucketAccelerateConfigurationRequest method.
		PutBucketAccelerateConfigurationRequest []struct {
			// PutBucketAccelerateConfigurationInput is the putBucketAccelerateConfigurationInput argument value.
			PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
		}
		// PutBucketAccelerateConfigurationWithContext holds details about calls to the PutBucketAccelerateConfigurationWithContext method.
		PutBucketAccelerateConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketAccelerateConfigurationInput is the putBucketAccelerateConfigurationInput argument value.
			PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketAcl holds details about calls to the PutBucketAcl method.
		PutBucketAcl []struct {
			// PutBucketAclInput is the putBucketAclInput argument value.
			PutBucketAclInput *s3.PutBucketAclInput
		}
		// PutBucketAclRequest holds details about calls to the PutBucketAclRequest method.
		PutBucketAclRequest []struct {
			// PutBucketAclInput is the putBucketAclInput argument value.
			PutBucketAclInput *s3.PutBucketAclInput
		}
		// PutBucketAclWithContext holds details about calls to the PutBucketAclWithContext method.
		PutBucketAclWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketAclInput is the putBucketAclInput argument value.
			PutBucketAclInput *s3.PutBucketAclInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketAnalyticsConfiguration holds details about calls to the PutBucketAnalyticsConfiguration method.
		PutBucketAnalyticsConfiguration []struct {
			// PutBucketAnalyticsConfigurationInput is the putBucketAnalyticsConfigurationInput argument value.
			PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
		}
		// PutBucketAnalyticsConfigurationRequest holds details about calls to the PutBucketAnalyticsConfigurationRequest method.
		PutBucketAnalyticsConfigurationRequest []struct {
			// PutBucketAnalyticsConfigurationInput is the putBucketAnalyticsConfigurationInput argument value.
			PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
		}
		// PutBucketAnalyticsConfigurationWithContext holds details about calls to the PutBucketAnalyticsConfigurationWithContext method.
		PutBucketAnalyticsConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketAnalyticsConfigurationInput is the putBucketAnalyticsConfigurationInput argument value.
			PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketCors holds details about calls to the PutBucketCors method.
		PutBucketCors []struct {
			// PutBucketCorsInput is the putBucketCorsInput argument value.
			PutBucketCorsInput *s3.PutBucketCorsInput
		}
		// PutBucketCorsRequest holds details about calls to the PutBucketCorsRequest method.
		PutBucketCorsRequest []struct {
			// PutBucketCorsInput is the putBucketCorsInput argument value.
			PutBucketCorsInput *s3.PutBucketCorsInput
		}
		// PutBucketCorsWithContext holds details about calls to the PutBucketCorsWithContext method.
		PutBucketCorsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketCorsInput is the putBucketCorsInput argument value.
			PutBucketCorsInput *s3.PutBucketCorsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketEncryption holds details about calls to the PutBucketEncryption method.
		PutBucketEncryption []struct {
			// PutBucketEncryptionInput is the putBucketEncryptionInput argument value.
			PutBucketEncryptionInput *s3.PutBucketEncryptionInput
		}
		// PutBucketEncryptionRequest holds details about calls to the PutBucketEncryptionRequest method.
		PutBucketEncryptionRequest []struct {
			// PutBucketEncryptionInput is the putBucketEncryptionInput argument value.
			PutBucketEncryptionInput *s3.PutBucketEncryptionInput
		}
		// PutBucketEncryptionWithContext holds details about calls to the PutBucketEncryptionWithContext method.
		PutBucketEncryptionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketEncryptionInput is the putBucketEncryptionInput argument value.
			PutBucketEncryptionInput *s3.PutBucketEncryptionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketIntelligentTieringConfiguration holds details about calls to the PutBucketIntelligentTieringConfiguration method.
		PutBucketIntelligentTieringConfiguration []struct {
			// PutBucketIntelligentTieringConfigurationInput is the putBucketIntelligentTieringConfigurationInput argument value.
			PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
		}
		// PutBucketIntelligentTieringConfigurationRequest holds details about calls to the PutBucketIntelligentTieringConfigurationRequest method.
		PutBucketIntelligentTieringConfigurationRequest []struct {
			// PutBucketIntelligentTieringConfigurationInput is the putBucketIntelligentTieringConfigurationInput argument value.
			PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
		}
		// PutBucketIntelligentTieringConfigurationWithContext holds details about calls to the PutBucketIntelligentTieringConfigurationWithContext method.
		PutBucketIntelligentTieringConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketIntelligentTieringConfigurationInput is the putBucketIntelligentTieringConfigurationInput argument value.
			PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketInventoryConfiguration holds details about calls to the PutBucketInventoryConfiguration method.
		PutBucketInventoryConfiguration []struct {
			// PutBucketInventoryConfigurationInput is the putBucketInventoryConfigurationInput argument value.
			PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
		}
		// PutBucketInventoryConfigurationRequest holds details about calls to the PutBucketInventoryConfigurationRequest method.
		PutBucketInventoryConfigurationRequest []struct {
			// PutBucketInventoryConfigurationInput is the putBucketInventoryConfigurationInput argument value.
			PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
		}
		// PutBucketInventoryConfigurationWithContext holds details about calls to the PutBucketInventoryConfigurationWithContext method.
		PutBucketInventoryConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketInventoryConfigurationInput is the putBucketInventoryConfigurationInput argument value.
			PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketLifecycle holds details about calls to the PutBucketLifecycle method.
		PutBucketLifecycle []struct {
			// PutBucketLifecycleInput is the putBucketLifecycleInput argument value.
			PutBucketLifecycleInput *s3.PutBucketLifecycleInput
		}
		// PutBucketLifecycleConfiguration holds details about calls to the PutBucketLifecycleConfiguration method.
		PutBucketLifecycleConfiguration []struct {
			// PutBucketLifecycleConfigurationInput is the putBucketLifecycleConfigurationInput argument value.
			PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
		}
		// PutBucketLifecycleConfigurationRequest holds details about calls to the PutBucketLifecycleConfigurationRequest method.
		PutBucketLifecycleConfigurationRequest []struct {
			// PutBucketLifecycleConfigurationInput is the putBucketLifecycleConfigurationInput argument value.
			PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
		}
		// PutBucketLifecycleConfigurationWithContext holds details about calls to the PutBucketLifecycleConfigurationWithContext method.
		PutBucketLifecycleConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketLifecycleConfigurationInput is the putBucketLifecycleConfigurationInput argument value.
			PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketLifecycleRequest holds details about calls to the PutBucketLifecycleRequest method.
		PutBucketLifecycleRequest []struct {
			// PutBucketLifecycleInput is the putBucketLifecycleInput argument value.
			PutBucketLifecycleInput *s3.PutBucketLifecycleInput
		}
		// PutBucketLifecycleWithContext holds details about calls to the PutBucketLifecycleWithContext method.
		PutBucketLifecycleWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketLifecycleInput is the putBucketLifecycleInput argument value.
			PutBucketLifecycleInput *s3.PutBucketLifecycleInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketLogging holds details about calls to the PutBucketLogging method.
		PutBucketLogging []struct {
			// PutBucketLoggingInput is the putBucketLoggingInput argument value.
			PutBucketLoggingInput *s3.PutBucketLoggingInput
		}
		// PutBucketLoggingRequest holds details about calls to the PutBucketLoggingRequest method.
		PutBucketLoggingRequest []struct {
			// PutBucketLoggingInput is the putBucketLoggingInput argument value.
			PutBucketLoggingInput *s3.PutBucketLoggingInput
		}
		// PutBucketLoggingWithContext holds details about calls to the PutBucketLoggingWithContext method.
		PutBucketLoggingWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketLoggingInput is the putBucketLoggingInput argument value.
			PutBucketLoggingInput *s3.PutBucketLoggingInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketMetricsConfiguration holds details about calls to the PutBucketMetricsConfiguration method.
		PutBucketMetricsConfiguration []struct {
			// PutBucketMetricsConfigurationInput is the putBucketMetricsConfigurationInput argument value.
			PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
		}
		// PutBucketMetricsConfigurationRequest holds details about calls to the PutBucketMetricsConfigurationRequest method.
		PutBucketMetricsConfigurationRequest []struct {
			// PutBucketMetricsConfigurationInput is the putBucketMetricsConfigurationInput argument value.
			PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
		}
		// PutBucketMetricsConfigurationWithContext holds details about calls to the PutBucketMetricsConfigurationWithContext method.
		PutBucketMetricsConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketMetricsConfigurationInput is the putBucketMetricsConfigurationInput argument value.
			PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketNotification holds details about calls to the PutBucketNotification method.
		PutBucketNotification []struct {
			// PutBucketNotificationInput is the putBucketNotificationInput argument value.
			PutBucketNotificationInput *s3.PutBucketNotificationInput
		}
		// PutBucketNotificationConfiguration holds details about calls to the PutBucketNotificationConfiguration method.
		PutBucketNotificationConfiguration []struct {
			// PutBucketNotificationConfigurationInput is the putBucketNotificationConfigurationInput argument value.
			PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
		}
		// PutBucketNotificationConfigurationRequest holds details about calls to the PutBucketNotificationConfigurationRequest method.
		PutBucketNotificationConfigurationRequest []struct {
			// PutBucketNotificationConfigurationInput is the putBucketNotificationConfigurationInput argument value.
			PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
		}
		// PutBucketNotificationConfigurationWithContext holds details about calls to the PutBucketNotificationConfigurationWithContext method.
		PutBucketNotificationConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketNotificationConfigurationInput is the putBucketNotificationConfigurationInput argument value.
			PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketNotificationRequest holds details about calls to the PutBucketNotificationRequest method.
		PutBucketNotificationRequest []struct {
			// PutBucketNotificationInput is the putBucketNotificationInput argument value.
			PutBucketNotificationInput *s3.PutBucketNotificationInput
		}
		// PutBucketNotificationWithContext holds details about calls to the PutBucketNotificationWithContext method.
		PutBucketNotificationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketNotificationInput is the putBucketNotificationInput argument value.
			PutBucketNotificationInput *s3.PutBucketNotificationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketOwnershipControls holds details about calls to the PutBucketOwnershipControls method.
		PutBucketOwnershipControls []struct {
			// PutBucketOwnershipControlsInput is the putBucketOwnershipControlsInput argument value.
			PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
		}
		// PutBucketOwnershipControlsRequest holds details about calls to the PutBucketOwnershipControlsRequest method.
		PutBucketOwnershipControlsRequest []struct {
			// PutBucketOwnershipControlsInput is the putBucketOwnershipControlsInput argument value.
			PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
		}
		// PutBucketOwnershipControlsWithContext holds details about calls to the PutBucketOwnershipControlsWithContext method.
		PutBucketOwnershipControlsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketOwnershipControlsInput is the putBucketOwnershipControlsInput argument value.
			PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketPolicy holds details about calls to the PutBucketPolicy method.
		PutBucketPolicy []struct {
			// PutBucketPolicyInput is the putBucketPolicyInput argument value.
			PutBucketPolicyInput *s3.PutBucketPolicyInput
		}
		// PutBucketPolicyRequest holds details about calls to the PutBucketPolicyRequest method.
		PutBucketPolicyRequest []struct {
			// PutBucketPolicyInput is the putBucketPolicyInput argument value.
			PutBucketPolicyInput *s3.PutBucketPolicyInput
		}
		// PutBucketPolicyWithContext holds details about calls to the PutBucketPolicyWithContext method.
		PutBucketPolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketPolicyInput is the putBucketPolicyInput argument value.
			PutBucketPolicyInput *s3.PutBucketPolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketReplication holds details about calls to the PutBucketReplication method.
		PutBucketReplication []struct {
			// PutBucketReplicationInput is the putBucketReplicationInput argument value.
			PutBucketReplicationInput *s3.PutBucketReplicationInput
		}
		// PutBucketReplicationRequest holds details about calls to the PutBucketReplicationRequest method.
		PutBucketReplicationRequest []struct {
			// PutBucketReplicationInput is the putBucketReplicationInput argument value.
			PutBucketReplicationInput *s3.PutBucketReplicationInput
		}
		// PutBucketReplicationWithContext holds details about calls to the PutBucketReplicationWithContext method.
		PutBucketReplicationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketReplicationInput is the putBucketReplicationInput argument value.
			PutBucketReplicationInput *s3.PutBucketReplicationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketRequestPayment holds details about calls to the PutBucketRequestPayment method.
		PutBucketRequestPayment []struct {
			// PutBucketRequestPaymentInput is the putBucketRequestPaymentInput argument value.
			PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
		}
		// PutBucketRequestPaymentRequest holds details about calls to the PutBucketRequestPaymentRequest method.
		PutBucketRequestPaymentRequest []struct {
			// PutBucketRequestPaymentInput is the putBucketRequestPaymentInput argument value.
			PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
		}
		// PutBucketRequestPaymentWithContext holds details about calls to the PutBucketRequestPaymentWithContext method.
		PutBucketRequestPaymentWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketRequestPaymentInput is the putBucketRequestPaymentInput argument value.
			PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketTagging holds details about calls to the PutBucketTagging method.
		PutBucketTagging []struct {
			// PutBucketTaggingInput is the putBucketTaggingInput argument value.
			PutBucketTaggingInput *s3.PutBucketTaggingInput
		}
		// PutBucketTaggingRequest holds details about calls to the PutBucketTaggingRequest method.
		PutBucketTaggingRequest []struct {
			// PutBucketTaggingInput is the putBucketTaggingInput argument value.
			PutBucketTaggingInput *s3.PutBucketTaggingInput
		}
		// PutBucketTaggingWithContext holds details about calls to the PutBucketTaggingWithContext method.
		PutBucketTaggingWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketTaggingInput is the putBucketTaggingInput argument value.
			PutBucketTaggingInput *s3.PutBucketTaggingInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketVersioning holds details about calls to the PutBucketVersioning method.
		PutBucketVersioning []struct {
			// PutBucketVersioningInput is the putBucketVersioningInput argument value.
			PutBucketVersioningInput *s3.PutBucketVersioningInput
		}
		// PutBucketVersioningRequest holds details about calls to the PutBucketVersioningRequest method.
		PutBucketVersioningRequest []struct {
			// PutBucketVersioningInput is the putBucketVersioningInput argument value.
			PutBucketVersioningInput *s3.PutBucketVersioningInput
		}
		// PutBucketVersioningWithContext holds details about calls to the PutBucketVersioningWithContext method.
		PutBucketVersioningWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketVersioningInput is the putBucketVersioningInput argument value.
			PutBucketVersioningInput *s3.PutBucketVersioningInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutBucketWebsite holds details about calls to the PutBucketWebsite method.
		PutBucketWebsite []struct {
			// PutBucketWebsiteInput is the putBucketWebsiteInput argument value.
			PutBucketWebsiteInput *s3.PutBucketWebsiteInput
		}
		// PutBucketWebsiteRequest holds details about calls to the PutBucketWebsiteRequest method.
		PutBucketWebsiteRequest []struct {
			// PutBucketWebsiteInput is the putBucketWebsiteInput argument value.
			PutBucketWebsiteInput *s3.PutBucketWebsiteInput
		}
		// PutBucketWebsiteWithContext holds details about calls to the PutBucketWebsiteWithContext method.
		PutBucketWebsiteWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutBucketWebsiteInput is the putBucketWebsiteInput argument value.
			PutBucketWebsiteInput *s3.PutBucketWebsiteInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutObject holds details about calls to the PutObject method.
		PutObject []struct {
			// PutObjectInput is the putObjectInput argument value.
			PutObjectInput *s3.PutObjectInput
		}
		// PutObjectAcl holds details about calls to the PutObjectAcl method.
		PutObjectAcl []struct {
			// PutObjectAclInput is the putObjectAclInput argument value.
			PutObjectAclInput *s3.PutObjectAclInput
		}
		// PutObjectAclRequest holds details about calls to the PutObjectAclRequest method.
		PutObjectAclRequest []struct {
			// PutObjectAclInput is the putObjectAclInput argument value.
			PutObjectAclInput *s3.PutObjectAclInput
		}
		// PutObjectAclWithContext holds details about calls to the PutObjectAclWithContext method.
		PutObjectAclWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutObjectAclInput is the putObjectAclInput argument value.
			PutObjectAclInput *s3.PutObjectAclInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutObjectLegalHold holds details about calls to the PutObjectLegalHold method.
		PutObjectLegalHold []struct {
			// PutObjectLegalHoldInput is the putObjectLegalHoldInput argument value.
			PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
		}
		// PutObjectLegalHoldRequest holds details about calls to the PutObjectLegalHoldRequest method.
		PutObjectLegalHoldRequest []struct {
			// PutObjectLegalHoldInput is the putObjectLegalHoldInput argument value.
			PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
		}
		// PutObjectLegalHoldWithContext holds details about calls to the PutObjectLegalHoldWithContext method.
		PutObjectLegalHoldWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutObjectLegalHoldInput is the putObjectLegalHoldInput argument value.
			PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutObjectLockConfiguration holds details about calls to the PutObjectLockConfiguration method.
		PutObjectLockConfiguration []struct {
			// PutObjectLockConfigurationInput is the putObjectLockConfigurationInput argument value.
			PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
		}
		// PutObjectLockConfigurationRequest holds details about calls to the PutObjectLockConfigurationRequest method.
		PutObjectLockConfigurationRequest []struct {
			// PutObjectLockConfigurationInput is the putObjectLockConfigurationInput argument value.
			PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
		}
		// PutObjectLockConfigurationWithContext holds details about calls to the PutObjectLockConfigurationWithContext method.
		PutObjectLockConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutObjectLockConfigurationInput is the putObjectLockConfigurationInput argument value.
			PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutObjectRequest holds details about calls to the PutObjectRequest method.
		PutObjectRequest []struct {
			// PutObjectInput is the putObjectInput argument value.
			PutObjectInput *s3.PutObjectInput
		}
		// PutObjectRetention holds details about calls to the PutObjectRetention method.
		PutObjectRetention []struct {
			// PutObjectRetentionInput is the putObjectRetentionInput argument value.
			PutObjectRetentionInput *s3.PutObjectRetentionInput
		}
		// PutObjectRetentionRequest holds details about calls to the PutObjectRetentionRequest method.
		PutObjectRetentionRequest []struct {
			// PutObjectRetentionInput is the putObjectRetentionInput argument value.
			PutObjectRetentionInput *s3.PutObjectRetentionInput
		}
		// PutObjectRetentionWithContext holds details about calls to the PutObjectRetentionWithContext method.
		PutObjectRetentionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutObjectRetentionInput is the putObjectRetentionInput argument value.
			PutObjectRetentionInput *s3.PutObjectRetentionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutObjectTagging holds details about calls to the PutObjectTagging method.
		PutObjectTagging []struct {
			// PutObjectTaggingInput is the putObjectTaggingInput argument value.
			PutObjectTaggingInput *s3.PutObjectTaggingInput
		}
		// PutObjectTaggingRequest holds details about calls to the PutObjectTaggingRequest method.
		PutObjectTaggingRequest []struct {
			// PutObjectTaggingInput is the putObjectTaggingInput argument value.
			PutObjectTaggingInput *s3.PutObjectTaggingInput
		}
		// PutObjectTaggingWithContext holds details about calls to the PutObjectTaggingWithContext method.
		PutObjectTaggingWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutObjectTaggingInput is the putObjectTaggingInput argument value.
			PutObjectTaggingInput *s3.PutObjectTaggingInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutObjectWithContext holds details about calls to the PutObjectWithContext method.
		PutObjectWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutObjectInput is the putObjectInput argument value.
			PutObjectInput *s3.PutObjectInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutPublicAccessBlock holds details about calls to the PutPublicAccessBlock method.
		PutPublicAccessBlock []struct {
			// PutPublicAccessBlockInput is the putPublicAccessBlockInput argument value.
			PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
		}
		// PutPublicAccessBlockRequest holds details about calls to the PutPublicAccessBlockRequest method.
		PutPublicAccessBlockRequest []struct {
			// PutPublicAccessBlockInput is the putPublicAccessBlockInput argument value.
			PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
		}
		// PutPublicAccessBlockWithContext holds details about calls to the PutPublicAccessBlockWithContext method.
		PutPublicAccessBlockWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutPublicAccessBlockInput is the putPublicAccessBlockInput argument value.
			PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RestoreObject holds details about calls to the RestoreObject method.
		RestoreObject []struct {
			// RestoreObjectInput is the restoreObjectInput argument value.
			RestoreObjectInput *s3.RestoreObjectInput
		}
		// RestoreObjectRequest holds details about calls to the RestoreObjectRequest method.
		RestoreObjectRequest []struct {
			// RestoreObjectInput is the restoreObjectInput argument value.
			RestoreObjectInput *s3.RestoreObjectInput
		}
		// RestoreObjectWithContext holds details about calls to the RestoreObjectWithContext method.
		RestoreObjectWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RestoreObjectInput is the restoreObjectInput argument value.
			RestoreObjectInput *s3.RestoreObjectInput
			// Options is the options argument value.
			Options []request.Option
		}
		// SelectObjectContent holds details about calls to the SelectObjectContent method.
		SelectObjectContent []struct {
			// SelectObjectContentInput is the selectObjectContentInput argument value.
			SelectObjectContentInput *s3.SelectObjectContentInput
		}
		// SelectObjectContentRequest holds details about calls to the SelectObjectContentRequest method.
		SelectObjectContentRequest []struct {
			// SelectObjectContentInput is the selectObjectContentInput argument value.
			SelectObjectContentInput *s3.SelectObjectContentInput
		}
		// SelectObjectContentWithContext holds details about calls to the SelectObjectContentWithContext method.
		SelectObjectContentWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SelectObjectContentInput is the selectObjectContentInput argument value.
			SelectObjectContentInput *s3.SelectObjectContentInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UploadPart holds details about calls to the UploadPart method.
		UploadPart []struct {
			// UploadPartInput is the uploadPartInput argument value.
			UploadPartInput *s3.UploadPartInput
		}
		// UploadPartCopy holds details about calls to the UploadPartCopy method.
		UploadPartCopy []struct {
			// UploadPartCopyInput is the uploadPartCopyInput argument value.
			UploadPartCopyInput *s3.UploadPartCopyInput
		}
		// UploadPartCopyRequest holds details about calls to the UploadPartCopyRequest method.
		UploadPartCopyRequest []struct {
			// UploadPartCopyInput is the uploadPartCopyInput argument value.
			UploadPartCopyInput *s3.UploadPartCopyInput
		}
		// UploadPartCopyWithContext holds details about calls to the UploadPartCopyWithContext method.
		UploadPartCopyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UploadPartCopyInput is the uploadPartCopyInput argument value.
			UploadPartCopyInput *s3.UploadPartCopyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UploadPartRequest holds details about calls to the UploadPartRequest method.
		UploadPartRequest []struct {
			// UploadPartInput is the uploadPartInput argument value.
			UploadPartInput *s3.UploadPartInput
		}
		// UploadPartWithContext holds details about calls to the UploadPartWithContext method.
		UploadPartWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UploadPartInput is the uploadPartInput argument value.
			UploadPartInput *s3.UploadPartInput
			// Options is the options argument value.
			Options []request.Option
		}
		// WaitUntilBucketExists holds details about calls to the WaitUntilBucketExists method.
		WaitUntilBucketExists []struct {
			// HeadBucketInput is the headBucketInput argument value.
			HeadBucketInput *s3.HeadBucketInput
		}
		// WaitUntilBucketExistsWithContext holds details about calls to the WaitUntilBucketExistsWithContext method.
		WaitUntilBucketExistsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// HeadBucketInput is the headBucketInput argument value.
			HeadBucketInput *s3.HeadBucketInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilBucketNotExists holds details about calls to the WaitUntilBucketNotExists method.
		WaitUntilBucketNotExists []struct {
			// HeadBucketInput is the headBucketInput argument value.
			HeadBucketInput *s3.HeadBucketInput
		}
		// WaitUntilBucketNotExistsWithContext holds details about calls to the WaitUntilBucketNotExistsWithContext method.
		WaitUntilBucketNotExistsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// HeadBucketInput is the headBucketInput argument value.
			HeadBucketInput *s3.HeadBucketInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilObjectExists holds details about calls to the WaitUntilObjectExists method.
		WaitUntilObjectExists []struct {
			// HeadObjectInput is the headObjectInput argument value.
			HeadObjectInput *s3.HeadObjectInput
		}
		// WaitUntilObjectExistsWithContext holds details about calls to the WaitUntilObjectExistsWithContext method.
		WaitUntilObjectExistsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// HeadObjectInput is the headObjectInput argument value.
			HeadObjectInput *s3.HeadObjectInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilObjectNotExists holds details about calls to the WaitUntilObjectNotExists method.
		WaitUntilObjectNotExists []struct {
			// HeadObjectInput is the headObjectInput argument value.
			HeadObjectInput *s3.HeadObjectInput
		}
		// WaitUntilObjectNotExistsWithContext holds details about calls to the WaitUntilObjectNotExistsWithContext method.
		WaitUntilObjectNotExistsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// HeadObjectInput is the headObjectInput argument value.
			HeadObjectInput *s3.HeadObjectInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WriteGetObjectResponse holds details about calls to the WriteGetObjectResponse method.
		WriteGetObjectResponse []struct {
			// WriteGetObjectResponseInput is the writeGetObjectResponseInput argument value.
			WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
		}
		// WriteGetObjectResponseRequest holds details about calls to the WriteGetObjectResponseRequest method.
		WriteGetObjectResponseRequest []struct {
			// WriteGetObjectResponseInput is the writeGetObjectResponseInput argument value.
			WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
		}
		// WriteGetObjectResponseWithContext holds details about calls to the WriteGetObjectResponseWithContext method.
		WriteGetObjectResponseWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// WriteGetObjectResponseInput is the writeGetObjectResponseInput argument value.
			WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
			// Options is the options argument value.
			Options []request.Option
		}
	}
	lockAbortMultipartUpload                                   sync.RWMutex
	lockAbortMultipartUploadRequest                            sync.RWMutex
	lockAbortMultipartUploadWithContext                        sync.RWMutex
	lockCompleteMultipartUpload                                sync.RWMutex
	lockCompleteMultipartUploadRequest                         sync.RWMutex
	lockCompleteMultipartUploadWithContext                     sync.RWMutex
	lockCopyObject                                             sync.RWMutex
	lockCopyObjectRequest                                      sync.RWMutex
	lockCopyObjectWithContext                                  sync.RWMutex
	lockCreateBucket                                           sync.RWMutex
	lockCreateBucketRequest                                    sync.RWMutex
	lockCreateBucketWithContext                                sync.RWMutex
	lockCreateMultipartUpload                                  sync.RWMutex
	lockCreateMultipartUploadRequest                           sync.RWMutex
	lockCreateMultipartUploadWithContext                       sync.RWMutex
	lockDeleteBucket                                           sync.RWMutex
	lockDeleteBucketAnalyticsConfiguration                     sync.RWMutex
	lockDeleteBucketAnalyticsConfigurationRequest              sync.RWMutex
	lockDeleteBucketAnalyticsConfigurationWithContext          sync.RWMutex
	lockDeleteBucketCors                                       sync.RWMutex
	lockDeleteBucketCorsRequest                                sync.RWMutex
	lockDeleteBucketCorsWithContext                            sync.RWMutex
	lockDeleteBucketEncryption                                 sync.RWMutex
	lockDeleteBucketEncryptionRequest                          sync.RWMutex
	lockDeleteBucketEncryptionWithContext                      sync.RWMutex
	lockDeleteBucketIntelligentTieringConfiguration            sync.RWMutex
	lockDeleteBucketIntelligentTieringConfigurationRequest     sync.RWMutex
	lockDeleteBucketIntelligentTieringConfigurationWithContext sync.RWMutex
	lockDeleteBucketInventoryConfiguration                     sync.RWMutex
	lockDeleteBucketInventoryConfigurationRequest              sync.RWMutex
	lockDeleteBucketInventoryConfigurationWithContext          sync.RWMutex
	lockDeleteBucketLifecycle                                  sync.RWMutex
	lockDeleteBucketLifecycleRequest                           sync.RWMutex
	lockDeleteBucketLifecycleWithContext                       sync.RWMutex
	lockDeleteBucketMetricsConfiguration                       sync.RWMutex
	lockDeleteBucketMetricsConfigurationRequest                sync.RWMutex
	lockDeleteBucketMetricsConfigurationWithContext            sync.RWMutex
	lockDeleteBucketOwnershipControls                          sync.RWMutex
	lockDeleteBucketOwnershipControlsRequest                   sync.RWMutex
	lockDeleteBucketOwnershipControlsWithContext               sync.RWMutex
	lockDeleteBucketPolicy                                     sync.RWMutex
	lockDeleteBucketPolicyRequest                              sync.RWMutex
	lockDeleteBucketPolicyWithContext                          sync.RWMutex
	lockDeleteBucketReplication                                sync.RWMutex
	lockDeleteBucketReplicationRequest                         sync.RWMutex
	lockDeleteBucketReplicationWithContext                     sync.RWMutex
	lockDeleteBucketRequest                                    sync.RWMutex
	lockDeleteBucketTagging                                    sync.RWMutex
	lockDeleteBucketTaggingRequest                             sync.RWMutex
	lockDeleteBucketTaggingWithContext                         sync.RWMutex
	lockDeleteBucketWebsite                                    sync.RWMutex
	lockDeleteBucketWebsiteRequest                             sync.RWMutex
	lockDeleteBucketWebsiteWithContext                         sync.RWMutex
	lockDeleteBucketWithContext                                sync.RWMutex
	lockDeleteObject                                           sync.RWMutex
	lockDeleteObjectRequest                                    sync.RWMutex
	lockDeleteObjectTagging                                    sync.RWMutex
	lockDeleteObjectTaggingRequest                             sync.RWMutex
	lockDeleteObjectTaggingWithContext                         sync.RWMutex
	lockDeleteObjectWithContext                                sync.RWMutex
	lockDeleteObjects                                          sync.RWMutex
	lockDeleteObjectsRequest                                   sync.RWMutex
	lockDeleteObjectsWithContext                               sync.RWMutex
	lockDeletePublicAccessBlock                                sync.RWMutex
	lockDeletePublicAccessBlockRequest                         sync.RWMutex
	lockDeletePublicAccessBlockWithContext                     sync.RWMutex
	lockGetBucketAccelerateConfiguration                       sync.RWMutex
	lockGetBucketAccelerateConfigurationRequest                sync.RWMutex
	lockGetBucketAccelerateConfigurationWithContext            sync.RWMutex
	lockGetBucketAcl                                           sync.RWMutex
	lockGetBucketAclRequest                                    sync.RWMutex
	lockGetBucketAclWithContext                                sync.RWMutex
	lockGetBucketAnalyticsConfiguration                        sync.RWMutex
	lockGetBucketAnalyticsConfigurationRequest                 sync.RWMutex
	lockGetBucketAnalyticsConfigurationWithContext             sync.RWMutex
	lockGetBucketCors                                          sync.RWMutex
	lockGetBucketCorsRequest                                   sync.RWMutex
	lockGetBucketCorsWithContext                               sync.RWMutex
	lockGetBucketEncryption                                    sync.RWMutex
	lockGetBucketEncryptionRequest                             sync.RWMutex
	lockGetBucketEncryptionWithContext                         sync.RWMutex
	lockGetBucketIntelligentTieringConfiguration               sync.RWMutex
	lockGetBucketIntelligentTieringConfigurationRequest        sync.RWMutex
	lockGetBucketIntelligentTieringConfigurationWithContext    sync.RWMutex
	lockGetBucketInventoryConfiguration                        sync.RWMutex
	lockGetBucketInventoryConfigurationRequest                 sync.RWMutex
	lockGetBucketInventoryConfigurationWithContext             sync.RWMutex
	lockGetBucketLifecycle                                     sync.RWMutex
	lockGetBucketLifecycleConfiguration                        sync.RWMutex
	lockGetBucketLifecycleConfigurationRequest                 sync.RWMutex
	lockGetBucketLifecycleConfigurationWithContext             sync.RWMutex
	lockGetBucketLifecycleRequest                              sync.RWMutex
	lockGetBucketLifecycleWithContext                          sync.RWMutex
	lockGetBucketLocation                                      sync.RWMutex
	lockGetBucketLocationRequest                               sync.RWMutex
	lockGetBucketLocationWithContext                           sync.RWMutex
	lockGetBucketLogging                                       sync.RWMutex
	lockGetBucketLoggingRequest                                sync.RWMutex
	lockGetBucketLoggingWithContext                            sync.RWMutex
	lockGetBucketMetricsConfiguration                          sync.RWMutex
	lockGetBucketMetricsConfigurationRequest                   sync.RWMutex
	lockGetBucketMetricsConfigurationWithContext               sync.RWMutex
	lockGetBucketNotification                                  sync.RWMutex
	lockGetBucketNotificationConfiguration                     sync.RWMutex
	lockGetBucketNotificationConfigurationRequest              sync.RWMutex
	lockGetBucketNotificationConfigurationWithContext          sync.RWMutex
	lockGetBucketNotificationRequest                           sync.RWMutex
	lockGetBucketNotificationWithContext                       sync.RWMutex
	lockGetBucketOwnershipControls                             sync.RWMutex
	lockGetBucketOwnershipControlsRequest                      sync.RWMutex
	lockGetBucketOwnershipControlsWithContext                  sync.RWMutex
	lockGetBucketPolicy                                        sync.RWMutex
	lockGetBucketPolicyRequest                                 sync.RWMutex
	lockGetBucketPolicyStatus                                  sync.RWMutex
	lockGetBucketPolicyStatusRequest                           sync.RWMutex
	lockGetBucketPolicyStatusWithContext                       sync.RWMutex
	lockGetBucketPolicyWithContext                             sync.RWMutex
	lockGetBucketReplication                                   sync.RWMutex
	lockGetBucketReplicationRequest                            sync.RWMutex
	lockGetBucketReplicationWithContext                        sync.RWMutex
	lockGetBucketRequestPayment                                sync.RWMutex
	lockGetBucketRequestPaymentRequest                         sync.RWMutex
	lockGetBucketRequestPaymentWithContext                     sync.RWMutex
	lockGetBucketTagging                                       sync.RWMutex
	lockGetBucketTaggingRequest                                sync.RWMutex
	lockGetBucketTaggingWithContext                            sync.RWMutex
	lockGetBucketVersioning                                    sync.RWMutex
	lockGetBucketVersioningRequest                             sync.RWMutex
	lockGetBucketVersioningWithContext                         sync.RWMutex
	lockGetBucketWebsite                                       sync.RWMutex
	lockGetBucketWebsiteRequest                                sync.RWMutex
	lockGetBucketWebsiteWithContext                            sync.RWMutex
	lockGetObject                                              sync.RWMutex
	lockGetObjectAcl                                           sync.RWMutex
	lockGetObjectAclRequest                                    sync.RWMutex
	lockGetObjectAclWithContext                                sync.RWMutex
	lockGetObjectAttributes                                    sync.RWMutex
	lockGetObjectAttributesRequest                             sync.RWMutex
	lockGetObjectAttributesWithContext                         sync.RWMutex
	lockGetObjectLegalHold                                     sync.RWMutex
	lockGetObjectLegalHoldRequest                              sync.RWMutex
	lockGetObjectLegalHoldWithContext                          sync.RWMutex
	lockGetObjectLockConfiguration                             sync.RWMutex
	lockGetObjectLockConfigurationRequest                      sync.RWMutex
	lockGetObjectLockConfigurationWithContext                  sync.RWMutex
	lockGetObjectRequest                                       sync.RWMutex
	lockGetObjectRetention                                     sync.RWMutex
	lockGetObjectRetentionRequest                              sync.RWMutex
	lockGetObjectRetentionWithContext                          sync.RWMutex
	lockGetObjectTagging                                       sync.RWMutex
	lockGetObjectTaggingRequest                                sync.RWMutex
	lockGetObjectTaggingWithContext                            sync.RWMutex
	lockGetObjectTorrent                                       sync.RWMutex
	lockGetObjectTorrentRequest                                sync.RWMutex
	lockGetObjectTorrentWithContext                            sync.RWMutex
	lockGetObjectWithContext                                   sync.RWMutex
	lockGetPublicAccessBlock                                   sync.RWMutex
	lockGetPublicAccessBlockRequest                            sync.RWMutex
	lockGetPublicAccessBlockWithContext                        sync.RWMutex
	lockHeadBucket                                             sync.RWMutex
	lockHeadBucketRequest                                      sync.RWMutex
	lockHeadBucketWithContext                                  sync.RWMutex
	lockHeadObject                                             sync.RWMutex
	lockHeadObjectRequest                                      sync.RWMutex
	lockHeadObjectWithContext                                  sync.RWMutex
	lockListBucketAnalyticsConfigurations                      sync.RWMutex
	lockListBucketAnalyticsConfigurationsRequest               sync.RWMutex
	lockListBucketAnalyticsConfigurationsWithContext           sync.RWMutex
	lockListBucketIntelligentTieringConfigurations             sync.RWMutex
	lockListBucketIntelligentTieringConfigurationsRequest      sync.RWMutex
	lockListBucketIntelligentTieringConfigurationsWithContext  sync.RWMutex
	lockListBucketInventoryConfigurations                      sync.RWMutex
	lockListBucketInventoryConfigurationsRequest               sync.RWMutex
	lockListBucketInventoryConfigurationsWithContext           sync.RWMutex
	lockListBucketMetricsConfigurations                        sync.RWMutex
	lockListBucketMetricsConfigurationsRequest                 sync.RWMutex
	lockListBucketMetricsConfigurationsWithContext             sync.RWMutex
	lockListBuckets                                            sync.RWMutex
	lockListBucketsRequest                                     sync.RWMutex
	lockListBucketsWithContext                                 sync.RWMutex
	lockListMultipartUploads                                   sync.RWMutex
	lockListMultipartUploadsPages                              sync.RWMutex
	lockListMultipartUploadsPagesWithContext                   sync.RWMutex
	lockListMultipartUploadsRequest                            sync.RWMutex
	lockListMultipartUploadsWithContext                        sync.RWMutex
	lockListObjectVersions                                     sync.RWMutex
	lockListObjectVersionsPages                                sync.RWMutex
	lockListObjectVersionsPagesWithContext                     sync.RWMutex
	lockListObjectVersionsRequest                              sync.RWMutex
	lockListObjectVersionsWithContext                          sync.RWMutex
	lockListObjects                                            sync.RWMutex
	lockListObjectsPages                                       sync.RWMutex
	lockListObjectsPagesWithContext                            sync.RWMutex
	lockListObjectsRequest                                     sync.RWMutex
	lockListObjectsV2                                          sync.RWMutex
	lockListObjectsV2Pages                                     sync.RWMutex
	lockListObjectsV2PagesWithContext                          sync.RWMutex
	lockListObjectsV2Request                                   sync.RWMutex
	lockListObjectsV2WithContext                               sync.RWMutex
	lockListObjectsWithContext                                 sync.RWMutex
	lockListParts                                              sync.RWMutex
	lockListPartsPages                                         sync.RWMutex
	lockListPartsPagesWithContext                              sync.RWMutex
	lockListPartsRequest                                       sync.RWMutex
	lockListPartsWithContext                                   sync.RWMutex
	lockPutBucketAccelerateConfiguration                       sync.RWMutex
	lockPutBucketAccelerateConfigurationRequest                sync.RWMutex
	lockPutBucketAccelerateConfigurationWithContext            sync.RWMutex
	lockPutBucketAcl                                           sync.RWMutex
	lockPutBucketAclRequest                                    sync.RWMutex
	lockPutBucketAclWithContext                                sync.RWMutex
	lockPutBucketAnalyticsConfiguration                        sync.RWMutex
	lockPutBucketAnalyticsConfigurationRequest                 sync.RWMutex
	lockPutBucketAnalyticsConfigurationWithContext             sync.RWMutex
	lockPutBucketCors                                          sync.RWMutex
	lockPutBucketCorsRequest                                   sync.RWMutex
	lockPutBucketCorsWithContext                               sync.RWMutex
	lockPutBucketEncryption                                    sync.RWMutex
	lockPutBucketEncryptionRequest                             sync.RWMutex
	lockPutBucketEncryptionWithContext                         sync.RWMutex
	lockPutBucketIntelligentTieringConfiguration               sync.RWMutex
	lockPutBucketIntelligentTieringConfigurationRequest        sync.RWMutex
	lockPutBucketIntelligentTieringConfigurationWithContext    sync.RWMutex
	lockPutBucketInventoryConfiguration                        sync.RWMutex
	lockPutBucketInventoryConfigurationRequest                 sync.RWMutex
	lockPutBucketInventoryConfigurationWithContext             sync.RWMutex
	lockPutBucketLifecycle                                     sync.RWMutex
	lockPutBucketLifecycleConfiguration                        sync.RWMutex
	lockPutBucketLifecycleConfigurationRequest                 sync.RWMutex
	lockPutBucketLifecycleConfigurationWithContext             sync.RWMutex
	lockPutBucketLifecycleRequest                              sync.RWMutex
	lockPutBucketLifecycleWithContext                          sync.RWMutex
	lockPutBucketLogging                                       sync.RWMutex
	lockPutBucketLoggingRequest                                sync.RWMutex
	lockPutBucketLoggingWithContext                            sync.RWMutex
	lockPutBucketMetricsConfiguration                          sync.RWMutex
	lockPutBucketMetricsConfigurationRequest                   sync.RWMutex
	lockPutBucketMetricsConfigurationWithContext               sync.RWMutex
	lockPutBucketNotification                                  sync.RWMutex
	lockPutBucketNotificationConfiguration                     sync.RWMutex
	lockPutBucketNotificationConfigurationRequest              sync.RWMutex
	lockPutBucketNotificationConfigurationWithContext          sync.RWMutex
	lockPutBucketNotificationRequest                           sync.RWMutex
	lockPutBucketNotificationWithContext                       sync.RWMutex
	lockPutBucketOwnershipControls                             sync.RWMutex
	lockPutBucketOwnershipControlsRequest                      sync.RWMutex
	lockPutBucketOwnershipControlsWithContext                  sync.RWMutex
	lockPutBucketPolicy                                        sync.RWMutex
	lockPutBucketPolicyRequest                                 sync.RWMutex
	lockPutBucketPolicyWithContext                             sync.RWMutex
	lockPutBucketReplication                                   sync.RWMutex
	lockPutBucketReplicationRequest                            sync.RWMutex
	lockPutBucketReplicationWithContext                        sync.RWMutex
	lockPutBucketRequestPayment                                sync.RWMutex
	lockPutBucketRequestPaymentRequest                         sync.RWMutex
	lockPutBucketRequestPaymentWithContext                     sync.RWMutex
	lockPutBucketTagging                                       sync.RWMutex
	lockPutBucketTaggingRequest                                sync.RWMutex
	lockPutBucketTaggingWithContext                            sync.RWMutex
	lockPutBucketVersioning                                    sync.RWMutex
	lockPutBucketVersioningRequest                             sync.RWMutex
	lockPutBucketVersioningWithContext                         sync.RWMutex
	lockPutBucketWebsite                                       sync.RWMutex
	lockPutBucketWebsiteRequest                                sync.RWMutex
	lockPutBucketWebsiteWithContext                            sync.RWMutex
	lockPutObject                                              sync.RWMutex
	lockPutObjectAcl                                           sync.RWMutex
	lockPutObjectAclRequest                                    sync.RWMutex
	lockPutObjectAclWithContext                                sync.RWMutex
	lockPutObjectLegalHold                                     sync.RWMutex
	lockPutObjectLegalHoldRequest                              sync.RWMutex
	lockPutObjectLegalHoldWithContext                          sync.RWMutex
	lockPutObjectLockConfiguration                             sync.RWMutex
	lockPutObjectLockConfigurationRequest                      sync.RWMutex
	lockPutObjectLockConfigurationWithContext                  sync.RWMutex
	lockPutObjectRequest                                       sync.RWMutex
	lockPutObjectRetention                                     sync.RWMutex
	lockPutObjectRetentionRequest                              sync.RWMutex
	lockPutObjectRetentionWithContext                          sync.RWMutex
	lockPutObjectTagging                                       sync.RWMutex
	lockPutObjectTaggingRequest                                sync.RWMutex
	lockPutObjectTaggingWithContext                            sync.RWMutex
	lockPutObjectWithContext                                   sync.RWMutex
	lockPutPublicAccessBlock                                   sync.RWMutex
	lockPutPublicAccessBlockRequest                            sync.RWMutex
	lockPutPublicAccessBlockWithContext                        sync.RWMutex
	lockRestoreObject                                          sync.RWMutex
	lockRestoreObjectRequest                                   sync.RWMutex
	lockRestoreObjectWithContext                               sync.RWMutex
	lockSelectObjectContent                                    sync.RWMutex
	lockSelectObjectContentRequest                             sync.RWMutex
	lockSelectObjectContentWithContext                         sync.RWMutex
	lockUploadPart                                             sync.RWMutex
	lockUploadPartCopy                                         sync.RWMutex
	lockUploadPartCopyRequest                                  sync.RWMutex
	lockUploadPartCopyWithContext                              sync.RWMutex
	lockUploadPartRequest                                      sync.RWMutex
	lockUploadPartWithContext                                  sync.RWMutex
	lockWaitUntilBucketExists                                  sync.RWMutex
	lockWaitUntilBucketExistsWithContext                       sync.RWMutex
	lockWaitUntilBucketNotExists                               sync.RWMutex
	lockWaitUntilBucketNotExistsWithContext                    sync.RWMutex
	lockWaitUntilObjectExists                                  sync.RWMutex
	lockWaitUntilObjectExistsWithContext                       sync.RWMutex
	lockWaitUntilObjectNotExists                               sync.RWMutex
	lockWaitUntilObjectNotExistsWithContext                    sync.RWMutex
	lockWriteGetObjectResponse                                 sync.RWMutex
	lockWriteGetObjectResponseRequest                          sync.RWMutex
	lockWriteGetObjectResponseWithContext                      sync.RWMutex
}

// AbortMultipartUpload calls AbortMultipartUploadFunc.
func (mock *s3ClientMock) AbortMultipartUpload(abortMultipartUploadInput *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
	if mock.AbortMultipartUploadFunc == nil {
		panic("s3ClientMock.AbortMultipartUploadFunc: method is nil but s3Client.AbortMultipartUpload was just called")
	}
	callInfo := struct {
		AbortMultipartUploadInput *s3.AbortMultipartUploadInput
	}{
		AbortMultipartUploadInput: abortMultipartUploadInput,
	}
	mock.lockAbortMultipartUpload.Lock()
	mock.calls.AbortMultipartUpload = append(mock.calls.AbortMultipartUpload, callInfo)
	mock.lockAbortMultipartUpload.Unlock()
	return mock.AbortMultipartUploadFunc(abortMultipartUploadInput)
}

// AbortMultipartUploadCalls gets all the calls that were made to AbortMultipartUpload.
// Check the length with:
//     len(mockeds3Client.AbortMultipartUploadCalls())
func (mock *s3ClientMock) AbortMultipartUploadCalls() []struct {
	AbortMultipartUploadInput *s3.AbortMultipartUploadInput
} {
	var calls []struct {
		AbortMultipartUploadInput *s3.AbortMultipartUploadInput
	}
	mock.lockAbortMultipartUpload.RLock()
	calls = mock.calls.AbortMultipartUpload
	mock.lockAbortMultipartUpload.RUnlock()
	return calls
}

// AbortMultipartUploadRequest calls AbortMultipartUploadRequestFunc.
func (mock *s3ClientMock) AbortMultipartUploadRequest(abortMultipartUploadInput *s3.AbortMultipartUploadInput) (*request.Request, *s3.AbortMultipartUploadOutput) {
	if mock.AbortMultipartUploadRequestFunc == nil {
		panic("s3ClientMock.AbortMultipartUploadRequestFunc: method is nil but s3Client.AbortMultipartUploadRequest was just called")
	}
	callInfo := struct {
		AbortMultipartUploadInput *s3.AbortMultipartUploadInput
	}{
		AbortMultipartUploadInput: abortMultipartUploadInput,
	}
	mock.lockAbortMultipartUploadRequest.Lock()
	mock.calls.AbortMultipartUploadRequest = append(mock.calls.AbortMultipartUploadRequest, callInfo)
	mock.lockAbortMultipartUploadRequest.Unlock()
	return mock.AbortMultipartUploadRequestFunc(abortMultipartUploadInput)
}

// AbortMultipartUploadRequestCalls gets all the calls that were made to AbortMultipartUploadRequest.
// Check the length with:
//     len(mockeds3Client.AbortMultipartUploadRequestCalls())
func (mock *s3ClientMock) AbortMultipartUploadRequestCalls() []struct {
	AbortMultipartUploadInput *s3.AbortMultipartUploadInput
} {
	var calls []struct {
		AbortMultipartUploadInput *s3.AbortMultipartUploadInput
	}
	mock.lockAbortMultipartUploadRequest.RLock()
	calls = mock.calls.AbortMultipartUploadRequest
	mock.lockAbortMultipartUploadRequest.RUnlock()
	return calls
}

// AbortMultipartUploadWithContext calls AbortMultipartUploadWithContextFunc.
func (mock *s3ClientMock) AbortMultipartUploadWithContext(contextMoqParam context.Context, abortMultipartUploadInput *s3.AbortMultipartUploadInput, options ...request.Option) (*s3.AbortMultipartUploadOutput, error) {
	if mock.AbortMultipartUploadWithContextFunc == nil {
		panic("s3ClientMock.AbortMultipartUploadWithContextFunc: method is nil but s3Client.AbortMultipartUploadWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		AbortMultipartUploadInput *s3.AbortMultipartUploadInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		AbortMultipartUploadInput: abortMultipartUploadInput,
		Options:                   options,
	}
	mock.lockAbortMultipartUploadWithContext.Lock()
	mock.calls.AbortMultipartUploadWithContext = append(mock.calls.AbortMultipartUploadWithContext, callInfo)
	mock.lockAbortMultipartUploadWithContext.Unlock()
	return mock.AbortMultipartUploadWithContextFunc(contextMoqParam, abortMultipartUploadInput, options...)
}

// AbortMultipartUploadWithContextCalls gets all the calls that were made to AbortMultipartUploadWithContext.
// Check the length with:
//     len(mockeds3Client.AbortMultipartUploadWithContextCalls())
func (mock *s3ClientMock) AbortMultipartUploadWithContextCalls() []struct {
	ContextMoqParam           context.Context
	AbortMultipartUploadInput *s3.AbortMultipartUploadInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		AbortMultipartUploadInput *s3.AbortMultipartUploadInput
		Options                   []request.Option
	}
	mock.lockAbortMultipartUploadWithContext.RLock()
	calls = mock.calls.AbortMultipartUploadWithContext
	mock.lockAbortMultipartUploadWithContext.RUnlock()
	return calls
}

// CompleteMultipartUpload calls CompleteMultipartUploadFunc.
func (mock *s3ClientMock) CompleteMultipartUpload(completeMultipartUploadInput *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	if mock.CompleteMultipartUploadFunc == nil {
		panic("s3ClientMock.CompleteMultipartUploadFunc: method is nil but s3Client.CompleteMultipartUpload was just called")
	}
	callInfo := struct {
		CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
	}{
		CompleteMultipartUploadInput: completeMultipartUploadInput,
	}
	mock.lockCompleteMultipartUpload.Lock()
	mock.calls.CompleteMultipartUpload = append(mock.calls.CompleteMultipartUpload, callInfo)
	mock.lockCompleteMultipartUpload.Unlock()
	return mock.CompleteMultipartUploadFunc(completeMultipartUploadInput)
}

// CompleteMultipartUploadCalls gets all the calls that were made to CompleteMultipartUpload.
// Check the length with:
//     len(mockeds3Client.CompleteMultipartUploadCalls())
func (mock *s3ClientMock) CompleteMultipartUploadCalls() []struct {
	CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
} {
	var calls []struct {
		CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
	}
	mock.lockCompleteMultipartUpload.RLock()
	calls = mock.calls.CompleteMultipartUpload
	mock.lockCompleteMultipartUpload.RUnlock()
	return calls
}

// CompleteMultipartUploadRequest calls CompleteMultipartUploadRequestFunc.
func (mock *s3ClientMock) CompleteMultipartUploadRequest(completeMultipartUploadInput *s3.CompleteMultipartUploadInput) (*request.Request, *s3.CompleteMultipartUploadOutput) {
	if mock.CompleteMultipartUploadRequestFunc == nil {
		panic("s3ClientMock.CompleteMultipartUploadRequestFunc: method is nil but s3Client.CompleteMultipartUploadRequest was just called")
	}
	callInfo := struct {
		CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
	}{
		CompleteMultipartUploadInput: completeMultipartUploadInput,
	}
	mock.lockCompleteMultipartUploadRequest.Lock()
	mock.calls.CompleteMultipartUploadRequest = append(mock.calls.CompleteMultipartUploadRequest, callInfo)
	mock.lockCompleteMultipartUploadRequest.Unlock()
	return mock.CompleteMultipartUploadRequestFunc(completeMultipartUploadInput)
}

// CompleteMultipartUploadRequestCalls gets all the calls that were made to CompleteMultipartUploadRequest.
// Check the length with:
//     len(mockeds3Client.CompleteMultipartUploadRequestCalls())
func (mock *s3ClientMock) CompleteMultipartUploadRequestCalls() []struct {
	CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
} {
	var calls []struct {
		CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
	}
	mock.lockCompleteMultipartUploadRequest.RLock()
	calls = mock.calls.CompleteMultipartUploadRequest
	mock.lockCompleteMultipartUploadRequest.RUnlock()
	return calls
}

// CompleteMultipartUploadWithContext calls CompleteMultipartUploadWithContextFunc.
func (mock *s3ClientMock) CompleteMultipartUploadWithContext(contextMoqParam context.Context, completeMultipartUploadInput *s3.CompleteMultipartUploadInput, options ...request.Option) (*s3.CompleteMultipartUploadOutput, error) {
	if mock.CompleteMultipartUploadWithContextFunc == nil {
		panic("s3ClientMock.CompleteMultipartUploadWithContextFunc: method is nil but s3Client.CompleteMultipartUploadWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		CompleteMultipartUploadInput: completeMultipartUploadInput,
		Options:                      options,
	}
	mock.lockCompleteMultipartUploadWithContext.Lock()
	mock.calls.CompleteMultipartUploadWithContext = append(mock.calls.CompleteMultipartUploadWithContext, callInfo)
	mock.lockCompleteMultipartUploadWithContext.Unlock()
	return mock.CompleteMultipartUploadWithContextFunc(contextMoqParam, completeMultipartUploadInput, options...)
}

// CompleteMultipartUploadWithContextCalls gets all the calls that were made to CompleteMultipartUploadWithContext.
// Check the length with:
//     len(mockeds3Client.CompleteMultipartUploadWithContextCalls())
func (mock *s3ClientMock) CompleteMultipartUploadWithContextCalls() []struct {
	ContextMoqParam              context.Context
	CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		CompleteMultipartUploadInput *s3.CompleteMultipartUploadInput
		Options                      []request.Option
	}
	mock.lockCompleteMultipartUploadWithContext.RLock()
	calls = mock.calls.CompleteMultipartUploadWithContext
	mock.lockCompleteMultipartUploadWithContext.RUnlock()
	return calls
}

// CopyObject calls CopyObjectFunc.
func (mock *s3ClientMock) CopyObject(copyObjectInput *s3.CopyObjectInput) (*s3.CopyObjectOutput, error) {
	if mock.CopyObjectFunc == nil {
		panic("s3ClientMock.CopyObjectFunc: method is nil but s3Client.CopyObject was just called")
	}
	callInfo := struct {
		CopyObjectInput *s3.CopyObjectInput
	}{
		CopyObjectInput: copyObjectInput,
	}
	mock.lockCopyObject.Lock()
	mock.calls.CopyObject = append(mock.calls.CopyObject, callInfo)
	mock.lockCopyObject.Unlock()
	return mock.CopyObjectFunc(copyObjectInput)
}

// CopyObjectCalls gets all the calls that were made to CopyObject.
// Check the length with:
//     len(mockeds3Client.CopyObjectCalls())
func (mock *s3ClientMock) CopyObjectCalls() []struct {
	CopyObjectInput *s3.CopyObjectInput
} {
	var calls []struct {
		CopyObjectInput *s3.CopyObjectInput
	}
	mock.lockCopyObject.RLock()
	calls = mock.calls.CopyObject
	mock.lockCopyObject.RUnlock()
	return calls
}

// CopyObjectRequest calls CopyObjectRequestFunc.
func (mock *s3ClientMock) CopyObjectRequest(copyObjectInput *s3.CopyObjectInput) (*request.Request, *s3.CopyObjectOutput) {
	if mock.CopyObjectRequestFunc == nil {
		panic("s3ClientMock.CopyObjectRequestFunc: method is nil but s3Client.CopyObjectRequest was just called")
	}
	callInfo := struct {
		CopyObjectInput *s3.CopyObjectInput
	}{
		CopyObjectInput: copyObjectInput,
	}
	mock.lockCopyObjectRequest.Lock()
	mock.calls.CopyObjectRequest = append(mock.calls.CopyObjectRequest, callInfo)
	mock.lockCopyObjectRequest.Unlock()
	return mock.CopyObjectRequestFunc(copyObjectInput)
}

// CopyObjectRequestCalls gets all the calls that were made to CopyObjectRequest.
// Check the length with:
//     len(mockeds3Client.CopyObjectRequestCalls())
func (mock *s3ClientMock) CopyObjectRequestCalls() []struct {
	CopyObjectInput *s3.CopyObjectInput
} {
	var calls []struct {
		CopyObjectInput *s3.CopyObjectInput
	}
	mock.lockCopyObjectRequest.RLock()
	calls = mock.calls.CopyObjectRequest
	mock.lockCopyObjectRequest.RUnlock()
	return calls
}

// CopyObjectWithContext calls CopyObjectWithContextFunc.
func (mock *s3ClientMock) CopyObjectWithContext(contextMoqParam context.Context, copyObjectInput *s3.CopyObjectInput, options ...request.Option) (*s3.CopyObjectOutput, error) {
	if mock.CopyObjectWithContextFunc == nil {
		panic("s3ClientMock.CopyObjectWithContextFunc: method is nil but s3Client.CopyObjectWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CopyObjectInput *s3.CopyObjectInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		CopyObjectInput: copyObjectInput,
		Options:         options,
	}
	mock.lockCopyObjectWithContext.Lock()
	mock.calls.CopyObjectWithContext = append(mock.calls.CopyObjectWithContext, callInfo)
	mock.lockCopyObjectWithContext.Unlock()
	return mock.CopyObjectWithContextFunc(contextMoqParam, copyObjectInput, options...)
}

// CopyObjectWithContextCalls gets all the calls that were made to CopyObjectWithContext.
// Check the length with:
//     len(mockeds3Client.CopyObjectWithContextCalls())
func (mock *s3ClientMock) CopyObjectWithContextCalls() []struct {
	ContextMoqParam context.Context
	CopyObjectInput *s3.CopyObjectInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		CopyObjectInput *s3.CopyObjectInput
		Options         []request.Option
	}
	mock.lockCopyObjectWithContext.RLock()
	calls = mock.calls.CopyObjectWithContext
	mock.lockCopyObjectWithContext.RUnlock()
	return calls
}

// CreateBucket calls CreateBucketFunc.
func (mock *s3ClientMock) CreateBucket(createBucketInput *s3.CreateBucketInput) (*s3.CreateBucketOutput, error) {
	if mock.CreateBucketFunc == nil {
		panic("s3ClientMock.CreateBucketFunc: method is nil but s3Client.CreateBucket was just called")
	}
	callInfo := struct {
		CreateBucketInput *s3.CreateBucketInput
	}{
		CreateBucketInput: createBucketInput,
	}
	mock.lockCreateBucket.Lock()
	mock.calls.CreateBucket = append(mock.calls.CreateBucket, callInfo)
	mock.lockCreateBucket.Unlock()
	return mock.CreateBucketFunc(createBucketInput)
}

// CreateBucketCalls gets all the calls that were made to CreateBucket.
// Check the length with:
//     len(mockeds3Client.CreateBucketCalls())
func (mock *s3ClientMock) CreateBucketCalls() []struct {
	CreateBucketInput *s3.CreateBucketInput
} {
	var calls []struct {
		CreateBucketInput *s3.CreateBucketInput
	}
	mock.lockCreateBucket.RLock()
	calls = mock.calls.CreateBucket
	mock.lockCreateBucket.RUnlock()
	return calls
}

// CreateBucketRequest calls CreateBucketRequestFunc.
func (mock *s3ClientMock) CreateBucketRequest(createBucketInput *s3.CreateBucketInput) (*request.Request, *s3.CreateBucketOutput) {
	if mock.CreateBucketRequestFunc == nil {
		panic("s3ClientMock.CreateBucketRequestFunc: method is nil but s3Client.CreateBucketRequest was just called")
	}
	callInfo := struct {
		CreateBucketInput *s3.CreateBucketInput
	}{
		CreateBucketInput: createBucketInput,
	}
	mock.lockCreateBucketRequest.Lock()
	mock.calls.CreateBucketRequest = append(mock.calls.CreateBucketRequest, callInfo)
	mock.lockCreateBucketRequest.Unlock()
	return mock.CreateBucketRequestFunc(createBucketInput)
}

// CreateBucketRequestCalls gets all the calls that were made to CreateBucketRequest.
// Check the length with:
//     len(mockeds3Client.CreateBucketRequestCalls())
func (mock *s3ClientMock) CreateBucketRequestCalls() []struct {
	CreateBucketInput *s3.CreateBucketInput
} {
	var calls []struct {
		CreateBucketInput *s3.CreateBucketInput
	}
	mock.lockCreateBucketRequest.RLock()
	calls = mock.calls.CreateBucketRequest
	mock.lockCreateBucketRequest.RUnlock()
	return calls
}

// CreateBucketWithContext calls CreateBucketWithContextFunc.
func (mock *s3ClientMock) CreateBucketWithContext(contextMoqParam context.Context, createBucketInput *s3.CreateBucketInput, options ...request.Option) (*s3.CreateBucketOutput, error) {
	if mock.CreateBucketWithContextFunc == nil {
		panic("s3ClientMock.CreateBucketWithContextFunc: method is nil but s3Client.CreateBucketWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		CreateBucketInput *s3.CreateBucketInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		CreateBucketInput: createBucketInput,
		Options:           options,
	}
	mock.lockCreateBucketWithContext.Lock()
	mock.calls.CreateBucketWithContext = append(mock.calls.CreateBucketWithContext, callInfo)
	mock.lockCreateBucketWithContext.Unlock()
	return mock.CreateBucketWithContextFunc(contextMoqParam, createBucketInput, options...)
}

// CreateBucketWithContextCalls gets all the calls that were made to CreateBucketWithContext.
// Check the length with:
//     len(mockeds3Client.CreateBucketWithContextCalls())
func (mock *s3ClientMock) CreateBucketWithContextCalls() []struct {
	ContextMoqParam   context.Context
	CreateBucketInput *s3.CreateBucketInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		CreateBucketInput *s3.CreateBucketInput
		Options           []request.Option
	}
	mock.lockCreateBucketWithContext.RLock()
	calls = mock.calls.CreateBucketWithContext
	mock.lockCreateBucketWithContext.RUnlock()
	return calls
}

// CreateMultipartUpload calls CreateMultipartUploadFunc.
func (mock *s3ClientMock) CreateMultipartUpload(createMultipartUploadInput *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	if mock.CreateMultipartUploadFunc == nil {
		panic("s3ClientMock.CreateMultipartUploadFunc: method is nil but s3Client.CreateMultipartUpload was just called")
	}
	callInfo := struct {
		CreateMultipartUploadInput *s3.CreateMultipartUploadInput
	}{
		CreateMultipartUploadInput: createMultipartUploadInput,
	}
	mock.lockCreateMultipartUpload.Lock()
	mock.calls.CreateMultipartUpload = append(mock.calls.CreateMultipartUpload, callInfo)
	mock.lockCreateMultipartUpload.Unlock()
	return mock.CreateMultipartUploadFunc(createMultipartUploadInput)
}

// CreateMultipartUploadCalls gets all the calls that were made to CreateMultipartUpload.
// Check the length with:
//     len(mockeds3Client.CreateMultipartUploadCalls())
func (mock *s3ClientMock) CreateMultipartUploadCalls() []struct {
	CreateMultipartUploadInput *s3.CreateMultipartUploadInput
} {
	var calls []struct {
		CreateMultipartUploadInput *s3.CreateMultipartUploadInput
	}
	mock.lockCreateMultipartUpload.RLock()
	calls = mock.calls.CreateMultipartUpload
	mock.lockCreateMultipartUpload.RUnlock()
	return calls
}

// CreateMultipartUploadRequest calls CreateMultipartUploadRequestFunc.
func (mock *s3ClientMock) CreateMultipartUploadRequest(createMultipartUploadInput *s3.CreateMultipartUploadInput) (*request.Request, *s3.CreateMultipartUploadOutput) {
	if mock.CreateMultipartUploadRequestFunc == nil {
		panic("s3ClientMock.CreateMultipartUploadRequestFunc: method is nil but s3Client.CreateMultipartUploadRequest was just called")
	}
	callInfo := struct {
		CreateMultipartUploadInput *s3.CreateMultipartUploadInput
	}{
		CreateMultipartUploadInput: createMultipartUploadInput,
	}
	mock.lockCreateMultipartUploadRequest.Lock()
	mock.calls.CreateMultipartUploadRequest = append(mock.calls.CreateMultipartUploadRequest, callInfo)
	mock.lockCreateMultipartUploadRequest.Unlock()
	return mock.CreateMultipartUploadRequestFunc(createMultipartUploadInput)
}

// CreateMultipartUploadRequestCalls gets all the calls that were made to CreateMultipartUploadRequest.
// Check the length with:
//     len(mockeds3Client.CreateMultipartUploadRequestCalls())
func (mock *s3ClientMock) CreateMultipartUploadRequestCalls() []struct {
	CreateMultipartUploadInput *s3.CreateMultipartUploadInput
} {
	var calls []struct {
		CreateMultipartUploadInput *s3.CreateMultipartUploadInput
	}
	mock.lockCreateMultipartUploadRequest.RLock()
	calls = mock.calls.CreateMultipartUploadRequest
	mock.lockCreateMultipartUploadRequest.RUnlock()
	return calls
}

// CreateMultipartUploadWithContext calls CreateMultipartUploadWithContextFunc.
func (mock *s3ClientMock) CreateMultipartUploadWithContext(contextMoqParam context.Context, createMultipartUploadInput *s3.CreateMultipartUploadInput, options ...request.Option) (*s3.CreateMultipartUploadOutput, error) {
	if mock.CreateMultipartUploadWithContextFunc == nil {
		panic("s3ClientMock.CreateMultipartUploadWithContextFunc: method is nil but s3Client.CreateMultipartUploadWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		CreateMultipartUploadInput *s3.CreateMultipartUploadInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		CreateMultipartUploadInput: createMultipartUploadInput,
		Options:                    options,
	}
	mock.lockCreateMultipartUploadWithContext.Lock()
	mock.calls.CreateMultipartUploadWithContext = append(mock.calls.CreateMultipartUploadWithContext, callInfo)
	mock.lockCreateMultipartUploadWithContext.Unlock()
	return mock.CreateMultipartUploadWithContextFunc(contextMoqParam, createMultipartUploadInput, options...)
}

// CreateMultipartUploadWithContextCalls gets all the calls that were made to CreateMultipartUploadWithContext.
// Check the length with:
//     len(mockeds3Client.CreateMultipartUploadWithContextCalls())
func (mock *s3ClientMock) CreateMultipartUploadWithContextCalls() []struct {
	ContextMoqParam            context.Context
	CreateMultipartUploadInput *s3.CreateMultipartUploadInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		CreateMultipartUploadInput *s3.CreateMultipartUploadInput
		Options                    []request.Option
	}
	mock.lockCreateMultipartUploadWithContext.RLock()
	calls = mock.calls.CreateMultipartUploadWithContext
	mock.lockCreateMultipartUploadWithContext.RUnlock()
	return calls
}

// DeleteBucket calls DeleteBucketFunc.
func (mock *s3ClientMock) DeleteBucket(deleteBucketInput *s3.DeleteBucketInput) (*s3.DeleteBucketOutput, error) {
	if mock.DeleteBucketFunc == nil {
		panic("s3ClientMock.DeleteBucketFunc: method is nil but s3Client.DeleteBucket was just called")
	}
	callInfo := struct {
		DeleteBucketInput *s3.DeleteBucketInput
	}{
		DeleteBucketInput: deleteBucketInput,
	}
	mock.lockDeleteBucket.Lock()
	mock.calls.DeleteBucket = append(mock.calls.DeleteBucket, callInfo)
	mock.lockDeleteBucket.Unlock()
	return mock.DeleteBucketFunc(deleteBucketInput)
}

// DeleteBucketCalls gets all the calls that were made to DeleteBucket.
// Check the length with:
//     len(mockeds3Client.DeleteBucketCalls())
func (mock *s3ClientMock) DeleteBucketCalls() []struct {
	DeleteBucketInput *s3.DeleteBucketInput
} {
	var calls []struct {
		DeleteBucketInput *s3.DeleteBucketInput
	}
	mock.lockDeleteBucket.RLock()
	calls = mock.calls.DeleteBucket
	mock.lockDeleteBucket.RUnlock()
	return calls
}

// DeleteBucketAnalyticsConfiguration calls DeleteBucketAnalyticsConfigurationFunc.
func (mock *s3ClientMock) DeleteBucketAnalyticsConfiguration(deleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	if mock.DeleteBucketAnalyticsConfigurationFunc == nil {
		panic("s3ClientMock.DeleteBucketAnalyticsConfigurationFunc: method is nil but s3Client.DeleteBucketAnalyticsConfiguration was just called")
	}
	callInfo := struct {
		DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
	}{
		DeleteBucketAnalyticsConfigurationInput: deleteBucketAnalyticsConfigurationInput,
	}
	mock.lockDeleteBucketAnalyticsConfiguration.Lock()
	mock.calls.DeleteBucketAnalyticsConfiguration = append(mock.calls.DeleteBucketAnalyticsConfiguration, callInfo)
	mock.lockDeleteBucketAnalyticsConfiguration.Unlock()
	return mock.DeleteBucketAnalyticsConfigurationFunc(deleteBucketAnalyticsConfigurationInput)
}

// DeleteBucketAnalyticsConfigurationCalls gets all the calls that were made to DeleteBucketAnalyticsConfiguration.
// Check the length with:
//     len(mockeds3Client.DeleteBucketAnalyticsConfigurationCalls())
func (mock *s3ClientMock) DeleteBucketAnalyticsConfigurationCalls() []struct {
	DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
	}
	mock.lockDeleteBucketAnalyticsConfiguration.RLock()
	calls = mock.calls.DeleteBucketAnalyticsConfiguration
	mock.lockDeleteBucketAnalyticsConfiguration.RUnlock()
	return calls
}

// DeleteBucketAnalyticsConfigurationRequest calls DeleteBucketAnalyticsConfigurationRequestFunc.
func (mock *s3ClientMock) DeleteBucketAnalyticsConfigurationRequest(deleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput) (*request.Request, *s3.DeleteBucketAnalyticsConfigurationOutput) {
	if mock.DeleteBucketAnalyticsConfigurationRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketAnalyticsConfigurationRequestFunc: method is nil but s3Client.DeleteBucketAnalyticsConfigurationRequest was just called")
	}
	callInfo := struct {
		DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
	}{
		DeleteBucketAnalyticsConfigurationInput: deleteBucketAnalyticsConfigurationInput,
	}
	mock.lockDeleteBucketAnalyticsConfigurationRequest.Lock()
	mock.calls.DeleteBucketAnalyticsConfigurationRequest = append(mock.calls.DeleteBucketAnalyticsConfigurationRequest, callInfo)
	mock.lockDeleteBucketAnalyticsConfigurationRequest.Unlock()
	return mock.DeleteBucketAnalyticsConfigurationRequestFunc(deleteBucketAnalyticsConfigurationInput)
}

// DeleteBucketAnalyticsConfigurationRequestCalls gets all the calls that were made to DeleteBucketAnalyticsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketAnalyticsConfigurationRequestCalls())
func (mock *s3ClientMock) DeleteBucketAnalyticsConfigurationRequestCalls() []struct {
	DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
	}
	mock.lockDeleteBucketAnalyticsConfigurationRequest.RLock()
	calls = mock.calls.DeleteBucketAnalyticsConfigurationRequest
	mock.lockDeleteBucketAnalyticsConfigurationRequest.RUnlock()
	return calls
}

// DeleteBucketAnalyticsConfigurationWithContext calls DeleteBucketAnalyticsConfigurationWithContextFunc.
func (mock *s3ClientMock) DeleteBucketAnalyticsConfigurationWithContext(contextMoqParam context.Context, deleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput, options ...request.Option) (*s3.DeleteBucketAnalyticsConfigurationOutput, error) {
	if mock.DeleteBucketAnalyticsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketAnalyticsConfigurationWithContextFunc: method is nil but s3Client.DeleteBucketAnalyticsConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		DeleteBucketAnalyticsConfigurationInput: deleteBucketAnalyticsConfigurationInput,
		Options:                                 options,
	}
	mock.lockDeleteBucketAnalyticsConfigurationWithContext.Lock()
	mock.calls.DeleteBucketAnalyticsConfigurationWithContext = append(mock.calls.DeleteBucketAnalyticsConfigurationWithContext, callInfo)
	mock.lockDeleteBucketAnalyticsConfigurationWithContext.Unlock()
	return mock.DeleteBucketAnalyticsConfigurationWithContextFunc(contextMoqParam, deleteBucketAnalyticsConfigurationInput, options...)
}

// DeleteBucketAnalyticsConfigurationWithContextCalls gets all the calls that were made to DeleteBucketAnalyticsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketAnalyticsConfigurationWithContextCalls())
func (mock *s3ClientMock) DeleteBucketAnalyticsConfigurationWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		DeleteBucketAnalyticsConfigurationInput *s3.DeleteBucketAnalyticsConfigurationInput
		Options                                 []request.Option
	}
	mock.lockDeleteBucketAnalyticsConfigurationWithContext.RLock()
	calls = mock.calls.DeleteBucketAnalyticsConfigurationWithContext
	mock.lockDeleteBucketAnalyticsConfigurationWithContext.RUnlock()
	return calls
}

// DeleteBucketCors calls DeleteBucketCorsFunc.
func (mock *s3ClientMock) DeleteBucketCors(deleteBucketCorsInput *s3.DeleteBucketCorsInput) (*s3.DeleteBucketCorsOutput, error) {
	if mock.DeleteBucketCorsFunc == nil {
		panic("s3ClientMock.DeleteBucketCorsFunc: method is nil but s3Client.DeleteBucketCors was just called")
	}
	callInfo := struct {
		DeleteBucketCorsInput *s3.DeleteBucketCorsInput
	}{
		DeleteBucketCorsInput: deleteBucketCorsInput,
	}
	mock.lockDeleteBucketCors.Lock()
	mock.calls.DeleteBucketCors = append(mock.calls.DeleteBucketCors, callInfo)
	mock.lockDeleteBucketCors.Unlock()
	return mock.DeleteBucketCorsFunc(deleteBucketCorsInput)
}

// DeleteBucketCorsCalls gets all the calls that were made to DeleteBucketCors.
// Check the length with:
//     len(mockeds3Client.DeleteBucketCorsCalls())
func (mock *s3ClientMock) DeleteBucketCorsCalls() []struct {
	DeleteBucketCorsInput *s3.DeleteBucketCorsInput
} {
	var calls []struct {
		DeleteBucketCorsInput *s3.DeleteBucketCorsInput
	}
	mock.lockDeleteBucketCors.RLock()
	calls = mock.calls.DeleteBucketCors
	mock.lockDeleteBucketCors.RUnlock()
	return calls
}

// DeleteBucketCorsRequest calls DeleteBucketCorsRequestFunc.
func (mock *s3ClientMock) DeleteBucketCorsRequest(deleteBucketCorsInput *s3.DeleteBucketCorsInput) (*request.Request, *s3.DeleteBucketCorsOutput) {
	if mock.DeleteBucketCorsRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketCorsRequestFunc: method is nil but s3Client.DeleteBucketCorsRequest was just called")
	}
	callInfo := struct {
		DeleteBucketCorsInput *s3.DeleteBucketCorsInput
	}{
		DeleteBucketCorsInput: deleteBucketCorsInput,
	}
	mock.lockDeleteBucketCorsRequest.Lock()
	mock.calls.DeleteBucketCorsRequest = append(mock.calls.DeleteBucketCorsRequest, callInfo)
	mock.lockDeleteBucketCorsRequest.Unlock()
	return mock.DeleteBucketCorsRequestFunc(deleteBucketCorsInput)
}

// DeleteBucketCorsRequestCalls gets all the calls that were made to DeleteBucketCorsRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketCorsRequestCalls())
func (mock *s3ClientMock) DeleteBucketCorsRequestCalls() []struct {
	DeleteBucketCorsInput *s3.DeleteBucketCorsInput
} {
	var calls []struct {
		DeleteBucketCorsInput *s3.DeleteBucketCorsInput
	}
	mock.lockDeleteBucketCorsRequest.RLock()
	calls = mock.calls.DeleteBucketCorsRequest
	mock.lockDeleteBucketCorsRequest.RUnlock()
	return calls
}

// DeleteBucketCorsWithContext calls DeleteBucketCorsWithContextFunc.
func (mock *s3ClientMock) DeleteBucketCorsWithContext(contextMoqParam context.Context, deleteBucketCorsInput *s3.DeleteBucketCorsInput, options ...request.Option) (*s3.DeleteBucketCorsOutput, error) {
	if mock.DeleteBucketCorsWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketCorsWithContextFunc: method is nil but s3Client.DeleteBucketCorsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		DeleteBucketCorsInput *s3.DeleteBucketCorsInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		DeleteBucketCorsInput: deleteBucketCorsInput,
		Options:               options,
	}
	mock.lockDeleteBucketCorsWithContext.Lock()
	mock.calls.DeleteBucketCorsWithContext = append(mock.calls.DeleteBucketCorsWithContext, callInfo)
	mock.lockDeleteBucketCorsWithContext.Unlock()
	return mock.DeleteBucketCorsWithContextFunc(contextMoqParam, deleteBucketCorsInput, options...)
}

// DeleteBucketCorsWithContextCalls gets all the calls that were made to DeleteBucketCorsWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketCorsWithContextCalls())
func (mock *s3ClientMock) DeleteBucketCorsWithContextCalls() []struct {
	ContextMoqParam       context.Context
	DeleteBucketCorsInput *s3.DeleteBucketCorsInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		DeleteBucketCorsInput *s3.DeleteBucketCorsInput
		Options               []request.Option
	}
	mock.lockDeleteBucketCorsWithContext.RLock()
	calls = mock.calls.DeleteBucketCorsWithContext
	mock.lockDeleteBucketCorsWithContext.RUnlock()
	return calls
}

// DeleteBucketEncryption calls DeleteBucketEncryptionFunc.
func (mock *s3ClientMock) DeleteBucketEncryption(deleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput) (*s3.DeleteBucketEncryptionOutput, error) {
	if mock.DeleteBucketEncryptionFunc == nil {
		panic("s3ClientMock.DeleteBucketEncryptionFunc: method is nil but s3Client.DeleteBucketEncryption was just called")
	}
	callInfo := struct {
		DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
	}{
		DeleteBucketEncryptionInput: deleteBucketEncryptionInput,
	}
	mock.lockDeleteBucketEncryption.Lock()
	mock.calls.DeleteBucketEncryption = append(mock.calls.DeleteBucketEncryption, callInfo)
	mock.lockDeleteBucketEncryption.Unlock()
	return mock.DeleteBucketEncryptionFunc(deleteBucketEncryptionInput)
}

// DeleteBucketEncryptionCalls gets all the calls that were made to DeleteBucketEncryption.
// Check the length with:
//     len(mockeds3Client.DeleteBucketEncryptionCalls())
func (mock *s3ClientMock) DeleteBucketEncryptionCalls() []struct {
	DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
} {
	var calls []struct {
		DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
	}
	mock.lockDeleteBucketEncryption.RLock()
	calls = mock.calls.DeleteBucketEncryption
	mock.lockDeleteBucketEncryption.RUnlock()
	return calls
}

// DeleteBucketEncryptionRequest calls DeleteBucketEncryptionRequestFunc.
func (mock *s3ClientMock) DeleteBucketEncryptionRequest(deleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput) (*request.Request, *s3.DeleteBucketEncryptionOutput) {
	if mock.DeleteBucketEncryptionRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketEncryptionRequestFunc: method is nil but s3Client.DeleteBucketEncryptionRequest was just called")
	}
	callInfo := struct {
		DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
	}{
		DeleteBucketEncryptionInput: deleteBucketEncryptionInput,
	}
	mock.lockDeleteBucketEncryptionRequest.Lock()
	mock.calls.DeleteBucketEncryptionRequest = append(mock.calls.DeleteBucketEncryptionRequest, callInfo)
	mock.lockDeleteBucketEncryptionRequest.Unlock()
	return mock.DeleteBucketEncryptionRequestFunc(deleteBucketEncryptionInput)
}

// DeleteBucketEncryptionRequestCalls gets all the calls that were made to DeleteBucketEncryptionRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketEncryptionRequestCalls())
func (mock *s3ClientMock) DeleteBucketEncryptionRequestCalls() []struct {
	DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
} {
	var calls []struct {
		DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
	}
	mock.lockDeleteBucketEncryptionRequest.RLock()
	calls = mock.calls.DeleteBucketEncryptionRequest
	mock.lockDeleteBucketEncryptionRequest.RUnlock()
	return calls
}

// DeleteBucketEncryptionWithContext calls DeleteBucketEncryptionWithContextFunc.
func (mock *s3ClientMock) DeleteBucketEncryptionWithContext(contextMoqParam context.Context, deleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput, options ...request.Option) (*s3.DeleteBucketEncryptionOutput, error) {
	if mock.DeleteBucketEncryptionWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketEncryptionWithContextFunc: method is nil but s3Client.DeleteBucketEncryptionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DeleteBucketEncryptionInput: deleteBucketEncryptionInput,
		Options:                     options,
	}
	mock.lockDeleteBucketEncryptionWithContext.Lock()
	mock.calls.DeleteBucketEncryptionWithContext = append(mock.calls.DeleteBucketEncryptionWithContext, callInfo)
	mock.lockDeleteBucketEncryptionWithContext.Unlock()
	return mock.DeleteBucketEncryptionWithContextFunc(contextMoqParam, deleteBucketEncryptionInput, options...)
}

// DeleteBucketEncryptionWithContextCalls gets all the calls that were made to DeleteBucketEncryptionWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketEncryptionWithContextCalls())
func (mock *s3ClientMock) DeleteBucketEncryptionWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DeleteBucketEncryptionInput *s3.DeleteBucketEncryptionInput
		Options                     []request.Option
	}
	mock.lockDeleteBucketEncryptionWithContext.RLock()
	calls = mock.calls.DeleteBucketEncryptionWithContext
	mock.lockDeleteBucketEncryptionWithContext.RUnlock()
	return calls
}

// DeleteBucketIntelligentTieringConfiguration calls DeleteBucketIntelligentTieringConfigurationFunc.
func (mock *s3ClientMock) DeleteBucketIntelligentTieringConfiguration(deleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error) {
	if mock.DeleteBucketIntelligentTieringConfigurationFunc == nil {
		panic("s3ClientMock.DeleteBucketIntelligentTieringConfigurationFunc: method is nil but s3Client.DeleteBucketIntelligentTieringConfiguration was just called")
	}
	callInfo := struct {
		DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
	}{
		DeleteBucketIntelligentTieringConfigurationInput: deleteBucketIntelligentTieringConfigurationInput,
	}
	mock.lockDeleteBucketIntelligentTieringConfiguration.Lock()
	mock.calls.DeleteBucketIntelligentTieringConfiguration = append(mock.calls.DeleteBucketIntelligentTieringConfiguration, callInfo)
	mock.lockDeleteBucketIntelligentTieringConfiguration.Unlock()
	return mock.DeleteBucketIntelligentTieringConfigurationFunc(deleteBucketIntelligentTieringConfigurationInput)
}

// DeleteBucketIntelligentTieringConfigurationCalls gets all the calls that were made to DeleteBucketIntelligentTieringConfiguration.
// Check the length with:
//     len(mockeds3Client.DeleteBucketIntelligentTieringConfigurationCalls())
func (mock *s3ClientMock) DeleteBucketIntelligentTieringConfigurationCalls() []struct {
	DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
} {
	var calls []struct {
		DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
	}
	mock.lockDeleteBucketIntelligentTieringConfiguration.RLock()
	calls = mock.calls.DeleteBucketIntelligentTieringConfiguration
	mock.lockDeleteBucketIntelligentTieringConfiguration.RUnlock()
	return calls
}

// DeleteBucketIntelligentTieringConfigurationRequest calls DeleteBucketIntelligentTieringConfigurationRequestFunc.
func (mock *s3ClientMock) DeleteBucketIntelligentTieringConfigurationRequest(deleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput) (*request.Request, *s3.DeleteBucketIntelligentTieringConfigurationOutput) {
	if mock.DeleteBucketIntelligentTieringConfigurationRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketIntelligentTieringConfigurationRequestFunc: method is nil but s3Client.DeleteBucketIntelligentTieringConfigurationRequest was just called")
	}
	callInfo := struct {
		DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
	}{
		DeleteBucketIntelligentTieringConfigurationInput: deleteBucketIntelligentTieringConfigurationInput,
	}
	mock.lockDeleteBucketIntelligentTieringConfigurationRequest.Lock()
	mock.calls.DeleteBucketIntelligentTieringConfigurationRequest = append(mock.calls.DeleteBucketIntelligentTieringConfigurationRequest, callInfo)
	mock.lockDeleteBucketIntelligentTieringConfigurationRequest.Unlock()
	return mock.DeleteBucketIntelligentTieringConfigurationRequestFunc(deleteBucketIntelligentTieringConfigurationInput)
}

// DeleteBucketIntelligentTieringConfigurationRequestCalls gets all the calls that were made to DeleteBucketIntelligentTieringConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketIntelligentTieringConfigurationRequestCalls())
func (mock *s3ClientMock) DeleteBucketIntelligentTieringConfigurationRequestCalls() []struct {
	DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
} {
	var calls []struct {
		DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
	}
	mock.lockDeleteBucketIntelligentTieringConfigurationRequest.RLock()
	calls = mock.calls.DeleteBucketIntelligentTieringConfigurationRequest
	mock.lockDeleteBucketIntelligentTieringConfigurationRequest.RUnlock()
	return calls
}

// DeleteBucketIntelligentTieringConfigurationWithContext calls DeleteBucketIntelligentTieringConfigurationWithContextFunc.
func (mock *s3ClientMock) DeleteBucketIntelligentTieringConfigurationWithContext(contextMoqParam context.Context, deleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput, options ...request.Option) (*s3.DeleteBucketIntelligentTieringConfigurationOutput, error) {
	if mock.DeleteBucketIntelligentTieringConfigurationWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketIntelligentTieringConfigurationWithContextFunc: method is nil but s3Client.DeleteBucketIntelligentTieringConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                                  context.Context
		DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
		Options                                          []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		DeleteBucketIntelligentTieringConfigurationInput: deleteBucketIntelligentTieringConfigurationInput,
		Options: options,
	}
	mock.lockDeleteBucketIntelligentTieringConfigurationWithContext.Lock()
	mock.calls.DeleteBucketIntelligentTieringConfigurationWithContext = append(mock.calls.DeleteBucketIntelligentTieringConfigurationWithContext, callInfo)
	mock.lockDeleteBucketIntelligentTieringConfigurationWithContext.Unlock()
	return mock.DeleteBucketIntelligentTieringConfigurationWithContextFunc(contextMoqParam, deleteBucketIntelligentTieringConfigurationInput, options...)
}

// DeleteBucketIntelligentTieringConfigurationWithContextCalls gets all the calls that were made to DeleteBucketIntelligentTieringConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketIntelligentTieringConfigurationWithContextCalls())
func (mock *s3ClientMock) DeleteBucketIntelligentTieringConfigurationWithContextCalls() []struct {
	ContextMoqParam                                  context.Context
	DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
	Options                                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                                  context.Context
		DeleteBucketIntelligentTieringConfigurationInput *s3.DeleteBucketIntelligentTieringConfigurationInput
		Options                                          []request.Option
	}
	mock.lockDeleteBucketIntelligentTieringConfigurationWithContext.RLock()
	calls = mock.calls.DeleteBucketIntelligentTieringConfigurationWithContext
	mock.lockDeleteBucketIntelligentTieringConfigurationWithContext.RUnlock()
	return calls
}

// DeleteBucketInventoryConfiguration calls DeleteBucketInventoryConfigurationFunc.
func (mock *s3ClientMock) DeleteBucketInventoryConfiguration(deleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	if mock.DeleteBucketInventoryConfigurationFunc == nil {
		panic("s3ClientMock.DeleteBucketInventoryConfigurationFunc: method is nil but s3Client.DeleteBucketInventoryConfiguration was just called")
	}
	callInfo := struct {
		DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
	}{
		DeleteBucketInventoryConfigurationInput: deleteBucketInventoryConfigurationInput,
	}
	mock.lockDeleteBucketInventoryConfiguration.Lock()
	mock.calls.DeleteBucketInventoryConfiguration = append(mock.calls.DeleteBucketInventoryConfiguration, callInfo)
	mock.lockDeleteBucketInventoryConfiguration.Unlock()
	return mock.DeleteBucketInventoryConfigurationFunc(deleteBucketInventoryConfigurationInput)
}

// DeleteBucketInventoryConfigurationCalls gets all the calls that were made to DeleteBucketInventoryConfiguration.
// Check the length with:
//     len(mockeds3Client.DeleteBucketInventoryConfigurationCalls())
func (mock *s3ClientMock) DeleteBucketInventoryConfigurationCalls() []struct {
	DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
} {
	var calls []struct {
		DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
	}
	mock.lockDeleteBucketInventoryConfiguration.RLock()
	calls = mock.calls.DeleteBucketInventoryConfiguration
	mock.lockDeleteBucketInventoryConfiguration.RUnlock()
	return calls
}

// DeleteBucketInventoryConfigurationRequest calls DeleteBucketInventoryConfigurationRequestFunc.
func (mock *s3ClientMock) DeleteBucketInventoryConfigurationRequest(deleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput) (*request.Request, *s3.DeleteBucketInventoryConfigurationOutput) {
	if mock.DeleteBucketInventoryConfigurationRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketInventoryConfigurationRequestFunc: method is nil but s3Client.DeleteBucketInventoryConfigurationRequest was just called")
	}
	callInfo := struct {
		DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
	}{
		DeleteBucketInventoryConfigurationInput: deleteBucketInventoryConfigurationInput,
	}
	mock.lockDeleteBucketInventoryConfigurationRequest.Lock()
	mock.calls.DeleteBucketInventoryConfigurationRequest = append(mock.calls.DeleteBucketInventoryConfigurationRequest, callInfo)
	mock.lockDeleteBucketInventoryConfigurationRequest.Unlock()
	return mock.DeleteBucketInventoryConfigurationRequestFunc(deleteBucketInventoryConfigurationInput)
}

// DeleteBucketInventoryConfigurationRequestCalls gets all the calls that were made to DeleteBucketInventoryConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketInventoryConfigurationRequestCalls())
func (mock *s3ClientMock) DeleteBucketInventoryConfigurationRequestCalls() []struct {
	DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
} {
	var calls []struct {
		DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
	}
	mock.lockDeleteBucketInventoryConfigurationRequest.RLock()
	calls = mock.calls.DeleteBucketInventoryConfigurationRequest
	mock.lockDeleteBucketInventoryConfigurationRequest.RUnlock()
	return calls
}

// DeleteBucketInventoryConfigurationWithContext calls DeleteBucketInventoryConfigurationWithContextFunc.
func (mock *s3ClientMock) DeleteBucketInventoryConfigurationWithContext(contextMoqParam context.Context, deleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput, options ...request.Option) (*s3.DeleteBucketInventoryConfigurationOutput, error) {
	if mock.DeleteBucketInventoryConfigurationWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketInventoryConfigurationWithContextFunc: method is nil but s3Client.DeleteBucketInventoryConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		DeleteBucketInventoryConfigurationInput: deleteBucketInventoryConfigurationInput,
		Options:                                 options,
	}
	mock.lockDeleteBucketInventoryConfigurationWithContext.Lock()
	mock.calls.DeleteBucketInventoryConfigurationWithContext = append(mock.calls.DeleteBucketInventoryConfigurationWithContext, callInfo)
	mock.lockDeleteBucketInventoryConfigurationWithContext.Unlock()
	return mock.DeleteBucketInventoryConfigurationWithContextFunc(contextMoqParam, deleteBucketInventoryConfigurationInput, options...)
}

// DeleteBucketInventoryConfigurationWithContextCalls gets all the calls that were made to DeleteBucketInventoryConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketInventoryConfigurationWithContextCalls())
func (mock *s3ClientMock) DeleteBucketInventoryConfigurationWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		DeleteBucketInventoryConfigurationInput *s3.DeleteBucketInventoryConfigurationInput
		Options                                 []request.Option
	}
	mock.lockDeleteBucketInventoryConfigurationWithContext.RLock()
	calls = mock.calls.DeleteBucketInventoryConfigurationWithContext
	mock.lockDeleteBucketInventoryConfigurationWithContext.RUnlock()
	return calls
}

// DeleteBucketLifecycle calls DeleteBucketLifecycleFunc.
func (mock *s3ClientMock) DeleteBucketLifecycle(deleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput) (*s3.DeleteBucketLifecycleOutput, error) {
	if mock.DeleteBucketLifecycleFunc == nil {
		panic("s3ClientMock.DeleteBucketLifecycleFunc: method is nil but s3Client.DeleteBucketLifecycle was just called")
	}
	callInfo := struct {
		DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
	}{
		DeleteBucketLifecycleInput: deleteBucketLifecycleInput,
	}
	mock.lockDeleteBucketLifecycle.Lock()
	mock.calls.DeleteBucketLifecycle = append(mock.calls.DeleteBucketLifecycle, callInfo)
	mock.lockDeleteBucketLifecycle.Unlock()
	return mock.DeleteBucketLifecycleFunc(deleteBucketLifecycleInput)
}

// DeleteBucketLifecycleCalls gets all the calls that were made to DeleteBucketLifecycle.
// Check the length with:
//     len(mockeds3Client.DeleteBucketLifecycleCalls())
func (mock *s3ClientMock) DeleteBucketLifecycleCalls() []struct {
	DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
} {
	var calls []struct {
		DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
	}
	mock.lockDeleteBucketLifecycle.RLock()
	calls = mock.calls.DeleteBucketLifecycle
	mock.lockDeleteBucketLifecycle.RUnlock()
	return calls
}

// DeleteBucketLifecycleRequest calls DeleteBucketLifecycleRequestFunc.
func (mock *s3ClientMock) DeleteBucketLifecycleRequest(deleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput) (*request.Request, *s3.DeleteBucketLifecycleOutput) {
	if mock.DeleteBucketLifecycleRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketLifecycleRequestFunc: method is nil but s3Client.DeleteBucketLifecycleRequest was just called")
	}
	callInfo := struct {
		DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
	}{
		DeleteBucketLifecycleInput: deleteBucketLifecycleInput,
	}
	mock.lockDeleteBucketLifecycleRequest.Lock()
	mock.calls.DeleteBucketLifecycleRequest = append(mock.calls.DeleteBucketLifecycleRequest, callInfo)
	mock.lockDeleteBucketLifecycleRequest.Unlock()
	return mock.DeleteBucketLifecycleRequestFunc(deleteBucketLifecycleInput)
}

// DeleteBucketLifecycleRequestCalls gets all the calls that were made to DeleteBucketLifecycleRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketLifecycleRequestCalls())
func (mock *s3ClientMock) DeleteBucketLifecycleRequestCalls() []struct {
	DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
} {
	var calls []struct {
		DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
	}
	mock.lockDeleteBucketLifecycleRequest.RLock()
	calls = mock.calls.DeleteBucketLifecycleRequest
	mock.lockDeleteBucketLifecycleRequest.RUnlock()
	return calls
}

// DeleteBucketLifecycleWithContext calls DeleteBucketLifecycleWithContextFunc.
func (mock *s3ClientMock) DeleteBucketLifecycleWithContext(contextMoqParam context.Context, deleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput, options ...request.Option) (*s3.DeleteBucketLifecycleOutput, error) {
	if mock.DeleteBucketLifecycleWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketLifecycleWithContextFunc: method is nil but s3Client.DeleteBucketLifecycleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		DeleteBucketLifecycleInput: deleteBucketLifecycleInput,
		Options:                    options,
	}
	mock.lockDeleteBucketLifecycleWithContext.Lock()
	mock.calls.DeleteBucketLifecycleWithContext = append(mock.calls.DeleteBucketLifecycleWithContext, callInfo)
	mock.lockDeleteBucketLifecycleWithContext.Unlock()
	return mock.DeleteBucketLifecycleWithContextFunc(contextMoqParam, deleteBucketLifecycleInput, options...)
}

// DeleteBucketLifecycleWithContextCalls gets all the calls that were made to DeleteBucketLifecycleWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketLifecycleWithContextCalls())
func (mock *s3ClientMock) DeleteBucketLifecycleWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DeleteBucketLifecycleInput *s3.DeleteBucketLifecycleInput
		Options                    []request.Option
	}
	mock.lockDeleteBucketLifecycleWithContext.RLock()
	calls = mock.calls.DeleteBucketLifecycleWithContext
	mock.lockDeleteBucketLifecycleWithContext.RUnlock()
	return calls
}

// DeleteBucketMetricsConfiguration calls DeleteBucketMetricsConfigurationFunc.
func (mock *s3ClientMock) DeleteBucketMetricsConfiguration(deleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	if mock.DeleteBucketMetricsConfigurationFunc == nil {
		panic("s3ClientMock.DeleteBucketMetricsConfigurationFunc: method is nil but s3Client.DeleteBucketMetricsConfiguration was just called")
	}
	callInfo := struct {
		DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
	}{
		DeleteBucketMetricsConfigurationInput: deleteBucketMetricsConfigurationInput,
	}
	mock.lockDeleteBucketMetricsConfiguration.Lock()
	mock.calls.DeleteBucketMetricsConfiguration = append(mock.calls.DeleteBucketMetricsConfiguration, callInfo)
	mock.lockDeleteBucketMetricsConfiguration.Unlock()
	return mock.DeleteBucketMetricsConfigurationFunc(deleteBucketMetricsConfigurationInput)
}

// DeleteBucketMetricsConfigurationCalls gets all the calls that were made to DeleteBucketMetricsConfiguration.
// Check the length with:
//     len(mockeds3Client.DeleteBucketMetricsConfigurationCalls())
func (mock *s3ClientMock) DeleteBucketMetricsConfigurationCalls() []struct {
	DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
} {
	var calls []struct {
		DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
	}
	mock.lockDeleteBucketMetricsConfiguration.RLock()
	calls = mock.calls.DeleteBucketMetricsConfiguration
	mock.lockDeleteBucketMetricsConfiguration.RUnlock()
	return calls
}

// DeleteBucketMetricsConfigurationRequest calls DeleteBucketMetricsConfigurationRequestFunc.
func (mock *s3ClientMock) DeleteBucketMetricsConfigurationRequest(deleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput) (*request.Request, *s3.DeleteBucketMetricsConfigurationOutput) {
	if mock.DeleteBucketMetricsConfigurationRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketMetricsConfigurationRequestFunc: method is nil but s3Client.DeleteBucketMetricsConfigurationRequest was just called")
	}
	callInfo := struct {
		DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
	}{
		DeleteBucketMetricsConfigurationInput: deleteBucketMetricsConfigurationInput,
	}
	mock.lockDeleteBucketMetricsConfigurationRequest.Lock()
	mock.calls.DeleteBucketMetricsConfigurationRequest = append(mock.calls.DeleteBucketMetricsConfigurationRequest, callInfo)
	mock.lockDeleteBucketMetricsConfigurationRequest.Unlock()
	return mock.DeleteBucketMetricsConfigurationRequestFunc(deleteBucketMetricsConfigurationInput)
}

// DeleteBucketMetricsConfigurationRequestCalls gets all the calls that were made to DeleteBucketMetricsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketMetricsConfigurationRequestCalls())
func (mock *s3ClientMock) DeleteBucketMetricsConfigurationRequestCalls() []struct {
	DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
} {
	var calls []struct {
		DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
	}
	mock.lockDeleteBucketMetricsConfigurationRequest.RLock()
	calls = mock.calls.DeleteBucketMetricsConfigurationRequest
	mock.lockDeleteBucketMetricsConfigurationRequest.RUnlock()
	return calls
}

// DeleteBucketMetricsConfigurationWithContext calls DeleteBucketMetricsConfigurationWithContextFunc.
func (mock *s3ClientMock) DeleteBucketMetricsConfigurationWithContext(contextMoqParam context.Context, deleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput, options ...request.Option) (*s3.DeleteBucketMetricsConfigurationOutput, error) {
	if mock.DeleteBucketMetricsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketMetricsConfigurationWithContextFunc: method is nil but s3Client.DeleteBucketMetricsConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                       context.Context
		DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
		Options                               []request.Option
	}{
		ContextMoqParam:                       contextMoqParam,
		DeleteBucketMetricsConfigurationInput: deleteBucketMetricsConfigurationInput,
		Options:                               options,
	}
	mock.lockDeleteBucketMetricsConfigurationWithContext.Lock()
	mock.calls.DeleteBucketMetricsConfigurationWithContext = append(mock.calls.DeleteBucketMetricsConfigurationWithContext, callInfo)
	mock.lockDeleteBucketMetricsConfigurationWithContext.Unlock()
	return mock.DeleteBucketMetricsConfigurationWithContextFunc(contextMoqParam, deleteBucketMetricsConfigurationInput, options...)
}

// DeleteBucketMetricsConfigurationWithContextCalls gets all the calls that were made to DeleteBucketMetricsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketMetricsConfigurationWithContextCalls())
func (mock *s3ClientMock) DeleteBucketMetricsConfigurationWithContextCalls() []struct {
	ContextMoqParam                       context.Context
	DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
	Options                               []request.Option
} {
	var calls []struct {
		ContextMoqParam                       context.Context
		DeleteBucketMetricsConfigurationInput *s3.DeleteBucketMetricsConfigurationInput
		Options                               []request.Option
	}
	mock.lockDeleteBucketMetricsConfigurationWithContext.RLock()
	calls = mock.calls.DeleteBucketMetricsConfigurationWithContext
	mock.lockDeleteBucketMetricsConfigurationWithContext.RUnlock()
	return calls
}

// DeleteBucketOwnershipControls calls DeleteBucketOwnershipControlsFunc.
func (mock *s3ClientMock) DeleteBucketOwnershipControls(deleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput) (*s3.DeleteBucketOwnershipControlsOutput, error) {
	if mock.DeleteBucketOwnershipControlsFunc == nil {
		panic("s3ClientMock.DeleteBucketOwnershipControlsFunc: method is nil but s3Client.DeleteBucketOwnershipControls was just called")
	}
	callInfo := struct {
		DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
	}{
		DeleteBucketOwnershipControlsInput: deleteBucketOwnershipControlsInput,
	}
	mock.lockDeleteBucketOwnershipControls.Lock()
	mock.calls.DeleteBucketOwnershipControls = append(mock.calls.DeleteBucketOwnershipControls, callInfo)
	mock.lockDeleteBucketOwnershipControls.Unlock()
	return mock.DeleteBucketOwnershipControlsFunc(deleteBucketOwnershipControlsInput)
}

// DeleteBucketOwnershipControlsCalls gets all the calls that were made to DeleteBucketOwnershipControls.
// Check the length with:
//     len(mockeds3Client.DeleteBucketOwnershipControlsCalls())
func (mock *s3ClientMock) DeleteBucketOwnershipControlsCalls() []struct {
	DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
} {
	var calls []struct {
		DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
	}
	mock.lockDeleteBucketOwnershipControls.RLock()
	calls = mock.calls.DeleteBucketOwnershipControls
	mock.lockDeleteBucketOwnershipControls.RUnlock()
	return calls
}

// DeleteBucketOwnershipControlsRequest calls DeleteBucketOwnershipControlsRequestFunc.
func (mock *s3ClientMock) DeleteBucketOwnershipControlsRequest(deleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput) (*request.Request, *s3.DeleteBucketOwnershipControlsOutput) {
	if mock.DeleteBucketOwnershipControlsRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketOwnershipControlsRequestFunc: method is nil but s3Client.DeleteBucketOwnershipControlsRequest was just called")
	}
	callInfo := struct {
		DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
	}{
		DeleteBucketOwnershipControlsInput: deleteBucketOwnershipControlsInput,
	}
	mock.lockDeleteBucketOwnershipControlsRequest.Lock()
	mock.calls.DeleteBucketOwnershipControlsRequest = append(mock.calls.DeleteBucketOwnershipControlsRequest, callInfo)
	mock.lockDeleteBucketOwnershipControlsRequest.Unlock()
	return mock.DeleteBucketOwnershipControlsRequestFunc(deleteBucketOwnershipControlsInput)
}

// DeleteBucketOwnershipControlsRequestCalls gets all the calls that were made to DeleteBucketOwnershipControlsRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketOwnershipControlsRequestCalls())
func (mock *s3ClientMock) DeleteBucketOwnershipControlsRequestCalls() []struct {
	DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
} {
	var calls []struct {
		DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
	}
	mock.lockDeleteBucketOwnershipControlsRequest.RLock()
	calls = mock.calls.DeleteBucketOwnershipControlsRequest
	mock.lockDeleteBucketOwnershipControlsRequest.RUnlock()
	return calls
}

// DeleteBucketOwnershipControlsWithContext calls DeleteBucketOwnershipControlsWithContextFunc.
func (mock *s3ClientMock) DeleteBucketOwnershipControlsWithContext(contextMoqParam context.Context, deleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput, options ...request.Option) (*s3.DeleteBucketOwnershipControlsOutput, error) {
	if mock.DeleteBucketOwnershipControlsWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketOwnershipControlsWithContextFunc: method is nil but s3Client.DeleteBucketOwnershipControlsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		DeleteBucketOwnershipControlsInput: deleteBucketOwnershipControlsInput,
		Options:                            options,
	}
	mock.lockDeleteBucketOwnershipControlsWithContext.Lock()
	mock.calls.DeleteBucketOwnershipControlsWithContext = append(mock.calls.DeleteBucketOwnershipControlsWithContext, callInfo)
	mock.lockDeleteBucketOwnershipControlsWithContext.Unlock()
	return mock.DeleteBucketOwnershipControlsWithContextFunc(contextMoqParam, deleteBucketOwnershipControlsInput, options...)
}

// DeleteBucketOwnershipControlsWithContextCalls gets all the calls that were made to DeleteBucketOwnershipControlsWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketOwnershipControlsWithContextCalls())
func (mock *s3ClientMock) DeleteBucketOwnershipControlsWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		DeleteBucketOwnershipControlsInput *s3.DeleteBucketOwnershipControlsInput
		Options                            []request.Option
	}
	mock.lockDeleteBucketOwnershipControlsWithContext.RLock()
	calls = mock.calls.DeleteBucketOwnershipControlsWithContext
	mock.lockDeleteBucketOwnershipControlsWithContext.RUnlock()
	return calls
}

// DeleteBucketPolicy calls DeleteBucketPolicyFunc.
func (mock *s3ClientMock) DeleteBucketPolicy(deleteBucketPolicyInput *s3.DeleteBucketPolicyInput) (*s3.DeleteBucketPolicyOutput, error) {
	if mock.DeleteBucketPolicyFunc == nil {
		panic("s3ClientMock.DeleteBucketPolicyFunc: method is nil but s3Client.DeleteBucketPolicy was just called")
	}
	callInfo := struct {
		DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
	}{
		DeleteBucketPolicyInput: deleteBucketPolicyInput,
	}
	mock.lockDeleteBucketPolicy.Lock()
	mock.calls.DeleteBucketPolicy = append(mock.calls.DeleteBucketPolicy, callInfo)
	mock.lockDeleteBucketPolicy.Unlock()
	return mock.DeleteBucketPolicyFunc(deleteBucketPolicyInput)
}

// DeleteBucketPolicyCalls gets all the calls that were made to DeleteBucketPolicy.
// Check the length with:
//     len(mockeds3Client.DeleteBucketPolicyCalls())
func (mock *s3ClientMock) DeleteBucketPolicyCalls() []struct {
	DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
} {
	var calls []struct {
		DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
	}
	mock.lockDeleteBucketPolicy.RLock()
	calls = mock.calls.DeleteBucketPolicy
	mock.lockDeleteBucketPolicy.RUnlock()
	return calls
}

// DeleteBucketPolicyRequest calls DeleteBucketPolicyRequestFunc.
func (mock *s3ClientMock) DeleteBucketPolicyRequest(deleteBucketPolicyInput *s3.DeleteBucketPolicyInput) (*request.Request, *s3.DeleteBucketPolicyOutput) {
	if mock.DeleteBucketPolicyRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketPolicyRequestFunc: method is nil but s3Client.DeleteBucketPolicyRequest was just called")
	}
	callInfo := struct {
		DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
	}{
		DeleteBucketPolicyInput: deleteBucketPolicyInput,
	}
	mock.lockDeleteBucketPolicyRequest.Lock()
	mock.calls.DeleteBucketPolicyRequest = append(mock.calls.DeleteBucketPolicyRequest, callInfo)
	mock.lockDeleteBucketPolicyRequest.Unlock()
	return mock.DeleteBucketPolicyRequestFunc(deleteBucketPolicyInput)
}

// DeleteBucketPolicyRequestCalls gets all the calls that were made to DeleteBucketPolicyRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketPolicyRequestCalls())
func (mock *s3ClientMock) DeleteBucketPolicyRequestCalls() []struct {
	DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
} {
	var calls []struct {
		DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
	}
	mock.lockDeleteBucketPolicyRequest.RLock()
	calls = mock.calls.DeleteBucketPolicyRequest
	mock.lockDeleteBucketPolicyRequest.RUnlock()
	return calls
}

// DeleteBucketPolicyWithContext calls DeleteBucketPolicyWithContextFunc.
func (mock *s3ClientMock) DeleteBucketPolicyWithContext(contextMoqParam context.Context, deleteBucketPolicyInput *s3.DeleteBucketPolicyInput, options ...request.Option) (*s3.DeleteBucketPolicyOutput, error) {
	if mock.DeleteBucketPolicyWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketPolicyWithContextFunc: method is nil but s3Client.DeleteBucketPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DeleteBucketPolicyInput: deleteBucketPolicyInput,
		Options:                 options,
	}
	mock.lockDeleteBucketPolicyWithContext.Lock()
	mock.calls.DeleteBucketPolicyWithContext = append(mock.calls.DeleteBucketPolicyWithContext, callInfo)
	mock.lockDeleteBucketPolicyWithContext.Unlock()
	return mock.DeleteBucketPolicyWithContextFunc(contextMoqParam, deleteBucketPolicyInput, options...)
}

// DeleteBucketPolicyWithContextCalls gets all the calls that were made to DeleteBucketPolicyWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketPolicyWithContextCalls())
func (mock *s3ClientMock) DeleteBucketPolicyWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DeleteBucketPolicyInput *s3.DeleteBucketPolicyInput
		Options                 []request.Option
	}
	mock.lockDeleteBucketPolicyWithContext.RLock()
	calls = mock.calls.DeleteBucketPolicyWithContext
	mock.lockDeleteBucketPolicyWithContext.RUnlock()
	return calls
}

// DeleteBucketReplication calls DeleteBucketReplicationFunc.
func (mock *s3ClientMock) DeleteBucketReplication(deleteBucketReplicationInput *s3.DeleteBucketReplicationInput) (*s3.DeleteBucketReplicationOutput, error) {
	if mock.DeleteBucketReplicationFunc == nil {
		panic("s3ClientMock.DeleteBucketReplicationFunc: method is nil but s3Client.DeleteBucketReplication was just called")
	}
	callInfo := struct {
		DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
	}{
		DeleteBucketReplicationInput: deleteBucketReplicationInput,
	}
	mock.lockDeleteBucketReplication.Lock()
	mock.calls.DeleteBucketReplication = append(mock.calls.DeleteBucketReplication, callInfo)
	mock.lockDeleteBucketReplication.Unlock()
	return mock.DeleteBucketReplicationFunc(deleteBucketReplicationInput)
}

// DeleteBucketReplicationCalls gets all the calls that were made to DeleteBucketReplication.
// Check the length with:
//     len(mockeds3Client.DeleteBucketReplicationCalls())
func (mock *s3ClientMock) DeleteBucketReplicationCalls() []struct {
	DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
} {
	var calls []struct {
		DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
	}
	mock.lockDeleteBucketReplication.RLock()
	calls = mock.calls.DeleteBucketReplication
	mock.lockDeleteBucketReplication.RUnlock()
	return calls
}

// DeleteBucketReplicationRequest calls DeleteBucketReplicationRequestFunc.
func (mock *s3ClientMock) DeleteBucketReplicationRequest(deleteBucketReplicationInput *s3.DeleteBucketReplicationInput) (*request.Request, *s3.DeleteBucketReplicationOutput) {
	if mock.DeleteBucketReplicationRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketReplicationRequestFunc: method is nil but s3Client.DeleteBucketReplicationRequest was just called")
	}
	callInfo := struct {
		DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
	}{
		DeleteBucketReplicationInput: deleteBucketReplicationInput,
	}
	mock.lockDeleteBucketReplicationRequest.Lock()
	mock.calls.DeleteBucketReplicationRequest = append(mock.calls.DeleteBucketReplicationRequest, callInfo)
	mock.lockDeleteBucketReplicationRequest.Unlock()
	return mock.DeleteBucketReplicationRequestFunc(deleteBucketReplicationInput)
}

// DeleteBucketReplicationRequestCalls gets all the calls that were made to DeleteBucketReplicationRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketReplicationRequestCalls())
func (mock *s3ClientMock) DeleteBucketReplicationRequestCalls() []struct {
	DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
} {
	var calls []struct {
		DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
	}
	mock.lockDeleteBucketReplicationRequest.RLock()
	calls = mock.calls.DeleteBucketReplicationRequest
	mock.lockDeleteBucketReplicationRequest.RUnlock()
	return calls
}

// DeleteBucketReplicationWithContext calls DeleteBucketReplicationWithContextFunc.
func (mock *s3ClientMock) DeleteBucketReplicationWithContext(contextMoqParam context.Context, deleteBucketReplicationInput *s3.DeleteBucketReplicationInput, options ...request.Option) (*s3.DeleteBucketReplicationOutput, error) {
	if mock.DeleteBucketReplicationWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketReplicationWithContextFunc: method is nil but s3Client.DeleteBucketReplicationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		DeleteBucketReplicationInput: deleteBucketReplicationInput,
		Options:                      options,
	}
	mock.lockDeleteBucketReplicationWithContext.Lock()
	mock.calls.DeleteBucketReplicationWithContext = append(mock.calls.DeleteBucketReplicationWithContext, callInfo)
	mock.lockDeleteBucketReplicationWithContext.Unlock()
	return mock.DeleteBucketReplicationWithContextFunc(contextMoqParam, deleteBucketReplicationInput, options...)
}

// DeleteBucketReplicationWithContextCalls gets all the calls that were made to DeleteBucketReplicationWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketReplicationWithContextCalls())
func (mock *s3ClientMock) DeleteBucketReplicationWithContextCalls() []struct {
	ContextMoqParam              context.Context
	DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		DeleteBucketReplicationInput *s3.DeleteBucketReplicationInput
		Options                      []request.Option
	}
	mock.lockDeleteBucketReplicationWithContext.RLock()
	calls = mock.calls.DeleteBucketReplicationWithContext
	mock.lockDeleteBucketReplicationWithContext.RUnlock()
	return calls
}

// DeleteBucketRequest calls DeleteBucketRequestFunc.
func (mock *s3ClientMock) DeleteBucketRequest(deleteBucketInput *s3.DeleteBucketInput) (*request.Request, *s3.DeleteBucketOutput) {
	if mock.DeleteBucketRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketRequestFunc: method is nil but s3Client.DeleteBucketRequest was just called")
	}
	callInfo := struct {
		DeleteBucketInput *s3.DeleteBucketInput
	}{
		DeleteBucketInput: deleteBucketInput,
	}
	mock.lockDeleteBucketRequest.Lock()
	mock.calls.DeleteBucketRequest = append(mock.calls.DeleteBucketRequest, callInfo)
	mock.lockDeleteBucketRequest.Unlock()
	return mock.DeleteBucketRequestFunc(deleteBucketInput)
}

// DeleteBucketRequestCalls gets all the calls that were made to DeleteBucketRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketRequestCalls())
func (mock *s3ClientMock) DeleteBucketRequestCalls() []struct {
	DeleteBucketInput *s3.DeleteBucketInput
} {
	var calls []struct {
		DeleteBucketInput *s3.DeleteBucketInput
	}
	mock.lockDeleteBucketRequest.RLock()
	calls = mock.calls.DeleteBucketRequest
	mock.lockDeleteBucketRequest.RUnlock()
	return calls
}

// DeleteBucketTagging calls DeleteBucketTaggingFunc.
func (mock *s3ClientMock) DeleteBucketTagging(deleteBucketTaggingInput *s3.DeleteBucketTaggingInput) (*s3.DeleteBucketTaggingOutput, error) {
	if mock.DeleteBucketTaggingFunc == nil {
		panic("s3ClientMock.DeleteBucketTaggingFunc: method is nil but s3Client.DeleteBucketTagging was just called")
	}
	callInfo := struct {
		DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
	}{
		DeleteBucketTaggingInput: deleteBucketTaggingInput,
	}
	mock.lockDeleteBucketTagging.Lock()
	mock.calls.DeleteBucketTagging = append(mock.calls.DeleteBucketTagging, callInfo)
	mock.lockDeleteBucketTagging.Unlock()
	return mock.DeleteBucketTaggingFunc(deleteBucketTaggingInput)
}

// DeleteBucketTaggingCalls gets all the calls that were made to DeleteBucketTagging.
// Check the length with:
//     len(mockeds3Client.DeleteBucketTaggingCalls())
func (mock *s3ClientMock) DeleteBucketTaggingCalls() []struct {
	DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
} {
	var calls []struct {
		DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
	}
	mock.lockDeleteBucketTagging.RLock()
	calls = mock.calls.DeleteBucketTagging
	mock.lockDeleteBucketTagging.RUnlock()
	return calls
}

// DeleteBucketTaggingRequest calls DeleteBucketTaggingRequestFunc.
func (mock *s3ClientMock) DeleteBucketTaggingRequest(deleteBucketTaggingInput *s3.DeleteBucketTaggingInput) (*request.Request, *s3.DeleteBucketTaggingOutput) {
	if mock.DeleteBucketTaggingRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketTaggingRequestFunc: method is nil but s3Client.DeleteBucketTaggingRequest was just called")
	}
	callInfo := struct {
		DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
	}{
		DeleteBucketTaggingInput: deleteBucketTaggingInput,
	}
	mock.lockDeleteBucketTaggingRequest.Lock()
	mock.calls.DeleteBucketTaggingRequest = append(mock.calls.DeleteBucketTaggingRequest, callInfo)
	mock.lockDeleteBucketTaggingRequest.Unlock()
	return mock.DeleteBucketTaggingRequestFunc(deleteBucketTaggingInput)
}

// DeleteBucketTaggingRequestCalls gets all the calls that were made to DeleteBucketTaggingRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketTaggingRequestCalls())
func (mock *s3ClientMock) DeleteBucketTaggingRequestCalls() []struct {
	DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
} {
	var calls []struct {
		DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
	}
	mock.lockDeleteBucketTaggingRequest.RLock()
	calls = mock.calls.DeleteBucketTaggingRequest
	mock.lockDeleteBucketTaggingRequest.RUnlock()
	return calls
}

// DeleteBucketTaggingWithContext calls DeleteBucketTaggingWithContextFunc.
func (mock *s3ClientMock) DeleteBucketTaggingWithContext(contextMoqParam context.Context, deleteBucketTaggingInput *s3.DeleteBucketTaggingInput, options ...request.Option) (*s3.DeleteBucketTaggingOutput, error) {
	if mock.DeleteBucketTaggingWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketTaggingWithContextFunc: method is nil but s3Client.DeleteBucketTaggingWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DeleteBucketTaggingInput: deleteBucketTaggingInput,
		Options:                  options,
	}
	mock.lockDeleteBucketTaggingWithContext.Lock()
	mock.calls.DeleteBucketTaggingWithContext = append(mock.calls.DeleteBucketTaggingWithContext, callInfo)
	mock.lockDeleteBucketTaggingWithContext.Unlock()
	return mock.DeleteBucketTaggingWithContextFunc(contextMoqParam, deleteBucketTaggingInput, options...)
}

// DeleteBucketTaggingWithContextCalls gets all the calls that were made to DeleteBucketTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketTaggingWithContextCalls())
func (mock *s3ClientMock) DeleteBucketTaggingWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DeleteBucketTaggingInput *s3.DeleteBucketTaggingInput
		Options                  []request.Option
	}
	mock.lockDeleteBucketTaggingWithContext.RLock()
	calls = mock.calls.DeleteBucketTaggingWithContext
	mock.lockDeleteBucketTaggingWithContext.RUnlock()
	return calls
}

// DeleteBucketWebsite calls DeleteBucketWebsiteFunc.
func (mock *s3ClientMock) DeleteBucketWebsite(deleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput) (*s3.DeleteBucketWebsiteOutput, error) {
	if mock.DeleteBucketWebsiteFunc == nil {
		panic("s3ClientMock.DeleteBucketWebsiteFunc: method is nil but s3Client.DeleteBucketWebsite was just called")
	}
	callInfo := struct {
		DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
	}{
		DeleteBucketWebsiteInput: deleteBucketWebsiteInput,
	}
	mock.lockDeleteBucketWebsite.Lock()
	mock.calls.DeleteBucketWebsite = append(mock.calls.DeleteBucketWebsite, callInfo)
	mock.lockDeleteBucketWebsite.Unlock()
	return mock.DeleteBucketWebsiteFunc(deleteBucketWebsiteInput)
}

// DeleteBucketWebsiteCalls gets all the calls that were made to DeleteBucketWebsite.
// Check the length with:
//     len(mockeds3Client.DeleteBucketWebsiteCalls())
func (mock *s3ClientMock) DeleteBucketWebsiteCalls() []struct {
	DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
} {
	var calls []struct {
		DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
	}
	mock.lockDeleteBucketWebsite.RLock()
	calls = mock.calls.DeleteBucketWebsite
	mock.lockDeleteBucketWebsite.RUnlock()
	return calls
}

// DeleteBucketWebsiteRequest calls DeleteBucketWebsiteRequestFunc.
func (mock *s3ClientMock) DeleteBucketWebsiteRequest(deleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput) (*request.Request, *s3.DeleteBucketWebsiteOutput) {
	if mock.DeleteBucketWebsiteRequestFunc == nil {
		panic("s3ClientMock.DeleteBucketWebsiteRequestFunc: method is nil but s3Client.DeleteBucketWebsiteRequest was just called")
	}
	callInfo := struct {
		DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
	}{
		DeleteBucketWebsiteInput: deleteBucketWebsiteInput,
	}
	mock.lockDeleteBucketWebsiteRequest.Lock()
	mock.calls.DeleteBucketWebsiteRequest = append(mock.calls.DeleteBucketWebsiteRequest, callInfo)
	mock.lockDeleteBucketWebsiteRequest.Unlock()
	return mock.DeleteBucketWebsiteRequestFunc(deleteBucketWebsiteInput)
}

// DeleteBucketWebsiteRequestCalls gets all the calls that were made to DeleteBucketWebsiteRequest.
// Check the length with:
//     len(mockeds3Client.DeleteBucketWebsiteRequestCalls())
func (mock *s3ClientMock) DeleteBucketWebsiteRequestCalls() []struct {
	DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
} {
	var calls []struct {
		DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
	}
	mock.lockDeleteBucketWebsiteRequest.RLock()
	calls = mock.calls.DeleteBucketWebsiteRequest
	mock.lockDeleteBucketWebsiteRequest.RUnlock()
	return calls
}

// DeleteBucketWebsiteWithContext calls DeleteBucketWebsiteWithContextFunc.
func (mock *s3ClientMock) DeleteBucketWebsiteWithContext(contextMoqParam context.Context, deleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput, options ...request.Option) (*s3.DeleteBucketWebsiteOutput, error) {
	if mock.DeleteBucketWebsiteWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketWebsiteWithContextFunc: method is nil but s3Client.DeleteBucketWebsiteWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DeleteBucketWebsiteInput: deleteBucketWebsiteInput,
		Options:                  options,
	}
	mock.lockDeleteBucketWebsiteWithContext.Lock()
	mock.calls.DeleteBucketWebsiteWithContext = append(mock.calls.DeleteBucketWebsiteWithContext, callInfo)
	mock.lockDeleteBucketWebsiteWithContext.Unlock()
	return mock.DeleteBucketWebsiteWithContextFunc(contextMoqParam, deleteBucketWebsiteInput, options...)
}

// DeleteBucketWebsiteWithContextCalls gets all the calls that were made to DeleteBucketWebsiteWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketWebsiteWithContextCalls())
func (mock *s3ClientMock) DeleteBucketWebsiteWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DeleteBucketWebsiteInput *s3.DeleteBucketWebsiteInput
		Options                  []request.Option
	}
	mock.lockDeleteBucketWebsiteWithContext.RLock()
	calls = mock.calls.DeleteBucketWebsiteWithContext
	mock.lockDeleteBucketWebsiteWithContext.RUnlock()
	return calls
}

// DeleteBucketWithContext calls DeleteBucketWithContextFunc.
func (mock *s3ClientMock) DeleteBucketWithContext(contextMoqParam context.Context, deleteBucketInput *s3.DeleteBucketInput, options ...request.Option) (*s3.DeleteBucketOutput, error) {
	if mock.DeleteBucketWithContextFunc == nil {
		panic("s3ClientMock.DeleteBucketWithContextFunc: method is nil but s3Client.DeleteBucketWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		DeleteBucketInput *s3.DeleteBucketInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		DeleteBucketInput: deleteBucketInput,
		Options:           options,
	}
	mock.lockDeleteBucketWithContext.Lock()
	mock.calls.DeleteBucketWithContext = append(mock.calls.DeleteBucketWithContext, callInfo)
	mock.lockDeleteBucketWithContext.Unlock()
	return mock.DeleteBucketWithContextFunc(contextMoqParam, deleteBucketInput, options...)
}

// DeleteBucketWithContextCalls gets all the calls that were made to DeleteBucketWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteBucketWithContextCalls())
func (mock *s3ClientMock) DeleteBucketWithContextCalls() []struct {
	ContextMoqParam   context.Context
	DeleteBucketInput *s3.DeleteBucketInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		DeleteBucketInput *s3.DeleteBucketInput
		Options           []request.Option
	}
	mock.lockDeleteBucketWithContext.RLock()
	calls = mock.calls.DeleteBucketWithContext
	mock.lockDeleteBucketWithContext.RUnlock()
	return calls
}

// DeleteObject calls DeleteObjectFunc.
func (mock *s3ClientMock) DeleteObject(deleteObjectInput *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
	if mock.DeleteObjectFunc == nil {
		panic("s3ClientMock.DeleteObjectFunc: method is nil but s3Client.DeleteObject was just called")
	}
	callInfo := struct {
		DeleteObjectInput *s3.DeleteObjectInput
	}{
		DeleteObjectInput: deleteObjectInput,
	}
	mock.lockDeleteObject.Lock()
	mock.calls.DeleteObject = append(mock.calls.DeleteObject, callInfo)
	mock.lockDeleteObject.Unlock()
	return mock.DeleteObjectFunc(deleteObjectInput)
}

// DeleteObjectCalls gets all the calls that were made to DeleteObject.
// Check the length with:
//     len(mockeds3Client.DeleteObjectCalls())
func (mock *s3ClientMock) DeleteObjectCalls() []struct {
	DeleteObjectInput *s3.DeleteObjectInput
} {
	var calls []struct {
		DeleteObjectInput *s3.DeleteObjectInput
	}
	mock.lockDeleteObject.RLock()
	calls = mock.calls.DeleteObject
	mock.lockDeleteObject.RUnlock()
	return calls
}

// DeleteObjectRequest calls DeleteObjectRequestFunc.
func (mock *s3ClientMock) DeleteObjectRequest(deleteObjectInput *s3.DeleteObjectInput) (*request.Request, *s3.DeleteObjectOutput) {
	if mock.DeleteObjectRequestFunc == nil {
		panic("s3ClientMock.DeleteObjectRequestFunc: method is nil but s3Client.DeleteObjectRequest was just called")
	}
	callInfo := struct {
		DeleteObjectInput *s3.DeleteObjectInput
	}{
		DeleteObjectInput: deleteObjectInput,
	}
	mock.lockDeleteObjectRequest.Lock()
	mock.calls.DeleteObjectRequest = append(mock.calls.DeleteObjectRequest, callInfo)
	mock.lockDeleteObjectRequest.Unlock()
	return mock.DeleteObjectRequestFunc(deleteObjectInput)
}

// DeleteObjectRequestCalls gets all the calls that were made to DeleteObjectRequest.
// Check the length with:
//     len(mockeds3Client.DeleteObjectRequestCalls())
func (mock *s3ClientMock) DeleteObjectRequestCalls() []struct {
	DeleteObjectInput *s3.DeleteObjectInput
} {
	var calls []struct {
		DeleteObjectInput *s3.DeleteObjectInput
	}
	mock.lockDeleteObjectRequest.RLock()
	calls = mock.calls.DeleteObjectRequest
	mock.lockDeleteObjectRequest.RUnlock()
	return calls
}

// DeleteObjectTagging calls DeleteObjectTaggingFunc.
func (mock *s3ClientMock) DeleteObjectTagging(deleteObjectTaggingInput *s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error) {
	if mock.DeleteObjectTaggingFunc == nil {
		panic("s3ClientMock.DeleteObjectTaggingFunc: method is nil but s3Client.DeleteObjectTagging was just called")
	}
	callInfo := struct {
		DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
	}{
		DeleteObjectTaggingInput: deleteObjectTaggingInput,
	}
	mock.lockDeleteObjectTagging.Lock()
	mock.calls.DeleteObjectTagging = append(mock.calls.DeleteObjectTagging, callInfo)
	mock.lockDeleteObjectTagging.Unlock()
	return mock.DeleteObjectTaggingFunc(deleteObjectTaggingInput)
}

// DeleteObjectTaggingCalls gets all the calls that were made to DeleteObjectTagging.
// Check the length with:
//     len(mockeds3Client.DeleteObjectTaggingCalls())
func (mock *s3ClientMock) DeleteObjectTaggingCalls() []struct {
	DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
} {
	var calls []struct {
		DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
	}
	mock.lockDeleteObjectTagging.RLock()
	calls = mock.calls.DeleteObjectTagging
	mock.lockDeleteObjectTagging.RUnlock()
	return calls
}

// DeleteObjectTaggingRequest calls DeleteObjectTaggingRequestFunc.
func (mock *s3ClientMock) DeleteObjectTaggingRequest(deleteObjectTaggingInput *s3.DeleteObjectTaggingInput) (*request.Request, *s3.DeleteObjectTaggingOutput) {
	if mock.DeleteObjectTaggingRequestFunc == nil {
		panic("s3ClientMock.DeleteObjectTaggingRequestFunc: method is nil but s3Client.DeleteObjectTaggingRequest was just called")
	}
	callInfo := struct {
		DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
	}{
		DeleteObjectTaggingInput: deleteObjectTaggingInput,
	}
	mock.lockDeleteObjectTaggingRequest.Lock()
	mock.calls.DeleteObjectTaggingRequest = append(mock.calls.DeleteObjectTaggingRequest, callInfo)
	mock.lockDeleteObjectTaggingRequest.Unlock()
	return mock.DeleteObjectTaggingRequestFunc(deleteObjectTaggingInput)
}

// DeleteObjectTaggingRequestCalls gets all the calls that were made to DeleteObjectTaggingRequest.
// Check the length with:
//     len(mockeds3Client.DeleteObjectTaggingRequestCalls())
func (mock *s3ClientMock) DeleteObjectTaggingRequestCalls() []struct {
	DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
} {
	var calls []struct {
		DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
	}
	mock.lockDeleteObjectTaggingRequest.RLock()
	calls = mock.calls.DeleteObjectTaggingRequest
	mock.lockDeleteObjectTaggingRequest.RUnlock()
	return calls
}

// DeleteObjectTaggingWithContext calls DeleteObjectTaggingWithContextFunc.
func (mock *s3ClientMock) DeleteObjectTaggingWithContext(contextMoqParam context.Context, deleteObjectTaggingInput *s3.DeleteObjectTaggingInput, options ...request.Option) (*s3.DeleteObjectTaggingOutput, error) {
	if mock.DeleteObjectTaggingWithContextFunc == nil {
		panic("s3ClientMock.DeleteObjectTaggingWithContextFunc: method is nil but s3Client.DeleteObjectTaggingWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		DeleteObjectTaggingInput: deleteObjectTaggingInput,
		Options:                  options,
	}
	mock.lockDeleteObjectTaggingWithContext.Lock()
	mock.calls.DeleteObjectTaggingWithContext = append(mock.calls.DeleteObjectTaggingWithContext, callInfo)
	mock.lockDeleteObjectTaggingWithContext.Unlock()
	return mock.DeleteObjectTaggingWithContextFunc(contextMoqParam, deleteObjectTaggingInput, options...)
}

// DeleteObjectTaggingWithContextCalls gets all the calls that were made to DeleteObjectTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteObjectTaggingWithContextCalls())
func (mock *s3ClientMock) DeleteObjectTaggingWithContextCalls() []struct {
	ContextMoqParam          context.Context
	DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		DeleteObjectTaggingInput *s3.DeleteObjectTaggingInput
		Options                  []request.Option
	}
	mock.lockDeleteObjectTaggingWithContext.RLock()
	calls = mock.calls.DeleteObjectTaggingWithContext
	mock.lockDeleteObjectTaggingWithContext.RUnlock()
	return calls
}

// DeleteObjectWithContext calls DeleteObjectWithContextFunc.
func (mock *s3ClientMock) DeleteObjectWithContext(contextMoqParam context.Context, deleteObjectInput *s3.DeleteObjectInput, options ...request.Option) (*s3.DeleteObjectOutput, error) {
	if mock.DeleteObjectWithContextFunc == nil {
		panic("s3ClientMock.DeleteObjectWithContextFunc: method is nil but s3Client.DeleteObjectWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		DeleteObjectInput *s3.DeleteObjectInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		DeleteObjectInput: deleteObjectInput,
		Options:           options,
	}
	mock.lockDeleteObjectWithContext.Lock()
	mock.calls.DeleteObjectWithContext = append(mock.calls.DeleteObjectWithContext, callInfo)
	mock.lockDeleteObjectWithContext.Unlock()
	return mock.DeleteObjectWithContextFunc(contextMoqParam, deleteObjectInput, options...)
}

// DeleteObjectWithContextCalls gets all the calls that were made to DeleteObjectWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteObjectWithContextCalls())
func (mock *s3ClientMock) DeleteObjectWithContextCalls() []struct {
	ContextMoqParam   context.Context
	DeleteObjectInput *s3.DeleteObjectInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		DeleteObjectInput *s3.DeleteObjectInput
		Options           []request.Option
	}
	mock.lockDeleteObjectWithContext.RLock()
	calls = mock.calls.DeleteObjectWithContext
	mock.lockDeleteObjectWithContext.RUnlock()
	return calls
}

// DeleteObjects calls DeleteObjectsFunc.
func (mock *s3ClientMock) DeleteObjects(deleteObjectsInput *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error) {
	if mock.DeleteObjectsFunc == nil {
		panic("s3ClientMock.DeleteObjectsFunc: method is nil but s3Client.DeleteObjects was just called")
	}
	callInfo := struct {
		DeleteObjectsInput *s3.DeleteObjectsInput
	}{
		DeleteObjectsInput: deleteObjectsInput,
	}
	mock.lockDeleteObjects.Lock()
	mock.calls.DeleteObjects = append(mock.calls.DeleteObjects, callInfo)
	mock.lockDeleteObjects.Unlock()
	return mock.DeleteObjectsFunc(deleteObjectsInput)
}

// DeleteObjectsCalls gets all the calls that were made to DeleteObjects.
// Check the length with:
//     len(mockeds3Client.DeleteObjectsCalls())
func (mock *s3ClientMock) DeleteObjectsCalls() []struct {
	DeleteObjectsInput *s3.DeleteObjectsInput
} {
	var calls []struct {
		DeleteObjectsInput *s3.DeleteObjectsInput
	}
	mock.lockDeleteObjects.RLock()
	calls = mock.calls.DeleteObjects
	mock.lockDeleteObjects.RUnlock()
	return calls
}

// DeleteObjectsRequest calls DeleteObjectsRequestFunc.
func (mock *s3ClientMock) DeleteObjectsRequest(deleteObjectsInput *s3.DeleteObjectsInput) (*request.Request, *s3.DeleteObjectsOutput) {
	if mock.DeleteObjectsRequestFunc == nil {
		panic("s3ClientMock.DeleteObjectsRequestFunc: method is nil but s3Client.DeleteObjectsRequest was just called")
	}
	callInfo := struct {
		DeleteObjectsInput *s3.DeleteObjectsInput
	}{
		DeleteObjectsInput: deleteObjectsInput,
	}
	mock.lockDeleteObjectsRequest.Lock()
	mock.calls.DeleteObjectsRequest = append(mock.calls.DeleteObjectsRequest, callInfo)
	mock.lockDeleteObjectsRequest.Unlock()
	return mock.DeleteObjectsRequestFunc(deleteObjectsInput)
}

// DeleteObjectsRequestCalls gets all the calls that were made to DeleteObjectsRequest.
// Check the length with:
//     len(mockeds3Client.DeleteObjectsRequestCalls())
func (mock *s3ClientMock) DeleteObjectsRequestCalls() []struct {
	DeleteObjectsInput *s3.DeleteObjectsInput
} {
	var calls []struct {
		DeleteObjectsInput *s3.DeleteObjectsInput
	}
	mock.lockDeleteObjectsRequest.RLock()
	calls = mock.calls.DeleteObjectsRequest
	mock.lockDeleteObjectsRequest.RUnlock()
	return calls
}

// DeleteObjectsWithContext calls DeleteObjectsWithContextFunc.
func (mock *s3ClientMock) DeleteObjectsWithContext(contextMoqParam context.Context, deleteObjectsInput *s3.DeleteObjectsInput, options ...request.Option) (*s3.DeleteObjectsOutput, error) {
	if mock.DeleteObjectsWithContextFunc == nil {
		panic("s3ClientMock.DeleteObjectsWithContextFunc: method is nil but s3Client.DeleteObjectsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		DeleteObjectsInput *s3.DeleteObjectsInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		DeleteObjectsInput: deleteObjectsInput,
		Options:            options,
	}
	mock.lockDeleteObjectsWithContext.Lock()
	mock.calls.DeleteObjectsWithContext = append(mock.calls.DeleteObjectsWithContext, callInfo)
	mock.lockDeleteObjectsWithContext.Unlock()
	return mock.DeleteObjectsWithContextFunc(contextMoqParam, deleteObjectsInput, options...)
}

// DeleteObjectsWithContextCalls gets all the calls that were made to DeleteObjectsWithContext.
// Check the length with:
//     len(mockeds3Client.DeleteObjectsWithContextCalls())
func (mock *s3ClientMock) DeleteObjectsWithContextCalls() []struct {
	ContextMoqParam    context.Context
	DeleteObjectsInput *s3.DeleteObjectsInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		DeleteObjectsInput *s3.DeleteObjectsInput
		Options            []request.Option
	}
	mock.lockDeleteObjectsWithContext.RLock()
	calls = mock.calls.DeleteObjectsWithContext
	mock.lockDeleteObjectsWithContext.RUnlock()
	return calls
}

// DeletePublicAccessBlock calls DeletePublicAccessBlockFunc.
func (mock *s3ClientMock) DeletePublicAccessBlock(deletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput) (*s3.DeletePublicAccessBlockOutput, error) {
	if mock.DeletePublicAccessBlockFunc == nil {
		panic("s3ClientMock.DeletePublicAccessBlockFunc: method is nil but s3Client.DeletePublicAccessBlock was just called")
	}
	callInfo := struct {
		DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
	}{
		DeletePublicAccessBlockInput: deletePublicAccessBlockInput,
	}
	mock.lockDeletePublicAccessBlock.Lock()
	mock.calls.DeletePublicAccessBlock = append(mock.calls.DeletePublicAccessBlock, callInfo)
	mock.lockDeletePublicAccessBlock.Unlock()
	return mock.DeletePublicAccessBlockFunc(deletePublicAccessBlockInput)
}

// DeletePublicAccessBlockCalls gets all the calls that were made to DeletePublicAccessBlock.
// Check the length with:
//     len(mockeds3Client.DeletePublicAccessBlockCalls())
func (mock *s3ClientMock) DeletePublicAccessBlockCalls() []struct {
	DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
} {
	var calls []struct {
		DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
	}
	mock.lockDeletePublicAccessBlock.RLock()
	calls = mock.calls.DeletePublicAccessBlock
	mock.lockDeletePublicAccessBlock.RUnlock()
	return calls
}

// DeletePublicAccessBlockRequest calls DeletePublicAccessBlockRequestFunc.
func (mock *s3ClientMock) DeletePublicAccessBlockRequest(deletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput) (*request.Request, *s3.DeletePublicAccessBlockOutput) {
	if mock.DeletePublicAccessBlockRequestFunc == nil {
		panic("s3ClientMock.DeletePublicAccessBlockRequestFunc: method is nil but s3Client.DeletePublicAccessBlockRequest was just called")
	}
	callInfo := struct {
		DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
	}{
		DeletePublicAccessBlockInput: deletePublicAccessBlockInput,
	}
	mock.lockDeletePublicAccessBlockRequest.Lock()
	mock.calls.DeletePublicAccessBlockRequest = append(mock.calls.DeletePublicAccessBlockRequest, callInfo)
	mock.lockDeletePublicAccessBlockRequest.Unlock()
	return mock.DeletePublicAccessBlockRequestFunc(deletePublicAccessBlockInput)
}

// DeletePublicAccessBlockRequestCalls gets all the calls that were made to DeletePublicAccessBlockRequest.
// Check the length with:
//     len(mockeds3Client.DeletePublicAccessBlockRequestCalls())
func (mock *s3ClientMock) DeletePublicAccessBlockRequestCalls() []struct {
	DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
} {
	var calls []struct {
		DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
	}
	mock.lockDeletePublicAccessBlockRequest.RLock()
	calls = mock.calls.DeletePublicAccessBlockRequest
	mock.lockDeletePublicAccessBlockRequest.RUnlock()
	return calls
}

// DeletePublicAccessBlockWithContext calls DeletePublicAccessBlockWithContextFunc.
func (mock *s3ClientMock) DeletePublicAccessBlockWithContext(contextMoqParam context.Context, deletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput, options ...request.Option) (*s3.DeletePublicAccessBlockOutput, error) {
	if mock.DeletePublicAccessBlockWithContextFunc == nil {
		panic("s3ClientMock.DeletePublicAccessBlockWithContextFunc: method is nil but s3Client.DeletePublicAccessBlockWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		DeletePublicAccessBlockInput: deletePublicAccessBlockInput,
		Options:                      options,
	}
	mock.lockDeletePublicAccessBlockWithContext.Lock()
	mock.calls.DeletePublicAccessBlockWithContext = append(mock.calls.DeletePublicAccessBlockWithContext, callInfo)
	mock.lockDeletePublicAccessBlockWithContext.Unlock()
	return mock.DeletePublicAccessBlockWithContextFunc(contextMoqParam, deletePublicAccessBlockInput, options...)
}

// DeletePublicAccessBlockWithContextCalls gets all the calls that were made to DeletePublicAccessBlockWithContext.
// Check the length with:
//     len(mockeds3Client.DeletePublicAccessBlockWithContextCalls())
func (mock *s3ClientMock) DeletePublicAccessBlockWithContextCalls() []struct {
	ContextMoqParam              context.Context
	DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		DeletePublicAccessBlockInput *s3.DeletePublicAccessBlockInput
		Options                      []request.Option
	}
	mock.lockDeletePublicAccessBlockWithContext.RLock()
	calls = mock.calls.DeletePublicAccessBlockWithContext
	mock.lockDeletePublicAccessBlockWithContext.RUnlock()
	return calls
}

// GetBucketAccelerateConfiguration calls GetBucketAccelerateConfigurationFunc.
func (mock *s3ClientMock) GetBucketAccelerateConfiguration(getBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	if mock.GetBucketAccelerateConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketAccelerateConfigurationFunc: method is nil but s3Client.GetBucketAccelerateConfiguration was just called")
	}
	callInfo := struct {
		GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
	}{
		GetBucketAccelerateConfigurationInput: getBucketAccelerateConfigurationInput,
	}
	mock.lockGetBucketAccelerateConfiguration.Lock()
	mock.calls.GetBucketAccelerateConfiguration = append(mock.calls.GetBucketAccelerateConfiguration, callInfo)
	mock.lockGetBucketAccelerateConfiguration.Unlock()
	return mock.GetBucketAccelerateConfigurationFunc(getBucketAccelerateConfigurationInput)
}

// GetBucketAccelerateConfigurationCalls gets all the calls that were made to GetBucketAccelerateConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketAccelerateConfigurationCalls())
func (mock *s3ClientMock) GetBucketAccelerateConfigurationCalls() []struct {
	GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
} {
	var calls []struct {
		GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
	}
	mock.lockGetBucketAccelerateConfiguration.RLock()
	calls = mock.calls.GetBucketAccelerateConfiguration
	mock.lockGetBucketAccelerateConfiguration.RUnlock()
	return calls
}

// GetBucketAccelerateConfigurationRequest calls GetBucketAccelerateConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketAccelerateConfigurationRequest(getBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput) (*request.Request, *s3.GetBucketAccelerateConfigurationOutput) {
	if mock.GetBucketAccelerateConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketAccelerateConfigurationRequestFunc: method is nil but s3Client.GetBucketAccelerateConfigurationRequest was just called")
	}
	callInfo := struct {
		GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
	}{
		GetBucketAccelerateConfigurationInput: getBucketAccelerateConfigurationInput,
	}
	mock.lockGetBucketAccelerateConfigurationRequest.Lock()
	mock.calls.GetBucketAccelerateConfigurationRequest = append(mock.calls.GetBucketAccelerateConfigurationRequest, callInfo)
	mock.lockGetBucketAccelerateConfigurationRequest.Unlock()
	return mock.GetBucketAccelerateConfigurationRequestFunc(getBucketAccelerateConfigurationInput)
}

// GetBucketAccelerateConfigurationRequestCalls gets all the calls that were made to GetBucketAccelerateConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketAccelerateConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketAccelerateConfigurationRequestCalls() []struct {
	GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
} {
	var calls []struct {
		GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
	}
	mock.lockGetBucketAccelerateConfigurationRequest.RLock()
	calls = mock.calls.GetBucketAccelerateConfigurationRequest
	mock.lockGetBucketAccelerateConfigurationRequest.RUnlock()
	return calls
}

// GetBucketAccelerateConfigurationWithContext calls GetBucketAccelerateConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketAccelerateConfigurationWithContext(contextMoqParam context.Context, getBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput, options ...request.Option) (*s3.GetBucketAccelerateConfigurationOutput, error) {
	if mock.GetBucketAccelerateConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketAccelerateConfigurationWithContextFunc: method is nil but s3Client.GetBucketAccelerateConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                       context.Context
		GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
		Options                               []request.Option
	}{
		ContextMoqParam:                       contextMoqParam,
		GetBucketAccelerateConfigurationInput: getBucketAccelerateConfigurationInput,
		Options:                               options,
	}
	mock.lockGetBucketAccelerateConfigurationWithContext.Lock()
	mock.calls.GetBucketAccelerateConfigurationWithContext = append(mock.calls.GetBucketAccelerateConfigurationWithContext, callInfo)
	mock.lockGetBucketAccelerateConfigurationWithContext.Unlock()
	return mock.GetBucketAccelerateConfigurationWithContextFunc(contextMoqParam, getBucketAccelerateConfigurationInput, options...)
}

// GetBucketAccelerateConfigurationWithContextCalls gets all the calls that were made to GetBucketAccelerateConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketAccelerateConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketAccelerateConfigurationWithContextCalls() []struct {
	ContextMoqParam                       context.Context
	GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
	Options                               []request.Option
} {
	var calls []struct {
		ContextMoqParam                       context.Context
		GetBucketAccelerateConfigurationInput *s3.GetBucketAccelerateConfigurationInput
		Options                               []request.Option
	}
	mock.lockGetBucketAccelerateConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketAccelerateConfigurationWithContext
	mock.lockGetBucketAccelerateConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketAcl calls GetBucketAclFunc.
func (mock *s3ClientMock) GetBucketAcl(getBucketAclInput *s3.GetBucketAclInput) (*s3.GetBucketAclOutput, error) {
	if mock.GetBucketAclFunc == nil {
		panic("s3ClientMock.GetBucketAclFunc: method is nil but s3Client.GetBucketAcl was just called")
	}
	callInfo := struct {
		GetBucketAclInput *s3.GetBucketAclInput
	}{
		GetBucketAclInput: getBucketAclInput,
	}
	mock.lockGetBucketAcl.Lock()
	mock.calls.GetBucketAcl = append(mock.calls.GetBucketAcl, callInfo)
	mock.lockGetBucketAcl.Unlock()
	return mock.GetBucketAclFunc(getBucketAclInput)
}

// GetBucketAclCalls gets all the calls that were made to GetBucketAcl.
// Check the length with:
//     len(mockeds3Client.GetBucketAclCalls())
func (mock *s3ClientMock) GetBucketAclCalls() []struct {
	GetBucketAclInput *s3.GetBucketAclInput
} {
	var calls []struct {
		GetBucketAclInput *s3.GetBucketAclInput
	}
	mock.lockGetBucketAcl.RLock()
	calls = mock.calls.GetBucketAcl
	mock.lockGetBucketAcl.RUnlock()
	return calls
}

// GetBucketAclRequest calls GetBucketAclRequestFunc.
func (mock *s3ClientMock) GetBucketAclRequest(getBucketAclInput *s3.GetBucketAclInput) (*request.Request, *s3.GetBucketAclOutput) {
	if mock.GetBucketAclRequestFunc == nil {
		panic("s3ClientMock.GetBucketAclRequestFunc: method is nil but s3Client.GetBucketAclRequest was just called")
	}
	callInfo := struct {
		GetBucketAclInput *s3.GetBucketAclInput
	}{
		GetBucketAclInput: getBucketAclInput,
	}
	mock.lockGetBucketAclRequest.Lock()
	mock.calls.GetBucketAclRequest = append(mock.calls.GetBucketAclRequest, callInfo)
	mock.lockGetBucketAclRequest.Unlock()
	return mock.GetBucketAclRequestFunc(getBucketAclInput)
}

// GetBucketAclRequestCalls gets all the calls that were made to GetBucketAclRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketAclRequestCalls())
func (mock *s3ClientMock) GetBucketAclRequestCalls() []struct {
	GetBucketAclInput *s3.GetBucketAclInput
} {
	var calls []struct {
		GetBucketAclInput *s3.GetBucketAclInput
	}
	mock.lockGetBucketAclRequest.RLock()
	calls = mock.calls.GetBucketAclRequest
	mock.lockGetBucketAclRequest.RUnlock()
	return calls
}

// GetBucketAclWithContext calls GetBucketAclWithContextFunc.
func (mock *s3ClientMock) GetBucketAclWithContext(contextMoqParam context.Context, getBucketAclInput *s3.GetBucketAclInput, options ...request.Option) (*s3.GetBucketAclOutput, error) {
	if mock.GetBucketAclWithContextFunc == nil {
		panic("s3ClientMock.GetBucketAclWithContextFunc: method is nil but s3Client.GetBucketAclWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		GetBucketAclInput *s3.GetBucketAclInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		GetBucketAclInput: getBucketAclInput,
		Options:           options,
	}
	mock.lockGetBucketAclWithContext.Lock()
	mock.calls.GetBucketAclWithContext = append(mock.calls.GetBucketAclWithContext, callInfo)
	mock.lockGetBucketAclWithContext.Unlock()
	return mock.GetBucketAclWithContextFunc(contextMoqParam, getBucketAclInput, options...)
}

// GetBucketAclWithContextCalls gets all the calls that were made to GetBucketAclWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketAclWithContextCalls())
func (mock *s3ClientMock) GetBucketAclWithContextCalls() []struct {
	ContextMoqParam   context.Context
	GetBucketAclInput *s3.GetBucketAclInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		GetBucketAclInput *s3.GetBucketAclInput
		Options           []request.Option
	}
	mock.lockGetBucketAclWithContext.RLock()
	calls = mock.calls.GetBucketAclWithContext
	mock.lockGetBucketAclWithContext.RUnlock()
	return calls
}

// GetBucketAnalyticsConfiguration calls GetBucketAnalyticsConfigurationFunc.
func (mock *s3ClientMock) GetBucketAnalyticsConfiguration(getBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	if mock.GetBucketAnalyticsConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketAnalyticsConfigurationFunc: method is nil but s3Client.GetBucketAnalyticsConfiguration was just called")
	}
	callInfo := struct {
		GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
	}{
		GetBucketAnalyticsConfigurationInput: getBucketAnalyticsConfigurationInput,
	}
	mock.lockGetBucketAnalyticsConfiguration.Lock()
	mock.calls.GetBucketAnalyticsConfiguration = append(mock.calls.GetBucketAnalyticsConfiguration, callInfo)
	mock.lockGetBucketAnalyticsConfiguration.Unlock()
	return mock.GetBucketAnalyticsConfigurationFunc(getBucketAnalyticsConfigurationInput)
}

// GetBucketAnalyticsConfigurationCalls gets all the calls that were made to GetBucketAnalyticsConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketAnalyticsConfigurationCalls())
func (mock *s3ClientMock) GetBucketAnalyticsConfigurationCalls() []struct {
	GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
	}
	mock.lockGetBucketAnalyticsConfiguration.RLock()
	calls = mock.calls.GetBucketAnalyticsConfiguration
	mock.lockGetBucketAnalyticsConfiguration.RUnlock()
	return calls
}

// GetBucketAnalyticsConfigurationRequest calls GetBucketAnalyticsConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketAnalyticsConfigurationRequest(getBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput) (*request.Request, *s3.GetBucketAnalyticsConfigurationOutput) {
	if mock.GetBucketAnalyticsConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketAnalyticsConfigurationRequestFunc: method is nil but s3Client.GetBucketAnalyticsConfigurationRequest was just called")
	}
	callInfo := struct {
		GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
	}{
		GetBucketAnalyticsConfigurationInput: getBucketAnalyticsConfigurationInput,
	}
	mock.lockGetBucketAnalyticsConfigurationRequest.Lock()
	mock.calls.GetBucketAnalyticsConfigurationRequest = append(mock.calls.GetBucketAnalyticsConfigurationRequest, callInfo)
	mock.lockGetBucketAnalyticsConfigurationRequest.Unlock()
	return mock.GetBucketAnalyticsConfigurationRequestFunc(getBucketAnalyticsConfigurationInput)
}

// GetBucketAnalyticsConfigurationRequestCalls gets all the calls that were made to GetBucketAnalyticsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketAnalyticsConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketAnalyticsConfigurationRequestCalls() []struct {
	GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
	}
	mock.lockGetBucketAnalyticsConfigurationRequest.RLock()
	calls = mock.calls.GetBucketAnalyticsConfigurationRequest
	mock.lockGetBucketAnalyticsConfigurationRequest.RUnlock()
	return calls
}

// GetBucketAnalyticsConfigurationWithContext calls GetBucketAnalyticsConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketAnalyticsConfigurationWithContext(contextMoqParam context.Context, getBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput, options ...request.Option) (*s3.GetBucketAnalyticsConfigurationOutput, error) {
	if mock.GetBucketAnalyticsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketAnalyticsConfigurationWithContextFunc: method is nil but s3Client.GetBucketAnalyticsConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		GetBucketAnalyticsConfigurationInput: getBucketAnalyticsConfigurationInput,
		Options:                              options,
	}
	mock.lockGetBucketAnalyticsConfigurationWithContext.Lock()
	mock.calls.GetBucketAnalyticsConfigurationWithContext = append(mock.calls.GetBucketAnalyticsConfigurationWithContext, callInfo)
	mock.lockGetBucketAnalyticsConfigurationWithContext.Unlock()
	return mock.GetBucketAnalyticsConfigurationWithContextFunc(contextMoqParam, getBucketAnalyticsConfigurationInput, options...)
}

// GetBucketAnalyticsConfigurationWithContextCalls gets all the calls that were made to GetBucketAnalyticsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketAnalyticsConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketAnalyticsConfigurationWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		GetBucketAnalyticsConfigurationInput *s3.GetBucketAnalyticsConfigurationInput
		Options                              []request.Option
	}
	mock.lockGetBucketAnalyticsConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketAnalyticsConfigurationWithContext
	mock.lockGetBucketAnalyticsConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketCors calls GetBucketCorsFunc.
func (mock *s3ClientMock) GetBucketCors(getBucketCorsInput *s3.GetBucketCorsInput) (*s3.GetBucketCorsOutput, error) {
	if mock.GetBucketCorsFunc == nil {
		panic("s3ClientMock.GetBucketCorsFunc: method is nil but s3Client.GetBucketCors was just called")
	}
	callInfo := struct {
		GetBucketCorsInput *s3.GetBucketCorsInput
	}{
		GetBucketCorsInput: getBucketCorsInput,
	}
	mock.lockGetBucketCors.Lock()
	mock.calls.GetBucketCors = append(mock.calls.GetBucketCors, callInfo)
	mock.lockGetBucketCors.Unlock()
	return mock.GetBucketCorsFunc(getBucketCorsInput)
}

// GetBucketCorsCalls gets all the calls that were made to GetBucketCors.
// Check the length with:
//     len(mockeds3Client.GetBucketCorsCalls())
func (mock *s3ClientMock) GetBucketCorsCalls() []struct {
	GetBucketCorsInput *s3.GetBucketCorsInput
} {
	var calls []struct {
		GetBucketCorsInput *s3.GetBucketCorsInput
	}
	mock.lockGetBucketCors.RLock()
	calls = mock.calls.GetBucketCors
	mock.lockGetBucketCors.RUnlock()
	return calls
}

// GetBucketCorsRequest calls GetBucketCorsRequestFunc.
func (mock *s3ClientMock) GetBucketCorsRequest(getBucketCorsInput *s3.GetBucketCorsInput) (*request.Request, *s3.GetBucketCorsOutput) {
	if mock.GetBucketCorsRequestFunc == nil {
		panic("s3ClientMock.GetBucketCorsRequestFunc: method is nil but s3Client.GetBucketCorsRequest was just called")
	}
	callInfo := struct {
		GetBucketCorsInput *s3.GetBucketCorsInput
	}{
		GetBucketCorsInput: getBucketCorsInput,
	}
	mock.lockGetBucketCorsRequest.Lock()
	mock.calls.GetBucketCorsRequest = append(mock.calls.GetBucketCorsRequest, callInfo)
	mock.lockGetBucketCorsRequest.Unlock()
	return mock.GetBucketCorsRequestFunc(getBucketCorsInput)
}

// GetBucketCorsRequestCalls gets all the calls that were made to GetBucketCorsRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketCorsRequestCalls())
func (mock *s3ClientMock) GetBucketCorsRequestCalls() []struct {
	GetBucketCorsInput *s3.GetBucketCorsInput
} {
	var calls []struct {
		GetBucketCorsInput *s3.GetBucketCorsInput
	}
	mock.lockGetBucketCorsRequest.RLock()
	calls = mock.calls.GetBucketCorsRequest
	mock.lockGetBucketCorsRequest.RUnlock()
	return calls
}

// GetBucketCorsWithContext calls GetBucketCorsWithContextFunc.
func (mock *s3ClientMock) GetBucketCorsWithContext(contextMoqParam context.Context, getBucketCorsInput *s3.GetBucketCorsInput, options ...request.Option) (*s3.GetBucketCorsOutput, error) {
	if mock.GetBucketCorsWithContextFunc == nil {
		panic("s3ClientMock.GetBucketCorsWithContextFunc: method is nil but s3Client.GetBucketCorsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		GetBucketCorsInput *s3.GetBucketCorsInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		GetBucketCorsInput: getBucketCorsInput,
		Options:            options,
	}
	mock.lockGetBucketCorsWithContext.Lock()
	mock.calls.GetBucketCorsWithContext = append(mock.calls.GetBucketCorsWithContext, callInfo)
	mock.lockGetBucketCorsWithContext.Unlock()
	return mock.GetBucketCorsWithContextFunc(contextMoqParam, getBucketCorsInput, options...)
}

// GetBucketCorsWithContextCalls gets all the calls that were made to GetBucketCorsWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketCorsWithContextCalls())
func (mock *s3ClientMock) GetBucketCorsWithContextCalls() []struct {
	ContextMoqParam    context.Context
	GetBucketCorsInput *s3.GetBucketCorsInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		GetBucketCorsInput *s3.GetBucketCorsInput
		Options            []request.Option
	}
	mock.lockGetBucketCorsWithContext.RLock()
	calls = mock.calls.GetBucketCorsWithContext
	mock.lockGetBucketCorsWithContext.RUnlock()
	return calls
}

// GetBucketEncryption calls GetBucketEncryptionFunc.
func (mock *s3ClientMock) GetBucketEncryption(getBucketEncryptionInput *s3.GetBucketEncryptionInput) (*s3.GetBucketEncryptionOutput, error) {
	if mock.GetBucketEncryptionFunc == nil {
		panic("s3ClientMock.GetBucketEncryptionFunc: method is nil but s3Client.GetBucketEncryption was just called")
	}
	callInfo := struct {
		GetBucketEncryptionInput *s3.GetBucketEncryptionInput
	}{
		GetBucketEncryptionInput: getBucketEncryptionInput,
	}
	mock.lockGetBucketEncryption.Lock()
	mock.calls.GetBucketEncryption = append(mock.calls.GetBucketEncryption, callInfo)
	mock.lockGetBucketEncryption.Unlock()
	return mock.GetBucketEncryptionFunc(getBucketEncryptionInput)
}

// GetBucketEncryptionCalls gets all the calls that were made to GetBucketEncryption.
// Check the length with:
//     len(mockeds3Client.GetBucketEncryptionCalls())
func (mock *s3ClientMock) GetBucketEncryptionCalls() []struct {
	GetBucketEncryptionInput *s3.GetBucketEncryptionInput
} {
	var calls []struct {
		GetBucketEncryptionInput *s3.GetBucketEncryptionInput
	}
	mock.lockGetBucketEncryption.RLock()
	calls = mock.calls.GetBucketEncryption
	mock.lockGetBucketEncryption.RUnlock()
	return calls
}

// GetBucketEncryptionRequest calls GetBucketEncryptionRequestFunc.
func (mock *s3ClientMock) GetBucketEncryptionRequest(getBucketEncryptionInput *s3.GetBucketEncryptionInput) (*request.Request, *s3.GetBucketEncryptionOutput) {
	if mock.GetBucketEncryptionRequestFunc == nil {
		panic("s3ClientMock.GetBucketEncryptionRequestFunc: method is nil but s3Client.GetBucketEncryptionRequest was just called")
	}
	callInfo := struct {
		GetBucketEncryptionInput *s3.GetBucketEncryptionInput
	}{
		GetBucketEncryptionInput: getBucketEncryptionInput,
	}
	mock.lockGetBucketEncryptionRequest.Lock()
	mock.calls.GetBucketEncryptionRequest = append(mock.calls.GetBucketEncryptionRequest, callInfo)
	mock.lockGetBucketEncryptionRequest.Unlock()
	return mock.GetBucketEncryptionRequestFunc(getBucketEncryptionInput)
}

// GetBucketEncryptionRequestCalls gets all the calls that were made to GetBucketEncryptionRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketEncryptionRequestCalls())
func (mock *s3ClientMock) GetBucketEncryptionRequestCalls() []struct {
	GetBucketEncryptionInput *s3.GetBucketEncryptionInput
} {
	var calls []struct {
		GetBucketEncryptionInput *s3.GetBucketEncryptionInput
	}
	mock.lockGetBucketEncryptionRequest.RLock()
	calls = mock.calls.GetBucketEncryptionRequest
	mock.lockGetBucketEncryptionRequest.RUnlock()
	return calls
}

// GetBucketEncryptionWithContext calls GetBucketEncryptionWithContextFunc.
func (mock *s3ClientMock) GetBucketEncryptionWithContext(contextMoqParam context.Context, getBucketEncryptionInput *s3.GetBucketEncryptionInput, options ...request.Option) (*s3.GetBucketEncryptionOutput, error) {
	if mock.GetBucketEncryptionWithContextFunc == nil {
		panic("s3ClientMock.GetBucketEncryptionWithContextFunc: method is nil but s3Client.GetBucketEncryptionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		GetBucketEncryptionInput *s3.GetBucketEncryptionInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		GetBucketEncryptionInput: getBucketEncryptionInput,
		Options:                  options,
	}
	mock.lockGetBucketEncryptionWithContext.Lock()
	mock.calls.GetBucketEncryptionWithContext = append(mock.calls.GetBucketEncryptionWithContext, callInfo)
	mock.lockGetBucketEncryptionWithContext.Unlock()
	return mock.GetBucketEncryptionWithContextFunc(contextMoqParam, getBucketEncryptionInput, options...)
}

// GetBucketEncryptionWithContextCalls gets all the calls that were made to GetBucketEncryptionWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketEncryptionWithContextCalls())
func (mock *s3ClientMock) GetBucketEncryptionWithContextCalls() []struct {
	ContextMoqParam          context.Context
	GetBucketEncryptionInput *s3.GetBucketEncryptionInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		GetBucketEncryptionInput *s3.GetBucketEncryptionInput
		Options                  []request.Option
	}
	mock.lockGetBucketEncryptionWithContext.RLock()
	calls = mock.calls.GetBucketEncryptionWithContext
	mock.lockGetBucketEncryptionWithContext.RUnlock()
	return calls
}

// GetBucketIntelligentTieringConfiguration calls GetBucketIntelligentTieringConfigurationFunc.
func (mock *s3ClientMock) GetBucketIntelligentTieringConfiguration(getBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput) (*s3.GetBucketIntelligentTieringConfigurationOutput, error) {
	if mock.GetBucketIntelligentTieringConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketIntelligentTieringConfigurationFunc: method is nil but s3Client.GetBucketIntelligentTieringConfiguration was just called")
	}
	callInfo := struct {
		GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
	}{
		GetBucketIntelligentTieringConfigurationInput: getBucketIntelligentTieringConfigurationInput,
	}
	mock.lockGetBucketIntelligentTieringConfiguration.Lock()
	mock.calls.GetBucketIntelligentTieringConfiguration = append(mock.calls.GetBucketIntelligentTieringConfiguration, callInfo)
	mock.lockGetBucketIntelligentTieringConfiguration.Unlock()
	return mock.GetBucketIntelligentTieringConfigurationFunc(getBucketIntelligentTieringConfigurationInput)
}

// GetBucketIntelligentTieringConfigurationCalls gets all the calls that were made to GetBucketIntelligentTieringConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketIntelligentTieringConfigurationCalls())
func (mock *s3ClientMock) GetBucketIntelligentTieringConfigurationCalls() []struct {
	GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
} {
	var calls []struct {
		GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
	}
	mock.lockGetBucketIntelligentTieringConfiguration.RLock()
	calls = mock.calls.GetBucketIntelligentTieringConfiguration
	mock.lockGetBucketIntelligentTieringConfiguration.RUnlock()
	return calls
}

// GetBucketIntelligentTieringConfigurationRequest calls GetBucketIntelligentTieringConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketIntelligentTieringConfigurationRequest(getBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput) (*request.Request, *s3.GetBucketIntelligentTieringConfigurationOutput) {
	if mock.GetBucketIntelligentTieringConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketIntelligentTieringConfigurationRequestFunc: method is nil but s3Client.GetBucketIntelligentTieringConfigurationRequest was just called")
	}
	callInfo := struct {
		GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
	}{
		GetBucketIntelligentTieringConfigurationInput: getBucketIntelligentTieringConfigurationInput,
	}
	mock.lockGetBucketIntelligentTieringConfigurationRequest.Lock()
	mock.calls.GetBucketIntelligentTieringConfigurationRequest = append(mock.calls.GetBucketIntelligentTieringConfigurationRequest, callInfo)
	mock.lockGetBucketIntelligentTieringConfigurationRequest.Unlock()
	return mock.GetBucketIntelligentTieringConfigurationRequestFunc(getBucketIntelligentTieringConfigurationInput)
}

// GetBucketIntelligentTieringConfigurationRequestCalls gets all the calls that were made to GetBucketIntelligentTieringConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketIntelligentTieringConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketIntelligentTieringConfigurationRequestCalls() []struct {
	GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
} {
	var calls []struct {
		GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
	}
	mock.lockGetBucketIntelligentTieringConfigurationRequest.RLock()
	calls = mock.calls.GetBucketIntelligentTieringConfigurationRequest
	mock.lockGetBucketIntelligentTieringConfigurationRequest.RUnlock()
	return calls
}

// GetBucketIntelligentTieringConfigurationWithContext calls GetBucketIntelligentTieringConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketIntelligentTieringConfigurationWithContext(contextMoqParam context.Context, getBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput, options ...request.Option) (*s3.GetBucketIntelligentTieringConfigurationOutput, error) {
	if mock.GetBucketIntelligentTieringConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketIntelligentTieringConfigurationWithContextFunc: method is nil but s3Client.GetBucketIntelligentTieringConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                               context.Context
		GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
		Options                                       []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		GetBucketIntelligentTieringConfigurationInput: getBucketIntelligentTieringConfigurationInput,
		Options: options,
	}
	mock.lockGetBucketIntelligentTieringConfigurationWithContext.Lock()
	mock.calls.GetBucketIntelligentTieringConfigurationWithContext = append(mock.calls.GetBucketIntelligentTieringConfigurationWithContext, callInfo)
	mock.lockGetBucketIntelligentTieringConfigurationWithContext.Unlock()
	return mock.GetBucketIntelligentTieringConfigurationWithContextFunc(contextMoqParam, getBucketIntelligentTieringConfigurationInput, options...)
}

// GetBucketIntelligentTieringConfigurationWithContextCalls gets all the calls that were made to GetBucketIntelligentTieringConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketIntelligentTieringConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketIntelligentTieringConfigurationWithContextCalls() []struct {
	ContextMoqParam                               context.Context
	GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
	Options                                       []request.Option
} {
	var calls []struct {
		ContextMoqParam                               context.Context
		GetBucketIntelligentTieringConfigurationInput *s3.GetBucketIntelligentTieringConfigurationInput
		Options                                       []request.Option
	}
	mock.lockGetBucketIntelligentTieringConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketIntelligentTieringConfigurationWithContext
	mock.lockGetBucketIntelligentTieringConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketInventoryConfiguration calls GetBucketInventoryConfigurationFunc.
func (mock *s3ClientMock) GetBucketInventoryConfiguration(getBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput) (*s3.GetBucketInventoryConfigurationOutput, error) {
	if mock.GetBucketInventoryConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketInventoryConfigurationFunc: method is nil but s3Client.GetBucketInventoryConfiguration was just called")
	}
	callInfo := struct {
		GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
	}{
		GetBucketInventoryConfigurationInput: getBucketInventoryConfigurationInput,
	}
	mock.lockGetBucketInventoryConfiguration.Lock()
	mock.calls.GetBucketInventoryConfiguration = append(mock.calls.GetBucketInventoryConfiguration, callInfo)
	mock.lockGetBucketInventoryConfiguration.Unlock()
	return mock.GetBucketInventoryConfigurationFunc(getBucketInventoryConfigurationInput)
}

// GetBucketInventoryConfigurationCalls gets all the calls that were made to GetBucketInventoryConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketInventoryConfigurationCalls())
func (mock *s3ClientMock) GetBucketInventoryConfigurationCalls() []struct {
	GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
} {
	var calls []struct {
		GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
	}
	mock.lockGetBucketInventoryConfiguration.RLock()
	calls = mock.calls.GetBucketInventoryConfiguration
	mock.lockGetBucketInventoryConfiguration.RUnlock()
	return calls
}

// GetBucketInventoryConfigurationRequest calls GetBucketInventoryConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketInventoryConfigurationRequest(getBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput) (*request.Request, *s3.GetBucketInventoryConfigurationOutput) {
	if mock.GetBucketInventoryConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketInventoryConfigurationRequestFunc: method is nil but s3Client.GetBucketInventoryConfigurationRequest was just called")
	}
	callInfo := struct {
		GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
	}{
		GetBucketInventoryConfigurationInput: getBucketInventoryConfigurationInput,
	}
	mock.lockGetBucketInventoryConfigurationRequest.Lock()
	mock.calls.GetBucketInventoryConfigurationRequest = append(mock.calls.GetBucketInventoryConfigurationRequest, callInfo)
	mock.lockGetBucketInventoryConfigurationRequest.Unlock()
	return mock.GetBucketInventoryConfigurationRequestFunc(getBucketInventoryConfigurationInput)
}

// GetBucketInventoryConfigurationRequestCalls gets all the calls that were made to GetBucketInventoryConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketInventoryConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketInventoryConfigurationRequestCalls() []struct {
	GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
} {
	var calls []struct {
		GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
	}
	mock.lockGetBucketInventoryConfigurationRequest.RLock()
	calls = mock.calls.GetBucketInventoryConfigurationRequest
	mock.lockGetBucketInventoryConfigurationRequest.RUnlock()
	return calls
}

// GetBucketInventoryConfigurationWithContext calls GetBucketInventoryConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketInventoryConfigurationWithContext(contextMoqParam context.Context, getBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput, options ...request.Option) (*s3.GetBucketInventoryConfigurationOutput, error) {
	if mock.GetBucketInventoryConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketInventoryConfigurationWithContextFunc: method is nil but s3Client.GetBucketInventoryConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		GetBucketInventoryConfigurationInput: getBucketInventoryConfigurationInput,
		Options:                              options,
	}
	mock.lockGetBucketInventoryConfigurationWithContext.Lock()
	mock.calls.GetBucketInventoryConfigurationWithContext = append(mock.calls.GetBucketInventoryConfigurationWithContext, callInfo)
	mock.lockGetBucketInventoryConfigurationWithContext.Unlock()
	return mock.GetBucketInventoryConfigurationWithContextFunc(contextMoqParam, getBucketInventoryConfigurationInput, options...)
}

// GetBucketInventoryConfigurationWithContextCalls gets all the calls that were made to GetBucketInventoryConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketInventoryConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketInventoryConfigurationWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		GetBucketInventoryConfigurationInput *s3.GetBucketInventoryConfigurationInput
		Options                              []request.Option
	}
	mock.lockGetBucketInventoryConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketInventoryConfigurationWithContext
	mock.lockGetBucketInventoryConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketLifecycle calls GetBucketLifecycleFunc.
func (mock *s3ClientMock) GetBucketLifecycle(getBucketLifecycleInput *s3.GetBucketLifecycleInput) (*s3.GetBucketLifecycleOutput, error) {
	if mock.GetBucketLifecycleFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleFunc: method is nil but s3Client.GetBucketLifecycle was just called")
	}
	callInfo := struct {
		GetBucketLifecycleInput *s3.GetBucketLifecycleInput
	}{
		GetBucketLifecycleInput: getBucketLifecycleInput,
	}
	mock.lockGetBucketLifecycle.Lock()
	mock.calls.GetBucketLifecycle = append(mock.calls.GetBucketLifecycle, callInfo)
	mock.lockGetBucketLifecycle.Unlock()
	return mock.GetBucketLifecycleFunc(getBucketLifecycleInput)
}

// GetBucketLifecycleCalls gets all the calls that were made to GetBucketLifecycle.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleCalls())
func (mock *s3ClientMock) GetBucketLifecycleCalls() []struct {
	GetBucketLifecycleInput *s3.GetBucketLifecycleInput
} {
	var calls []struct {
		GetBucketLifecycleInput *s3.GetBucketLifecycleInput
	}
	mock.lockGetBucketLifecycle.RLock()
	calls = mock.calls.GetBucketLifecycle
	mock.lockGetBucketLifecycle.RUnlock()
	return calls
}

// GetBucketLifecycleConfiguration calls GetBucketLifecycleConfigurationFunc.
func (mock *s3ClientMock) GetBucketLifecycleConfiguration(getBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	if mock.GetBucketLifecycleConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleConfigurationFunc: method is nil but s3Client.GetBucketLifecycleConfiguration was just called")
	}
	callInfo := struct {
		GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
	}{
		GetBucketLifecycleConfigurationInput: getBucketLifecycleConfigurationInput,
	}
	mock.lockGetBucketLifecycleConfiguration.Lock()
	mock.calls.GetBucketLifecycleConfiguration = append(mock.calls.GetBucketLifecycleConfiguration, callInfo)
	mock.lockGetBucketLifecycleConfiguration.Unlock()
	return mock.GetBucketLifecycleConfigurationFunc(getBucketLifecycleConfigurationInput)
}

// GetBucketLifecycleConfigurationCalls gets all the calls that were made to GetBucketLifecycleConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleConfigurationCalls())
func (mock *s3ClientMock) GetBucketLifecycleConfigurationCalls() []struct {
	GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
} {
	var calls []struct {
		GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
	}
	mock.lockGetBucketLifecycleConfiguration.RLock()
	calls = mock.calls.GetBucketLifecycleConfiguration
	mock.lockGetBucketLifecycleConfiguration.RUnlock()
	return calls
}

// GetBucketLifecycleConfigurationRequest calls GetBucketLifecycleConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketLifecycleConfigurationRequest(getBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput) (*request.Request, *s3.GetBucketLifecycleConfigurationOutput) {
	if mock.GetBucketLifecycleConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleConfigurationRequestFunc: method is nil but s3Client.GetBucketLifecycleConfigurationRequest was just called")
	}
	callInfo := struct {
		GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
	}{
		GetBucketLifecycleConfigurationInput: getBucketLifecycleConfigurationInput,
	}
	mock.lockGetBucketLifecycleConfigurationRequest.Lock()
	mock.calls.GetBucketLifecycleConfigurationRequest = append(mock.calls.GetBucketLifecycleConfigurationRequest, callInfo)
	mock.lockGetBucketLifecycleConfigurationRequest.Unlock()
	return mock.GetBucketLifecycleConfigurationRequestFunc(getBucketLifecycleConfigurationInput)
}

// GetBucketLifecycleConfigurationRequestCalls gets all the calls that were made to GetBucketLifecycleConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketLifecycleConfigurationRequestCalls() []struct {
	GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
} {
	var calls []struct {
		GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
	}
	mock.lockGetBucketLifecycleConfigurationRequest.RLock()
	calls = mock.calls.GetBucketLifecycleConfigurationRequest
	mock.lockGetBucketLifecycleConfigurationRequest.RUnlock()
	return calls
}

// GetBucketLifecycleConfigurationWithContext calls GetBucketLifecycleConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketLifecycleConfigurationWithContext(contextMoqParam context.Context, getBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput, options ...request.Option) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	if mock.GetBucketLifecycleConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleConfigurationWithContextFunc: method is nil but s3Client.GetBucketLifecycleConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		GetBucketLifecycleConfigurationInput: getBucketLifecycleConfigurationInput,
		Options:                              options,
	}
	mock.lockGetBucketLifecycleConfigurationWithContext.Lock()
	mock.calls.GetBucketLifecycleConfigurationWithContext = append(mock.calls.GetBucketLifecycleConfigurationWithContext, callInfo)
	mock.lockGetBucketLifecycleConfigurationWithContext.Unlock()
	return mock.GetBucketLifecycleConfigurationWithContextFunc(contextMoqParam, getBucketLifecycleConfigurationInput, options...)
}

// GetBucketLifecycleConfigurationWithContextCalls gets all the calls that were made to GetBucketLifecycleConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketLifecycleConfigurationWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		GetBucketLifecycleConfigurationInput *s3.GetBucketLifecycleConfigurationInput
		Options                              []request.Option
	}
	mock.lockGetBucketLifecycleConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketLifecycleConfigurationWithContext
	mock.lockGetBucketLifecycleConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketLifecycleRequest calls GetBucketLifecycleRequestFunc.
func (mock *s3ClientMock) GetBucketLifecycleRequest(getBucketLifecycleInput *s3.GetBucketLifecycleInput) (*request.Request, *s3.GetBucketLifecycleOutput) {
	if mock.GetBucketLifecycleRequestFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleRequestFunc: method is nil but s3Client.GetBucketLifecycleRequest was just called")
	}
	callInfo := struct {
		GetBucketLifecycleInput *s3.GetBucketLifecycleInput
	}{
		GetBucketLifecycleInput: getBucketLifecycleInput,
	}
	mock.lockGetBucketLifecycleRequest.Lock()
	mock.calls.GetBucketLifecycleRequest = append(mock.calls.GetBucketLifecycleRequest, callInfo)
	mock.lockGetBucketLifecycleRequest.Unlock()
	return mock.GetBucketLifecycleRequestFunc(getBucketLifecycleInput)
}

// GetBucketLifecycleRequestCalls gets all the calls that were made to GetBucketLifecycleRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleRequestCalls())
func (mock *s3ClientMock) GetBucketLifecycleRequestCalls() []struct {
	GetBucketLifecycleInput *s3.GetBucketLifecycleInput
} {
	var calls []struct {
		GetBucketLifecycleInput *s3.GetBucketLifecycleInput
	}
	mock.lockGetBucketLifecycleRequest.RLock()
	calls = mock.calls.GetBucketLifecycleRequest
	mock.lockGetBucketLifecycleRequest.RUnlock()
	return calls
}

// GetBucketLifecycleWithContext calls GetBucketLifecycleWithContextFunc.
func (mock *s3ClientMock) GetBucketLifecycleWithContext(contextMoqParam context.Context, getBucketLifecycleInput *s3.GetBucketLifecycleInput, options ...request.Option) (*s3.GetBucketLifecycleOutput, error) {
	if mock.GetBucketLifecycleWithContextFunc == nil {
		panic("s3ClientMock.GetBucketLifecycleWithContextFunc: method is nil but s3Client.GetBucketLifecycleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		GetBucketLifecycleInput *s3.GetBucketLifecycleInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		GetBucketLifecycleInput: getBucketLifecycleInput,
		Options:                 options,
	}
	mock.lockGetBucketLifecycleWithContext.Lock()
	mock.calls.GetBucketLifecycleWithContext = append(mock.calls.GetBucketLifecycleWithContext, callInfo)
	mock.lockGetBucketLifecycleWithContext.Unlock()
	return mock.GetBucketLifecycleWithContextFunc(contextMoqParam, getBucketLifecycleInput, options...)
}

// GetBucketLifecycleWithContextCalls gets all the calls that were made to GetBucketLifecycleWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketLifecycleWithContextCalls())
func (mock *s3ClientMock) GetBucketLifecycleWithContextCalls() []struct {
	ContextMoqParam         context.Context
	GetBucketLifecycleInput *s3.GetBucketLifecycleInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		GetBucketLifecycleInput *s3.GetBucketLifecycleInput
		Options                 []request.Option
	}
	mock.lockGetBucketLifecycleWithContext.RLock()
	calls = mock.calls.GetBucketLifecycleWithContext
	mock.lockGetBucketLifecycleWithContext.RUnlock()
	return calls
}

// GetBucketLocation calls GetBucketLocationFunc.
func (mock *s3ClientMock) GetBucketLocation(getBucketLocationInput *s3.GetBucketLocationInput) (*s3.GetBucketLocationOutput, error) {
	if mock.GetBucketLocationFunc == nil {
		panic("s3ClientMock.GetBucketLocationFunc: method is nil but s3Client.GetBucketLocation was just called")
	}
	callInfo := struct {
		GetBucketLocationInput *s3.GetBucketLocationInput
	}{
		GetBucketLocationInput: getBucketLocationInput,
	}
	mock.lockGetBucketLocation.Lock()
	mock.calls.GetBucketLocation = append(mock.calls.GetBucketLocation, callInfo)
	mock.lockGetBucketLocation.Unlock()
	return mock.GetBucketLocationFunc(getBucketLocationInput)
}

// GetBucketLocationCalls gets all the calls that were made to GetBucketLocation.
// Check the length with:
//     len(mockeds3Client.GetBucketLocationCalls())
func (mock *s3ClientMock) GetBucketLocationCalls() []struct {
	GetBucketLocationInput *s3.GetBucketLocationInput
} {
	var calls []struct {
		GetBucketLocationInput *s3.GetBucketLocationInput
	}
	mock.lockGetBucketLocation.RLock()
	calls = mock.calls.GetBucketLocation
	mock.lockGetBucketLocation.RUnlock()
	return calls
}

// GetBucketLocationRequest calls GetBucketLocationRequestFunc.
func (mock *s3ClientMock) GetBucketLocationRequest(getBucketLocationInput *s3.GetBucketLocationInput) (*request.Request, *s3.GetBucketLocationOutput) {
	if mock.GetBucketLocationRequestFunc == nil {
		panic("s3ClientMock.GetBucketLocationRequestFunc: method is nil but s3Client.GetBucketLocationRequest was just called")
	}
	callInfo := struct {
		GetBucketLocationInput *s3.GetBucketLocationInput
	}{
		GetBucketLocationInput: getBucketLocationInput,
	}
	mock.lockGetBucketLocationRequest.Lock()
	mock.calls.GetBucketLocationRequest = append(mock.calls.GetBucketLocationRequest, callInfo)
	mock.lockGetBucketLocationRequest.Unlock()
	return mock.GetBucketLocationRequestFunc(getBucketLocationInput)
}

// GetBucketLocationRequestCalls gets all the calls that were made to GetBucketLocationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketLocationRequestCalls())
func (mock *s3ClientMock) GetBucketLocationRequestCalls() []struct {
	GetBucketLocationInput *s3.GetBucketLocationInput
} {
	var calls []struct {
		GetBucketLocationInput *s3.GetBucketLocationInput
	}
	mock.lockGetBucketLocationRequest.RLock()
	calls = mock.calls.GetBucketLocationRequest
	mock.lockGetBucketLocationRequest.RUnlock()
	return calls
}

// GetBucketLocationWithContext calls GetBucketLocationWithContextFunc.
func (mock *s3ClientMock) GetBucketLocationWithContext(contextMoqParam context.Context, getBucketLocationInput *s3.GetBucketLocationInput, options ...request.Option) (*s3.GetBucketLocationOutput, error) {
	if mock.GetBucketLocationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketLocationWithContextFunc: method is nil but s3Client.GetBucketLocationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		GetBucketLocationInput *s3.GetBucketLocationInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		GetBucketLocationInput: getBucketLocationInput,
		Options:                options,
	}
	mock.lockGetBucketLocationWithContext.Lock()
	mock.calls.GetBucketLocationWithContext = append(mock.calls.GetBucketLocationWithContext, callInfo)
	mock.lockGetBucketLocationWithContext.Unlock()
	return mock.GetBucketLocationWithContextFunc(contextMoqParam, getBucketLocationInput, options...)
}

// GetBucketLocationWithContextCalls gets all the calls that were made to GetBucketLocationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketLocationWithContextCalls())
func (mock *s3ClientMock) GetBucketLocationWithContextCalls() []struct {
	ContextMoqParam        context.Context
	GetBucketLocationInput *s3.GetBucketLocationInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		GetBucketLocationInput *s3.GetBucketLocationInput
		Options                []request.Option
	}
	mock.lockGetBucketLocationWithContext.RLock()
	calls = mock.calls.GetBucketLocationWithContext
	mock.lockGetBucketLocationWithContext.RUnlock()
	return calls
}

// GetBucketLogging calls GetBucketLoggingFunc.
func (mock *s3ClientMock) GetBucketLogging(getBucketLoggingInput *s3.GetBucketLoggingInput) (*s3.GetBucketLoggingOutput, error) {
	if mock.GetBucketLoggingFunc == nil {
		panic("s3ClientMock.GetBucketLoggingFunc: method is nil but s3Client.GetBucketLogging was just called")
	}
	callInfo := struct {
		GetBucketLoggingInput *s3.GetBucketLoggingInput
	}{
		GetBucketLoggingInput: getBucketLoggingInput,
	}
	mock.lockGetBucketLogging.Lock()
	mock.calls.GetBucketLogging = append(mock.calls.GetBucketLogging, callInfo)
	mock.lockGetBucketLogging.Unlock()
	return mock.GetBucketLoggingFunc(getBucketLoggingInput)
}

// GetBucketLoggingCalls gets all the calls that were made to GetBucketLogging.
// Check the length with:
//     len(mockeds3Client.GetBucketLoggingCalls())
func (mock *s3ClientMock) GetBucketLoggingCalls() []struct {
	GetBucketLoggingInput *s3.GetBucketLoggingInput
} {
	var calls []struct {
		GetBucketLoggingInput *s3.GetBucketLoggingInput
	}
	mock.lockGetBucketLogging.RLock()
	calls = mock.calls.GetBucketLogging
	mock.lockGetBucketLogging.RUnlock()
	return calls
}

// GetBucketLoggingRequest calls GetBucketLoggingRequestFunc.
func (mock *s3ClientMock) GetBucketLoggingRequest(getBucketLoggingInput *s3.GetBucketLoggingInput) (*request.Request, *s3.GetBucketLoggingOutput) {
	if mock.GetBucketLoggingRequestFunc == nil {
		panic("s3ClientMock.GetBucketLoggingRequestFunc: method is nil but s3Client.GetBucketLoggingRequest was just called")
	}
	callInfo := struct {
		GetBucketLoggingInput *s3.GetBucketLoggingInput
	}{
		GetBucketLoggingInput: getBucketLoggingInput,
	}
	mock.lockGetBucketLoggingRequest.Lock()
	mock.calls.GetBucketLoggingRequest = append(mock.calls.GetBucketLoggingRequest, callInfo)
	mock.lockGetBucketLoggingRequest.Unlock()
	return mock.GetBucketLoggingRequestFunc(getBucketLoggingInput)
}

// GetBucketLoggingRequestCalls gets all the calls that were made to GetBucketLoggingRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketLoggingRequestCalls())
func (mock *s3ClientMock) GetBucketLoggingRequestCalls() []struct {
	GetBucketLoggingInput *s3.GetBucketLoggingInput
} {
	var calls []struct {
		GetBucketLoggingInput *s3.GetBucketLoggingInput
	}
	mock.lockGetBucketLoggingRequest.RLock()
	calls = mock.calls.GetBucketLoggingRequest
	mock.lockGetBucketLoggingRequest.RUnlock()
	return calls
}

// GetBucketLoggingWithContext calls GetBucketLoggingWithContextFunc.
func (mock *s3ClientMock) GetBucketLoggingWithContext(contextMoqParam context.Context, getBucketLoggingInput *s3.GetBucketLoggingInput, options ...request.Option) (*s3.GetBucketLoggingOutput, error) {
	if mock.GetBucketLoggingWithContextFunc == nil {
		panic("s3ClientMock.GetBucketLoggingWithContextFunc: method is nil but s3Client.GetBucketLoggingWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetBucketLoggingInput *s3.GetBucketLoggingInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		GetBucketLoggingInput: getBucketLoggingInput,
		Options:               options,
	}
	mock.lockGetBucketLoggingWithContext.Lock()
	mock.calls.GetBucketLoggingWithContext = append(mock.calls.GetBucketLoggingWithContext, callInfo)
	mock.lockGetBucketLoggingWithContext.Unlock()
	return mock.GetBucketLoggingWithContextFunc(contextMoqParam, getBucketLoggingInput, options...)
}

// GetBucketLoggingWithContextCalls gets all the calls that were made to GetBucketLoggingWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketLoggingWithContextCalls())
func (mock *s3ClientMock) GetBucketLoggingWithContextCalls() []struct {
	ContextMoqParam       context.Context
	GetBucketLoggingInput *s3.GetBucketLoggingInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetBucketLoggingInput *s3.GetBucketLoggingInput
		Options               []request.Option
	}
	mock.lockGetBucketLoggingWithContext.RLock()
	calls = mock.calls.GetBucketLoggingWithContext
	mock.lockGetBucketLoggingWithContext.RUnlock()
	return calls
}

// GetBucketMetricsConfiguration calls GetBucketMetricsConfigurationFunc.
func (mock *s3ClientMock) GetBucketMetricsConfiguration(getBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput) (*s3.GetBucketMetricsConfigurationOutput, error) {
	if mock.GetBucketMetricsConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketMetricsConfigurationFunc: method is nil but s3Client.GetBucketMetricsConfiguration was just called")
	}
	callInfo := struct {
		GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
	}{
		GetBucketMetricsConfigurationInput: getBucketMetricsConfigurationInput,
	}
	mock.lockGetBucketMetricsConfiguration.Lock()
	mock.calls.GetBucketMetricsConfiguration = append(mock.calls.GetBucketMetricsConfiguration, callInfo)
	mock.lockGetBucketMetricsConfiguration.Unlock()
	return mock.GetBucketMetricsConfigurationFunc(getBucketMetricsConfigurationInput)
}

// GetBucketMetricsConfigurationCalls gets all the calls that were made to GetBucketMetricsConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketMetricsConfigurationCalls())
func (mock *s3ClientMock) GetBucketMetricsConfigurationCalls() []struct {
	GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
} {
	var calls []struct {
		GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
	}
	mock.lockGetBucketMetricsConfiguration.RLock()
	calls = mock.calls.GetBucketMetricsConfiguration
	mock.lockGetBucketMetricsConfiguration.RUnlock()
	return calls
}

// GetBucketMetricsConfigurationRequest calls GetBucketMetricsConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketMetricsConfigurationRequest(getBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput) (*request.Request, *s3.GetBucketMetricsConfigurationOutput) {
	if mock.GetBucketMetricsConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketMetricsConfigurationRequestFunc: method is nil but s3Client.GetBucketMetricsConfigurationRequest was just called")
	}
	callInfo := struct {
		GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
	}{
		GetBucketMetricsConfigurationInput: getBucketMetricsConfigurationInput,
	}
	mock.lockGetBucketMetricsConfigurationRequest.Lock()
	mock.calls.GetBucketMetricsConfigurationRequest = append(mock.calls.GetBucketMetricsConfigurationRequest, callInfo)
	mock.lockGetBucketMetricsConfigurationRequest.Unlock()
	return mock.GetBucketMetricsConfigurationRequestFunc(getBucketMetricsConfigurationInput)
}

// GetBucketMetricsConfigurationRequestCalls gets all the calls that were made to GetBucketMetricsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketMetricsConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketMetricsConfigurationRequestCalls() []struct {
	GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
} {
	var calls []struct {
		GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
	}
	mock.lockGetBucketMetricsConfigurationRequest.RLock()
	calls = mock.calls.GetBucketMetricsConfigurationRequest
	mock.lockGetBucketMetricsConfigurationRequest.RUnlock()
	return calls
}

// GetBucketMetricsConfigurationWithContext calls GetBucketMetricsConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketMetricsConfigurationWithContext(contextMoqParam context.Context, getBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput, options ...request.Option) (*s3.GetBucketMetricsConfigurationOutput, error) {
	if mock.GetBucketMetricsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketMetricsConfigurationWithContextFunc: method is nil but s3Client.GetBucketMetricsConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		GetBucketMetricsConfigurationInput: getBucketMetricsConfigurationInput,
		Options:                            options,
	}
	mock.lockGetBucketMetricsConfigurationWithContext.Lock()
	mock.calls.GetBucketMetricsConfigurationWithContext = append(mock.calls.GetBucketMetricsConfigurationWithContext, callInfo)
	mock.lockGetBucketMetricsConfigurationWithContext.Unlock()
	return mock.GetBucketMetricsConfigurationWithContextFunc(contextMoqParam, getBucketMetricsConfigurationInput, options...)
}

// GetBucketMetricsConfigurationWithContextCalls gets all the calls that were made to GetBucketMetricsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketMetricsConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketMetricsConfigurationWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		GetBucketMetricsConfigurationInput *s3.GetBucketMetricsConfigurationInput
		Options                            []request.Option
	}
	mock.lockGetBucketMetricsConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketMetricsConfigurationWithContext
	mock.lockGetBucketMetricsConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketNotification calls GetBucketNotificationFunc.
func (mock *s3ClientMock) GetBucketNotification(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfigurationDeprecated, error) {
	if mock.GetBucketNotificationFunc == nil {
		panic("s3ClientMock.GetBucketNotificationFunc: method is nil but s3Client.GetBucketNotification was just called")
	}
	callInfo := struct {
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
	}{
		GetBucketNotificationConfigurationRequest: getBucketNotificationConfigurationRequest,
	}
	mock.lockGetBucketNotification.Lock()
	mock.calls.GetBucketNotification = append(mock.calls.GetBucketNotification, callInfo)
	mock.lockGetBucketNotification.Unlock()
	return mock.GetBucketNotificationFunc(getBucketNotificationConfigurationRequest)
}

// GetBucketNotificationCalls gets all the calls that were made to GetBucketNotification.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationCalls())
func (mock *s3ClientMock) GetBucketNotificationCalls() []struct {
	GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
} {
	var calls []struct {
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
	}
	mock.lockGetBucketNotification.RLock()
	calls = mock.calls.GetBucketNotification
	mock.lockGetBucketNotification.RUnlock()
	return calls
}

// GetBucketNotificationConfiguration calls GetBucketNotificationConfigurationFunc.
func (mock *s3ClientMock) GetBucketNotificationConfiguration(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*s3.NotificationConfiguration, error) {
	if mock.GetBucketNotificationConfigurationFunc == nil {
		panic("s3ClientMock.GetBucketNotificationConfigurationFunc: method is nil but s3Client.GetBucketNotificationConfiguration was just called")
	}
	callInfo := struct {
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
	}{
		GetBucketNotificationConfigurationRequest: getBucketNotificationConfigurationRequest,
	}
	mock.lockGetBucketNotificationConfiguration.Lock()
	mock.calls.GetBucketNotificationConfiguration = append(mock.calls.GetBucketNotificationConfiguration, callInfo)
	mock.lockGetBucketNotificationConfiguration.Unlock()
	return mock.GetBucketNotificationConfigurationFunc(getBucketNotificationConfigurationRequest)
}

// GetBucketNotificationConfigurationCalls gets all the calls that were made to GetBucketNotificationConfiguration.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationConfigurationCalls())
func (mock *s3ClientMock) GetBucketNotificationConfigurationCalls() []struct {
	GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
} {
	var calls []struct {
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
	}
	mock.lockGetBucketNotificationConfiguration.RLock()
	calls = mock.calls.GetBucketNotificationConfiguration
	mock.lockGetBucketNotificationConfiguration.RUnlock()
	return calls
}

// GetBucketNotificationConfigurationRequest calls GetBucketNotificationConfigurationRequestFunc.
func (mock *s3ClientMock) GetBucketNotificationConfigurationRequest(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfiguration) {
	if mock.GetBucketNotificationConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetBucketNotificationConfigurationRequestFunc: method is nil but s3Client.GetBucketNotificationConfigurationRequest was just called")
	}
	callInfo := struct {
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
	}{
		GetBucketNotificationConfigurationRequest: getBucketNotificationConfigurationRequest,
	}
	mock.lockGetBucketNotificationConfigurationRequest.Lock()
	mock.calls.GetBucketNotificationConfigurationRequest = append(mock.calls.GetBucketNotificationConfigurationRequest, callInfo)
	mock.lockGetBucketNotificationConfigurationRequest.Unlock()
	return mock.GetBucketNotificationConfigurationRequestFunc(getBucketNotificationConfigurationRequest)
}

// GetBucketNotificationConfigurationRequestCalls gets all the calls that were made to GetBucketNotificationConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationConfigurationRequestCalls())
func (mock *s3ClientMock) GetBucketNotificationConfigurationRequestCalls() []struct {
	GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
} {
	var calls []struct {
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
	}
	mock.lockGetBucketNotificationConfigurationRequest.RLock()
	calls = mock.calls.GetBucketNotificationConfigurationRequest
	mock.lockGetBucketNotificationConfigurationRequest.RUnlock()
	return calls
}

// GetBucketNotificationConfigurationWithContext calls GetBucketNotificationConfigurationWithContextFunc.
func (mock *s3ClientMock) GetBucketNotificationConfigurationWithContext(contextMoqParam context.Context, getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest, options ...request.Option) (*s3.NotificationConfiguration, error) {
	if mock.GetBucketNotificationConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketNotificationConfigurationWithContextFunc: method is nil but s3Client.GetBucketNotificationConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                           context.Context
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
		Options                                   []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		GetBucketNotificationConfigurationRequest: getBucketNotificationConfigurationRequest,
		Options: options,
	}
	mock.lockGetBucketNotificationConfigurationWithContext.Lock()
	mock.calls.GetBucketNotificationConfigurationWithContext = append(mock.calls.GetBucketNotificationConfigurationWithContext, callInfo)
	mock.lockGetBucketNotificationConfigurationWithContext.Unlock()
	return mock.GetBucketNotificationConfigurationWithContextFunc(contextMoqParam, getBucketNotificationConfigurationRequest, options...)
}

// GetBucketNotificationConfigurationWithContextCalls gets all the calls that were made to GetBucketNotificationConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationConfigurationWithContextCalls())
func (mock *s3ClientMock) GetBucketNotificationConfigurationWithContextCalls() []struct {
	ContextMoqParam                           context.Context
	GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
	Options                                   []request.Option
} {
	var calls []struct {
		ContextMoqParam                           context.Context
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
		Options                                   []request.Option
	}
	mock.lockGetBucketNotificationConfigurationWithContext.RLock()
	calls = mock.calls.GetBucketNotificationConfigurationWithContext
	mock.lockGetBucketNotificationConfigurationWithContext.RUnlock()
	return calls
}

// GetBucketNotificationRequest calls GetBucketNotificationRequestFunc.
func (mock *s3ClientMock) GetBucketNotificationRequest(getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest) (*request.Request, *s3.NotificationConfigurationDeprecated) {
	if mock.GetBucketNotificationRequestFunc == nil {
		panic("s3ClientMock.GetBucketNotificationRequestFunc: method is nil but s3Client.GetBucketNotificationRequest was just called")
	}
	callInfo := struct {
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
	}{
		GetBucketNotificationConfigurationRequest: getBucketNotificationConfigurationRequest,
	}
	mock.lockGetBucketNotificationRequest.Lock()
	mock.calls.GetBucketNotificationRequest = append(mock.calls.GetBucketNotificationRequest, callInfo)
	mock.lockGetBucketNotificationRequest.Unlock()
	return mock.GetBucketNotificationRequestFunc(getBucketNotificationConfigurationRequest)
}

// GetBucketNotificationRequestCalls gets all the calls that were made to GetBucketNotificationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationRequestCalls())
func (mock *s3ClientMock) GetBucketNotificationRequestCalls() []struct {
	GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
} {
	var calls []struct {
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
	}
	mock.lockGetBucketNotificationRequest.RLock()
	calls = mock.calls.GetBucketNotificationRequest
	mock.lockGetBucketNotificationRequest.RUnlock()
	return calls
}

// GetBucketNotificationWithContext calls GetBucketNotificationWithContextFunc.
func (mock *s3ClientMock) GetBucketNotificationWithContext(contextMoqParam context.Context, getBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest, options ...request.Option) (*s3.NotificationConfigurationDeprecated, error) {
	if mock.GetBucketNotificationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketNotificationWithContextFunc: method is nil but s3Client.GetBucketNotificationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                           context.Context
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
		Options                                   []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		GetBucketNotificationConfigurationRequest: getBucketNotificationConfigurationRequest,
		Options: options,
	}
	mock.lockGetBucketNotificationWithContext.Lock()
	mock.calls.GetBucketNotificationWithContext = append(mock.calls.GetBucketNotificationWithContext, callInfo)
	mock.lockGetBucketNotificationWithContext.Unlock()
	return mock.GetBucketNotificationWithContextFunc(contextMoqParam, getBucketNotificationConfigurationRequest, options...)
}

// GetBucketNotificationWithContextCalls gets all the calls that were made to GetBucketNotificationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketNotificationWithContextCalls())
func (mock *s3ClientMock) GetBucketNotificationWithContextCalls() []struct {
	ContextMoqParam                           context.Context
	GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
	Options                                   []request.Option
} {
	var calls []struct {
		ContextMoqParam                           context.Context
		GetBucketNotificationConfigurationRequest *s3.GetBucketNotificationConfigurationRequest
		Options                                   []request.Option
	}
	mock.lockGetBucketNotificationWithContext.RLock()
	calls = mock.calls.GetBucketNotificationWithContext
	mock.lockGetBucketNotificationWithContext.RUnlock()
	return calls
}

// GetBucketOwnershipControls calls GetBucketOwnershipControlsFunc.
func (mock *s3ClientMock) GetBucketOwnershipControls(getBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput) (*s3.GetBucketOwnershipControlsOutput, error) {
	if mock.GetBucketOwnershipControlsFunc == nil {
		panic("s3ClientMock.GetBucketOwnershipControlsFunc: method is nil but s3Client.GetBucketOwnershipControls was just called")
	}
	callInfo := struct {
		GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
	}{
		GetBucketOwnershipControlsInput: getBucketOwnershipControlsInput,
	}
	mock.lockGetBucketOwnershipControls.Lock()
	mock.calls.GetBucketOwnershipControls = append(mock.calls.GetBucketOwnershipControls, callInfo)
	mock.lockGetBucketOwnershipControls.Unlock()
	return mock.GetBucketOwnershipControlsFunc(getBucketOwnershipControlsInput)
}

// GetBucketOwnershipControlsCalls gets all the calls that were made to GetBucketOwnershipControls.
// Check the length with:
//     len(mockeds3Client.GetBucketOwnershipControlsCalls())
func (mock *s3ClientMock) GetBucketOwnershipControlsCalls() []struct {
	GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
} {
	var calls []struct {
		GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
	}
	mock.lockGetBucketOwnershipControls.RLock()
	calls = mock.calls.GetBucketOwnershipControls
	mock.lockGetBucketOwnershipControls.RUnlock()
	return calls
}

// GetBucketOwnershipControlsRequest calls GetBucketOwnershipControlsRequestFunc.
func (mock *s3ClientMock) GetBucketOwnershipControlsRequest(getBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput) (*request.Request, *s3.GetBucketOwnershipControlsOutput) {
	if mock.GetBucketOwnershipControlsRequestFunc == nil {
		panic("s3ClientMock.GetBucketOwnershipControlsRequestFunc: method is nil but s3Client.GetBucketOwnershipControlsRequest was just called")
	}
	callInfo := struct {
		GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
	}{
		GetBucketOwnershipControlsInput: getBucketOwnershipControlsInput,
	}
	mock.lockGetBucketOwnershipControlsRequest.Lock()
	mock.calls.GetBucketOwnershipControlsRequest = append(mock.calls.GetBucketOwnershipControlsRequest, callInfo)
	mock.lockGetBucketOwnershipControlsRequest.Unlock()
	return mock.GetBucketOwnershipControlsRequestFunc(getBucketOwnershipControlsInput)
}

// GetBucketOwnershipControlsRequestCalls gets all the calls that were made to GetBucketOwnershipControlsRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketOwnershipControlsRequestCalls())
func (mock *s3ClientMock) GetBucketOwnershipControlsRequestCalls() []struct {
	GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
} {
	var calls []struct {
		GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
	}
	mock.lockGetBucketOwnershipControlsRequest.RLock()
	calls = mock.calls.GetBucketOwnershipControlsRequest
	mock.lockGetBucketOwnershipControlsRequest.RUnlock()
	return calls
}

// GetBucketOwnershipControlsWithContext calls GetBucketOwnershipControlsWithContextFunc.
func (mock *s3ClientMock) GetBucketOwnershipControlsWithContext(contextMoqParam context.Context, getBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput, options ...request.Option) (*s3.GetBucketOwnershipControlsOutput, error) {
	if mock.GetBucketOwnershipControlsWithContextFunc == nil {
		panic("s3ClientMock.GetBucketOwnershipControlsWithContextFunc: method is nil but s3Client.GetBucketOwnershipControlsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		GetBucketOwnershipControlsInput: getBucketOwnershipControlsInput,
		Options:                         options,
	}
	mock.lockGetBucketOwnershipControlsWithContext.Lock()
	mock.calls.GetBucketOwnershipControlsWithContext = append(mock.calls.GetBucketOwnershipControlsWithContext, callInfo)
	mock.lockGetBucketOwnershipControlsWithContext.Unlock()
	return mock.GetBucketOwnershipControlsWithContextFunc(contextMoqParam, getBucketOwnershipControlsInput, options...)
}

// GetBucketOwnershipControlsWithContextCalls gets all the calls that were made to GetBucketOwnershipControlsWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketOwnershipControlsWithContextCalls())
func (mock *s3ClientMock) GetBucketOwnershipControlsWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		GetBucketOwnershipControlsInput *s3.GetBucketOwnershipControlsInput
		Options                         []request.Option
	}
	mock.lockGetBucketOwnershipControlsWithContext.RLock()
	calls = mock.calls.GetBucketOwnershipControlsWithContext
	mock.lockGetBucketOwnershipControlsWithContext.RUnlock()
	return calls
}

// GetBucketPolicy calls GetBucketPolicyFunc.
func (mock *s3ClientMock) GetBucketPolicy(getBucketPolicyInput *s3.GetBucketPolicyInput) (*s3.GetBucketPolicyOutput, error) {
	if mock.GetBucketPolicyFunc == nil {
		panic("s3ClientMock.GetBucketPolicyFunc: method is nil but s3Client.GetBucketPolicy was just called")
	}
	callInfo := struct {
		GetBucketPolicyInput *s3.GetBucketPolicyInput
	}{
		GetBucketPolicyInput: getBucketPolicyInput,
	}
	mock.lockGetBucketPolicy.Lock()
	mock.calls.GetBucketPolicy = append(mock.calls.GetBucketPolicy, callInfo)
	mock.lockGetBucketPolicy.Unlock()
	return mock.GetBucketPolicyFunc(getBucketPolicyInput)
}

// GetBucketPolicyCalls gets all the calls that were made to GetBucketPolicy.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyCalls())
func (mock *s3ClientMock) GetBucketPolicyCalls() []struct {
	GetBucketPolicyInput *s3.GetBucketPolicyInput
} {
	var calls []struct {
		GetBucketPolicyInput *s3.GetBucketPolicyInput
	}
	mock.lockGetBucketPolicy.RLock()
	calls = mock.calls.GetBucketPolicy
	mock.lockGetBucketPolicy.RUnlock()
	return calls
}

// GetBucketPolicyRequest calls GetBucketPolicyRequestFunc.
func (mock *s3ClientMock) GetBucketPolicyRequest(getBucketPolicyInput *s3.GetBucketPolicyInput) (*request.Request, *s3.GetBucketPolicyOutput) {
	if mock.GetBucketPolicyRequestFunc == nil {
		panic("s3ClientMock.GetBucketPolicyRequestFunc: method is nil but s3Client.GetBucketPolicyRequest was just called")
	}
	callInfo := struct {
		GetBucketPolicyInput *s3.GetBucketPolicyInput
	}{
		GetBucketPolicyInput: getBucketPolicyInput,
	}
	mock.lockGetBucketPolicyRequest.Lock()
	mock.calls.GetBucketPolicyRequest = append(mock.calls.GetBucketPolicyRequest, callInfo)
	mock.lockGetBucketPolicyRequest.Unlock()
	return mock.GetBucketPolicyRequestFunc(getBucketPolicyInput)
}

// GetBucketPolicyRequestCalls gets all the calls that were made to GetBucketPolicyRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyRequestCalls())
func (mock *s3ClientMock) GetBucketPolicyRequestCalls() []struct {
	GetBucketPolicyInput *s3.GetBucketPolicyInput
} {
	var calls []struct {
		GetBucketPolicyInput *s3.GetBucketPolicyInput
	}
	mock.lockGetBucketPolicyRequest.RLock()
	calls = mock.calls.GetBucketPolicyRequest
	mock.lockGetBucketPolicyRequest.RUnlock()
	return calls
}

// GetBucketPolicyStatus calls GetBucketPolicyStatusFunc.
func (mock *s3ClientMock) GetBucketPolicyStatus(getBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput) (*s3.GetBucketPolicyStatusOutput, error) {
	if mock.GetBucketPolicyStatusFunc == nil {
		panic("s3ClientMock.GetBucketPolicyStatusFunc: method is nil but s3Client.GetBucketPolicyStatus was just called")
	}
	callInfo := struct {
		GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
	}{
		GetBucketPolicyStatusInput: getBucketPolicyStatusInput,
	}
	mock.lockGetBucketPolicyStatus.Lock()
	mock.calls.GetBucketPolicyStatus = append(mock.calls.GetBucketPolicyStatus, callInfo)
	mock.lockGetBucketPolicyStatus.Unlock()
	return mock.GetBucketPolicyStatusFunc(getBucketPolicyStatusInput)
}

// GetBucketPolicyStatusCalls gets all the calls that were made to GetBucketPolicyStatus.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyStatusCalls())
func (mock *s3ClientMock) GetBucketPolicyStatusCalls() []struct {
	GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
} {
	var calls []struct {
		GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
	}
	mock.lockGetBucketPolicyStatus.RLock()
	calls = mock.calls.GetBucketPolicyStatus
	mock.lockGetBucketPolicyStatus.RUnlock()
	return calls
}

// GetBucketPolicyStatusRequest calls GetBucketPolicyStatusRequestFunc.
func (mock *s3ClientMock) GetBucketPolicyStatusRequest(getBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput) (*request.Request, *s3.GetBucketPolicyStatusOutput) {
	if mock.GetBucketPolicyStatusRequestFunc == nil {
		panic("s3ClientMock.GetBucketPolicyStatusRequestFunc: method is nil but s3Client.GetBucketPolicyStatusRequest was just called")
	}
	callInfo := struct {
		GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
	}{
		GetBucketPolicyStatusInput: getBucketPolicyStatusInput,
	}
	mock.lockGetBucketPolicyStatusRequest.Lock()
	mock.calls.GetBucketPolicyStatusRequest = append(mock.calls.GetBucketPolicyStatusRequest, callInfo)
	mock.lockGetBucketPolicyStatusRequest.Unlock()
	return mock.GetBucketPolicyStatusRequestFunc(getBucketPolicyStatusInput)
}

// GetBucketPolicyStatusRequestCalls gets all the calls that were made to GetBucketPolicyStatusRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyStatusRequestCalls())
func (mock *s3ClientMock) GetBucketPolicyStatusRequestCalls() []struct {
	GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
} {
	var calls []struct {
		GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
	}
	mock.lockGetBucketPolicyStatusRequest.RLock()
	calls = mock.calls.GetBucketPolicyStatusRequest
	mock.lockGetBucketPolicyStatusRequest.RUnlock()
	return calls
}

// GetBucketPolicyStatusWithContext calls GetBucketPolicyStatusWithContextFunc.
func (mock *s3ClientMock) GetBucketPolicyStatusWithContext(contextMoqParam context.Context, getBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput, options ...request.Option) (*s3.GetBucketPolicyStatusOutput, error) {
	if mock.GetBucketPolicyStatusWithContextFunc == nil {
		panic("s3ClientMock.GetBucketPolicyStatusWithContextFunc: method is nil but s3Client.GetBucketPolicyStatusWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		GetBucketPolicyStatusInput: getBucketPolicyStatusInput,
		Options:                    options,
	}
	mock.lockGetBucketPolicyStatusWithContext.Lock()
	mock.calls.GetBucketPolicyStatusWithContext = append(mock.calls.GetBucketPolicyStatusWithContext, callInfo)
	mock.lockGetBucketPolicyStatusWithContext.Unlock()
	return mock.GetBucketPolicyStatusWithContextFunc(contextMoqParam, getBucketPolicyStatusInput, options...)
}

// GetBucketPolicyStatusWithContextCalls gets all the calls that were made to GetBucketPolicyStatusWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyStatusWithContextCalls())
func (mock *s3ClientMock) GetBucketPolicyStatusWithContextCalls() []struct {
	ContextMoqParam            context.Context
	GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		GetBucketPolicyStatusInput *s3.GetBucketPolicyStatusInput
		Options                    []request.Option
	}
	mock.lockGetBucketPolicyStatusWithContext.RLock()
	calls = mock.calls.GetBucketPolicyStatusWithContext
	mock.lockGetBucketPolicyStatusWithContext.RUnlock()
	return calls
}

// GetBucketPolicyWithContext calls GetBucketPolicyWithContextFunc.
func (mock *s3ClientMock) GetBucketPolicyWithContext(contextMoqParam context.Context, getBucketPolicyInput *s3.GetBucketPolicyInput, options ...request.Option) (*s3.GetBucketPolicyOutput, error) {
	if mock.GetBucketPolicyWithContextFunc == nil {
		panic("s3ClientMock.GetBucketPolicyWithContextFunc: method is nil but s3Client.GetBucketPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		GetBucketPolicyInput *s3.GetBucketPolicyInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		GetBucketPolicyInput: getBucketPolicyInput,
		Options:              options,
	}
	mock.lockGetBucketPolicyWithContext.Lock()
	mock.calls.GetBucketPolicyWithContext = append(mock.calls.GetBucketPolicyWithContext, callInfo)
	mock.lockGetBucketPolicyWithContext.Unlock()
	return mock.GetBucketPolicyWithContextFunc(contextMoqParam, getBucketPolicyInput, options...)
}

// GetBucketPolicyWithContextCalls gets all the calls that were made to GetBucketPolicyWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketPolicyWithContextCalls())
func (mock *s3ClientMock) GetBucketPolicyWithContextCalls() []struct {
	ContextMoqParam      context.Context
	GetBucketPolicyInput *s3.GetBucketPolicyInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		GetBucketPolicyInput *s3.GetBucketPolicyInput
		Options              []request.Option
	}
	mock.lockGetBucketPolicyWithContext.RLock()
	calls = mock.calls.GetBucketPolicyWithContext
	mock.lockGetBucketPolicyWithContext.RUnlock()
	return calls
}

// GetBucketReplication calls GetBucketReplicationFunc.
func (mock *s3ClientMock) GetBucketReplication(getBucketReplicationInput *s3.GetBucketReplicationInput) (*s3.GetBucketReplicationOutput, error) {
	if mock.GetBucketReplicationFunc == nil {
		panic("s3ClientMock.GetBucketReplicationFunc: method is nil but s3Client.GetBucketReplication was just called")
	}
	callInfo := struct {
		GetBucketReplicationInput *s3.GetBucketReplicationInput
	}{
		GetBucketReplicationInput: getBucketReplicationInput,
	}
	mock.lockGetBucketReplication.Lock()
	mock.calls.GetBucketReplication = append(mock.calls.GetBucketReplication, callInfo)
	mock.lockGetBucketReplication.Unlock()
	return mock.GetBucketReplicationFunc(getBucketReplicationInput)
}

// GetBucketReplicationCalls gets all the calls that were made to GetBucketReplication.
// Check the length with:
//     len(mockeds3Client.GetBucketReplicationCalls())
func (mock *s3ClientMock) GetBucketReplicationCalls() []struct {
	GetBucketReplicationInput *s3.GetBucketReplicationInput
} {
	var calls []struct {
		GetBucketReplicationInput *s3.GetBucketReplicationInput
	}
	mock.lockGetBucketReplication.RLock()
	calls = mock.calls.GetBucketReplication
	mock.lockGetBucketReplication.RUnlock()
	return calls
}

// GetBucketReplicationRequest calls GetBucketReplicationRequestFunc.
func (mock *s3ClientMock) GetBucketReplicationRequest(getBucketReplicationInput *s3.GetBucketReplicationInput) (*request.Request, *s3.GetBucketReplicationOutput) {
	if mock.GetBucketReplicationRequestFunc == nil {
		panic("s3ClientMock.GetBucketReplicationRequestFunc: method is nil but s3Client.GetBucketReplicationRequest was just called")
	}
	callInfo := struct {
		GetBucketReplicationInput *s3.GetBucketReplicationInput
	}{
		GetBucketReplicationInput: getBucketReplicationInput,
	}
	mock.lockGetBucketReplicationRequest.Lock()
	mock.calls.GetBucketReplicationRequest = append(mock.calls.GetBucketReplicationRequest, callInfo)
	mock.lockGetBucketReplicationRequest.Unlock()
	return mock.GetBucketReplicationRequestFunc(getBucketReplicationInput)
}

// GetBucketReplicationRequestCalls gets all the calls that were made to GetBucketReplicationRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketReplicationRequestCalls())
func (mock *s3ClientMock) GetBucketReplicationRequestCalls() []struct {
	GetBucketReplicationInput *s3.GetBucketReplicationInput
} {
	var calls []struct {
		GetBucketReplicationInput *s3.GetBucketReplicationInput
	}
	mock.lockGetBucketReplicationRequest.RLock()
	calls = mock.calls.GetBucketReplicationRequest
	mock.lockGetBucketReplicationRequest.RUnlock()
	return calls
}

// GetBucketReplicationWithContext calls GetBucketReplicationWithContextFunc.
func (mock *s3ClientMock) GetBucketReplicationWithContext(contextMoqParam context.Context, getBucketReplicationInput *s3.GetBucketReplicationInput, options ...request.Option) (*s3.GetBucketReplicationOutput, error) {
	if mock.GetBucketReplicationWithContextFunc == nil {
		panic("s3ClientMock.GetBucketReplicationWithContextFunc: method is nil but s3Client.GetBucketReplicationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		GetBucketReplicationInput *s3.GetBucketReplicationInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		GetBucketReplicationInput: getBucketReplicationInput,
		Options:                   options,
	}
	mock.lockGetBucketReplicationWithContext.Lock()
	mock.calls.GetBucketReplicationWithContext = append(mock.calls.GetBucketReplicationWithContext, callInfo)
	mock.lockGetBucketReplicationWithContext.Unlock()
	return mock.GetBucketReplicationWithContextFunc(contextMoqParam, getBucketReplicationInput, options...)
}

// GetBucketReplicationWithContextCalls gets all the calls that were made to GetBucketReplicationWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketReplicationWithContextCalls())
func (mock *s3ClientMock) GetBucketReplicationWithContextCalls() []struct {
	ContextMoqParam           context.Context
	GetBucketReplicationInput *s3.GetBucketReplicationInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		GetBucketReplicationInput *s3.GetBucketReplicationInput
		Options                   []request.Option
	}
	mock.lockGetBucketReplicationWithContext.RLock()
	calls = mock.calls.GetBucketReplicationWithContext
	mock.lockGetBucketReplicationWithContext.RUnlock()
	return calls
}

// GetBucketRequestPayment calls GetBucketRequestPaymentFunc.
func (mock *s3ClientMock) GetBucketRequestPayment(getBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput) (*s3.GetBucketRequestPaymentOutput, error) {
	if mock.GetBucketRequestPaymentFunc == nil {
		panic("s3ClientMock.GetBucketRequestPaymentFunc: method is nil but s3Client.GetBucketRequestPayment was just called")
	}
	callInfo := struct {
		GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
	}{
		GetBucketRequestPaymentInput: getBucketRequestPaymentInput,
	}
	mock.lockGetBucketRequestPayment.Lock()
	mock.calls.GetBucketRequestPayment = append(mock.calls.GetBucketRequestPayment, callInfo)
	mock.lockGetBucketRequestPayment.Unlock()
	return mock.GetBucketRequestPaymentFunc(getBucketRequestPaymentInput)
}

// GetBucketRequestPaymentCalls gets all the calls that were made to GetBucketRequestPayment.
// Check the length with:
//     len(mockeds3Client.GetBucketRequestPaymentCalls())
func (mock *s3ClientMock) GetBucketRequestPaymentCalls() []struct {
	GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
} {
	var calls []struct {
		GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
	}
	mock.lockGetBucketRequestPayment.RLock()
	calls = mock.calls.GetBucketRequestPayment
	mock.lockGetBucketRequestPayment.RUnlock()
	return calls
}

// GetBucketRequestPaymentRequest calls GetBucketRequestPaymentRequestFunc.
func (mock *s3ClientMock) GetBucketRequestPaymentRequest(getBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput) (*request.Request, *s3.GetBucketRequestPaymentOutput) {
	if mock.GetBucketRequestPaymentRequestFunc == nil {
		panic("s3ClientMock.GetBucketRequestPaymentRequestFunc: method is nil but s3Client.GetBucketRequestPaymentRequest was just called")
	}
	callInfo := struct {
		GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
	}{
		GetBucketRequestPaymentInput: getBucketRequestPaymentInput,
	}
	mock.lockGetBucketRequestPaymentRequest.Lock()
	mock.calls.GetBucketRequestPaymentRequest = append(mock.calls.GetBucketRequestPaymentRequest, callInfo)
	mock.lockGetBucketRequestPaymentRequest.Unlock()
	return mock.GetBucketRequestPaymentRequestFunc(getBucketRequestPaymentInput)
}

// GetBucketRequestPaymentRequestCalls gets all the calls that were made to GetBucketRequestPaymentRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketRequestPaymentRequestCalls())
func (mock *s3ClientMock) GetBucketRequestPaymentRequestCalls() []struct {
	GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
} {
	var calls []struct {
		GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
	}
	mock.lockGetBucketRequestPaymentRequest.RLock()
	calls = mock.calls.GetBucketRequestPaymentRequest
	mock.lockGetBucketRequestPaymentRequest.RUnlock()
	return calls
}

// GetBucketRequestPaymentWithContext calls GetBucketRequestPaymentWithContextFunc.
func (mock *s3ClientMock) GetBucketRequestPaymentWithContext(contextMoqParam context.Context, getBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput, options ...request.Option) (*s3.GetBucketRequestPaymentOutput, error) {
	if mock.GetBucketRequestPaymentWithContextFunc == nil {
		panic("s3ClientMock.GetBucketRequestPaymentWithContextFunc: method is nil but s3Client.GetBucketRequestPaymentWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		GetBucketRequestPaymentInput: getBucketRequestPaymentInput,
		Options:                      options,
	}
	mock.lockGetBucketRequestPaymentWithContext.Lock()
	mock.calls.GetBucketRequestPaymentWithContext = append(mock.calls.GetBucketRequestPaymentWithContext, callInfo)
	mock.lockGetBucketRequestPaymentWithContext.Unlock()
	return mock.GetBucketRequestPaymentWithContextFunc(contextMoqParam, getBucketRequestPaymentInput, options...)
}

// GetBucketRequestPaymentWithContextCalls gets all the calls that were made to GetBucketRequestPaymentWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketRequestPaymentWithContextCalls())
func (mock *s3ClientMock) GetBucketRequestPaymentWithContextCalls() []struct {
	ContextMoqParam              context.Context
	GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		GetBucketRequestPaymentInput *s3.GetBucketRequestPaymentInput
		Options                      []request.Option
	}
	mock.lockGetBucketRequestPaymentWithContext.RLock()
	calls = mock.calls.GetBucketRequestPaymentWithContext
	mock.lockGetBucketRequestPaymentWithContext.RUnlock()
	return calls
}

// GetBucketTagging calls GetBucketTaggingFunc.
func (mock *s3ClientMock) GetBucketTagging(getBucketTaggingInput *s3.GetBucketTaggingInput) (*s3.GetBucketTaggingOutput, error) {
	if mock.GetBucketTaggingFunc == nil {
		panic("s3ClientMock.GetBucketTaggingFunc: method is nil but s3Client.GetBucketTagging was just called")
	}
	callInfo := struct {
		GetBucketTaggingInput *s3.GetBucketTaggingInput
	}{
		GetBucketTaggingInput: getBucketTaggingInput,
	}
	mock.lockGetBucketTagging.Lock()
	mock.calls.GetBucketTagging = append(mock.calls.GetBucketTagging, callInfo)
	mock.lockGetBucketTagging.Unlock()
	return mock.GetBucketTaggingFunc(getBucketTaggingInput)
}

// GetBucketTaggingCalls gets all the calls that were made to GetBucketTagging.
// Check the length with:
//     len(mockeds3Client.GetBucketTaggingCalls())
func (mock *s3ClientMock) GetBucketTaggingCalls() []struct {
	GetBucketTaggingInput *s3.GetBucketTaggingInput
} {
	var calls []struct {
		GetBucketTaggingInput *s3.GetBucketTaggingInput
	}
	mock.lockGetBucketTagging.RLock()
	calls = mock.calls.GetBucketTagging
	mock.lockGetBucketTagging.RUnlock()
	return calls
}

// GetBucketTaggingRequest calls GetBucketTaggingRequestFunc.
func (mock *s3ClientMock) GetBucketTaggingRequest(getBucketTaggingInput *s3.GetBucketTaggingInput) (*request.Request, *s3.GetBucketTaggingOutput) {
	if mock.GetBucketTaggingRequestFunc == nil {
		panic("s3ClientMock.GetBucketTaggingRequestFunc: method is nil but s3Client.GetBucketTaggingRequest was just called")
	}
	callInfo := struct {
		GetBucketTaggingInput *s3.GetBucketTaggingInput
	}{
		GetBucketTaggingInput: getBucketTaggingInput,
	}
	mock.lockGetBucketTaggingRequest.Lock()
	mock.calls.GetBucketTaggingRequest = append(mock.calls.GetBucketTaggingRequest, callInfo)
	mock.lockGetBucketTaggingRequest.Unlock()
	return mock.GetBucketTaggingRequestFunc(getBucketTaggingInput)
}

// GetBucketTaggingRequestCalls gets all the calls that were made to GetBucketTaggingRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketTaggingRequestCalls())
func (mock *s3ClientMock) GetBucketTaggingRequestCalls() []struct {
	GetBucketTaggingInput *s3.GetBucketTaggingInput
} {
	var calls []struct {
		GetBucketTaggingInput *s3.GetBucketTaggingInput
	}
	mock.lockGetBucketTaggingRequest.RLock()
	calls = mock.calls.GetBucketTaggingRequest
	mock.lockGetBucketTaggingRequest.RUnlock()
	return calls
}

// GetBucketTaggingWithContext calls GetBucketTaggingWithContextFunc.
func (mock *s3ClientMock) GetBucketTaggingWithContext(contextMoqParam context.Context, getBucketTaggingInput *s3.GetBucketTaggingInput, options ...request.Option) (*s3.GetBucketTaggingOutput, error) {
	if mock.GetBucketTaggingWithContextFunc == nil {
		panic("s3ClientMock.GetBucketTaggingWithContextFunc: method is nil but s3Client.GetBucketTaggingWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetBucketTaggingInput *s3.GetBucketTaggingInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		GetBucketTaggingInput: getBucketTaggingInput,
		Options:               options,
	}
	mock.lockGetBucketTaggingWithContext.Lock()
	mock.calls.GetBucketTaggingWithContext = append(mock.calls.GetBucketTaggingWithContext, callInfo)
	mock.lockGetBucketTaggingWithContext.Unlock()
	return mock.GetBucketTaggingWithContextFunc(contextMoqParam, getBucketTaggingInput, options...)
}

// GetBucketTaggingWithContextCalls gets all the calls that were made to GetBucketTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketTaggingWithContextCalls())
func (mock *s3ClientMock) GetBucketTaggingWithContextCalls() []struct {
	ContextMoqParam       context.Context
	GetBucketTaggingInput *s3.GetBucketTaggingInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetBucketTaggingInput *s3.GetBucketTaggingInput
		Options               []request.Option
	}
	mock.lockGetBucketTaggingWithContext.RLock()
	calls = mock.calls.GetBucketTaggingWithContext
	mock.lockGetBucketTaggingWithContext.RUnlock()
	return calls
}

// GetBucketVersioning calls GetBucketVersioningFunc.
func (mock *s3ClientMock) GetBucketVersioning(getBucketVersioningInput *s3.GetBucketVersioningInput) (*s3.GetBucketVersioningOutput, error) {
	if mock.GetBucketVersioningFunc == nil {
		panic("s3ClientMock.GetBucketVersioningFunc: method is nil but s3Client.GetBucketVersioning was just called")
	}
	callInfo := struct {
		GetBucketVersioningInput *s3.GetBucketVersioningInput
	}{
		GetBucketVersioningInput: getBucketVersioningInput,
	}
	mock.lockGetBucketVersioning.Lock()
	mock.calls.GetBucketVersioning = append(mock.calls.GetBucketVersioning, callInfo)
	mock.lockGetBucketVersioning.Unlock()
	return mock.GetBucketVersioningFunc(getBucketVersioningInput)
}

// GetBucketVersioningCalls gets all the calls that were made to GetBucketVersioning.
// Check the length with:
//     len(mockeds3Client.GetBucketVersioningCalls())
func (mock *s3ClientMock) GetBucketVersioningCalls() []struct {
	GetBucketVersioningInput *s3.GetBucketVersioningInput
} {
	var calls []struct {
		GetBucketVersioningInput *s3.GetBucketVersioningInput
	}
	mock.lockGetBucketVersioning.RLock()
	calls = mock.calls.GetBucketVersioning
	mock.lockGetBucketVersioning.RUnlock()
	return calls
}

// GetBucketVersioningRequest calls GetBucketVersioningRequestFunc.
func (mock *s3ClientMock) GetBucketVersioningRequest(getBucketVersioningInput *s3.GetBucketVersioningInput) (*request.Request, *s3.GetBucketVersioningOutput) {
	if mock.GetBucketVersioningRequestFunc == nil {
		panic("s3ClientMock.GetBucketVersioningRequestFunc: method is nil but s3Client.GetBucketVersioningRequest was just called")
	}
	callInfo := struct {
		GetBucketVersioningInput *s3.GetBucketVersioningInput
	}{
		GetBucketVersioningInput: getBucketVersioningInput,
	}
	mock.lockGetBucketVersioningRequest.Lock()
	mock.calls.GetBucketVersioningRequest = append(mock.calls.GetBucketVersioningRequest, callInfo)
	mock.lockGetBucketVersioningRequest.Unlock()
	return mock.GetBucketVersioningRequestFunc(getBucketVersioningInput)
}

// GetBucketVersioningRequestCalls gets all the calls that were made to GetBucketVersioningRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketVersioningRequestCalls())
func (mock *s3ClientMock) GetBucketVersioningRequestCalls() []struct {
	GetBucketVersioningInput *s3.GetBucketVersioningInput
} {
	var calls []struct {
		GetBucketVersioningInput *s3.GetBucketVersioningInput
	}
	mock.lockGetBucketVersioningRequest.RLock()
	calls = mock.calls.GetBucketVersioningRequest
	mock.lockGetBucketVersioningRequest.RUnlock()
	return calls
}

// GetBucketVersioningWithContext calls GetBucketVersioningWithContextFunc.
func (mock *s3ClientMock) GetBucketVersioningWithContext(contextMoqParam context.Context, getBucketVersioningInput *s3.GetBucketVersioningInput, options ...request.Option) (*s3.GetBucketVersioningOutput, error) {
	if mock.GetBucketVersioningWithContextFunc == nil {
		panic("s3ClientMock.GetBucketVersioningWithContextFunc: method is nil but s3Client.GetBucketVersioningWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		GetBucketVersioningInput *s3.GetBucketVersioningInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		GetBucketVersioningInput: getBucketVersioningInput,
		Options:                  options,
	}
	mock.lockGetBucketVersioningWithContext.Lock()
	mock.calls.GetBucketVersioningWithContext = append(mock.calls.GetBucketVersioningWithContext, callInfo)
	mock.lockGetBucketVersioningWithContext.Unlock()
	return mock.GetBucketVersioningWithContextFunc(contextMoqParam, getBucketVersioningInput, options...)
}

// GetBucketVersioningWithContextCalls gets all the calls that were made to GetBucketVersioningWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketVersioningWithContextCalls())
func (mock *s3ClientMock) GetBucketVersioningWithContextCalls() []struct {
	ContextMoqParam          context.Context
	GetBucketVersioningInput *s3.GetBucketVersioningInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		GetBucketVersioningInput *s3.GetBucketVersioningInput
		Options                  []request.Option
	}
	mock.lockGetBucketVersioningWithContext.RLock()
	calls = mock.calls.GetBucketVersioningWithContext
	mock.lockGetBucketVersioningWithContext.RUnlock()
	return calls
}

// GetBucketWebsite calls GetBucketWebsiteFunc.
func (mock *s3ClientMock) GetBucketWebsite(getBucketWebsiteInput *s3.GetBucketWebsiteInput) (*s3.GetBucketWebsiteOutput, error) {
	if mock.GetBucketWebsiteFunc == nil {
		panic("s3ClientMock.GetBucketWebsiteFunc: method is nil but s3Client.GetBucketWebsite was just called")
	}
	callInfo := struct {
		GetBucketWebsiteInput *s3.GetBucketWebsiteInput
	}{
		GetBucketWebsiteInput: getBucketWebsiteInput,
	}
	mock.lockGetBucketWebsite.Lock()
	mock.calls.GetBucketWebsite = append(mock.calls.GetBucketWebsite, callInfo)
	mock.lockGetBucketWebsite.Unlock()
	return mock.GetBucketWebsiteFunc(getBucketWebsiteInput)
}

// GetBucketWebsiteCalls gets all the calls that were made to GetBucketWebsite.
// Check the length with:
//     len(mockeds3Client.GetBucketWebsiteCalls())
func (mock *s3ClientMock) GetBucketWebsiteCalls() []struct {
	GetBucketWebsiteInput *s3.GetBucketWebsiteInput
} {
	var calls []struct {
		GetBucketWebsiteInput *s3.GetBucketWebsiteInput
	}
	mock.lockGetBucketWebsite.RLock()
	calls = mock.calls.GetBucketWebsite
	mock.lockGetBucketWebsite.RUnlock()
	return calls
}

// GetBucketWebsiteRequest calls GetBucketWebsiteRequestFunc.
func (mock *s3ClientMock) GetBucketWebsiteRequest(getBucketWebsiteInput *s3.GetBucketWebsiteInput) (*request.Request, *s3.GetBucketWebsiteOutput) {
	if mock.GetBucketWebsiteRequestFunc == nil {
		panic("s3ClientMock.GetBucketWebsiteRequestFunc: method is nil but s3Client.GetBucketWebsiteRequest was just called")
	}
	callInfo := struct {
		GetBucketWebsiteInput *s3.GetBucketWebsiteInput
	}{
		GetBucketWebsiteInput: getBucketWebsiteInput,
	}
	mock.lockGetBucketWebsiteRequest.Lock()
	mock.calls.GetBucketWebsiteRequest = append(mock.calls.GetBucketWebsiteRequest, callInfo)
	mock.lockGetBucketWebsiteRequest.Unlock()
	return mock.GetBucketWebsiteRequestFunc(getBucketWebsiteInput)
}

// GetBucketWebsiteRequestCalls gets all the calls that were made to GetBucketWebsiteRequest.
// Check the length with:
//     len(mockeds3Client.GetBucketWebsiteRequestCalls())
func (mock *s3ClientMock) GetBucketWebsiteRequestCalls() []struct {
	GetBucketWebsiteInput *s3.GetBucketWebsiteInput
} {
	var calls []struct {
		GetBucketWebsiteInput *s3.GetBucketWebsiteInput
	}
	mock.lockGetBucketWebsiteRequest.RLock()
	calls = mock.calls.GetBucketWebsiteRequest
	mock.lockGetBucketWebsiteRequest.RUnlock()
	return calls
}

// GetBucketWebsiteWithContext calls GetBucketWebsiteWithContextFunc.
func (mock *s3ClientMock) GetBucketWebsiteWithContext(contextMoqParam context.Context, getBucketWebsiteInput *s3.GetBucketWebsiteInput, options ...request.Option) (*s3.GetBucketWebsiteOutput, error) {
	if mock.GetBucketWebsiteWithContextFunc == nil {
		panic("s3ClientMock.GetBucketWebsiteWithContextFunc: method is nil but s3Client.GetBucketWebsiteWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetBucketWebsiteInput *s3.GetBucketWebsiteInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		GetBucketWebsiteInput: getBucketWebsiteInput,
		Options:               options,
	}
	mock.lockGetBucketWebsiteWithContext.Lock()
	mock.calls.GetBucketWebsiteWithContext = append(mock.calls.GetBucketWebsiteWithContext, callInfo)
	mock.lockGetBucketWebsiteWithContext.Unlock()
	return mock.GetBucketWebsiteWithContextFunc(contextMoqParam, getBucketWebsiteInput, options...)
}

// GetBucketWebsiteWithContextCalls gets all the calls that were made to GetBucketWebsiteWithContext.
// Check the length with:
//     len(mockeds3Client.GetBucketWebsiteWithContextCalls())
func (mock *s3ClientMock) GetBucketWebsiteWithContextCalls() []struct {
	ContextMoqParam       context.Context
	GetBucketWebsiteInput *s3.GetBucketWebsiteInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetBucketWebsiteInput *s3.GetBucketWebsiteInput
		Options               []request.Option
	}
	mock.lockGetBucketWebsiteWithContext.RLock()
	calls = mock.calls.GetBucketWebsiteWithContext
	mock.lockGetBucketWebsiteWithContext.RUnlock()
	return calls
}

// GetObject calls GetObjectFunc.
func (mock *s3ClientMock) GetObject(getObjectInput *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	if mock.GetObjectFunc == nil {
		panic("s3ClientMock.GetObjectFunc: method is nil but s3Client.GetObject was just called")
	}
	callInfo := struct {
		GetObjectInput *s3.GetObjectInput
	}{
		GetObjectInput: getObjectInput,
	}
	mock.lockGetObject.Lock()
	mock.calls.GetObject = append(mock.calls.GetObject, callInfo)
	mock.lockGetObject.Unlock()
	return mock.GetObjectFunc(getObjectInput)
}

// GetObjectCalls gets all the calls that were made to GetObject.
// Check the length with:
//     len(mockeds3Client.GetObjectCalls())
func (mock *s3ClientMock) GetObjectCalls() []struct {
	GetObjectInput *s3.GetObjectInput
} {
	var calls []struct {
		GetObjectInput *s3.GetObjectInput
	}
	mock.lockGetObject.RLock()
	calls = mock.calls.GetObject
	mock.lockGetObject.RUnlock()
	return calls
}

// GetObjectAcl calls GetObjectAclFunc.
func (mock *s3ClientMock) GetObjectAcl(getObjectAclInput *s3.GetObjectAclInput) (*s3.GetObjectAclOutput, error) {
	if mock.GetObjectAclFunc == nil {
		panic("s3ClientMock.GetObjectAclFunc: method is nil but s3Client.GetObjectAcl was just called")
	}
	callInfo := struct {
		GetObjectAclInput *s3.GetObjectAclInput
	}{
		GetObjectAclInput: getObjectAclInput,
	}
	mock.lockGetObjectAcl.Lock()
	mock.calls.GetObjectAcl = append(mock.calls.GetObjectAcl, callInfo)
	mock.lockGetObjectAcl.Unlock()
	return mock.GetObjectAclFunc(getObjectAclInput)
}

// GetObjectAclCalls gets all the calls that were made to GetObjectAcl.
// Check the length with:
//     len(mockeds3Client.GetObjectAclCalls())
func (mock *s3ClientMock) GetObjectAclCalls() []struct {
	GetObjectAclInput *s3.GetObjectAclInput
} {
	var calls []struct {
		GetObjectAclInput *s3.GetObjectAclInput
	}
	mock.lockGetObjectAcl.RLock()
	calls = mock.calls.GetObjectAcl
	mock.lockGetObjectAcl.RUnlock()
	return calls
}

// GetObjectAclRequest calls GetObjectAclRequestFunc.
func (mock *s3ClientMock) GetObjectAclRequest(getObjectAclInput *s3.GetObjectAclInput) (*request.Request, *s3.GetObjectAclOutput) {
	if mock.GetObjectAclRequestFunc == nil {
		panic("s3ClientMock.GetObjectAclRequestFunc: method is nil but s3Client.GetObjectAclRequest was just called")
	}
	callInfo := struct {
		GetObjectAclInput *s3.GetObjectAclInput
	}{
		GetObjectAclInput: getObjectAclInput,
	}
	mock.lockGetObjectAclRequest.Lock()
	mock.calls.GetObjectAclRequest = append(mock.calls.GetObjectAclRequest, callInfo)
	mock.lockGetObjectAclRequest.Unlock()
	return mock.GetObjectAclRequestFunc(getObjectAclInput)
}

// GetObjectAclRequestCalls gets all the calls that were made to GetObjectAclRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectAclRequestCalls())
func (mock *s3ClientMock) GetObjectAclRequestCalls() []struct {
	GetObjectAclInput *s3.GetObjectAclInput
} {
	var calls []struct {
		GetObjectAclInput *s3.GetObjectAclInput
	}
	mock.lockGetObjectAclRequest.RLock()
	calls = mock.calls.GetObjectAclRequest
	mock.lockGetObjectAclRequest.RUnlock()
	return calls
}

// GetObjectAclWithContext calls GetObjectAclWithContextFunc.
func (mock *s3ClientMock) GetObjectAclWithContext(contextMoqParam context.Context, getObjectAclInput *s3.GetObjectAclInput, options ...request.Option) (*s3.GetObjectAclOutput, error) {
	if mock.GetObjectAclWithContextFunc == nil {
		panic("s3ClientMock.GetObjectAclWithContextFunc: method is nil but s3Client.GetObjectAclWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		GetObjectAclInput *s3.GetObjectAclInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		GetObjectAclInput: getObjectAclInput,
		Options:           options,
	}
	mock.lockGetObjectAclWithContext.Lock()
	mock.calls.GetObjectAclWithContext = append(mock.calls.GetObjectAclWithContext, callInfo)
	mock.lockGetObjectAclWithContext.Unlock()
	return mock.GetObjectAclWithContextFunc(contextMoqParam, getObjectAclInput, options...)
}

// GetObjectAclWithContextCalls gets all the calls that were made to GetObjectAclWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectAclWithContextCalls())
func (mock *s3ClientMock) GetObjectAclWithContextCalls() []struct {
	ContextMoqParam   context.Context
	GetObjectAclInput *s3.GetObjectAclInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		GetObjectAclInput *s3.GetObjectAclInput
		Options           []request.Option
	}
	mock.lockGetObjectAclWithContext.RLock()
	calls = mock.calls.GetObjectAclWithContext
	mock.lockGetObjectAclWithContext.RUnlock()
	return calls
}

// GetObjectAttributes calls GetObjectAttributesFunc.
func (mock *s3ClientMock) GetObjectAttributes(getObjectAttributesInput *s3.GetObjectAttributesInput) (*s3.GetObjectAttributesOutput, error) {
	if mock.GetObjectAttributesFunc == nil {
		panic("s3ClientMock.GetObjectAttributesFunc: method is nil but s3Client.GetObjectAttributes was just called")
	}
	callInfo := struct {
		GetObjectAttributesInput *s3.GetObjectAttributesInput
	}{
		GetObjectAttributesInput: getObjectAttributesInput,
	}
	mock.lockGetObjectAttributes.Lock()
	mock.calls.GetObjectAttributes = append(mock.calls.GetObjectAttributes, callInfo)
	mock.lockGetObjectAttributes.Unlock()
	return mock.GetObjectAttributesFunc(getObjectAttributesInput)
}

// GetObjectAttributesCalls gets all the calls that were made to GetObjectAttributes.
// Check the length with:
//     len(mockeds3Client.GetObjectAttributesCalls())
func (mock *s3ClientMock) GetObjectAttributesCalls() []struct {
	GetObjectAttributesInput *s3.GetObjectAttributesInput
} {
	var calls []struct {
		GetObjectAttributesInput *s3.GetObjectAttributesInput
	}
	mock.lockGetObjectAttributes.RLock()
	calls = mock.calls.GetObjectAttributes
	mock.lockGetObjectAttributes.RUnlock()
	return calls
}

// GetObjectAttributesRequest calls GetObjectAttributesRequestFunc.
func (mock *s3ClientMock) GetObjectAttributesRequest(getObjectAttributesInput *s3.GetObjectAttributesInput) (*request.Request, *s3.GetObjectAttributesOutput) {
	if mock.GetObjectAttributesRequestFunc == nil {
		panic("s3ClientMock.GetObjectAttributesRequestFunc: method is nil but s3Client.GetObjectAttributesRequest was just called")
	}
	callInfo := struct {
		GetObjectAttributesInput *s3.GetObjectAttributesInput
	}{
		GetObjectAttributesInput: getObjectAttributesInput,
	}
	mock.lockGetObjectAttributesRequest.Lock()
	mock.calls.GetObjectAttributesRequest = append(mock.calls.GetObjectAttributesRequest, callInfo)
	mock.lockGetObjectAttributesRequest.Unlock()
	return mock.GetObjectAttributesRequestFunc(getObjectAttributesInput)
}

// GetObjectAttributesRequestCalls gets all the calls that were made to GetObjectAttributesRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectAttributesRequestCalls())
func (mock *s3ClientMock) GetObjectAttributesRequestCalls() []struct {
	GetObjectAttributesInput *s3.GetObjectAttributesInput
} {
	var calls []struct {
		GetObjectAttributesInput *s3.GetObjectAttributesInput
	}
	mock.lockGetObjectAttributesRequest.RLock()
	calls = mock.calls.GetObjectAttributesRequest
	mock.lockGetObjectAttributesRequest.RUnlock()
	return calls
}

// GetObjectAttributesWithContext calls GetObjectAttributesWithContextFunc.
func (mock *s3ClientMock) GetObjectAttributesWithContext(contextMoqParam context.Context, getObjectAttributesInput *s3.GetObjectAttributesInput, options ...request.Option) (*s3.GetObjectAttributesOutput, error) {
	if mock.GetObjectAttributesWithContextFunc == nil {
		panic("s3ClientMock.GetObjectAttributesWithContextFunc: method is nil but s3Client.GetObjectAttributesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		GetObjectAttributesInput *s3.GetObjectAttributesInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		GetObjectAttributesInput: getObjectAttributesInput,
		Options:                  options,
	}
	mock.lockGetObjectAttributesWithContext.Lock()
	mock.calls.GetObjectAttributesWithContext = append(mock.calls.GetObjectAttributesWithContext, callInfo)
	mock.lockGetObjectAttributesWithContext.Unlock()
	return mock.GetObjectAttributesWithContextFunc(contextMoqParam, getObjectAttributesInput, options...)
}

// GetObjectAttributesWithContextCalls gets all the calls that were made to GetObjectAttributesWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectAttributesWithContextCalls())
func (mock *s3ClientMock) GetObjectAttributesWithContextCalls() []struct {
	ContextMoqParam          context.Context
	GetObjectAttributesInput *s3.GetObjectAttributesInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		GetObjectAttributesInput *s3.GetObjectAttributesInput
		Options                  []request.Option
	}
	mock.lockGetObjectAttributesWithContext.RLock()
	calls = mock.calls.GetObjectAttributesWithContext
	mock.lockGetObjectAttributesWithContext.RUnlock()
	return calls
}

// GetObjectLegalHold calls GetObjectLegalHoldFunc.
func (mock *s3ClientMock) GetObjectLegalHold(getObjectLegalHoldInput *s3.GetObjectLegalHoldInput) (*s3.GetObjectLegalHoldOutput, error) {
	if mock.GetObjectLegalHoldFunc == nil {
		panic("s3ClientMock.GetObjectLegalHoldFunc: method is nil but s3Client.GetObjectLegalHold was just called")
	}
	callInfo := struct {
		GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
	}{
		GetObjectLegalHoldInput: getObjectLegalHoldInput,
	}
	mock.lockGetObjectLegalHold.Lock()
	mock.calls.GetObjectLegalHold = append(mock.calls.GetObjectLegalHold, callInfo)
	mock.lockGetObjectLegalHold.Unlock()
	return mock.GetObjectLegalHoldFunc(getObjectLegalHoldInput)
}

// GetObjectLegalHoldCalls gets all the calls that were made to GetObjectLegalHold.
// Check the length with:
//     len(mockeds3Client.GetObjectLegalHoldCalls())
func (mock *s3ClientMock) GetObjectLegalHoldCalls() []struct {
	GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
} {
	var calls []struct {
		GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
	}
	mock.lockGetObjectLegalHold.RLock()
	calls = mock.calls.GetObjectLegalHold
	mock.lockGetObjectLegalHold.RUnlock()
	return calls
}

// GetObjectLegalHoldRequest calls GetObjectLegalHoldRequestFunc.
func (mock *s3ClientMock) GetObjectLegalHoldRequest(getObjectLegalHoldInput *s3.GetObjectLegalHoldInput) (*request.Request, *s3.GetObjectLegalHoldOutput) {
	if mock.GetObjectLegalHoldRequestFunc == nil {
		panic("s3ClientMock.GetObjectLegalHoldRequestFunc: method is nil but s3Client.GetObjectLegalHoldRequest was just called")
	}
	callInfo := struct {
		GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
	}{
		GetObjectLegalHoldInput: getObjectLegalHoldInput,
	}
	mock.lockGetObjectLegalHoldRequest.Lock()
	mock.calls.GetObjectLegalHoldRequest = append(mock.calls.GetObjectLegalHoldRequest, callInfo)
	mock.lockGetObjectLegalHoldRequest.Unlock()
	return mock.GetObjectLegalHoldRequestFunc(getObjectLegalHoldInput)
}

// GetObjectLegalHoldRequestCalls gets all the calls that were made to GetObjectLegalHoldRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectLegalHoldRequestCalls())
func (mock *s3ClientMock) GetObjectLegalHoldRequestCalls() []struct {
	GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
} {
	var calls []struct {
		GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
	}
	mock.lockGetObjectLegalHoldRequest.RLock()
	calls = mock.calls.GetObjectLegalHoldRequest
	mock.lockGetObjectLegalHoldRequest.RUnlock()
	return calls
}

// GetObjectLegalHoldWithContext calls GetObjectLegalHoldWithContextFunc.
func (mock *s3ClientMock) GetObjectLegalHoldWithContext(contextMoqParam context.Context, getObjectLegalHoldInput *s3.GetObjectLegalHoldInput, options ...request.Option) (*s3.GetObjectLegalHoldOutput, error) {
	if mock.GetObjectLegalHoldWithContextFunc == nil {
		panic("s3ClientMock.GetObjectLegalHoldWithContextFunc: method is nil but s3Client.GetObjectLegalHoldWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		GetObjectLegalHoldInput: getObjectLegalHoldInput,
		Options:                 options,
	}
	mock.lockGetObjectLegalHoldWithContext.Lock()
	mock.calls.GetObjectLegalHoldWithContext = append(mock.calls.GetObjectLegalHoldWithContext, callInfo)
	mock.lockGetObjectLegalHoldWithContext.Unlock()
	return mock.GetObjectLegalHoldWithContextFunc(contextMoqParam, getObjectLegalHoldInput, options...)
}

// GetObjectLegalHoldWithContextCalls gets all the calls that were made to GetObjectLegalHoldWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectLegalHoldWithContextCalls())
func (mock *s3ClientMock) GetObjectLegalHoldWithContextCalls() []struct {
	ContextMoqParam         context.Context
	GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		GetObjectLegalHoldInput *s3.GetObjectLegalHoldInput
		Options                 []request.Option
	}
	mock.lockGetObjectLegalHoldWithContext.RLock()
	calls = mock.calls.GetObjectLegalHoldWithContext
	mock.lockGetObjectLegalHoldWithContext.RUnlock()
	return calls
}

// GetObjectLockConfiguration calls GetObjectLockConfigurationFunc.
func (mock *s3ClientMock) GetObjectLockConfiguration(getObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput) (*s3.GetObjectLockConfigurationOutput, error) {
	if mock.GetObjectLockConfigurationFunc == nil {
		panic("s3ClientMock.GetObjectLockConfigurationFunc: method is nil but s3Client.GetObjectLockConfiguration was just called")
	}
	callInfo := struct {
		GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
	}{
		GetObjectLockConfigurationInput: getObjectLockConfigurationInput,
	}
	mock.lockGetObjectLockConfiguration.Lock()
	mock.calls.GetObjectLockConfiguration = append(mock.calls.GetObjectLockConfiguration, callInfo)
	mock.lockGetObjectLockConfiguration.Unlock()
	return mock.GetObjectLockConfigurationFunc(getObjectLockConfigurationInput)
}

// GetObjectLockConfigurationCalls gets all the calls that were made to GetObjectLockConfiguration.
// Check the length with:
//     len(mockeds3Client.GetObjectLockConfigurationCalls())
func (mock *s3ClientMock) GetObjectLockConfigurationCalls() []struct {
	GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
} {
	var calls []struct {
		GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
	}
	mock.lockGetObjectLockConfiguration.RLock()
	calls = mock.calls.GetObjectLockConfiguration
	mock.lockGetObjectLockConfiguration.RUnlock()
	return calls
}

// GetObjectLockConfigurationRequest calls GetObjectLockConfigurationRequestFunc.
func (mock *s3ClientMock) GetObjectLockConfigurationRequest(getObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput) (*request.Request, *s3.GetObjectLockConfigurationOutput) {
	if mock.GetObjectLockConfigurationRequestFunc == nil {
		panic("s3ClientMock.GetObjectLockConfigurationRequestFunc: method is nil but s3Client.GetObjectLockConfigurationRequest was just called")
	}
	callInfo := struct {
		GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
	}{
		GetObjectLockConfigurationInput: getObjectLockConfigurationInput,
	}
	mock.lockGetObjectLockConfigurationRequest.Lock()
	mock.calls.GetObjectLockConfigurationRequest = append(mock.calls.GetObjectLockConfigurationRequest, callInfo)
	mock.lockGetObjectLockConfigurationRequest.Unlock()
	return mock.GetObjectLockConfigurationRequestFunc(getObjectLockConfigurationInput)
}

// GetObjectLockConfigurationRequestCalls gets all the calls that were made to GetObjectLockConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectLockConfigurationRequestCalls())
func (mock *s3ClientMock) GetObjectLockConfigurationRequestCalls() []struct {
	GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
} {
	var calls []struct {
		GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
	}
	mock.lockGetObjectLockConfigurationRequest.RLock()
	calls = mock.calls.GetObjectLockConfigurationRequest
	mock.lockGetObjectLockConfigurationRequest.RUnlock()
	return calls
}

// GetObjectLockConfigurationWithContext calls GetObjectLockConfigurationWithContextFunc.
func (mock *s3ClientMock) GetObjectLockConfigurationWithContext(contextMoqParam context.Context, getObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput, options ...request.Option) (*s3.GetObjectLockConfigurationOutput, error) {
	if mock.GetObjectLockConfigurationWithContextFunc == nil {
		panic("s3ClientMock.GetObjectLockConfigurationWithContextFunc: method is nil but s3Client.GetObjectLockConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		GetObjectLockConfigurationInput: getObjectLockConfigurationInput,
		Options:                         options,
	}
	mock.lockGetObjectLockConfigurationWithContext.Lock()
	mock.calls.GetObjectLockConfigurationWithContext = append(mock.calls.GetObjectLockConfigurationWithContext, callInfo)
	mock.lockGetObjectLockConfigurationWithContext.Unlock()
	return mock.GetObjectLockConfigurationWithContextFunc(contextMoqParam, getObjectLockConfigurationInput, options...)
}

// GetObjectLockConfigurationWithContextCalls gets all the calls that were made to GetObjectLockConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectLockConfigurationWithContextCalls())
func (mock *s3ClientMock) GetObjectLockConfigurationWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		GetObjectLockConfigurationInput *s3.GetObjectLockConfigurationInput
		Options                         []request.Option
	}
	mock.lockGetObjectLockConfigurationWithContext.RLock()
	calls = mock.calls.GetObjectLockConfigurationWithContext
	mock.lockGetObjectLockConfigurationWithContext.RUnlock()
	return calls
}

// GetObjectRequest calls GetObjectRequestFunc.
func (mock *s3ClientMock) GetObjectRequest(getObjectInput *s3.GetObjectInput) (*request.Request, *s3.GetObjectOutput) {
	if mock.GetObjectRequestFunc == nil {
		panic("s3ClientMock.GetObjectRequestFunc: method is nil but s3Client.GetObjectRequest was just called")
	}
	callInfo := struct {
		GetObjectInput *s3.GetObjectInput
	}{
		GetObjectInput: getObjectInput,
	}
	mock.lockGetObjectRequest.Lock()
	mock.calls.GetObjectRequest = append(mock.calls.GetObjectRequest, callInfo)
	mock.lockGetObjectRequest.Unlock()
	return mock.GetObjectRequestFunc(getObjectInput)
}

// GetObjectRequestCalls gets all the calls that were made to GetObjectRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectRequestCalls())
func (mock *s3ClientMock) GetObjectRequestCalls() []struct {
	GetObjectInput *s3.GetObjectInput
} {
	var calls []struct {
		GetObjectInput *s3.GetObjectInput
	}
	mock.lockGetObjectRequest.RLock()
	calls = mock.calls.GetObjectRequest
	mock.lockGetObjectRequest.RUnlock()
	return calls
}

// GetObjectRetention calls GetObjectRetentionFunc.
func (mock *s3ClientMock) GetObjectRetention(getObjectRetentionInput *s3.GetObjectRetentionInput) (*s3.GetObjectRetentionOutput, error) {
	if mock.GetObjectRetentionFunc == nil {
		panic("s3ClientMock.GetObjectRetentionFunc: method is nil but s3Client.GetObjectRetention was just called")
	}
	callInfo := struct {
		GetObjectRetentionInput *s3.GetObjectRetentionInput
	}{
		GetObjectRetentionInput: getObjectRetentionInput,
	}
	mock.lockGetObjectRetention.Lock()
	mock.calls.GetObjectRetention = append(mock.calls.GetObjectRetention, callInfo)
	mock.lockGetObjectRetention.Unlock()
	return mock.GetObjectRetentionFunc(getObjectRetentionInput)
}

// GetObjectRetentionCalls gets all the calls that were made to GetObjectRetention.
// Check the length with:
//     len(mockeds3Client.GetObjectRetentionCalls())
func (mock *s3ClientMock) GetObjectRetentionCalls() []struct {
	GetObjectRetentionInput *s3.GetObjectRetentionInput
} {
	var calls []struct {
		GetObjectRetentionInput *s3.GetObjectRetentionInput
	}
	mock.lockGetObjectRetention.RLock()
	calls = mock.calls.GetObjectRetention
	mock.lockGetObjectRetention.RUnlock()
	return calls
}

// GetObjectRetentionRequest calls GetObjectRetentionRequestFunc.
func (mock *s3ClientMock) GetObjectRetentionRequest(getObjectRetentionInput *s3.GetObjectRetentionInput) (*request.Request, *s3.GetObjectRetentionOutput) {
	if mock.GetObjectRetentionRequestFunc == nil {
		panic("s3ClientMock.GetObjectRetentionRequestFunc: method is nil but s3Client.GetObjectRetentionRequest was just called")
	}
	callInfo := struct {
		GetObjectRetentionInput *s3.GetObjectRetentionInput
	}{
		GetObjectRetentionInput: getObjectRetentionInput,
	}
	mock.lockGetObjectRetentionRequest.Lock()
	mock.calls.GetObjectRetentionRequest = append(mock.calls.GetObjectRetentionRequest, callInfo)
	mock.lockGetObjectRetentionRequest.Unlock()
	return mock.GetObjectRetentionRequestFunc(getObjectRetentionInput)
}

// GetObjectRetentionRequestCalls gets all the calls that were made to GetObjectRetentionRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectRetentionRequestCalls())
func (mock *s3ClientMock) GetObjectRetentionRequestCalls() []struct {
	GetObjectRetentionInput *s3.GetObjectRetentionInput
} {
	var calls []struct {
		GetObjectRetentionInput *s3.GetObjectRetentionInput
	}
	mock.lockGetObjectRetentionRequest.RLock()
	calls = mock.calls.GetObjectRetentionRequest
	mock.lockGetObjectRetentionRequest.RUnlock()
	return calls
}

// GetObjectRetentionWithContext calls GetObjectRetentionWithContextFunc.
func (mock *s3ClientMock) GetObjectRetentionWithContext(contextMoqParam context.Context, getObjectRetentionInput *s3.GetObjectRetentionInput, options ...request.Option) (*s3.GetObjectRetentionOutput, error) {
	if mock.GetObjectRetentionWithContextFunc == nil {
		panic("s3ClientMock.GetObjectRetentionWithContextFunc: method is nil but s3Client.GetObjectRetentionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		GetObjectRetentionInput *s3.GetObjectRetentionInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		GetObjectRetentionInput: getObjectRetentionInput,
		Options:                 options,
	}
	mock.lockGetObjectRetentionWithContext.Lock()
	mock.calls.GetObjectRetentionWithContext = append(mock.calls.GetObjectRetentionWithContext, callInfo)
	mock.lockGetObjectRetentionWithContext.Unlock()
	return mock.GetObjectRetentionWithContextFunc(contextMoqParam, getObjectRetentionInput, options...)
}

// GetObjectRetentionWithContextCalls gets all the calls that were made to GetObjectRetentionWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectRetentionWithContextCalls())
func (mock *s3ClientMock) GetObjectRetentionWithContextCalls() []struct {
	ContextMoqParam         context.Context
	GetObjectRetentionInput *s3.GetObjectRetentionInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		GetObjectRetentionInput *s3.GetObjectRetentionInput
		Options                 []request.Option
	}
	mock.lockGetObjectRetentionWithContext.RLock()
	calls = mock.calls.GetObjectRetentionWithContext
	mock.lockGetObjectRetentionWithContext.RUnlock()
	return calls
}

// GetObjectTagging calls GetObjectTaggingFunc.
func (mock *s3ClientMock) GetObjectTagging(getObjectTaggingInput *s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error) {
	if mock.GetObjectTaggingFunc == nil {
		panic("s3ClientMock.GetObjectTaggingFunc: method is nil but s3Client.GetObjectTagging was just called")
	}
	callInfo := struct {
		GetObjectTaggingInput *s3.GetObjectTaggingInput
	}{
		GetObjectTaggingInput: getObjectTaggingInput,
	}
	mock.lockGetObjectTagging.Lock()
	mock.calls.GetObjectTagging = append(mock.calls.GetObjectTagging, callInfo)
	mock.lockGetObjectTagging.Unlock()
	return mock.GetObjectTaggingFunc(getObjectTaggingInput)
}

// GetObjectTaggingCalls gets all the calls that were made to GetObjectTagging.
// Check the length with:
//     len(mockeds3Client.GetObjectTaggingCalls())
func (mock *s3ClientMock) GetObjectTaggingCalls() []struct {
	GetObjectTaggingInput *s3.GetObjectTaggingInput
} {
	var calls []struct {
		GetObjectTaggingInput *s3.GetObjectTaggingInput
	}
	mock.lockGetObjectTagging.RLock()
	calls = mock.calls.GetObjectTagging
	mock.lockGetObjectTagging.RUnlock()
	return calls
}

// GetObjectTaggingRequest calls GetObjectTaggingRequestFunc.
func (mock *s3ClientMock) GetObjectTaggingRequest(getObjectTaggingInput *s3.GetObjectTaggingInput) (*request.Request, *s3.GetObjectTaggingOutput) {
	if mock.GetObjectTaggingRequestFunc == nil {
		panic("s3ClientMock.GetObjectTaggingRequestFunc: method is nil but s3Client.GetObjectTaggingRequest was just called")
	}
	callInfo := struct {
		GetObjectTaggingInput *s3.GetObjectTaggingInput
	}{
		GetObjectTaggingInput: getObjectTaggingInput,
	}
	mock.lockGetObjectTaggingRequest.Lock()
	mock.calls.GetObjectTaggingRequest = append(mock.calls.GetObjectTaggingRequest, callInfo)
	mock.lockGetObjectTaggingRequest.Unlock()
	return mock.GetObjectTaggingRequestFunc(getObjectTaggingInput)
}

// GetObjectTaggingRequestCalls gets all the calls that were made to GetObjectTaggingRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectTaggingRequestCalls())
func (mock *s3ClientMock) GetObjectTaggingRequestCalls() []struct {
	GetObjectTaggingInput *s3.GetObjectTaggingInput
} {
	var calls []struct {
		GetObjectTaggingInput *s3.GetObjectTaggingInput
	}
	mock.lockGetObjectTaggingRequest.RLock()
	calls = mock.calls.GetObjectTaggingRequest
	mock.lockGetObjectTaggingRequest.RUnlock()
	return calls
}

// GetObjectTaggingWithContext calls GetObjectTaggingWithContextFunc.
func (mock *s3ClientMock) GetObjectTaggingWithContext(contextMoqParam context.Context, getObjectTaggingInput *s3.GetObjectTaggingInput, options ...request.Option) (*s3.GetObjectTaggingOutput, error) {
	if mock.GetObjectTaggingWithContextFunc == nil {
		panic("s3ClientMock.GetObjectTaggingWithContextFunc: method is nil but s3Client.GetObjectTaggingWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetObjectTaggingInput *s3.GetObjectTaggingInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		GetObjectTaggingInput: getObjectTaggingInput,
		Options:               options,
	}
	mock.lockGetObjectTaggingWithContext.Lock()
	mock.calls.GetObjectTaggingWithContext = append(mock.calls.GetObjectTaggingWithContext, callInfo)
	mock.lockGetObjectTaggingWithContext.Unlock()
	return mock.GetObjectTaggingWithContextFunc(contextMoqParam, getObjectTaggingInput, options...)
}

// GetObjectTaggingWithContextCalls gets all the calls that were made to GetObjectTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectTaggingWithContextCalls())
func (mock *s3ClientMock) GetObjectTaggingWithContextCalls() []struct {
	ContextMoqParam       context.Context
	GetObjectTaggingInput *s3.GetObjectTaggingInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetObjectTaggingInput *s3.GetObjectTaggingInput
		Options               []request.Option
	}
	mock.lockGetObjectTaggingWithContext.RLock()
	calls = mock.calls.GetObjectTaggingWithContext
	mock.lockGetObjectTaggingWithContext.RUnlock()
	return calls
}

// GetObjectTorrent calls GetObjectTorrentFunc.
func (mock *s3ClientMock) GetObjectTorrent(getObjectTorrentInput *s3.GetObjectTorrentInput) (*s3.GetObjectTorrentOutput, error) {
	if mock.GetObjectTorrentFunc == nil {
		panic("s3ClientMock.GetObjectTorrentFunc: method is nil but s3Client.GetObjectTorrent was just called")
	}
	callInfo := struct {
		GetObjectTorrentInput *s3.GetObjectTorrentInput
	}{
		GetObjectTorrentInput: getObjectTorrentInput,
	}
	mock.lockGetObjectTorrent.Lock()
	mock.calls.GetObjectTorrent = append(mock.calls.GetObjectTorrent, callInfo)
	mock.lockGetObjectTorrent.Unlock()
	return mock.GetObjectTorrentFunc(getObjectTorrentInput)
}

// GetObjectTorrentCalls gets all the calls that were made to GetObjectTorrent.
// Check the length with:
//     len(mockeds3Client.GetObjectTorrentCalls())
func (mock *s3ClientMock) GetObjectTorrentCalls() []struct {
	GetObjectTorrentInput *s3.GetObjectTorrentInput
} {
	var calls []struct {
		GetObjectTorrentInput *s3.GetObjectTorrentInput
	}
	mock.lockGetObjectTorrent.RLock()
	calls = mock.calls.GetObjectTorrent
	mock.lockGetObjectTorrent.RUnlock()
	return calls
}

// GetObjectTorrentRequest calls GetObjectTorrentRequestFunc.
func (mock *s3ClientMock) GetObjectTorrentRequest(getObjectTorrentInput *s3.GetObjectTorrentInput) (*request.Request, *s3.GetObjectTorrentOutput) {
	if mock.GetObjectTorrentRequestFunc == nil {
		panic("s3ClientMock.GetObjectTorrentRequestFunc: method is nil but s3Client.GetObjectTorrentRequest was just called")
	}
	callInfo := struct {
		GetObjectTorrentInput *s3.GetObjectTorrentInput
	}{
		GetObjectTorrentInput: getObjectTorrentInput,
	}
	mock.lockGetObjectTorrentRequest.Lock()
	mock.calls.GetObjectTorrentRequest = append(mock.calls.GetObjectTorrentRequest, callInfo)
	mock.lockGetObjectTorrentRequest.Unlock()
	return mock.GetObjectTorrentRequestFunc(getObjectTorrentInput)
}

// GetObjectTorrentRequestCalls gets all the calls that were made to GetObjectTorrentRequest.
// Check the length with:
//     len(mockeds3Client.GetObjectTorrentRequestCalls())
func (mock *s3ClientMock) GetObjectTorrentRequestCalls() []struct {
	GetObjectTorrentInput *s3.GetObjectTorrentInput
} {
	var calls []struct {
		GetObjectTorrentInput *s3.GetObjectTorrentInput
	}
	mock.lockGetObjectTorrentRequest.RLock()
	calls = mock.calls.GetObjectTorrentRequest
	mock.lockGetObjectTorrentRequest.RUnlock()
	return calls
}

// GetObjectTorrentWithContext calls GetObjectTorrentWithContextFunc.
func (mock *s3ClientMock) GetObjectTorrentWithContext(contextMoqParam context.Context, getObjectTorrentInput *s3.GetObjectTorrentInput, options ...request.Option) (*s3.GetObjectTorrentOutput, error) {
	if mock.GetObjectTorrentWithContextFunc == nil {
		panic("s3ClientMock.GetObjectTorrentWithContextFunc: method is nil but s3Client.GetObjectTorrentWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		GetObjectTorrentInput *s3.GetObjectTorrentInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		GetObjectTorrentInput: getObjectTorrentInput,
		Options:               options,
	}
	mock.lockGetObjectTorrentWithContext.Lock()
	mock.calls.GetObjectTorrentWithContext = append(mock.calls.GetObjectTorrentWithContext, callInfo)
	mock.lockGetObjectTorrentWithContext.Unlock()
	return mock.GetObjectTorrentWithContextFunc(contextMoqParam, getObjectTorrentInput, options...)
}

// GetObjectTorrentWithContextCalls gets all the calls that were made to GetObjectTorrentWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectTorrentWithContextCalls())
func (mock *s3ClientMock) GetObjectTorrentWithContextCalls() []struct {
	ContextMoqParam       context.Context
	GetObjectTorrentInput *s3.GetObjectTorrentInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		GetObjectTorrentInput *s3.GetObjectTorrentInput
		Options               []request.Option
	}
	mock.lockGetObjectTorrentWithContext.RLock()
	calls = mock.calls.GetObjectTorrentWithContext
	mock.lockGetObjectTorrentWithContext.RUnlock()
	return calls
}

// GetObjectWithContext calls GetObjectWithContextFunc.
func (mock *s3ClientMock) GetObjectWithContext(contextMoqParam context.Context, getObjectInput *s3.GetObjectInput, options ...request.Option) (*s3.GetObjectOutput, error) {
	if mock.GetObjectWithContextFunc == nil {
		panic("s3ClientMock.GetObjectWithContextFunc: method is nil but s3Client.GetObjectWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		GetObjectInput  *s3.GetObjectInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		GetObjectInput:  getObjectInput,
		Options:         options,
	}
	mock.lockGetObjectWithContext.Lock()
	mock.calls.GetObjectWithContext = append(mock.calls.GetObjectWithContext, callInfo)
	mock.lockGetObjectWithContext.Unlock()
	return mock.GetObjectWithContextFunc(contextMoqParam, getObjectInput, options...)
}

// GetObjectWithContextCalls gets all the calls that were made to GetObjectWithContext.
// Check the length with:
//     len(mockeds3Client.GetObjectWithContextCalls())
func (mock *s3ClientMock) GetObjectWithContextCalls() []struct {
	ContextMoqParam context.Context
	GetObjectInput  *s3.GetObjectInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetObjectInput  *s3.GetObjectInput
		Options         []request.Option
	}
	mock.lockGetObjectWithContext.RLock()
	calls = mock.calls.GetObjectWithContext
	mock.lockGetObjectWithContext.RUnlock()
	return calls
}

// GetPublicAccessBlock calls GetPublicAccessBlockFunc.
func (mock *s3ClientMock) GetPublicAccessBlock(getPublicAccessBlockInput *s3.GetPublicAccessBlockInput) (*s3.GetPublicAccessBlockOutput, error) {
	if mock.GetPublicAccessBlockFunc == nil {
		panic("s3ClientMock.GetPublicAccessBlockFunc: method is nil but s3Client.GetPublicAccessBlock was just called")
	}
	callInfo := struct {
		GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
	}{
		GetPublicAccessBlockInput: getPublicAccessBlockInput,
	}
	mock.lockGetPublicAccessBlock.Lock()
	mock.calls.GetPublicAccessBlock = append(mock.calls.GetPublicAccessBlock, callInfo)
	mock.lockGetPublicAccessBlock.Unlock()
	return mock.GetPublicAccessBlockFunc(getPublicAccessBlockInput)
}

// GetPublicAccessBlockCalls gets all the calls that were made to GetPublicAccessBlock.
// Check the length with:
//     len(mockeds3Client.GetPublicAccessBlockCalls())
func (mock *s3ClientMock) GetPublicAccessBlockCalls() []struct {
	GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
} {
	var calls []struct {
		GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
	}
	mock.lockGetPublicAccessBlock.RLock()
	calls = mock.calls.GetPublicAccessBlock
	mock.lockGetPublicAccessBlock.RUnlock()
	return calls
}

// GetPublicAccessBlockRequest calls GetPublicAccessBlockRequestFunc.
func (mock *s3ClientMock) GetPublicAccessBlockRequest(getPublicAccessBlockInput *s3.GetPublicAccessBlockInput) (*request.Request, *s3.GetPublicAccessBlockOutput) {
	if mock.GetPublicAccessBlockRequestFunc == nil {
		panic("s3ClientMock.GetPublicAccessBlockRequestFunc: method is nil but s3Client.GetPublicAccessBlockRequest was just called")
	}
	callInfo := struct {
		GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
	}{
		GetPublicAccessBlockInput: getPublicAccessBlockInput,
	}
	mock.lockGetPublicAccessBlockRequest.Lock()
	mock.calls.GetPublicAccessBlockRequest = append(mock.calls.GetPublicAccessBlockRequest, callInfo)
	mock.lockGetPublicAccessBlockRequest.Unlock()
	return mock.GetPublicAccessBlockRequestFunc(getPublicAccessBlockInput)
}

// GetPublicAccessBlockRequestCalls gets all the calls that were made to GetPublicAccessBlockRequest.
// Check the length with:
//     len(mockeds3Client.GetPublicAccessBlockRequestCalls())
func (mock *s3ClientMock) GetPublicAccessBlockRequestCalls() []struct {
	GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
} {
	var calls []struct {
		GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
	}
	mock.lockGetPublicAccessBlockRequest.RLock()
	calls = mock.calls.GetPublicAccessBlockRequest
	mock.lockGetPublicAccessBlockRequest.RUnlock()
	return calls
}

// GetPublicAccessBlockWithContext calls GetPublicAccessBlockWithContextFunc.
func (mock *s3ClientMock) GetPublicAccessBlockWithContext(contextMoqParam context.Context, getPublicAccessBlockInput *s3.GetPublicAccessBlockInput, options ...request.Option) (*s3.GetPublicAccessBlockOutput, error) {
	if mock.GetPublicAccessBlockWithContextFunc == nil {
		panic("s3ClientMock.GetPublicAccessBlockWithContextFunc: method is nil but s3Client.GetPublicAccessBlockWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		GetPublicAccessBlockInput: getPublicAccessBlockInput,
		Options:                   options,
	}
	mock.lockGetPublicAccessBlockWithContext.Lock()
	mock.calls.GetPublicAccessBlockWithContext = append(mock.calls.GetPublicAccessBlockWithContext, callInfo)
	mock.lockGetPublicAccessBlockWithContext.Unlock()
	return mock.GetPublicAccessBlockWithContextFunc(contextMoqParam, getPublicAccessBlockInput, options...)
}

// GetPublicAccessBlockWithContextCalls gets all the calls that were made to GetPublicAccessBlockWithContext.
// Check the length with:
//     len(mockeds3Client.GetPublicAccessBlockWithContextCalls())
func (mock *s3ClientMock) GetPublicAccessBlockWithContextCalls() []struct {
	ContextMoqParam           context.Context
	GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		GetPublicAccessBlockInput *s3.GetPublicAccessBlockInput
		Options                   []request.Option
	}
	mock.lockGetPublicAccessBlockWithContext.RLock()
	calls = mock.calls.GetPublicAccessBlockWithContext
	mock.lockGetPublicAccessBlockWithContext.RUnlock()
	return calls
}

// HeadBucket calls HeadBucketFunc.
func (mock *s3ClientMock) HeadBucket(headBucketInput *s3.HeadBucketInput) (*s3.HeadBucketOutput, error) {
	if mock.HeadBucketFunc == nil {
		panic("s3ClientMock.HeadBucketFunc: method is nil but s3Client.HeadBucket was just called")
	}
	callInfo := struct {
		HeadBucketInput *s3.HeadBucketInput
	}{
		HeadBucketInput: headBucketInput,
	}
	mock.lockHeadBucket.Lock()
	mock.calls.HeadBucket = append(mock.calls.HeadBucket, callInfo)
	mock.lockHeadBucket.Unlock()
	return mock.HeadBucketFunc(headBucketInput)
}

// HeadBucketCalls gets all the calls that were made to HeadBucket.
// Check the length with:
//     len(mockeds3Client.HeadBucketCalls())
func (mock *s3ClientMock) HeadBucketCalls() []struct {
	HeadBucketInput *s3.HeadBucketInput
} {
	var calls []struct {
		HeadBucketInput *s3.HeadBucketInput
	}
	mock.lockHeadBucket.RLock()
	calls = mock.calls.HeadBucket
	mock.lockHeadBucket.RUnlock()
	return calls
}

// HeadBucketRequest calls HeadBucketRequestFunc.
func (mock *s3ClientMock) HeadBucketRequest(headBucketInput *s3.HeadBucketInput) (*request.Request, *s3.HeadBucketOutput) {
	if mock.HeadBucketRequestFunc == nil {
		panic("s3ClientMock.HeadBucketRequestFunc: method is nil but s3Client.HeadBucketRequest was just called")
	}
	callInfo := struct {
		HeadBucketInput *s3.HeadBucketInput
	}{
		HeadBucketInput: headBucketInput,
	}
	mock.lockHeadBucketRequest.Lock()
	mock.calls.HeadBucketRequest = append(mock.calls.HeadBucketRequest, callInfo)
	mock.lockHeadBucketRequest.Unlock()
	return mock.HeadBucketRequestFunc(headBucketInput)
}

// HeadBucketRequestCalls gets all the calls that were made to HeadBucketRequest.
// Check the length with:
//     len(mockeds3Client.HeadBucketRequestCalls())
func (mock *s3ClientMock) HeadBucketRequestCalls() []struct {
	HeadBucketInput *s3.HeadBucketInput
} {
	var calls []struct {
		HeadBucketInput *s3.HeadBucketInput
	}
	mock.lockHeadBucketRequest.RLock()
	calls = mock.calls.HeadBucketRequest
	mock.lockHeadBucketRequest.RUnlock()
	return calls
}

// HeadBucketWithContext calls HeadBucketWithContextFunc.
func (mock *s3ClientMock) HeadBucketWithContext(contextMoqParam context.Context, headBucketInput *s3.HeadBucketInput, options ...request.Option) (*s3.HeadBucketOutput, error) {
	if mock.HeadBucketWithContextFunc == nil {
		panic("s3ClientMock.HeadBucketWithContextFunc: method is nil but s3Client.HeadBucketWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		HeadBucketInput *s3.HeadBucketInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		HeadBucketInput: headBucketInput,
		Options:         options,
	}
	mock.lockHeadBucketWithContext.Lock()
	mock.calls.HeadBucketWithContext = append(mock.calls.HeadBucketWithContext, callInfo)
	mock.lockHeadBucketWithContext.Unlock()
	return mock.HeadBucketWithContextFunc(contextMoqParam, headBucketInput, options...)
}

// HeadBucketWithContextCalls gets all the calls that were made to HeadBucketWithContext.
// Check the length with:
//     len(mockeds3Client.HeadBucketWithContextCalls())
func (mock *s3ClientMock) HeadBucketWithContextCalls() []struct {
	ContextMoqParam context.Context
	HeadBucketInput *s3.HeadBucketInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		HeadBucketInput *s3.HeadBucketInput
		Options         []request.Option
	}
	mock.lockHeadBucketWithContext.RLock()
	calls = mock.calls.HeadBucketWithContext
	mock.lockHeadBucketWithContext.RUnlock()
	return calls
}

// HeadObject calls HeadObjectFunc.
func (mock *s3ClientMock) HeadObject(headObjectInput *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	if mock.HeadObjectFunc == nil {
		panic("s3ClientMock.HeadObjectFunc: method is nil but s3Client.HeadObject was just called")
	}
	callInfo := struct {
		HeadObjectInput *s3.HeadObjectInput
	}{
		HeadObjectInput: headObjectInput,
	}
	mock.lockHeadObject.Lock()
	mock.calls.HeadObject = append(mock.calls.HeadObject, callInfo)
	mock.lockHeadObject.Unlock()
	return mock.HeadObjectFunc(headObjectInput)
}

// HeadObjectCalls gets all the calls that were made to HeadObject.
// Check the length with:
//     len(mockeds3Client.HeadObjectCalls())
func (mock *s3ClientMock) HeadObjectCalls() []struct {
	HeadObjectInput *s3.HeadObjectInput
} {
	var calls []struct {
		HeadObjectInput *s3.HeadObjectInput
	}
	mock.lockHeadObject.RLock()
	calls = mock.calls.HeadObject
	mock.lockHeadObject.RUnlock()
	return calls
}

// HeadObjectRequest calls HeadObjectRequestFunc.
func (mock *s3ClientMock) HeadObjectRequest(headObjectInput *s3.HeadObjectInput) (*request.Request, *s3.HeadObjectOutput) {
	if mock.HeadObjectRequestFunc == nil {
		panic("s3ClientMock.HeadObjectRequestFunc: method is nil but s3Client.HeadObjectRequest was just called")
	}
	callInfo := struct {
		HeadObjectInput *s3.HeadObjectInput
	}{
		HeadObjectInput: headObjectInput,
	}
	mock.lockHeadObjectRequest.Lock()
	mock.calls.HeadObjectRequest = append(mock.calls.HeadObjectRequest, callInfo)
	mock.lockHeadObjectRequest.Unlock()
	return mock.HeadObjectRequestFunc(headObjectInput)
}

// HeadObjectRequestCalls gets all the calls that were made to HeadObjectRequest.
// Check the length with:
//     len(mockeds3Client.HeadObjectRequestCalls())
func (mock *s3ClientMock) HeadObjectRequestCalls() []struct {
	HeadObjectInput *s3.HeadObjectInput
} {
	var calls []struct {
		HeadObjectInput *s3.HeadObjectInput
	}
	mock.lockHeadObjectRequest.RLock()
	calls = mock.calls.HeadObjectRequest
	mock.lockHeadObjectRequest.RUnlock()
	return calls
}

// HeadObjectWithContext calls HeadObjectWithContextFunc.
func (mock *s3ClientMock) HeadObjectWithContext(contextMoqParam context.Context, headObjectInput *s3.HeadObjectInput, options ...request.Option) (*s3.HeadObjectOutput, error) {
	if mock.HeadObjectWithContextFunc == nil {
		panic("s3ClientMock.HeadObjectWithContextFunc: method is nil but s3Client.HeadObjectWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		HeadObjectInput *s3.HeadObjectInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		HeadObjectInput: headObjectInput,
		Options:         options,
	}
	mock.lockHeadObjectWithContext.Lock()
	mock.calls.HeadObjectWithContext = append(mock.calls.HeadObjectWithContext, callInfo)
	mock.lockHeadObjectWithContext.Unlock()
	return mock.HeadObjectWithContextFunc(contextMoqParam, headObjectInput, options...)
}

// HeadObjectWithContextCalls gets all the calls that were made to HeadObjectWithContext.
// Check the length with:
//     len(mockeds3Client.HeadObjectWithContextCalls())
func (mock *s3ClientMock) HeadObjectWithContextCalls() []struct {
	ContextMoqParam context.Context
	HeadObjectInput *s3.HeadObjectInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		HeadObjectInput *s3.HeadObjectInput
		Options         []request.Option
	}
	mock.lockHeadObjectWithContext.RLock()
	calls = mock.calls.HeadObjectWithContext
	mock.lockHeadObjectWithContext.RUnlock()
	return calls
}

// ListBucketAnalyticsConfigurations calls ListBucketAnalyticsConfigurationsFunc.
func (mock *s3ClientMock) ListBucketAnalyticsConfigurations(listBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	if mock.ListBucketAnalyticsConfigurationsFunc == nil {
		panic("s3ClientMock.ListBucketAnalyticsConfigurationsFunc: method is nil but s3Client.ListBucketAnalyticsConfigurations was just called")
	}
	callInfo := struct {
		ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
	}{
		ListBucketAnalyticsConfigurationsInput: listBucketAnalyticsConfigurationsInput,
	}
	mock.lockListBucketAnalyticsConfigurations.Lock()
	mock.calls.ListBucketAnalyticsConfigurations = append(mock.calls.ListBucketAnalyticsConfigurations, callInfo)
	mock.lockListBucketAnalyticsConfigurations.Unlock()
	return mock.ListBucketAnalyticsConfigurationsFunc(listBucketAnalyticsConfigurationsInput)
}

// ListBucketAnalyticsConfigurationsCalls gets all the calls that were made to ListBucketAnalyticsConfigurations.
// Check the length with:
//     len(mockeds3Client.ListBucketAnalyticsConfigurationsCalls())
func (mock *s3ClientMock) ListBucketAnalyticsConfigurationsCalls() []struct {
	ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
} {
	var calls []struct {
		ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
	}
	mock.lockListBucketAnalyticsConfigurations.RLock()
	calls = mock.calls.ListBucketAnalyticsConfigurations
	mock.lockListBucketAnalyticsConfigurations.RUnlock()
	return calls
}

// ListBucketAnalyticsConfigurationsRequest calls ListBucketAnalyticsConfigurationsRequestFunc.
func (mock *s3ClientMock) ListBucketAnalyticsConfigurationsRequest(listBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput) (*request.Request, *s3.ListBucketAnalyticsConfigurationsOutput) {
	if mock.ListBucketAnalyticsConfigurationsRequestFunc == nil {
		panic("s3ClientMock.ListBucketAnalyticsConfigurationsRequestFunc: method is nil but s3Client.ListBucketAnalyticsConfigurationsRequest was just called")
	}
	callInfo := struct {
		ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
	}{
		ListBucketAnalyticsConfigurationsInput: listBucketAnalyticsConfigurationsInput,
	}
	mock.lockListBucketAnalyticsConfigurationsRequest.Lock()
	mock.calls.ListBucketAnalyticsConfigurationsRequest = append(mock.calls.ListBucketAnalyticsConfigurationsRequest, callInfo)
	mock.lockListBucketAnalyticsConfigurationsRequest.Unlock()
	return mock.ListBucketAnalyticsConfigurationsRequestFunc(listBucketAnalyticsConfigurationsInput)
}

// ListBucketAnalyticsConfigurationsRequestCalls gets all the calls that were made to ListBucketAnalyticsConfigurationsRequest.
// Check the length with:
//     len(mockeds3Client.ListBucketAnalyticsConfigurationsRequestCalls())
func (mock *s3ClientMock) ListBucketAnalyticsConfigurationsRequestCalls() []struct {
	ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
} {
	var calls []struct {
		ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
	}
	mock.lockListBucketAnalyticsConfigurationsRequest.RLock()
	calls = mock.calls.ListBucketAnalyticsConfigurationsRequest
	mock.lockListBucketAnalyticsConfigurationsRequest.RUnlock()
	return calls
}

// ListBucketAnalyticsConfigurationsWithContext calls ListBucketAnalyticsConfigurationsWithContextFunc.
func (mock *s3ClientMock) ListBucketAnalyticsConfigurationsWithContext(contextMoqParam context.Context, listBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput, options ...request.Option) (*s3.ListBucketAnalyticsConfigurationsOutput, error) {
	if mock.ListBucketAnalyticsConfigurationsWithContextFunc == nil {
		panic("s3ClientMock.ListBucketAnalyticsConfigurationsWithContextFunc: method is nil but s3Client.ListBucketAnalyticsConfigurationsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                        context.Context
		ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
		Options                                []request.Option
	}{
		ContextMoqParam:                        contextMoqParam,
		ListBucketAnalyticsConfigurationsInput: listBucketAnalyticsConfigurationsInput,
		Options:                                options,
	}
	mock.lockListBucketAnalyticsConfigurationsWithContext.Lock()
	mock.calls.ListBucketAnalyticsConfigurationsWithContext = append(mock.calls.ListBucketAnalyticsConfigurationsWithContext, callInfo)
	mock.lockListBucketAnalyticsConfigurationsWithContext.Unlock()
	return mock.ListBucketAnalyticsConfigurationsWithContextFunc(contextMoqParam, listBucketAnalyticsConfigurationsInput, options...)
}

// ListBucketAnalyticsConfigurationsWithContextCalls gets all the calls that were made to ListBucketAnalyticsConfigurationsWithContext.
// Check the length with:
//     len(mockeds3Client.ListBucketAnalyticsConfigurationsWithContextCalls())
func (mock *s3ClientMock) ListBucketAnalyticsConfigurationsWithContextCalls() []struct {
	ContextMoqParam                        context.Context
	ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
	Options                                []request.Option
} {
	var calls []struct {
		ContextMoqParam                        context.Context
		ListBucketAnalyticsConfigurationsInput *s3.ListBucketAnalyticsConfigurationsInput
		Options                                []request.Option
	}
	mock.lockListBucketAnalyticsConfigurationsWithContext.RLock()
	calls = mock.calls.ListBucketAnalyticsConfigurationsWithContext
	mock.lockListBucketAnalyticsConfigurationsWithContext.RUnlock()
	return calls
}

// ListBucketIntelligentTieringConfigurations calls ListBucketIntelligentTieringConfigurationsFunc.
func (mock *s3ClientMock) ListBucketIntelligentTieringConfigurations(listBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error) {
	if mock.ListBucketIntelligentTieringConfigurationsFunc == nil {
		panic("s3ClientMock.ListBucketIntelligentTieringConfigurationsFunc: method is nil but s3Client.ListBucketIntelligentTieringConfigurations was just called")
	}
	callInfo := struct {
		ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
	}{
		ListBucketIntelligentTieringConfigurationsInput: listBucketIntelligentTieringConfigurationsInput,
	}
	mock.lockListBucketIntelligentTieringConfigurations.Lock()
	mock.calls.ListBucketIntelligentTieringConfigurations = append(mock.calls.ListBucketIntelligentTieringConfigurations, callInfo)
	mock.lockListBucketIntelligentTieringConfigurations.Unlock()
	return mock.ListBucketIntelligentTieringConfigurationsFunc(listBucketIntelligentTieringConfigurationsInput)
}

// ListBucketIntelligentTieringConfigurationsCalls gets all the calls that were made to ListBucketIntelligentTieringConfigurations.
// Check the length with:
//     len(mockeds3Client.ListBucketIntelligentTieringConfigurationsCalls())
func (mock *s3ClientMock) ListBucketIntelligentTieringConfigurationsCalls() []struct {
	ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
} {
	var calls []struct {
		ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
	}
	mock.lockListBucketIntelligentTieringConfigurations.RLock()
	calls = mock.calls.ListBucketIntelligentTieringConfigurations
	mock.lockListBucketIntelligentTieringConfigurations.RUnlock()
	return calls
}

// ListBucketIntelligentTieringConfigurationsRequest calls ListBucketIntelligentTieringConfigurationsRequestFunc.
func (mock *s3ClientMock) ListBucketIntelligentTieringConfigurationsRequest(listBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput) (*request.Request, *s3.ListBucketIntelligentTieringConfigurationsOutput) {
	if mock.ListBucketIntelligentTieringConfigurationsRequestFunc == nil {
		panic("s3ClientMock.ListBucketIntelligentTieringConfigurationsRequestFunc: method is nil but s3Client.ListBucketIntelligentTieringConfigurationsRequest was just called")
	}
	callInfo := struct {
		ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
	}{
		ListBucketIntelligentTieringConfigurationsInput: listBucketIntelligentTieringConfigurationsInput,
	}
	mock.lockListBucketIntelligentTieringConfigurationsRequest.Lock()
	mock.calls.ListBucketIntelligentTieringConfigurationsRequest = append(mock.calls.ListBucketIntelligentTieringConfigurationsRequest, callInfo)
	mock.lockListBucketIntelligentTieringConfigurationsRequest.Unlock()
	return mock.ListBucketIntelligentTieringConfigurationsRequestFunc(listBucketIntelligentTieringConfigurationsInput)
}

// ListBucketIntelligentTieringConfigurationsRequestCalls gets all the calls that were made to ListBucketIntelligentTieringConfigurationsRequest.
// Check the length with:
//     len(mockeds3Client.ListBucketIntelligentTieringConfigurationsRequestCalls())
func (mock *s3ClientMock) ListBucketIntelligentTieringConfigurationsRequestCalls() []struct {
	ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
} {
	var calls []struct {
		ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
	}
	mock.lockListBucketIntelligentTieringConfigurationsRequest.RLock()
	calls = mock.calls.ListBucketIntelligentTieringConfigurationsRequest
	mock.lockListBucketIntelligentTieringConfigurationsRequest.RUnlock()
	return calls
}

// ListBucketIntelligentTieringConfigurationsWithContext calls ListBucketIntelligentTieringConfigurationsWithContextFunc.
func (mock *s3ClientMock) ListBucketIntelligentTieringConfigurationsWithContext(contextMoqParam context.Context, listBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput, options ...request.Option) (*s3.ListBucketIntelligentTieringConfigurationsOutput, error) {
	if mock.ListBucketIntelligentTieringConfigurationsWithContextFunc == nil {
		panic("s3ClientMock.ListBucketIntelligentTieringConfigurationsWithContextFunc: method is nil but s3Client.ListBucketIntelligentTieringConfigurationsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                                 context.Context
		ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
		Options                                         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListBucketIntelligentTieringConfigurationsInput: listBucketIntelligentTieringConfigurationsInput,
		Options: options,
	}
	mock.lockListBucketIntelligentTieringConfigurationsWithContext.Lock()
	mock.calls.ListBucketIntelligentTieringConfigurationsWithContext = append(mock.calls.ListBucketIntelligentTieringConfigurationsWithContext, callInfo)
	mock.lockListBucketIntelligentTieringConfigurationsWithContext.Unlock()
	return mock.ListBucketIntelligentTieringConfigurationsWithContextFunc(contextMoqParam, listBucketIntelligentTieringConfigurationsInput, options...)
}

// ListBucketIntelligentTieringConfigurationsWithContextCalls gets all the calls that were made to ListBucketIntelligentTieringConfigurationsWithContext.
// Check the length with:
//     len(mockeds3Client.ListBucketIntelligentTieringConfigurationsWithContextCalls())
func (mock *s3ClientMock) ListBucketIntelligentTieringConfigurationsWithContextCalls() []struct {
	ContextMoqParam                                 context.Context
	ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
	Options                                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                                 context.Context
		ListBucketIntelligentTieringConfigurationsInput *s3.ListBucketIntelligentTieringConfigurationsInput
		Options                                         []request.Option
	}
	mock.lockListBucketIntelligentTieringConfigurationsWithContext.RLock()
	calls = mock.calls.ListBucketIntelligentTieringConfigurationsWithContext
	mock.lockListBucketIntelligentTieringConfigurationsWithContext.RUnlock()
	return calls
}

// ListBucketInventoryConfigurations calls ListBucketInventoryConfigurationsFunc.
func (mock *s3ClientMock) ListBucketInventoryConfigurations(listBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	if mock.ListBucketInventoryConfigurationsFunc == nil {
		panic("s3ClientMock.ListBucketInventoryConfigurationsFunc: method is nil but s3Client.ListBucketInventoryConfigurations was just called")
	}
	callInfo := struct {
		ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
	}{
		ListBucketInventoryConfigurationsInput: listBucketInventoryConfigurationsInput,
	}
	mock.lockListBucketInventoryConfigurations.Lock()
	mock.calls.ListBucketInventoryConfigurations = append(mock.calls.ListBucketInventoryConfigurations, callInfo)
	mock.lockListBucketInventoryConfigurations.Unlock()
	return mock.ListBucketInventoryConfigurationsFunc(listBucketInventoryConfigurationsInput)
}

// ListBucketInventoryConfigurationsCalls gets all the calls that were made to ListBucketInventoryConfigurations.
// Check the length with:
//     len(mockeds3Client.ListBucketInventoryConfigurationsCalls())
func (mock *s3ClientMock) ListBucketInventoryConfigurationsCalls() []struct {
	ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
} {
	var calls []struct {
		ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
	}
	mock.lockListBucketInventoryConfigurations.RLock()
	calls = mock.calls.ListBucketInventoryConfigurations
	mock.lockListBucketInventoryConfigurations.RUnlock()
	return calls
}

// ListBucketInventoryConfigurationsRequest calls ListBucketInventoryConfigurationsRequestFunc.
func (mock *s3ClientMock) ListBucketInventoryConfigurationsRequest(listBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput) (*request.Request, *s3.ListBucketInventoryConfigurationsOutput) {
	if mock.ListBucketInventoryConfigurationsRequestFunc == nil {
		panic("s3ClientMock.ListBucketInventoryConfigurationsRequestFunc: method is nil but s3Client.ListBucketInventoryConfigurationsRequest was just called")
	}
	callInfo := struct {
		ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
	}{
		ListBucketInventoryConfigurationsInput: listBucketInventoryConfigurationsInput,
	}
	mock.lockListBucketInventoryConfigurationsRequest.Lock()
	mock.calls.ListBucketInventoryConfigurationsRequest = append(mock.calls.ListBucketInventoryConfigurationsRequest, callInfo)
	mock.lockListBucketInventoryConfigurationsRequest.Unlock()
	return mock.ListBucketInventoryConfigurationsRequestFunc(listBucketInventoryConfigurationsInput)
}

// ListBucketInventoryConfigurationsRequestCalls gets all the calls that were made to ListBucketInventoryConfigurationsRequest.
// Check the length with:
//     len(mockeds3Client.ListBucketInventoryConfigurationsRequestCalls())
func (mock *s3ClientMock) ListBucketInventoryConfigurationsRequestCalls() []struct {
	ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
} {
	var calls []struct {
		ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
	}
	mock.lockListBucketInventoryConfigurationsRequest.RLock()
	calls = mock.calls.ListBucketInventoryConfigurationsRequest
	mock.lockListBucketInventoryConfigurationsRequest.RUnlock()
	return calls
}

// ListBucketInventoryConfigurationsWithContext calls ListBucketInventoryConfigurationsWithContextFunc.
func (mock *s3ClientMock) ListBucketInventoryConfigurationsWithContext(contextMoqParam context.Context, listBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput, options ...request.Option) (*s3.ListBucketInventoryConfigurationsOutput, error) {
	if mock.ListBucketInventoryConfigurationsWithContextFunc == nil {
		panic("s3ClientMock.ListBucketInventoryConfigurationsWithContextFunc: method is nil but s3Client.ListBucketInventoryConfigurationsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                        context.Context
		ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
		Options                                []request.Option
	}{
		ContextMoqParam:                        contextMoqParam,
		ListBucketInventoryConfigurationsInput: listBucketInventoryConfigurationsInput,
		Options:                                options,
	}
	mock.lockListBucketInventoryConfigurationsWithContext.Lock()
	mock.calls.ListBucketInventoryConfigurationsWithContext = append(mock.calls.ListBucketInventoryConfigurationsWithContext, callInfo)
	mock.lockListBucketInventoryConfigurationsWithContext.Unlock()
	return mock.ListBucketInventoryConfigurationsWithContextFunc(contextMoqParam, listBucketInventoryConfigurationsInput, options...)
}

// ListBucketInventoryConfigurationsWithContextCalls gets all the calls that were made to ListBucketInventoryConfigurationsWithContext.
// Check the length with:
//     len(mockeds3Client.ListBucketInventoryConfigurationsWithContextCalls())
func (mock *s3ClientMock) ListBucketInventoryConfigurationsWithContextCalls() []struct {
	ContextMoqParam                        context.Context
	ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
	Options                                []request.Option
} {
	var calls []struct {
		ContextMoqParam                        context.Context
		ListBucketInventoryConfigurationsInput *s3.ListBucketInventoryConfigurationsInput
		Options                                []request.Option
	}
	mock.lockListBucketInventoryConfigurationsWithContext.RLock()
	calls = mock.calls.ListBucketInventoryConfigurationsWithContext
	mock.lockListBucketInventoryConfigurationsWithContext.RUnlock()
	return calls
}

// ListBucketMetricsConfigurations calls ListBucketMetricsConfigurationsFunc.
func (mock *s3ClientMock) ListBucketMetricsConfigurations(listBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	if mock.ListBucketMetricsConfigurationsFunc == nil {
		panic("s3ClientMock.ListBucketMetricsConfigurationsFunc: method is nil but s3Client.ListBucketMetricsConfigurations was just called")
	}
	callInfo := struct {
		ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
	}{
		ListBucketMetricsConfigurationsInput: listBucketMetricsConfigurationsInput,
	}
	mock.lockListBucketMetricsConfigurations.Lock()
	mock.calls.ListBucketMetricsConfigurations = append(mock.calls.ListBucketMetricsConfigurations, callInfo)
	mock.lockListBucketMetricsConfigurations.Unlock()
	return mock.ListBucketMetricsConfigurationsFunc(listBucketMetricsConfigurationsInput)
}

// ListBucketMetricsConfigurationsCalls gets all the calls that were made to ListBucketMetricsConfigurations.
// Check the length with:
//     len(mockeds3Client.ListBucketMetricsConfigurationsCalls())
func (mock *s3ClientMock) ListBucketMetricsConfigurationsCalls() []struct {
	ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
} {
	var calls []struct {
		ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
	}
	mock.lockListBucketMetricsConfigurations.RLock()
	calls = mock.calls.ListBucketMetricsConfigurations
	mock.lockListBucketMetricsConfigurations.RUnlock()
	return calls
}

// ListBucketMetricsConfigurationsRequest calls ListBucketMetricsConfigurationsRequestFunc.
func (mock *s3ClientMock) ListBucketMetricsConfigurationsRequest(listBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput) (*request.Request, *s3.ListBucketMetricsConfigurationsOutput) {
	if mock.ListBucketMetricsConfigurationsRequestFunc == nil {
		panic("s3ClientMock.ListBucketMetricsConfigurationsRequestFunc: method is nil but s3Client.ListBucketMetricsConfigurationsRequest was just called")
	}
	callInfo := struct {
		ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
	}{
		ListBucketMetricsConfigurationsInput: listBucketMetricsConfigurationsInput,
	}
	mock.lockListBucketMetricsConfigurationsRequest.Lock()
	mock.calls.ListBucketMetricsConfigurationsRequest = append(mock.calls.ListBucketMetricsConfigurationsRequest, callInfo)
	mock.lockListBucketMetricsConfigurationsRequest.Unlock()
	return mock.ListBucketMetricsConfigurationsRequestFunc(listBucketMetricsConfigurationsInput)
}

// ListBucketMetricsConfigurationsRequestCalls gets all the calls that were made to ListBucketMetricsConfigurationsRequest.
// Check the length with:
//     len(mockeds3Client.ListBucketMetricsConfigurationsRequestCalls())
func (mock *s3ClientMock) ListBucketMetricsConfigurationsRequestCalls() []struct {
	ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
} {
	var calls []struct {
		ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
	}
	mock.lockListBucketMetricsConfigurationsRequest.RLock()
	calls = mock.calls.ListBucketMetricsConfigurationsRequest
	mock.lockListBucketMetricsConfigurationsRequest.RUnlock()
	return calls
}

// ListBucketMetricsConfigurationsWithContext calls ListBucketMetricsConfigurationsWithContextFunc.
func (mock *s3ClientMock) ListBucketMetricsConfigurationsWithContext(contextMoqParam context.Context, listBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput, options ...request.Option) (*s3.ListBucketMetricsConfigurationsOutput, error) {
	if mock.ListBucketMetricsConfigurationsWithContextFunc == nil {
		panic("s3ClientMock.ListBucketMetricsConfigurationsWithContextFunc: method is nil but s3Client.ListBucketMetricsConfigurationsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		ListBucketMetricsConfigurationsInput: listBucketMetricsConfigurationsInput,
		Options:                              options,
	}
	mock.lockListBucketMetricsConfigurationsWithContext.Lock()
	mock.calls.ListBucketMetricsConfigurationsWithContext = append(mock.calls.ListBucketMetricsConfigurationsWithContext, callInfo)
	mock.lockListBucketMetricsConfigurationsWithContext.Unlock()
	return mock.ListBucketMetricsConfigurationsWithContextFunc(contextMoqParam, listBucketMetricsConfigurationsInput, options...)
}

// ListBucketMetricsConfigurationsWithContextCalls gets all the calls that were made to ListBucketMetricsConfigurationsWithContext.
// Check the length with:
//     len(mockeds3Client.ListBucketMetricsConfigurationsWithContextCalls())
func (mock *s3ClientMock) ListBucketMetricsConfigurationsWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		ListBucketMetricsConfigurationsInput *s3.ListBucketMetricsConfigurationsInput
		Options                              []request.Option
	}
	mock.lockListBucketMetricsConfigurationsWithContext.RLock()
	calls = mock.calls.ListBucketMetricsConfigurationsWithContext
	mock.lockListBucketMetricsConfigurationsWithContext.RUnlock()
	return calls
}

// ListBuckets calls ListBucketsFunc.
func (mock *s3ClientMock) ListBuckets(listBucketsInput *s3.ListBucketsInput) (*s3.ListBucketsOutput, error) {
	if mock.ListBucketsFunc == nil {
		panic("s3ClientMock.ListBucketsFunc: method is nil but s3Client.ListBuckets was just called")
	}
	callInfo := struct {
		ListBucketsInput *s3.ListBucketsInput
	}{
		ListBucketsInput: listBucketsInput,
	}
	mock.lockListBuckets.Lock()
	mock.calls.ListBuckets = append(mock.calls.ListBuckets, callInfo)
	mock.lockListBuckets.Unlock()
	return mock.ListBucketsFunc(listBucketsInput)
}

// ListBucketsCalls gets all the calls that were made to ListBuckets.
// Check the length with:
//     len(mockeds3Client.ListBucketsCalls())
func (mock *s3ClientMock) ListBucketsCalls() []struct {
	ListBucketsInput *s3.ListBucketsInput
} {
	var calls []struct {
		ListBucketsInput *s3.ListBucketsInput
	}
	mock.lockListBuckets.RLock()
	calls = mock.calls.ListBuckets
	mock.lockListBuckets.RUnlock()
	return calls
}

// ListBucketsRequest calls ListBucketsRequestFunc.
func (mock *s3ClientMock) ListBucketsRequest(listBucketsInput *s3.ListBucketsInput) (*request.Request, *s3.ListBucketsOutput) {
	if mock.ListBucketsRequestFunc == nil {
		panic("s3ClientMock.ListBucketsRequestFunc: method is nil but s3Client.ListBucketsRequest was just called")
	}
	callInfo := struct {
		ListBucketsInput *s3.ListBucketsInput
	}{
		ListBucketsInput: listBucketsInput,
	}
	mock.lockListBucketsRequest.Lock()
	mock.calls.ListBucketsRequest = append(mock.calls.ListBucketsRequest, callInfo)
	mock.lockListBucketsRequest.Unlock()
	return mock.ListBucketsRequestFunc(listBucketsInput)
}

// ListBucketsRequestCalls gets all the calls that were made to ListBucketsRequest.
// Check the length with:
//     len(mockeds3Client.ListBucketsRequestCalls())
func (mock *s3ClientMock) ListBucketsRequestCalls() []struct {
	ListBucketsInput *s3.ListBucketsInput
} {
	var calls []struct {
		ListBucketsInput *s3.ListBucketsInput
	}
	mock.lockListBucketsRequest.RLock()
	calls = mock.calls.ListBucketsRequest
	mock.lockListBucketsRequest.RUnlock()
	return calls
}

// ListBucketsWithContext calls ListBucketsWithContextFunc.
func (mock *s3ClientMock) ListBucketsWithContext(contextMoqParam context.Context, listBucketsInput *s3.ListBucketsInput, options ...request.Option) (*s3.ListBucketsOutput, error) {
	if mock.ListBucketsWithContextFunc == nil {
		panic("s3ClientMock.ListBucketsWithContextFunc: method is nil but s3Client.ListBucketsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		ListBucketsInput *s3.ListBucketsInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		ListBucketsInput: listBucketsInput,
		Options:          options,
	}
	mock.lockListBucketsWithContext.Lock()
	mock.calls.ListBucketsWithContext = append(mock.calls.ListBucketsWithContext, callInfo)
	mock.lockListBucketsWithContext.Unlock()
	return mock.ListBucketsWithContextFunc(contextMoqParam, listBucketsInput, options...)
}

// ListBucketsWithContextCalls gets all the calls that were made to ListBucketsWithContext.
// Check the length with:
//     len(mockeds3Client.ListBucketsWithContextCalls())
func (mock *s3ClientMock) ListBucketsWithContextCalls() []struct {
	ContextMoqParam  context.Context
	ListBucketsInput *s3.ListBucketsInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		ListBucketsInput *s3.ListBucketsInput
		Options          []request.Option
	}
	mock.lockListBucketsWithContext.RLock()
	calls = mock.calls.ListBucketsWithContext
	mock.lockListBucketsWithContext.RUnlock()
	return calls
}

// ListMultipartUploads calls ListMultipartUploadsFunc.
func (mock *s3ClientMock) ListMultipartUploads(listMultipartUploadsInput *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error) {
	if mock.ListMultipartUploadsFunc == nil {
		panic("s3ClientMock.ListMultipartUploadsFunc: method is nil but s3Client.ListMultipartUploads was just called")
	}
	callInfo := struct {
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
	}{
		ListMultipartUploadsInput: listMultipartUploadsInput,
	}
	mock.lockListMultipartUploads.Lock()
	mock.calls.ListMultipartUploads = append(mock.calls.ListMultipartUploads, callInfo)
	mock.lockListMultipartUploads.Unlock()
	return mock.ListMultipartUploadsFunc(listMultipartUploadsInput)
}

// ListMultipartUploadsCalls gets all the calls that were made to ListMultipartUploads.
// Check the length with:
//     len(mockeds3Client.ListMultipartUploadsCalls())
func (mock *s3ClientMock) ListMultipartUploadsCalls() []struct {
	ListMultipartUploadsInput *s3.ListMultipartUploadsInput
} {
	var calls []struct {
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
	}
	mock.lockListMultipartUploads.RLock()
	calls = mock.calls.ListMultipartUploads
	mock.lockListMultipartUploads.RUnlock()
	return calls
}

// ListMultipartUploadsPages calls ListMultipartUploadsPagesFunc.
func (mock *s3ClientMock) ListMultipartUploadsPages(listMultipartUploadsInput *s3.ListMultipartUploadsInput, fn func(*s3.ListMultipartUploadsOutput, bool) bool) error {
	if mock.ListMultipartUploadsPagesFunc == nil {
		panic("s3ClientMock.ListMultipartUploadsPagesFunc: method is nil but s3Client.ListMultipartUploadsPages was just called")
	}
	callInfo := struct {
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
		Fn                        func(*s3.ListMultipartUploadsOutput, bool) bool
	}{
		ListMultipartUploadsInput: listMultipartUploadsInput,
		Fn:                        fn,
	}
	mock.lockListMultipartUploadsPages.Lock()
	mock.calls.ListMultipartUploadsPages = append(mock.calls.ListMultipartUploadsPages, callInfo)
	mock.lockListMultipartUploadsPages.Unlock()
	return mock.ListMultipartUploadsPagesFunc(listMultipartUploadsInput, fn)
}

// ListMultipartUploadsPagesCalls gets all the calls that were made to ListMultipartUploadsPages.
// Check the length with:
//     len(mockeds3Client.ListMultipartUploadsPagesCalls())
func (mock *s3ClientMock) ListMultipartUploadsPagesCalls() []struct {
	ListMultipartUploadsInput *s3.ListMultipartUploadsInput
	Fn                        func(*s3.ListMultipartUploadsOutput, bool) bool
} {
	var calls []struct {
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
		Fn                        func(*s3.ListMultipartUploadsOutput, bool) bool
	}
	mock.lockListMultipartUploadsPages.RLock()
	calls = mock.calls.ListMultipartUploadsPages
	mock.lockListMultipartUploadsPages.RUnlock()
	return calls
}

// ListMultipartUploadsPagesWithContext calls ListMultipartUploadsPagesWithContextFunc.
func (mock *s3ClientMock) ListMultipartUploadsPagesWithContext(contextMoqParam context.Context, listMultipartUploadsInput *s3.ListMultipartUploadsInput, fn func(*s3.ListMultipartUploadsOutput, bool) bool, options ...request.Option) error {
	if mock.ListMultipartUploadsPagesWithContextFunc == nil {
		panic("s3ClientMock.ListMultipartUploadsPagesWithContextFunc: method is nil but s3Client.ListMultipartUploadsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
		Fn                        func(*s3.ListMultipartUploadsOutput, bool) bool
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		ListMultipartUploadsInput: listMultipartUploadsInput,
		Fn:                        fn,
		Options:                   options,
	}
	mock.lockListMultipartUploadsPagesWithContext.Lock()
	mock.calls.ListMultipartUploadsPagesWithContext = append(mock.calls.ListMultipartUploadsPagesWithContext, callInfo)
	mock.lockListMultipartUploadsPagesWithContext.Unlock()
	return mock.ListMultipartUploadsPagesWithContextFunc(contextMoqParam, listMultipartUploadsInput, fn, options...)
}

// ListMultipartUploadsPagesWithContextCalls gets all the calls that were made to ListMultipartUploadsPagesWithContext.
// Check the length with:
//     len(mockeds3Client.ListMultipartUploadsPagesWithContextCalls())
func (mock *s3ClientMock) ListMultipartUploadsPagesWithContextCalls() []struct {
	ContextMoqParam           context.Context
	ListMultipartUploadsInput *s3.ListMultipartUploadsInput
	Fn                        func(*s3.ListMultipartUploadsOutput, bool) bool
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
		Fn                        func(*s3.ListMultipartUploadsOutput, bool) bool
		Options                   []request.Option
	}
	mock.lockListMultipartUploadsPagesWithContext.RLock()
	calls = mock.calls.ListMultipartUploadsPagesWithContext
	mock.lockListMultipartUploadsPagesWithContext.RUnlock()
	return calls
}

// ListMultipartUploadsRequest calls ListMultipartUploadsRequestFunc.
func (mock *s3ClientMock) ListMultipartUploadsRequest(listMultipartUploadsInput *s3.ListMultipartUploadsInput) (*request.Request, *s3.ListMultipartUploadsOutput) {
	if mock.ListMultipartUploadsRequestFunc == nil {
		panic("s3ClientMock.ListMultipartUploadsRequestFunc: method is nil but s3Client.ListMultipartUploadsRequest was just called")
	}
	callInfo := struct {
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
	}{
		ListMultipartUploadsInput: listMultipartUploadsInput,
	}
	mock.lockListMultipartUploadsRequest.Lock()
	mock.calls.ListMultipartUploadsRequest = append(mock.calls.ListMultipartUploadsRequest, callInfo)
	mock.lockListMultipartUploadsRequest.Unlock()
	return mock.ListMultipartUploadsRequestFunc(listMultipartUploadsInput)
}

// ListMultipartUploadsRequestCalls gets all the calls that were made to ListMultipartUploadsRequest.
// Check the length with:
//     len(mockeds3Client.ListMultipartUploadsRequestCalls())
func (mock *s3ClientMock) ListMultipartUploadsRequestCalls() []struct {
	ListMultipartUploadsInput *s3.ListMultipartUploadsInput
} {
	var calls []struct {
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
	}
	mock.lockListMultipartUploadsRequest.RLock()
	calls = mock.calls.ListMultipartUploadsRequest
	mock.lockListMultipartUploadsRequest.RUnlock()
	return calls
}

// ListMultipartUploadsWithContext calls ListMultipartUploadsWithContextFunc.
func (mock *s3ClientMock) ListMultipartUploadsWithContext(contextMoqParam context.Context, listMultipartUploadsInput *s3.ListMultipartUploadsInput, options ...request.Option) (*s3.ListMultipartUploadsOutput, error) {
	if mock.ListMultipartUploadsWithContextFunc == nil {
		panic("s3ClientMock.ListMultipartUploadsWithContextFunc: method is nil but s3Client.ListMultipartUploadsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		ListMultipartUploadsInput: listMultipartUploadsInput,
		Options:                   options,
	}
	mock.lockListMultipartUploadsWithContext.Lock()
	mock.calls.ListMultipartUploadsWithContext = append(mock.calls.ListMultipartUploadsWithContext, callInfo)
	mock.lockListMultipartUploadsWithContext.Unlock()
	return mock.ListMultipartUploadsWithContextFunc(contextMoqParam, listMultipartUploadsInput, options...)
}

// ListMultipartUploadsWithContextCalls gets all the calls that were made to ListMultipartUploadsWithContext.
// Check the length with:
//     len(mockeds3Client.ListMultipartUploadsWithContextCalls())
func (mock *s3ClientMock) ListMultipartUploadsWithContextCalls() []struct {
	ContextMoqParam           context.Context
	ListMultipartUploadsInput *s3.ListMultipartUploadsInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		ListMultipartUploadsInput *s3.ListMultipartUploadsInput
		Options                   []request.Option
	}
	mock.lockListMultipartUploadsWithContext.RLock()
	calls = mock.calls.ListMultipartUploadsWithContext
	mock.lockListMultipartUploadsWithContext.RUnlock()
	return calls
}

// ListObjectVersions calls ListObjectVersionsFunc.
func (mock *s3ClientMock) ListObjectVersions(listObjectVersionsInput *s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error) {
	if mock.ListObjectVersionsFunc == nil {
		panic("s3ClientMock.ListObjectVersionsFunc: method is nil but s3Client.ListObjectVersions was just called")
	}
	callInfo := struct {
		ListObjectVersionsInput *s3.ListObjectVersionsInput
	}{
		ListObjectVersionsInput: listObjectVersionsInput,
	}
	mock.lockListObjectVersions.Lock()
	mock.calls.ListObjectVersions = append(mock.calls.ListObjectVersions, callInfo)
	mock.lockListObjectVersions.Unlock()
	return mock.ListObjectVersionsFunc(listObjectVersionsInput)
}

// ListObjectVersionsCalls gets all the calls that were made to ListObjectVersions.
// Check the length with:
//     len(mockeds3Client.ListObjectVersionsCalls())
func (mock *s3ClientMock) ListObjectVersionsCalls() []struct {
	ListObjectVersionsInput *s3.ListObjectVersionsInput
} {
	var calls []struct {
		ListObjectVersionsInput *s3.ListObjectVersionsInput
	}
	mock.lockListObjectVersions.RLock()
	calls = mock.calls.ListObjectVersions
	mock.lockListObjectVersions.RUnlock()
	return calls
}

// ListObjectVersionsPages calls ListObjectVersionsPagesFunc.
func (mock *s3ClientMock) ListObjectVersionsPages(listObjectVersionsInput *s3.ListObjectVersionsInput, fn func(*s3.ListObjectVersionsOutput, bool) bool) error {
	if mock.ListObjectVersionsPagesFunc == nil {
		panic("s3ClientMock.ListObjectVersionsPagesFunc: method is nil but s3Client.ListObjectVersionsPages was just called")
	}
	callInfo := struct {
		ListObjectVersionsInput *s3.ListObjectVersionsInput
		Fn                      func(*s3.ListObjectVersionsOutput, bool) bool
	}{
		ListObjectVersionsInput: listObjectVersionsInput,
		Fn:                      fn,
	}
	mock.lockListObjectVersionsPages.Lock()
	mock.calls.ListObjectVersionsPages = append(mock.calls.ListObjectVersionsPages, callInfo)
	mock.lockListObjectVersionsPages.Unlock()
	return mock.ListObjectVersionsPagesFunc(listObjectVersionsInput, fn)
}

// ListObjectVersionsPagesCalls gets all the calls that were made to ListObjectVersionsPages.
// Check the length with:
//     len(mockeds3Client.ListObjectVersionsPagesCalls())
func (mock *s3ClientMock) ListObjectVersionsPagesCalls() []struct {
	ListObjectVersionsInput *s3.ListObjectVersionsInput
	Fn                      func(*s3.ListObjectVersionsOutput, bool) bool
} {
	var calls []struct {
		ListObjectVersionsInput *s3.ListObjectVersionsInput
		Fn                      func(*s3.ListObjectVersionsOutput, bool) bool
	}
	mock.lockListObjectVersionsPages.RLock()
	calls = mock.calls.ListObjectVersionsPages
	mock.lockListObjectVersionsPages.RUnlock()
	return calls
}

// ListObjectVersionsPagesWithContext calls ListObjectVersionsPagesWithContextFunc.
func (mock *s3ClientMock) ListObjectVersionsPagesWithContext(contextMoqParam context.Context, listObjectVersionsInput *s3.ListObjectVersionsInput, fn func(*s3.ListObjectVersionsOutput, bool) bool, options ...request.Option) error {
	if mock.ListObjectVersionsPagesWithContextFunc == nil {
		panic("s3ClientMock.ListObjectVersionsPagesWithContextFunc: method is nil but s3Client.ListObjectVersionsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		ListObjectVersionsInput *s3.ListObjectVersionsInput
		Fn                      func(*s3.ListObjectVersionsOutput, bool) bool
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		ListObjectVersionsInput: listObjectVersionsInput,
		Fn:                      fn,
		Options:                 options,
	}
	mock.lockListObjectVersionsPagesWithContext.Lock()
	mock.calls.ListObjectVersionsPagesWithContext = append(mock.calls.ListObjectVersionsPagesWithContext, callInfo)
	mock.lockListObjectVersionsPagesWithContext.Unlock()
	return mock.ListObjectVersionsPagesWithContextFunc(contextMoqParam, listObjectVersionsInput, fn, options...)
}

// ListObjectVersionsPagesWithContextCalls gets all the calls that were made to ListObjectVersionsPagesWithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectVersionsPagesWithContextCalls())
func (mock *s3ClientMock) ListObjectVersionsPagesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	ListObjectVersionsInput *s3.ListObjectVersionsInput
	Fn                      func(*s3.ListObjectVersionsOutput, bool) bool
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		ListObjectVersionsInput *s3.ListObjectVersionsInput
		Fn                      func(*s3.ListObjectVersionsOutput, bool) bool
		Options                 []request.Option
	}
	mock.lockListObjectVersionsPagesWithContext.RLock()
	calls = mock.calls.ListObjectVersionsPagesWithContext
	mock.lockListObjectVersionsPagesWithContext.RUnlock()
	return calls
}

// ListObjectVersionsRequest calls ListObjectVersionsRequestFunc.
func (mock *s3ClientMock) ListObjectVersionsRequest(listObjectVersionsInput *s3.ListObjectVersionsInput) (*request.Request, *s3.ListObjectVersionsOutput) {
	if mock.ListObjectVersionsRequestFunc == nil {
		panic("s3ClientMock.ListObjectVersionsRequestFunc: method is nil but s3Client.ListObjectVersionsRequest was just called")
	}
	callInfo := struct {
		ListObjectVersionsInput *s3.ListObjectVersionsInput
	}{
		ListObjectVersionsInput: listObjectVersionsInput,
	}
	mock.lockListObjectVersionsRequest.Lock()
	mock.calls.ListObjectVersionsRequest = append(mock.calls.ListObjectVersionsRequest, callInfo)
	mock.lockListObjectVersionsRequest.Unlock()
	return mock.ListObjectVersionsRequestFunc(listObjectVersionsInput)
}

// ListObjectVersionsRequestCalls gets all the calls that were made to ListObjectVersionsRequest.
// Check the length with:
//     len(mockeds3Client.ListObjectVersionsRequestCalls())
func (mock *s3ClientMock) ListObjectVersionsRequestCalls() []struct {
	ListObjectVersionsInput *s3.ListObjectVersionsInput
} {
	var calls []struct {
		ListObjectVersionsInput *s3.ListObjectVersionsInput
	}
	mock.lockListObjectVersionsRequest.RLock()
	calls = mock.calls.ListObjectVersionsRequest
	mock.lockListObjectVersionsRequest.RUnlock()
	return calls
}

// ListObjectVersionsWithContext calls ListObjectVersionsWithContextFunc.
func (mock *s3ClientMock) ListObjectVersionsWithContext(contextMoqParam context.Context, listObjectVersionsInput *s3.ListObjectVersionsInput, options ...request.Option) (*s3.ListObjectVersionsOutput, error) {
	if mock.ListObjectVersionsWithContextFunc == nil {
		panic("s3ClientMock.ListObjectVersionsWithContextFunc: method is nil but s3Client.ListObjectVersionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		ListObjectVersionsInput *s3.ListObjectVersionsInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		ListObjectVersionsInput: listObjectVersionsInput,
		Options:                 options,
	}
	mock.lockListObjectVersionsWithContext.Lock()
	mock.calls.ListObjectVersionsWithContext = append(mock.calls.ListObjectVersionsWithContext, callInfo)
	mock.lockListObjectVersionsWithContext.Unlock()
	return mock.ListObjectVersionsWithContextFunc(contextMoqParam, listObjectVersionsInput, options...)
}

// ListObjectVersionsWithContextCalls gets all the calls that were made to ListObjectVersionsWithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectVersionsWithContextCalls())
func (mock *s3ClientMock) ListObjectVersionsWithContextCalls() []struct {
	ContextMoqParam         context.Context
	ListObjectVersionsInput *s3.ListObjectVersionsInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		ListObjectVersionsInput *s3.ListObjectVersionsInput
		Options                 []request.Option
	}
	mock.lockListObjectVersionsWithContext.RLock()
	calls = mock.calls.ListObjectVersionsWithContext
	mock.lockListObjectVersionsWithContext.RUnlock()
	return calls
}

// ListObjects calls ListObjectsFunc.
func (mock *s3ClientMock) ListObjects(listObjectsInput *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {
	if mock.ListObjectsFunc == nil {
		panic("s3ClientMock.ListObjectsFunc: method is nil but s3Client.ListObjects was just called")
	}
	callInfo := struct {
		ListObjectsInput *s3.ListObjectsInput
	}{
		ListObjectsInput: listObjectsInput,
	}
	mock.lockListObjects.Lock()
	mock.calls.ListObjects = append(mock.calls.ListObjects, callInfo)
	mock.lockListObjects.Unlock()
	return mock.ListObjectsFunc(listObjectsInput)
}

// ListObjectsCalls gets all the calls that were made to ListObjects.
// Check the length with:
//     len(mockeds3Client.ListObjectsCalls())
func (mock *s3ClientMock) ListObjectsCalls() []struct {
	ListObjectsInput *s3.ListObjectsInput
} {
	var calls []struct {
		ListObjectsInput *s3.ListObjectsInput
	}
	mock.lockListObjects.RLock()
	calls = mock.calls.ListObjects
	mock.lockListObjects.RUnlock()
	return calls
}

// ListObjectsPages calls ListObjectsPagesFunc.
func (mock *s3ClientMock) ListObjectsPages(listObjectsInput *s3.ListObjectsInput, fn func(*s3.ListObjectsOutput, bool) bool) error {
	if mock.ListObjectsPagesFunc == nil {
		panic("s3ClientMock.ListObjectsPagesFunc: method is nil but s3Client.ListObjectsPages was just called")
	}
	callInfo := struct {
		ListObjectsInput *s3.ListObjectsInput
		Fn               func(*s3.ListObjectsOutput, bool) bool
	}{
		ListObjectsInput: listObjectsInput,
		Fn:               fn,
	}
	mock.lockListObjectsPages.Lock()
	mock.calls.ListObjectsPages = append(mock.calls.ListObjectsPages, callInfo)
	mock.lockListObjectsPages.Unlock()
	return mock.ListObjectsPagesFunc(listObjectsInput, fn)
}

// ListObjectsPagesCalls gets all the calls that were made to ListObjectsPages.
// Check the length with:
//     len(mockeds3Client.ListObjectsPagesCalls())
func (mock *s3ClientMock) ListObjectsPagesCalls() []struct {
	ListObjectsInput *s3.ListObjectsInput
	Fn               func(*s3.ListObjectsOutput, bool) bool
} {
	var calls []struct {
		ListObjectsInput *s3.ListObjectsInput
		Fn               func(*s3.ListObjectsOutput, bool) bool
	}
	mock.lockListObjectsPages.RLock()
	calls = mock.calls.ListObjectsPages
	mock.lockListObjectsPages.RUnlock()
	return calls
}

// ListObjectsPagesWithContext calls ListObjectsPagesWithContextFunc.
func (mock *s3ClientMock) ListObjectsPagesWithContext(contextMoqParam context.Context, listObjectsInput *s3.ListObjectsInput, fn func(*s3.ListObjectsOutput, bool) bool, options ...request.Option) error {
	if mock.ListObjectsPagesWithContextFunc == nil {
		panic("s3ClientMock.ListObjectsPagesWithContextFunc: method is nil but s3Client.ListObjectsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		ListObjectsInput *s3.ListObjectsInput
		Fn               func(*s3.ListObjectsOutput, bool) bool
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		ListObjectsInput: listObjectsInput,
		Fn:               fn,
		Options:          options,
	}
	mock.lockListObjectsPagesWithContext.Lock()
	mock.calls.ListObjectsPagesWithContext = append(mock.calls.ListObjectsPagesWithContext, callInfo)
	mock.lockListObjectsPagesWithContext.Unlock()
	return mock.ListObjectsPagesWithContextFunc(contextMoqParam, listObjectsInput, fn, options...)
}

// ListObjectsPagesWithContextCalls gets all the calls that were made to ListObjectsPagesWithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectsPagesWithContextCalls())
func (mock *s3ClientMock) ListObjectsPagesWithContextCalls() []struct {
	ContextMoqParam  context.Context
	ListObjectsInput *s3.ListObjectsInput
	Fn               func(*s3.ListObjectsOutput, bool) bool
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		ListObjectsInput *s3.ListObjectsInput
		Fn               func(*s3.ListObjectsOutput, bool) bool
		Options          []request.Option
	}
	mock.lockListObjectsPagesWithContext.RLock()
	calls = mock.calls.ListObjectsPagesWithContext
	mock.lockListObjectsPagesWithContext.RUnlock()
	return calls
}

// ListObjectsRequest calls ListObjectsRequestFunc.
func (mock *s3ClientMock) ListObjectsRequest(listObjectsInput *s3.ListObjectsInput) (*request.Request, *s3.ListObjectsOutput) {
	if mock.ListObjectsRequestFunc == nil {
		panic("s3ClientMock.ListObjectsRequestFunc: method is nil but s3Client.ListObjectsRequest was just called")
	}
	callInfo := struct {
		ListObjectsInput *s3.ListObjectsInput
	}{
		ListObjectsInput: listObjectsInput,
	}
	mock.lockListObjectsRequest.Lock()
	mock.calls.ListObjectsRequest = append(mock.calls.ListObjectsRequest, callInfo)
	mock.lockListObjectsRequest.Unlock()
	return mock.ListObjectsRequestFunc(listObjectsInput)
}

// ListObjectsRequestCalls gets all the calls that were made to ListObjectsRequest.
// Check the length with:
//     len(mockeds3Client.ListObjectsRequestCalls())
func (mock *s3ClientMock) ListObjectsRequestCalls() []struct {
	ListObjectsInput *s3.ListObjectsInput
} {
	var calls []struct {
		ListObjectsInput *s3.ListObjectsInput
	}
	mock.lockListObjectsRequest.RLock()
	calls = mock.calls.ListObjectsRequest
	mock.lockListObjectsRequest.RUnlock()
	return calls
}

// ListObjectsV2 calls ListObjectsV2Func.
func (mock *s3ClientMock) ListObjectsV2(listObjectsV2Input *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error) {
	if mock.ListObjectsV2Func == nil {
		panic("s3ClientMock.ListObjectsV2Func: method is nil but s3Client.ListObjectsV2 was just called")
	}
	callInfo := struct {
		ListObjectsV2Input *s3.ListObjectsV2Input
	}{
		ListObjectsV2Input: listObjectsV2Input,
	}
	mock.lockListObjectsV2.Lock()
	mock.calls.ListObjectsV2 = append(mock.calls.ListObjectsV2, callInfo)
	mock.lockListObjectsV2.Unlock()
	return mock.ListObjectsV2Func(listObjectsV2Input)
}

// ListObjectsV2Calls gets all the calls that were made to ListObjectsV2.
// Check the length with:
//     len(mockeds3Client.ListObjectsV2Calls())
func (mock *s3ClientMock) ListObjectsV2Calls() []struct {
	ListObjectsV2Input *s3.ListObjectsV2Input
} {
	var calls []struct {
		ListObjectsV2Input *s3.ListObjectsV2Input
	}
	mock.lockListObjectsV2.RLock()
	calls = mock.calls.ListObjectsV2
	mock.lockListObjectsV2.RUnlock()
	return calls
}

// ListObjectsV2Pages calls ListObjectsV2PagesFunc.
func (mock *s3ClientMock) ListObjectsV2Pages(listObjectsV2Input *s3.ListObjectsV2Input, fn func(*s3.ListObjectsV2Output, bool) bool) error {
	if mock.ListObjectsV2PagesFunc == nil {
		panic("s3ClientMock.ListObjectsV2PagesFunc: method is nil but s3Client.ListObjectsV2Pages was just called")
	}
	callInfo := struct {
		ListObjectsV2Input *s3.ListObjectsV2Input
		Fn                 func(*s3.ListObjectsV2Output, bool) bool
	}{
		ListObjectsV2Input: listObjectsV2Input,
		Fn:                 fn,
	}
	mock.lockListObjectsV2Pages.Lock()
	mock.calls.ListObjectsV2Pages = append(mock.calls.ListObjectsV2Pages, callInfo)
	mock.lockListObjectsV2Pages.Unlock()
	return mock.ListObjectsV2PagesFunc(listObjectsV2Input, fn)
}

// ListObjectsV2PagesCalls gets all the calls that were made to ListObjectsV2Pages.
// Check the length with:
//     len(mockeds3Client.ListObjectsV2PagesCalls())
func (mock *s3ClientMock) ListObjectsV2PagesCalls() []struct {
	ListObjectsV2Input *s3.ListObjectsV2Input
	Fn                 func(*s3.ListObjectsV2Output, bool) bool
} {
	var calls []struct {
		ListObjectsV2Input *s3.ListObjectsV2Input
		Fn                 func(*s3.ListObjectsV2Output, bool) bool
	}
	mock.lockListObjectsV2Pages.RLock()
	calls = mock.calls.ListObjectsV2Pages
	mock.lockListObjectsV2Pages.RUnlock()
	return calls
}

// ListObjectsV2PagesWithContext calls ListObjectsV2PagesWithContextFunc.
func (mock *s3ClientMock) ListObjectsV2PagesWithContext(contextMoqParam context.Context, listObjectsV2Input *s3.ListObjectsV2Input, fn func(*s3.ListObjectsV2Output, bool) bool, options ...request.Option) error {
	if mock.ListObjectsV2PagesWithContextFunc == nil {
		panic("s3ClientMock.ListObjectsV2PagesWithContextFunc: method is nil but s3Client.ListObjectsV2PagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		ListObjectsV2Input *s3.ListObjectsV2Input
		Fn                 func(*s3.ListObjectsV2Output, bool) bool
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		ListObjectsV2Input: listObjectsV2Input,
		Fn:                 fn,
		Options:            options,
	}
	mock.lockListObjectsV2PagesWithContext.Lock()
	mock.calls.ListObjectsV2PagesWithContext = append(mock.calls.ListObjectsV2PagesWithContext, callInfo)
	mock.lockListObjectsV2PagesWithContext.Unlock()
	return mock.ListObjectsV2PagesWithContextFunc(contextMoqParam, listObjectsV2Input, fn, options...)
}

// ListObjectsV2PagesWithContextCalls gets all the calls that were made to ListObjectsV2PagesWithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectsV2PagesWithContextCalls())
func (mock *s3ClientMock) ListObjectsV2PagesWithContextCalls() []struct {
	ContextMoqParam    context.Context
	ListObjectsV2Input *s3.ListObjectsV2Input
	Fn                 func(*s3.ListObjectsV2Output, bool) bool
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		ListObjectsV2Input *s3.ListObjectsV2Input
		Fn                 func(*s3.ListObjectsV2Output, bool) bool
		Options            []request.Option
	}
	mock.lockListObjectsV2PagesWithContext.RLock()
	calls = mock.calls.ListObjectsV2PagesWithContext
	mock.lockListObjectsV2PagesWithContext.RUnlock()
	return calls
}

// ListObjectsV2Request calls ListObjectsV2RequestFunc.
func (mock *s3ClientMock) ListObjectsV2Request(listObjectsV2Input *s3.ListObjectsV2Input) (*request.Request, *s3.ListObjectsV2Output) {
	if mock.ListObjectsV2RequestFunc == nil {
		panic("s3ClientMock.ListObjectsV2RequestFunc: method is nil but s3Client.ListObjectsV2Request was just called")
	}
	callInfo := struct {
		ListObjectsV2Input *s3.ListObjectsV2Input
	}{
		ListObjectsV2Input: listObjectsV2Input,
	}
	mock.lockListObjectsV2Request.Lock()
	mock.calls.ListObjectsV2Request = append(mock.calls.ListObjectsV2Request, callInfo)
	mock.lockListObjectsV2Request.Unlock()
	return mock.ListObjectsV2RequestFunc(listObjectsV2Input)
}

// ListObjectsV2RequestCalls gets all the calls that were made to ListObjectsV2Request.
// Check the length with:
//     len(mockeds3Client.ListObjectsV2RequestCalls())
func (mock *s3ClientMock) ListObjectsV2RequestCalls() []struct {
	ListObjectsV2Input *s3.ListObjectsV2Input
} {
	var calls []struct {
		ListObjectsV2Input *s3.ListObjectsV2Input
	}
	mock.lockListObjectsV2Request.RLock()
	calls = mock.calls.ListObjectsV2Request
	mock.lockListObjectsV2Request.RUnlock()
	return calls
}

// ListObjectsV2WithContext calls ListObjectsV2WithContextFunc.
func (mock *s3ClientMock) ListObjectsV2WithContext(contextMoqParam context.Context, listObjectsV2Input *s3.ListObjectsV2Input, options ...request.Option) (*s3.ListObjectsV2Output, error) {
	if mock.ListObjectsV2WithContextFunc == nil {
		panic("s3ClientMock.ListObjectsV2WithContextFunc: method is nil but s3Client.ListObjectsV2WithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		ListObjectsV2Input *s3.ListObjectsV2Input
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		ListObjectsV2Input: listObjectsV2Input,
		Options:            options,
	}
	mock.lockListObjectsV2WithContext.Lock()
	mock.calls.ListObjectsV2WithContext = append(mock.calls.ListObjectsV2WithContext, callInfo)
	mock.lockListObjectsV2WithContext.Unlock()
	return mock.ListObjectsV2WithContextFunc(contextMoqParam, listObjectsV2Input, options...)
}

// ListObjectsV2WithContextCalls gets all the calls that were made to ListObjectsV2WithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectsV2WithContextCalls())
func (mock *s3ClientMock) ListObjectsV2WithContextCalls() []struct {
	ContextMoqParam    context.Context
	ListObjectsV2Input *s3.ListObjectsV2Input
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		ListObjectsV2Input *s3.ListObjectsV2Input
		Options            []request.Option
	}
	mock.lockListObjectsV2WithContext.RLock()
	calls = mock.calls.ListObjectsV2WithContext
	mock.lockListObjectsV2WithContext.RUnlock()
	return calls
}

// ListObjectsWithContext calls ListObjectsWithContextFunc.
func (mock *s3ClientMock) ListObjectsWithContext(contextMoqParam context.Context, listObjectsInput *s3.ListObjectsInput, options ...request.Option) (*s3.ListObjectsOutput, error) {
	if mock.ListObjectsWithContextFunc == nil {
		panic("s3ClientMock.ListObjectsWithContextFunc: method is nil but s3Client.ListObjectsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		ListObjectsInput *s3.ListObjectsInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		ListObjectsInput: listObjectsInput,
		Options:          options,
	}
	mock.lockListObjectsWithContext.Lock()
	mock.calls.ListObjectsWithContext = append(mock.calls.ListObjectsWithContext, callInfo)
	mock.lockListObjectsWithContext.Unlock()
	return mock.ListObjectsWithContextFunc(contextMoqParam, listObjectsInput, options...)
}

// ListObjectsWithContextCalls gets all the calls that were made to ListObjectsWithContext.
// Check the length with:
//     len(mockeds3Client.ListObjectsWithContextCalls())
func (mock *s3ClientMock) ListObjectsWithContextCalls() []struct {
	ContextMoqParam  context.Context
	ListObjectsInput *s3.ListObjectsInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		ListObjectsInput *s3.ListObjectsInput
		Options          []request.Option
	}
	mock.lockListObjectsWithContext.RLock()
	calls = mock.calls.ListObjectsWithContext
	mock.lockListObjectsWithContext.RUnlock()
	return calls
}

// ListParts calls ListPartsFunc.
func (mock *s3ClientMock) ListParts(listPartsInput *s3.ListPartsInput) (*s3.ListPartsOutput, error) {
	if mock.ListPartsFunc == nil {
		panic("s3ClientMock.ListPartsFunc: method is nil but s3Client.ListParts was just called")
	}
	callInfo := struct {
		ListPartsInput *s3.ListPartsInput
	}{
		ListPartsInput: listPartsInput,
	}
	mock.lockListParts.Lock()
	mock.calls.ListParts = append(mock.calls.ListParts, callInfo)
	mock.lockListParts.Unlock()
	return mock.ListPartsFunc(listPartsInput)
}

// ListPartsCalls gets all the calls that were made to ListParts.
// Check the length with:
//     len(mockeds3Client.ListPartsCalls())
func (mock *s3ClientMock) ListPartsCalls() []struct {
	ListPartsInput *s3.ListPartsInput
} {
	var calls []struct {
		ListPartsInput *s3.ListPartsInput
	}
	mock.lockListParts.RLock()
	calls = mock.calls.ListParts
	mock.lockListParts.RUnlock()
	return calls
}

// ListPartsPages calls ListPartsPagesFunc.
func (mock *s3ClientMock) ListPartsPages(listPartsInput *s3.ListPartsInput, fn func(*s3.ListPartsOutput, bool) bool) error {
	if mock.ListPartsPagesFunc == nil {
		panic("s3ClientMock.ListPartsPagesFunc: method is nil but s3Client.ListPartsPages was just called")
	}
	callInfo := struct {
		ListPartsInput *s3.ListPartsInput
		Fn             func(*s3.ListPartsOutput, bool) bool
	}{
		ListPartsInput: listPartsInput,
		Fn:             fn,
	}
	mock.lockListPartsPages.Lock()
	mock.calls.ListPartsPages = append(mock.calls.ListPartsPages, callInfo)
	mock.lockListPartsPages.Unlock()
	return mock.ListPartsPagesFunc(listPartsInput, fn)
}

// ListPartsPagesCalls gets all the calls that were made to ListPartsPages.
// Check the length with:
//     len(mockeds3Client.ListPartsPagesCalls())
func (mock *s3ClientMock) ListPartsPagesCalls() []struct {
	ListPartsInput *s3.ListPartsInput
	Fn             func(*s3.ListPartsOutput, bool) bool
} {
	var calls []struct {
		ListPartsInput *s3.ListPartsInput
		Fn             func(*s3.ListPartsOutput, bool) bool
	}
	mock.lockListPartsPages.RLock()
	calls = mock.calls.ListPartsPages
	mock.lockListPartsPages.RUnlock()
	return calls
}

// ListPartsPagesWithContext calls ListPartsPagesWithContextFunc.
func (mock *s3ClientMock) ListPartsPagesWithContext(contextMoqParam context.Context, listPartsInput *s3.ListPartsInput, fn func(*s3.ListPartsOutput, bool) bool, options ...request.Option) error {
	if mock.ListPartsPagesWithContextFunc == nil {
		panic("s3ClientMock.ListPartsPagesWithContextFunc: method is nil but s3Client.ListPartsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ListPartsInput  *s3.ListPartsInput
		Fn              func(*s3.ListPartsOutput, bool) bool
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListPartsInput:  listPartsInput,
		Fn:              fn,
		Options:         options,
	}
	mock.lockListPartsPagesWithContext.Lock()
	mock.calls.ListPartsPagesWithContext = append(mock.calls.ListPartsPagesWithContext, callInfo)
	mock.lockListPartsPagesWithContext.Unlock()
	return mock.ListPartsPagesWithContextFunc(contextMoqParam, listPartsInput, fn, options...)
}

// ListPartsPagesWithContextCalls gets all the calls that were made to ListPartsPagesWithContext.
// Check the length with:
//     len(mockeds3Client.ListPartsPagesWithContextCalls())
func (mock *s3ClientMock) ListPartsPagesWithContextCalls() []struct {
	ContextMoqParam context.Context
	ListPartsInput  *s3.ListPartsInput
	Fn              func(*s3.ListPartsOutput, bool) bool
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListPartsInput  *s3.ListPartsInput
		Fn              func(*s3.ListPartsOutput, bool) bool
		Options         []request.Option
	}
	mock.lockListPartsPagesWithContext.RLock()
	calls = mock.calls.ListPartsPagesWithContext
	mock.lockListPartsPagesWithContext.RUnlock()
	return calls
}

// ListPartsRequest calls ListPartsRequestFunc.
func (mock *s3ClientMock) ListPartsRequest(listPartsInput *s3.ListPartsInput) (*request.Request, *s3.ListPartsOutput) {
	if mock.ListPartsRequestFunc == nil {
		panic("s3ClientMock.ListPartsRequestFunc: method is nil but s3Client.ListPartsRequest was just called")
	}
	callInfo := struct {
		ListPartsInput *s3.ListPartsInput
	}{
		ListPartsInput: listPartsInput,
	}
	mock.lockListPartsRequest.Lock()
	mock.calls.ListPartsRequest = append(mock.calls.ListPartsRequest, callInfo)
	mock.lockListPartsRequest.Unlock()
	return mock.ListPartsRequestFunc(listPartsInput)
}

// ListPartsRequestCalls gets all the calls that were made to ListPartsRequest.
// Check the length with:
//     len(mockeds3Client.ListPartsRequestCalls())
func (mock *s3ClientMock) ListPartsRequestCalls() []struct {
	ListPartsInput *s3.ListPartsInput
} {
	var calls []struct {
		ListPartsInput *s3.ListPartsInput
	}
	mock.lockListPartsRequest.RLock()
	calls = mock.calls.ListPartsRequest
	mock.lockListPartsRequest.RUnlock()
	return calls
}

// ListPartsWithContext calls ListPartsWithContextFunc.
func (mock *s3ClientMock) ListPartsWithContext(contextMoqParam context.Context, listPartsInput *s3.ListPartsInput, options ...request.Option) (*s3.ListPartsOutput, error) {
	if mock.ListPartsWithContextFunc == nil {
		panic("s3ClientMock.ListPartsWithContextFunc: method is nil but s3Client.ListPartsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ListPartsInput  *s3.ListPartsInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ListPartsInput:  listPartsInput,
		Options:         options,
	}
	mock.lockListPartsWithContext.Lock()
	mock.calls.ListPartsWithContext = append(mock.calls.ListPartsWithContext, callInfo)
	mock.lockListPartsWithContext.Unlock()
	return mock.ListPartsWithContextFunc(contextMoqParam, listPartsInput, options...)
}

// ListPartsWithContextCalls gets all the calls that were made to ListPartsWithContext.
// Check the length with:
//     len(mockeds3Client.ListPartsWithContextCalls())
func (mock *s3ClientMock) ListPartsWithContextCalls() []struct {
	ContextMoqParam context.Context
	ListPartsInput  *s3.ListPartsInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListPartsInput  *s3.ListPartsInput
		Options         []request.Option
	}
	mock.lockListPartsWithContext.RLock()
	calls = mock.calls.ListPartsWithContext
	mock.lockListPartsWithContext.RUnlock()
	return calls
}

// PutBucketAccelerateConfiguration calls PutBucketAccelerateConfigurationFunc.
func (mock *s3ClientMock) PutBucketAccelerateConfiguration(putBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	if mock.PutBucketAccelerateConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketAccelerateConfigurationFunc: method is nil but s3Client.PutBucketAccelerateConfiguration was just called")
	}
	callInfo := struct {
		PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
	}{
		PutBucketAccelerateConfigurationInput: putBucketAccelerateConfigurationInput,
	}
	mock.lockPutBucketAccelerateConfiguration.Lock()
	mock.calls.PutBucketAccelerateConfiguration = append(mock.calls.PutBucketAccelerateConfiguration, callInfo)
	mock.lockPutBucketAccelerateConfiguration.Unlock()
	return mock.PutBucketAccelerateConfigurationFunc(putBucketAccelerateConfigurationInput)
}

// PutBucketAccelerateConfigurationCalls gets all the calls that were made to PutBucketAccelerateConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketAccelerateConfigurationCalls())
func (mock *s3ClientMock) PutBucketAccelerateConfigurationCalls() []struct {
	PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
} {
	var calls []struct {
		PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
	}
	mock.lockPutBucketAccelerateConfiguration.RLock()
	calls = mock.calls.PutBucketAccelerateConfiguration
	mock.lockPutBucketAccelerateConfiguration.RUnlock()
	return calls
}

// PutBucketAccelerateConfigurationRequest calls PutBucketAccelerateConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketAccelerateConfigurationRequest(putBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput) (*request.Request, *s3.PutBucketAccelerateConfigurationOutput) {
	if mock.PutBucketAccelerateConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketAccelerateConfigurationRequestFunc: method is nil but s3Client.PutBucketAccelerateConfigurationRequest was just called")
	}
	callInfo := struct {
		PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
	}{
		PutBucketAccelerateConfigurationInput: putBucketAccelerateConfigurationInput,
	}
	mock.lockPutBucketAccelerateConfigurationRequest.Lock()
	mock.calls.PutBucketAccelerateConfigurationRequest = append(mock.calls.PutBucketAccelerateConfigurationRequest, callInfo)
	mock.lockPutBucketAccelerateConfigurationRequest.Unlock()
	return mock.PutBucketAccelerateConfigurationRequestFunc(putBucketAccelerateConfigurationInput)
}

// PutBucketAccelerateConfigurationRequestCalls gets all the calls that were made to PutBucketAccelerateConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketAccelerateConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketAccelerateConfigurationRequestCalls() []struct {
	PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
} {
	var calls []struct {
		PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
	}
	mock.lockPutBucketAccelerateConfigurationRequest.RLock()
	calls = mock.calls.PutBucketAccelerateConfigurationRequest
	mock.lockPutBucketAccelerateConfigurationRequest.RUnlock()
	return calls
}

// PutBucketAccelerateConfigurationWithContext calls PutBucketAccelerateConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketAccelerateConfigurationWithContext(contextMoqParam context.Context, putBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput, options ...request.Option) (*s3.PutBucketAccelerateConfigurationOutput, error) {
	if mock.PutBucketAccelerateConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketAccelerateConfigurationWithContextFunc: method is nil but s3Client.PutBucketAccelerateConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                       context.Context
		PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
		Options                               []request.Option
	}{
		ContextMoqParam:                       contextMoqParam,
		PutBucketAccelerateConfigurationInput: putBucketAccelerateConfigurationInput,
		Options:                               options,
	}
	mock.lockPutBucketAccelerateConfigurationWithContext.Lock()
	mock.calls.PutBucketAccelerateConfigurationWithContext = append(mock.calls.PutBucketAccelerateConfigurationWithContext, callInfo)
	mock.lockPutBucketAccelerateConfigurationWithContext.Unlock()
	return mock.PutBucketAccelerateConfigurationWithContextFunc(contextMoqParam, putBucketAccelerateConfigurationInput, options...)
}

// PutBucketAccelerateConfigurationWithContextCalls gets all the calls that were made to PutBucketAccelerateConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketAccelerateConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketAccelerateConfigurationWithContextCalls() []struct {
	ContextMoqParam                       context.Context
	PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
	Options                               []request.Option
} {
	var calls []struct {
		ContextMoqParam                       context.Context
		PutBucketAccelerateConfigurationInput *s3.PutBucketAccelerateConfigurationInput
		Options                               []request.Option
	}
	mock.lockPutBucketAccelerateConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketAccelerateConfigurationWithContext
	mock.lockPutBucketAccelerateConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketAcl calls PutBucketAclFunc.
func (mock *s3ClientMock) PutBucketAcl(putBucketAclInput *s3.PutBucketAclInput) (*s3.PutBucketAclOutput, error) {
	if mock.PutBucketAclFunc == nil {
		panic("s3ClientMock.PutBucketAclFunc: method is nil but s3Client.PutBucketAcl was just called")
	}
	callInfo := struct {
		PutBucketAclInput *s3.PutBucketAclInput
	}{
		PutBucketAclInput: putBucketAclInput,
	}
	mock.lockPutBucketAcl.Lock()
	mock.calls.PutBucketAcl = append(mock.calls.PutBucketAcl, callInfo)
	mock.lockPutBucketAcl.Unlock()
	return mock.PutBucketAclFunc(putBucketAclInput)
}

// PutBucketAclCalls gets all the calls that were made to PutBucketAcl.
// Check the length with:
//     len(mockeds3Client.PutBucketAclCalls())
func (mock *s3ClientMock) PutBucketAclCalls() []struct {
	PutBucketAclInput *s3.PutBucketAclInput
} {
	var calls []struct {
		PutBucketAclInput *s3.PutBucketAclInput
	}
	mock.lockPutBucketAcl.RLock()
	calls = mock.calls.PutBucketAcl
	mock.lockPutBucketAcl.RUnlock()
	return calls
}

// PutBucketAclRequest calls PutBucketAclRequestFunc.
func (mock *s3ClientMock) PutBucketAclRequest(putBucketAclInput *s3.PutBucketAclInput) (*request.Request, *s3.PutBucketAclOutput) {
	if mock.PutBucketAclRequestFunc == nil {
		panic("s3ClientMock.PutBucketAclRequestFunc: method is nil but s3Client.PutBucketAclRequest was just called")
	}
	callInfo := struct {
		PutBucketAclInput *s3.PutBucketAclInput
	}{
		PutBucketAclInput: putBucketAclInput,
	}
	mock.lockPutBucketAclRequest.Lock()
	mock.calls.PutBucketAclRequest = append(mock.calls.PutBucketAclRequest, callInfo)
	mock.lockPutBucketAclRequest.Unlock()
	return mock.PutBucketAclRequestFunc(putBucketAclInput)
}

// PutBucketAclRequestCalls gets all the calls that were made to PutBucketAclRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketAclRequestCalls())
func (mock *s3ClientMock) PutBucketAclRequestCalls() []struct {
	PutBucketAclInput *s3.PutBucketAclInput
} {
	var calls []struct {
		PutBucketAclInput *s3.PutBucketAclInput
	}
	mock.lockPutBucketAclRequest.RLock()
	calls = mock.calls.PutBucketAclRequest
	mock.lockPutBucketAclRequest.RUnlock()
	return calls
}

// PutBucketAclWithContext calls PutBucketAclWithContextFunc.
func (mock *s3ClientMock) PutBucketAclWithContext(contextMoqParam context.Context, putBucketAclInput *s3.PutBucketAclInput, options ...request.Option) (*s3.PutBucketAclOutput, error) {
	if mock.PutBucketAclWithContextFunc == nil {
		panic("s3ClientMock.PutBucketAclWithContextFunc: method is nil but s3Client.PutBucketAclWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		PutBucketAclInput *s3.PutBucketAclInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		PutBucketAclInput: putBucketAclInput,
		Options:           options,
	}
	mock.lockPutBucketAclWithContext.Lock()
	mock.calls.PutBucketAclWithContext = append(mock.calls.PutBucketAclWithContext, callInfo)
	mock.lockPutBucketAclWithContext.Unlock()
	return mock.PutBucketAclWithContextFunc(contextMoqParam, putBucketAclInput, options...)
}

// PutBucketAclWithContextCalls gets all the calls that were made to PutBucketAclWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketAclWithContextCalls())
func (mock *s3ClientMock) PutBucketAclWithContextCalls() []struct {
	ContextMoqParam   context.Context
	PutBucketAclInput *s3.PutBucketAclInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		PutBucketAclInput *s3.PutBucketAclInput
		Options           []request.Option
	}
	mock.lockPutBucketAclWithContext.RLock()
	calls = mock.calls.PutBucketAclWithContext
	mock.lockPutBucketAclWithContext.RUnlock()
	return calls
}

// PutBucketAnalyticsConfiguration calls PutBucketAnalyticsConfigurationFunc.
func (mock *s3ClientMock) PutBucketAnalyticsConfiguration(putBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	if mock.PutBucketAnalyticsConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketAnalyticsConfigurationFunc: method is nil but s3Client.PutBucketAnalyticsConfiguration was just called")
	}
	callInfo := struct {
		PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
	}{
		PutBucketAnalyticsConfigurationInput: putBucketAnalyticsConfigurationInput,
	}
	mock.lockPutBucketAnalyticsConfiguration.Lock()
	mock.calls.PutBucketAnalyticsConfiguration = append(mock.calls.PutBucketAnalyticsConfiguration, callInfo)
	mock.lockPutBucketAnalyticsConfiguration.Unlock()
	return mock.PutBucketAnalyticsConfigurationFunc(putBucketAnalyticsConfigurationInput)
}

// PutBucketAnalyticsConfigurationCalls gets all the calls that were made to PutBucketAnalyticsConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketAnalyticsConfigurationCalls())
func (mock *s3ClientMock) PutBucketAnalyticsConfigurationCalls() []struct {
	PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
	}
	mock.lockPutBucketAnalyticsConfiguration.RLock()
	calls = mock.calls.PutBucketAnalyticsConfiguration
	mock.lockPutBucketAnalyticsConfiguration.RUnlock()
	return calls
}

// PutBucketAnalyticsConfigurationRequest calls PutBucketAnalyticsConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketAnalyticsConfigurationRequest(putBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput) (*request.Request, *s3.PutBucketAnalyticsConfigurationOutput) {
	if mock.PutBucketAnalyticsConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketAnalyticsConfigurationRequestFunc: method is nil but s3Client.PutBucketAnalyticsConfigurationRequest was just called")
	}
	callInfo := struct {
		PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
	}{
		PutBucketAnalyticsConfigurationInput: putBucketAnalyticsConfigurationInput,
	}
	mock.lockPutBucketAnalyticsConfigurationRequest.Lock()
	mock.calls.PutBucketAnalyticsConfigurationRequest = append(mock.calls.PutBucketAnalyticsConfigurationRequest, callInfo)
	mock.lockPutBucketAnalyticsConfigurationRequest.Unlock()
	return mock.PutBucketAnalyticsConfigurationRequestFunc(putBucketAnalyticsConfigurationInput)
}

// PutBucketAnalyticsConfigurationRequestCalls gets all the calls that were made to PutBucketAnalyticsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketAnalyticsConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketAnalyticsConfigurationRequestCalls() []struct {
	PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
} {
	var calls []struct {
		PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
	}
	mock.lockPutBucketAnalyticsConfigurationRequest.RLock()
	calls = mock.calls.PutBucketAnalyticsConfigurationRequest
	mock.lockPutBucketAnalyticsConfigurationRequest.RUnlock()
	return calls
}

// PutBucketAnalyticsConfigurationWithContext calls PutBucketAnalyticsConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketAnalyticsConfigurationWithContext(contextMoqParam context.Context, putBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput, options ...request.Option) (*s3.PutBucketAnalyticsConfigurationOutput, error) {
	if mock.PutBucketAnalyticsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketAnalyticsConfigurationWithContextFunc: method is nil but s3Client.PutBucketAnalyticsConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		PutBucketAnalyticsConfigurationInput: putBucketAnalyticsConfigurationInput,
		Options:                              options,
	}
	mock.lockPutBucketAnalyticsConfigurationWithContext.Lock()
	mock.calls.PutBucketAnalyticsConfigurationWithContext = append(mock.calls.PutBucketAnalyticsConfigurationWithContext, callInfo)
	mock.lockPutBucketAnalyticsConfigurationWithContext.Unlock()
	return mock.PutBucketAnalyticsConfigurationWithContextFunc(contextMoqParam, putBucketAnalyticsConfigurationInput, options...)
}

// PutBucketAnalyticsConfigurationWithContextCalls gets all the calls that were made to PutBucketAnalyticsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketAnalyticsConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketAnalyticsConfigurationWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		PutBucketAnalyticsConfigurationInput *s3.PutBucketAnalyticsConfigurationInput
		Options                              []request.Option
	}
	mock.lockPutBucketAnalyticsConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketAnalyticsConfigurationWithContext
	mock.lockPutBucketAnalyticsConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketCors calls PutBucketCorsFunc.
func (mock *s3ClientMock) PutBucketCors(putBucketCorsInput *s3.PutBucketCorsInput) (*s3.PutBucketCorsOutput, error) {
	if mock.PutBucketCorsFunc == nil {
		panic("s3ClientMock.PutBucketCorsFunc: method is nil but s3Client.PutBucketCors was just called")
	}
	callInfo := struct {
		PutBucketCorsInput *s3.PutBucketCorsInput
	}{
		PutBucketCorsInput: putBucketCorsInput,
	}
	mock.lockPutBucketCors.Lock()
	mock.calls.PutBucketCors = append(mock.calls.PutBucketCors, callInfo)
	mock.lockPutBucketCors.Unlock()
	return mock.PutBucketCorsFunc(putBucketCorsInput)
}

// PutBucketCorsCalls gets all the calls that were made to PutBucketCors.
// Check the length with:
//     len(mockeds3Client.PutBucketCorsCalls())
func (mock *s3ClientMock) PutBucketCorsCalls() []struct {
	PutBucketCorsInput *s3.PutBucketCorsInput
} {
	var calls []struct {
		PutBucketCorsInput *s3.PutBucketCorsInput
	}
	mock.lockPutBucketCors.RLock()
	calls = mock.calls.PutBucketCors
	mock.lockPutBucketCors.RUnlock()
	return calls
}

// PutBucketCorsRequest calls PutBucketCorsRequestFunc.
func (mock *s3ClientMock) PutBucketCorsRequest(putBucketCorsInput *s3.PutBucketCorsInput) (*request.Request, *s3.PutBucketCorsOutput) {
	if mock.PutBucketCorsRequestFunc == nil {
		panic("s3ClientMock.PutBucketCorsRequestFunc: method is nil but s3Client.PutBucketCorsRequest was just called")
	}
	callInfo := struct {
		PutBucketCorsInput *s3.PutBucketCorsInput
	}{
		PutBucketCorsInput: putBucketCorsInput,
	}
	mock.lockPutBucketCorsRequest.Lock()
	mock.calls.PutBucketCorsRequest = append(mock.calls.PutBucketCorsRequest, callInfo)
	mock.lockPutBucketCorsRequest.Unlock()
	return mock.PutBucketCorsRequestFunc(putBucketCorsInput)
}

// PutBucketCorsRequestCalls gets all the calls that were made to PutBucketCorsRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketCorsRequestCalls())
func (mock *s3ClientMock) PutBucketCorsRequestCalls() []struct {
	PutBucketCorsInput *s3.PutBucketCorsInput
} {
	var calls []struct {
		PutBucketCorsInput *s3.PutBucketCorsInput
	}
	mock.lockPutBucketCorsRequest.RLock()
	calls = mock.calls.PutBucketCorsRequest
	mock.lockPutBucketCorsRequest.RUnlock()
	return calls
}

// PutBucketCorsWithContext calls PutBucketCorsWithContextFunc.
func (mock *s3ClientMock) PutBucketCorsWithContext(contextMoqParam context.Context, putBucketCorsInput *s3.PutBucketCorsInput, options ...request.Option) (*s3.PutBucketCorsOutput, error) {
	if mock.PutBucketCorsWithContextFunc == nil {
		panic("s3ClientMock.PutBucketCorsWithContextFunc: method is nil but s3Client.PutBucketCorsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		PutBucketCorsInput *s3.PutBucketCorsInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		PutBucketCorsInput: putBucketCorsInput,
		Options:            options,
	}
	mock.lockPutBucketCorsWithContext.Lock()
	mock.calls.PutBucketCorsWithContext = append(mock.calls.PutBucketCorsWithContext, callInfo)
	mock.lockPutBucketCorsWithContext.Unlock()
	return mock.PutBucketCorsWithContextFunc(contextMoqParam, putBucketCorsInput, options...)
}

// PutBucketCorsWithContextCalls gets all the calls that were made to PutBucketCorsWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketCorsWithContextCalls())
func (mock *s3ClientMock) PutBucketCorsWithContextCalls() []struct {
	ContextMoqParam    context.Context
	PutBucketCorsInput *s3.PutBucketCorsInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		PutBucketCorsInput *s3.PutBucketCorsInput
		Options            []request.Option
	}
	mock.lockPutBucketCorsWithContext.RLock()
	calls = mock.calls.PutBucketCorsWithContext
	mock.lockPutBucketCorsWithContext.RUnlock()
	return calls
}

// PutBucketEncryption calls PutBucketEncryptionFunc.
func (mock *s3ClientMock) PutBucketEncryption(putBucketEncryptionInput *s3.PutBucketEncryptionInput) (*s3.PutBucketEncryptionOutput, error) {
	if mock.PutBucketEncryptionFunc == nil {
		panic("s3ClientMock.PutBucketEncryptionFunc: method is nil but s3Client.PutBucketEncryption was just called")
	}
	callInfo := struct {
		PutBucketEncryptionInput *s3.PutBucketEncryptionInput
	}{
		PutBucketEncryptionInput: putBucketEncryptionInput,
	}
	mock.lockPutBucketEncryption.Lock()
	mock.calls.PutBucketEncryption = append(mock.calls.PutBucketEncryption, callInfo)
	mock.lockPutBucketEncryption.Unlock()
	return mock.PutBucketEncryptionFunc(putBucketEncryptionInput)
}

// PutBucketEncryptionCalls gets all the calls that were made to PutBucketEncryption.
// Check the length with:
//     len(mockeds3Client.PutBucketEncryptionCalls())
func (mock *s3ClientMock) PutBucketEncryptionCalls() []struct {
	PutBucketEncryptionInput *s3.PutBucketEncryptionInput
} {
	var calls []struct {
		PutBucketEncryptionInput *s3.PutBucketEncryptionInput
	}
	mock.lockPutBucketEncryption.RLock()
	calls = mock.calls.PutBucketEncryption
	mock.lockPutBucketEncryption.RUnlock()
	return calls
}

// PutBucketEncryptionRequest calls PutBucketEncryptionRequestFunc.
func (mock *s3ClientMock) PutBucketEncryptionRequest(putBucketEncryptionInput *s3.PutBucketEncryptionInput) (*request.Request, *s3.PutBucketEncryptionOutput) {
	if mock.PutBucketEncryptionRequestFunc == nil {
		panic("s3ClientMock.PutBucketEncryptionRequestFunc: method is nil but s3Client.PutBucketEncryptionRequest was just called")
	}
	callInfo := struct {
		PutBucketEncryptionInput *s3.PutBucketEncryptionInput
	}{
		PutBucketEncryptionInput: putBucketEncryptionInput,
	}
	mock.lockPutBucketEncryptionRequest.Lock()
	mock.calls.PutBucketEncryptionRequest = append(mock.calls.PutBucketEncryptionRequest, callInfo)
	mock.lockPutBucketEncryptionRequest.Unlock()
	return mock.PutBucketEncryptionRequestFunc(putBucketEncryptionInput)
}

// PutBucketEncryptionRequestCalls gets all the calls that were made to PutBucketEncryptionRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketEncryptionRequestCalls())
func (mock *s3ClientMock) PutBucketEncryptionRequestCalls() []struct {
	PutBucketEncryptionInput *s3.PutBucketEncryptionInput
} {
	var calls []struct {
		PutBucketEncryptionInput *s3.PutBucketEncryptionInput
	}
	mock.lockPutBucketEncryptionRequest.RLock()
	calls = mock.calls.PutBucketEncryptionRequest
	mock.lockPutBucketEncryptionRequest.RUnlock()
	return calls
}

// PutBucketEncryptionWithContext calls PutBucketEncryptionWithContextFunc.
func (mock *s3ClientMock) PutBucketEncryptionWithContext(contextMoqParam context.Context, putBucketEncryptionInput *s3.PutBucketEncryptionInput, options ...request.Option) (*s3.PutBucketEncryptionOutput, error) {
	if mock.PutBucketEncryptionWithContextFunc == nil {
		panic("s3ClientMock.PutBucketEncryptionWithContextFunc: method is nil but s3Client.PutBucketEncryptionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		PutBucketEncryptionInput *s3.PutBucketEncryptionInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		PutBucketEncryptionInput: putBucketEncryptionInput,
		Options:                  options,
	}
	mock.lockPutBucketEncryptionWithContext.Lock()
	mock.calls.PutBucketEncryptionWithContext = append(mock.calls.PutBucketEncryptionWithContext, callInfo)
	mock.lockPutBucketEncryptionWithContext.Unlock()
	return mock.PutBucketEncryptionWithContextFunc(contextMoqParam, putBucketEncryptionInput, options...)
}

// PutBucketEncryptionWithContextCalls gets all the calls that were made to PutBucketEncryptionWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketEncryptionWithContextCalls())
func (mock *s3ClientMock) PutBucketEncryptionWithContextCalls() []struct {
	ContextMoqParam          context.Context
	PutBucketEncryptionInput *s3.PutBucketEncryptionInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		PutBucketEncryptionInput *s3.PutBucketEncryptionInput
		Options                  []request.Option
	}
	mock.lockPutBucketEncryptionWithContext.RLock()
	calls = mock.calls.PutBucketEncryptionWithContext
	mock.lockPutBucketEncryptionWithContext.RUnlock()
	return calls
}

// PutBucketIntelligentTieringConfiguration calls PutBucketIntelligentTieringConfigurationFunc.
func (mock *s3ClientMock) PutBucketIntelligentTieringConfiguration(putBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput) (*s3.PutBucketIntelligentTieringConfigurationOutput, error) {
	if mock.PutBucketIntelligentTieringConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketIntelligentTieringConfigurationFunc: method is nil but s3Client.PutBucketIntelligentTieringConfiguration was just called")
	}
	callInfo := struct {
		PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
	}{
		PutBucketIntelligentTieringConfigurationInput: putBucketIntelligentTieringConfigurationInput,
	}
	mock.lockPutBucketIntelligentTieringConfiguration.Lock()
	mock.calls.PutBucketIntelligentTieringConfiguration = append(mock.calls.PutBucketIntelligentTieringConfiguration, callInfo)
	mock.lockPutBucketIntelligentTieringConfiguration.Unlock()
	return mock.PutBucketIntelligentTieringConfigurationFunc(putBucketIntelligentTieringConfigurationInput)
}

// PutBucketIntelligentTieringConfigurationCalls gets all the calls that were made to PutBucketIntelligentTieringConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketIntelligentTieringConfigurationCalls())
func (mock *s3ClientMock) PutBucketIntelligentTieringConfigurationCalls() []struct {
	PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
} {
	var calls []struct {
		PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
	}
	mock.lockPutBucketIntelligentTieringConfiguration.RLock()
	calls = mock.calls.PutBucketIntelligentTieringConfiguration
	mock.lockPutBucketIntelligentTieringConfiguration.RUnlock()
	return calls
}

// PutBucketIntelligentTieringConfigurationRequest calls PutBucketIntelligentTieringConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketIntelligentTieringConfigurationRequest(putBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput) (*request.Request, *s3.PutBucketIntelligentTieringConfigurationOutput) {
	if mock.PutBucketIntelligentTieringConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketIntelligentTieringConfigurationRequestFunc: method is nil but s3Client.PutBucketIntelligentTieringConfigurationRequest was just called")
	}
	callInfo := struct {
		PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
	}{
		PutBucketIntelligentTieringConfigurationInput: putBucketIntelligentTieringConfigurationInput,
	}
	mock.lockPutBucketIntelligentTieringConfigurationRequest.Lock()
	mock.calls.PutBucketIntelligentTieringConfigurationRequest = append(mock.calls.PutBucketIntelligentTieringConfigurationRequest, callInfo)
	mock.lockPutBucketIntelligentTieringConfigurationRequest.Unlock()
	return mock.PutBucketIntelligentTieringConfigurationRequestFunc(putBucketIntelligentTieringConfigurationInput)
}

// PutBucketIntelligentTieringConfigurationRequestCalls gets all the calls that were made to PutBucketIntelligentTieringConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketIntelligentTieringConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketIntelligentTieringConfigurationRequestCalls() []struct {
	PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
} {
	var calls []struct {
		PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
	}
	mock.lockPutBucketIntelligentTieringConfigurationRequest.RLock()
	calls = mock.calls.PutBucketIntelligentTieringConfigurationRequest
	mock.lockPutBucketIntelligentTieringConfigurationRequest.RUnlock()
	return calls
}

// PutBucketIntelligentTieringConfigurationWithContext calls PutBucketIntelligentTieringConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketIntelligentTieringConfigurationWithContext(contextMoqParam context.Context, putBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput, options ...request.Option) (*s3.PutBucketIntelligentTieringConfigurationOutput, error) {
	if mock.PutBucketIntelligentTieringConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketIntelligentTieringConfigurationWithContextFunc: method is nil but s3Client.PutBucketIntelligentTieringConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                               context.Context
		PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
		Options                                       []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		PutBucketIntelligentTieringConfigurationInput: putBucketIntelligentTieringConfigurationInput,
		Options: options,
	}
	mock.lockPutBucketIntelligentTieringConfigurationWithContext.Lock()
	mock.calls.PutBucketIntelligentTieringConfigurationWithContext = append(mock.calls.PutBucketIntelligentTieringConfigurationWithContext, callInfo)
	mock.lockPutBucketIntelligentTieringConfigurationWithContext.Unlock()
	return mock.PutBucketIntelligentTieringConfigurationWithContextFunc(contextMoqParam, putBucketIntelligentTieringConfigurationInput, options...)
}

// PutBucketIntelligentTieringConfigurationWithContextCalls gets all the calls that were made to PutBucketIntelligentTieringConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketIntelligentTieringConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketIntelligentTieringConfigurationWithContextCalls() []struct {
	ContextMoqParam                               context.Context
	PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
	Options                                       []request.Option
} {
	var calls []struct {
		ContextMoqParam                               context.Context
		PutBucketIntelligentTieringConfigurationInput *s3.PutBucketIntelligentTieringConfigurationInput
		Options                                       []request.Option
	}
	mock.lockPutBucketIntelligentTieringConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketIntelligentTieringConfigurationWithContext
	mock.lockPutBucketIntelligentTieringConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketInventoryConfiguration calls PutBucketInventoryConfigurationFunc.
func (mock *s3ClientMock) PutBucketInventoryConfiguration(putBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput) (*s3.PutBucketInventoryConfigurationOutput, error) {
	if mock.PutBucketInventoryConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketInventoryConfigurationFunc: method is nil but s3Client.PutBucketInventoryConfiguration was just called")
	}
	callInfo := struct {
		PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
	}{
		PutBucketInventoryConfigurationInput: putBucketInventoryConfigurationInput,
	}
	mock.lockPutBucketInventoryConfiguration.Lock()
	mock.calls.PutBucketInventoryConfiguration = append(mock.calls.PutBucketInventoryConfiguration, callInfo)
	mock.lockPutBucketInventoryConfiguration.Unlock()
	return mock.PutBucketInventoryConfigurationFunc(putBucketInventoryConfigurationInput)
}

// PutBucketInventoryConfigurationCalls gets all the calls that were made to PutBucketInventoryConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketInventoryConfigurationCalls())
func (mock *s3ClientMock) PutBucketInventoryConfigurationCalls() []struct {
	PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
} {
	var calls []struct {
		PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
	}
	mock.lockPutBucketInventoryConfiguration.RLock()
	calls = mock.calls.PutBucketInventoryConfiguration
	mock.lockPutBucketInventoryConfiguration.RUnlock()
	return calls
}

// PutBucketInventoryConfigurationRequest calls PutBucketInventoryConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketInventoryConfigurationRequest(putBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput) (*request.Request, *s3.PutBucketInventoryConfigurationOutput) {
	if mock.PutBucketInventoryConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketInventoryConfigurationRequestFunc: method is nil but s3Client.PutBucketInventoryConfigurationRequest was just called")
	}
	callInfo := struct {
		PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
	}{
		PutBucketInventoryConfigurationInput: putBucketInventoryConfigurationInput,
	}
	mock.lockPutBucketInventoryConfigurationRequest.Lock()
	mock.calls.PutBucketInventoryConfigurationRequest = append(mock.calls.PutBucketInventoryConfigurationRequest, callInfo)
	mock.lockPutBucketInventoryConfigurationRequest.Unlock()
	return mock.PutBucketInventoryConfigurationRequestFunc(putBucketInventoryConfigurationInput)
}

// PutBucketInventoryConfigurationRequestCalls gets all the calls that were made to PutBucketInventoryConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketInventoryConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketInventoryConfigurationRequestCalls() []struct {
	PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
} {
	var calls []struct {
		PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
	}
	mock.lockPutBucketInventoryConfigurationRequest.RLock()
	calls = mock.calls.PutBucketInventoryConfigurationRequest
	mock.lockPutBucketInventoryConfigurationRequest.RUnlock()
	return calls
}

// PutBucketInventoryConfigurationWithContext calls PutBucketInventoryConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketInventoryConfigurationWithContext(contextMoqParam context.Context, putBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput, options ...request.Option) (*s3.PutBucketInventoryConfigurationOutput, error) {
	if mock.PutBucketInventoryConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketInventoryConfigurationWithContextFunc: method is nil but s3Client.PutBucketInventoryConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		PutBucketInventoryConfigurationInput: putBucketInventoryConfigurationInput,
		Options:                              options,
	}
	mock.lockPutBucketInventoryConfigurationWithContext.Lock()
	mock.calls.PutBucketInventoryConfigurationWithContext = append(mock.calls.PutBucketInventoryConfigurationWithContext, callInfo)
	mock.lockPutBucketInventoryConfigurationWithContext.Unlock()
	return mock.PutBucketInventoryConfigurationWithContextFunc(contextMoqParam, putBucketInventoryConfigurationInput, options...)
}

// PutBucketInventoryConfigurationWithContextCalls gets all the calls that were made to PutBucketInventoryConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketInventoryConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketInventoryConfigurationWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		PutBucketInventoryConfigurationInput *s3.PutBucketInventoryConfigurationInput
		Options                              []request.Option
	}
	mock.lockPutBucketInventoryConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketInventoryConfigurationWithContext
	mock.lockPutBucketInventoryConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketLifecycle calls PutBucketLifecycleFunc.
func (mock *s3ClientMock) PutBucketLifecycle(putBucketLifecycleInput *s3.PutBucketLifecycleInput) (*s3.PutBucketLifecycleOutput, error) {
	if mock.PutBucketLifecycleFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleFunc: method is nil but s3Client.PutBucketLifecycle was just called")
	}
	callInfo := struct {
		PutBucketLifecycleInput *s3.PutBucketLifecycleInput
	}{
		PutBucketLifecycleInput: putBucketLifecycleInput,
	}
	mock.lockPutBucketLifecycle.Lock()
	mock.calls.PutBucketLifecycle = append(mock.calls.PutBucketLifecycle, callInfo)
	mock.lockPutBucketLifecycle.Unlock()
	return mock.PutBucketLifecycleFunc(putBucketLifecycleInput)
}

// PutBucketLifecycleCalls gets all the calls that were made to PutBucketLifecycle.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleCalls())
func (mock *s3ClientMock) PutBucketLifecycleCalls() []struct {
	PutBucketLifecycleInput *s3.PutBucketLifecycleInput
} {
	var calls []struct {
		PutBucketLifecycleInput *s3.PutBucketLifecycleInput
	}
	mock.lockPutBucketLifecycle.RLock()
	calls = mock.calls.PutBucketLifecycle
	mock.lockPutBucketLifecycle.RUnlock()
	return calls
}

// PutBucketLifecycleConfiguration calls PutBucketLifecycleConfigurationFunc.
func (mock *s3ClientMock) PutBucketLifecycleConfiguration(putBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	if mock.PutBucketLifecycleConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleConfigurationFunc: method is nil but s3Client.PutBucketLifecycleConfiguration was just called")
	}
	callInfo := struct {
		PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
	}{
		PutBucketLifecycleConfigurationInput: putBucketLifecycleConfigurationInput,
	}
	mock.lockPutBucketLifecycleConfiguration.Lock()
	mock.calls.PutBucketLifecycleConfiguration = append(mock.calls.PutBucketLifecycleConfiguration, callInfo)
	mock.lockPutBucketLifecycleConfiguration.Unlock()
	return mock.PutBucketLifecycleConfigurationFunc(putBucketLifecycleConfigurationInput)
}

// PutBucketLifecycleConfigurationCalls gets all the calls that were made to PutBucketLifecycleConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleConfigurationCalls())
func (mock *s3ClientMock) PutBucketLifecycleConfigurationCalls() []struct {
	PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
} {
	var calls []struct {
		PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
	}
	mock.lockPutBucketLifecycleConfiguration.RLock()
	calls = mock.calls.PutBucketLifecycleConfiguration
	mock.lockPutBucketLifecycleConfiguration.RUnlock()
	return calls
}

// PutBucketLifecycleConfigurationRequest calls PutBucketLifecycleConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketLifecycleConfigurationRequest(putBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput) (*request.Request, *s3.PutBucketLifecycleConfigurationOutput) {
	if mock.PutBucketLifecycleConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleConfigurationRequestFunc: method is nil but s3Client.PutBucketLifecycleConfigurationRequest was just called")
	}
	callInfo := struct {
		PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
	}{
		PutBucketLifecycleConfigurationInput: putBucketLifecycleConfigurationInput,
	}
	mock.lockPutBucketLifecycleConfigurationRequest.Lock()
	mock.calls.PutBucketLifecycleConfigurationRequest = append(mock.calls.PutBucketLifecycleConfigurationRequest, callInfo)
	mock.lockPutBucketLifecycleConfigurationRequest.Unlock()
	return mock.PutBucketLifecycleConfigurationRequestFunc(putBucketLifecycleConfigurationInput)
}

// PutBucketLifecycleConfigurationRequestCalls gets all the calls that were made to PutBucketLifecycleConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketLifecycleConfigurationRequestCalls() []struct {
	PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
} {
	var calls []struct {
		PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
	}
	mock.lockPutBucketLifecycleConfigurationRequest.RLock()
	calls = mock.calls.PutBucketLifecycleConfigurationRequest
	mock.lockPutBucketLifecycleConfigurationRequest.RUnlock()
	return calls
}

// PutBucketLifecycleConfigurationWithContext calls PutBucketLifecycleConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketLifecycleConfigurationWithContext(contextMoqParam context.Context, putBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput, options ...request.Option) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	if mock.PutBucketLifecycleConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleConfigurationWithContextFunc: method is nil but s3Client.PutBucketLifecycleConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		PutBucketLifecycleConfigurationInput: putBucketLifecycleConfigurationInput,
		Options:                              options,
	}
	mock.lockPutBucketLifecycleConfigurationWithContext.Lock()
	mock.calls.PutBucketLifecycleConfigurationWithContext = append(mock.calls.PutBucketLifecycleConfigurationWithContext, callInfo)
	mock.lockPutBucketLifecycleConfigurationWithContext.Unlock()
	return mock.PutBucketLifecycleConfigurationWithContextFunc(contextMoqParam, putBucketLifecycleConfigurationInput, options...)
}

// PutBucketLifecycleConfigurationWithContextCalls gets all the calls that were made to PutBucketLifecycleConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketLifecycleConfigurationWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		PutBucketLifecycleConfigurationInput *s3.PutBucketLifecycleConfigurationInput
		Options                              []request.Option
	}
	mock.lockPutBucketLifecycleConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketLifecycleConfigurationWithContext
	mock.lockPutBucketLifecycleConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketLifecycleRequest calls PutBucketLifecycleRequestFunc.
func (mock *s3ClientMock) PutBucketLifecycleRequest(putBucketLifecycleInput *s3.PutBucketLifecycleInput) (*request.Request, *s3.PutBucketLifecycleOutput) {
	if mock.PutBucketLifecycleRequestFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleRequestFunc: method is nil but s3Client.PutBucketLifecycleRequest was just called")
	}
	callInfo := struct {
		PutBucketLifecycleInput *s3.PutBucketLifecycleInput
	}{
		PutBucketLifecycleInput: putBucketLifecycleInput,
	}
	mock.lockPutBucketLifecycleRequest.Lock()
	mock.calls.PutBucketLifecycleRequest = append(mock.calls.PutBucketLifecycleRequest, callInfo)
	mock.lockPutBucketLifecycleRequest.Unlock()
	return mock.PutBucketLifecycleRequestFunc(putBucketLifecycleInput)
}

// PutBucketLifecycleRequestCalls gets all the calls that were made to PutBucketLifecycleRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleRequestCalls())
func (mock *s3ClientMock) PutBucketLifecycleRequestCalls() []struct {
	PutBucketLifecycleInput *s3.PutBucketLifecycleInput
} {
	var calls []struct {
		PutBucketLifecycleInput *s3.PutBucketLifecycleInput
	}
	mock.lockPutBucketLifecycleRequest.RLock()
	calls = mock.calls.PutBucketLifecycleRequest
	mock.lockPutBucketLifecycleRequest.RUnlock()
	return calls
}

// PutBucketLifecycleWithContext calls PutBucketLifecycleWithContextFunc.
func (mock *s3ClientMock) PutBucketLifecycleWithContext(contextMoqParam context.Context, putBucketLifecycleInput *s3.PutBucketLifecycleInput, options ...request.Option) (*s3.PutBucketLifecycleOutput, error) {
	if mock.PutBucketLifecycleWithContextFunc == nil {
		panic("s3ClientMock.PutBucketLifecycleWithContextFunc: method is nil but s3Client.PutBucketLifecycleWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		PutBucketLifecycleInput *s3.PutBucketLifecycleInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		PutBucketLifecycleInput: putBucketLifecycleInput,
		Options:                 options,
	}
	mock.lockPutBucketLifecycleWithContext.Lock()
	mock.calls.PutBucketLifecycleWithContext = append(mock.calls.PutBucketLifecycleWithContext, callInfo)
	mock.lockPutBucketLifecycleWithContext.Unlock()
	return mock.PutBucketLifecycleWithContextFunc(contextMoqParam, putBucketLifecycleInput, options...)
}

// PutBucketLifecycleWithContextCalls gets all the calls that were made to PutBucketLifecycleWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketLifecycleWithContextCalls())
func (mock *s3ClientMock) PutBucketLifecycleWithContextCalls() []struct {
	ContextMoqParam         context.Context
	PutBucketLifecycleInput *s3.PutBucketLifecycleInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		PutBucketLifecycleInput *s3.PutBucketLifecycleInput
		Options                 []request.Option
	}
	mock.lockPutBucketLifecycleWithContext.RLock()
	calls = mock.calls.PutBucketLifecycleWithContext
	mock.lockPutBucketLifecycleWithContext.RUnlock()
	return calls
}

// PutBucketLogging calls PutBucketLoggingFunc.
func (mock *s3ClientMock) PutBucketLogging(putBucketLoggingInput *s3.PutBucketLoggingInput) (*s3.PutBucketLoggingOutput, error) {
	if mock.PutBucketLoggingFunc == nil {
		panic("s3ClientMock.PutBucketLoggingFunc: method is nil but s3Client.PutBucketLogging was just called")
	}
	callInfo := struct {
		PutBucketLoggingInput *s3.PutBucketLoggingInput
	}{
		PutBucketLoggingInput: putBucketLoggingInput,
	}
	mock.lockPutBucketLogging.Lock()
	mock.calls.PutBucketLogging = append(mock.calls.PutBucketLogging, callInfo)
	mock.lockPutBucketLogging.Unlock()
	return mock.PutBucketLoggingFunc(putBucketLoggingInput)
}

// PutBucketLoggingCalls gets all the calls that were made to PutBucketLogging.
// Check the length with:
//     len(mockeds3Client.PutBucketLoggingCalls())
func (mock *s3ClientMock) PutBucketLoggingCalls() []struct {
	PutBucketLoggingInput *s3.PutBucketLoggingInput
} {
	var calls []struct {
		PutBucketLoggingInput *s3.PutBucketLoggingInput
	}
	mock.lockPutBucketLogging.RLock()
	calls = mock.calls.PutBucketLogging
	mock.lockPutBucketLogging.RUnlock()
	return calls
}

// PutBucketLoggingRequest calls PutBucketLoggingRequestFunc.
func (mock *s3ClientMock) PutBucketLoggingRequest(putBucketLoggingInput *s3.PutBucketLoggingInput) (*request.Request, *s3.PutBucketLoggingOutput) {
	if mock.PutBucketLoggingRequestFunc == nil {
		panic("s3ClientMock.PutBucketLoggingRequestFunc: method is nil but s3Client.PutBucketLoggingRequest was just called")
	}
	callInfo := struct {
		PutBucketLoggingInput *s3.PutBucketLoggingInput
	}{
		PutBucketLoggingInput: putBucketLoggingInput,
	}
	mock.lockPutBucketLoggingRequest.Lock()
	mock.calls.PutBucketLoggingRequest = append(mock.calls.PutBucketLoggingRequest, callInfo)
	mock.lockPutBucketLoggingRequest.Unlock()
	return mock.PutBucketLoggingRequestFunc(putBucketLoggingInput)
}

// PutBucketLoggingRequestCalls gets all the calls that were made to PutBucketLoggingRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketLoggingRequestCalls())
func (mock *s3ClientMock) PutBucketLoggingRequestCalls() []struct {
	PutBucketLoggingInput *s3.PutBucketLoggingInput
} {
	var calls []struct {
		PutBucketLoggingInput *s3.PutBucketLoggingInput
	}
	mock.lockPutBucketLoggingRequest.RLock()
	calls = mock.calls.PutBucketLoggingRequest
	mock.lockPutBucketLoggingRequest.RUnlock()
	return calls
}

// PutBucketLoggingWithContext calls PutBucketLoggingWithContextFunc.
func (mock *s3ClientMock) PutBucketLoggingWithContext(contextMoqParam context.Context, putBucketLoggingInput *s3.PutBucketLoggingInput, options ...request.Option) (*s3.PutBucketLoggingOutput, error) {
	if mock.PutBucketLoggingWithContextFunc == nil {
		panic("s3ClientMock.PutBucketLoggingWithContextFunc: method is nil but s3Client.PutBucketLoggingWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		PutBucketLoggingInput *s3.PutBucketLoggingInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		PutBucketLoggingInput: putBucketLoggingInput,
		Options:               options,
	}
	mock.lockPutBucketLoggingWithContext.Lock()
	mock.calls.PutBucketLoggingWithContext = append(mock.calls.PutBucketLoggingWithContext, callInfo)
	mock.lockPutBucketLoggingWithContext.Unlock()
	return mock.PutBucketLoggingWithContextFunc(contextMoqParam, putBucketLoggingInput, options...)
}

// PutBucketLoggingWithContextCalls gets all the calls that were made to PutBucketLoggingWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketLoggingWithContextCalls())
func (mock *s3ClientMock) PutBucketLoggingWithContextCalls() []struct {
	ContextMoqParam       context.Context
	PutBucketLoggingInput *s3.PutBucketLoggingInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		PutBucketLoggingInput *s3.PutBucketLoggingInput
		Options               []request.Option
	}
	mock.lockPutBucketLoggingWithContext.RLock()
	calls = mock.calls.PutBucketLoggingWithContext
	mock.lockPutBucketLoggingWithContext.RUnlock()
	return calls
}

// PutBucketMetricsConfiguration calls PutBucketMetricsConfigurationFunc.
func (mock *s3ClientMock) PutBucketMetricsConfiguration(putBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput) (*s3.PutBucketMetricsConfigurationOutput, error) {
	if mock.PutBucketMetricsConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketMetricsConfigurationFunc: method is nil but s3Client.PutBucketMetricsConfiguration was just called")
	}
	callInfo := struct {
		PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
	}{
		PutBucketMetricsConfigurationInput: putBucketMetricsConfigurationInput,
	}
	mock.lockPutBucketMetricsConfiguration.Lock()
	mock.calls.PutBucketMetricsConfiguration = append(mock.calls.PutBucketMetricsConfiguration, callInfo)
	mock.lockPutBucketMetricsConfiguration.Unlock()
	return mock.PutBucketMetricsConfigurationFunc(putBucketMetricsConfigurationInput)
}

// PutBucketMetricsConfigurationCalls gets all the calls that were made to PutBucketMetricsConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketMetricsConfigurationCalls())
func (mock *s3ClientMock) PutBucketMetricsConfigurationCalls() []struct {
	PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
} {
	var calls []struct {
		PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
	}
	mock.lockPutBucketMetricsConfiguration.RLock()
	calls = mock.calls.PutBucketMetricsConfiguration
	mock.lockPutBucketMetricsConfiguration.RUnlock()
	return calls
}

// PutBucketMetricsConfigurationRequest calls PutBucketMetricsConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketMetricsConfigurationRequest(putBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput) (*request.Request, *s3.PutBucketMetricsConfigurationOutput) {
	if mock.PutBucketMetricsConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketMetricsConfigurationRequestFunc: method is nil but s3Client.PutBucketMetricsConfigurationRequest was just called")
	}
	callInfo := struct {
		PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
	}{
		PutBucketMetricsConfigurationInput: putBucketMetricsConfigurationInput,
	}
	mock.lockPutBucketMetricsConfigurationRequest.Lock()
	mock.calls.PutBucketMetricsConfigurationRequest = append(mock.calls.PutBucketMetricsConfigurationRequest, callInfo)
	mock.lockPutBucketMetricsConfigurationRequest.Unlock()
	return mock.PutBucketMetricsConfigurationRequestFunc(putBucketMetricsConfigurationInput)
}

// PutBucketMetricsConfigurationRequestCalls gets all the calls that were made to PutBucketMetricsConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketMetricsConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketMetricsConfigurationRequestCalls() []struct {
	PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
} {
	var calls []struct {
		PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
	}
	mock.lockPutBucketMetricsConfigurationRequest.RLock()
	calls = mock.calls.PutBucketMetricsConfigurationRequest
	mock.lockPutBucketMetricsConfigurationRequest.RUnlock()
	return calls
}

// PutBucketMetricsConfigurationWithContext calls PutBucketMetricsConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketMetricsConfigurationWithContext(contextMoqParam context.Context, putBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput, options ...request.Option) (*s3.PutBucketMetricsConfigurationOutput, error) {
	if mock.PutBucketMetricsConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketMetricsConfigurationWithContextFunc: method is nil but s3Client.PutBucketMetricsConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                    context.Context
		PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
		Options                            []request.Option
	}{
		ContextMoqParam:                    contextMoqParam,
		PutBucketMetricsConfigurationInput: putBucketMetricsConfigurationInput,
		Options:                            options,
	}
	mock.lockPutBucketMetricsConfigurationWithContext.Lock()
	mock.calls.PutBucketMetricsConfigurationWithContext = append(mock.calls.PutBucketMetricsConfigurationWithContext, callInfo)
	mock.lockPutBucketMetricsConfigurationWithContext.Unlock()
	return mock.PutBucketMetricsConfigurationWithContextFunc(contextMoqParam, putBucketMetricsConfigurationInput, options...)
}

// PutBucketMetricsConfigurationWithContextCalls gets all the calls that were made to PutBucketMetricsConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketMetricsConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketMetricsConfigurationWithContextCalls() []struct {
	ContextMoqParam                    context.Context
	PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
	Options                            []request.Option
} {
	var calls []struct {
		ContextMoqParam                    context.Context
		PutBucketMetricsConfigurationInput *s3.PutBucketMetricsConfigurationInput
		Options                            []request.Option
	}
	mock.lockPutBucketMetricsConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketMetricsConfigurationWithContext
	mock.lockPutBucketMetricsConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketNotification calls PutBucketNotificationFunc.
func (mock *s3ClientMock) PutBucketNotification(putBucketNotificationInput *s3.PutBucketNotificationInput) (*s3.PutBucketNotificationOutput, error) {
	if mock.PutBucketNotificationFunc == nil {
		panic("s3ClientMock.PutBucketNotificationFunc: method is nil but s3Client.PutBucketNotification was just called")
	}
	callInfo := struct {
		PutBucketNotificationInput *s3.PutBucketNotificationInput
	}{
		PutBucketNotificationInput: putBucketNotificationInput,
	}
	mock.lockPutBucketNotification.Lock()
	mock.calls.PutBucketNotification = append(mock.calls.PutBucketNotification, callInfo)
	mock.lockPutBucketNotification.Unlock()
	return mock.PutBucketNotificationFunc(putBucketNotificationInput)
}

// PutBucketNotificationCalls gets all the calls that were made to PutBucketNotification.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationCalls())
func (mock *s3ClientMock) PutBucketNotificationCalls() []struct {
	PutBucketNotificationInput *s3.PutBucketNotificationInput
} {
	var calls []struct {
		PutBucketNotificationInput *s3.PutBucketNotificationInput
	}
	mock.lockPutBucketNotification.RLock()
	calls = mock.calls.PutBucketNotification
	mock.lockPutBucketNotification.RUnlock()
	return calls
}

// PutBucketNotificationConfiguration calls PutBucketNotificationConfigurationFunc.
func (mock *s3ClientMock) PutBucketNotificationConfiguration(putBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput) (*s3.PutBucketNotificationConfigurationOutput, error) {
	if mock.PutBucketNotificationConfigurationFunc == nil {
		panic("s3ClientMock.PutBucketNotificationConfigurationFunc: method is nil but s3Client.PutBucketNotificationConfiguration was just called")
	}
	callInfo := struct {
		PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
	}{
		PutBucketNotificationConfigurationInput: putBucketNotificationConfigurationInput,
	}
	mock.lockPutBucketNotificationConfiguration.Lock()
	mock.calls.PutBucketNotificationConfiguration = append(mock.calls.PutBucketNotificationConfiguration, callInfo)
	mock.lockPutBucketNotificationConfiguration.Unlock()
	return mock.PutBucketNotificationConfigurationFunc(putBucketNotificationConfigurationInput)
}

// PutBucketNotificationConfigurationCalls gets all the calls that were made to PutBucketNotificationConfiguration.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationConfigurationCalls())
func (mock *s3ClientMock) PutBucketNotificationConfigurationCalls() []struct {
	PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
} {
	var calls []struct {
		PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
	}
	mock.lockPutBucketNotificationConfiguration.RLock()
	calls = mock.calls.PutBucketNotificationConfiguration
	mock.lockPutBucketNotificationConfiguration.RUnlock()
	return calls
}

// PutBucketNotificationConfigurationRequest calls PutBucketNotificationConfigurationRequestFunc.
func (mock *s3ClientMock) PutBucketNotificationConfigurationRequest(putBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput) (*request.Request, *s3.PutBucketNotificationConfigurationOutput) {
	if mock.PutBucketNotificationConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutBucketNotificationConfigurationRequestFunc: method is nil but s3Client.PutBucketNotificationConfigurationRequest was just called")
	}
	callInfo := struct {
		PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
	}{
		PutBucketNotificationConfigurationInput: putBucketNotificationConfigurationInput,
	}
	mock.lockPutBucketNotificationConfigurationRequest.Lock()
	mock.calls.PutBucketNotificationConfigurationRequest = append(mock.calls.PutBucketNotificationConfigurationRequest, callInfo)
	mock.lockPutBucketNotificationConfigurationRequest.Unlock()
	return mock.PutBucketNotificationConfigurationRequestFunc(putBucketNotificationConfigurationInput)
}

// PutBucketNotificationConfigurationRequestCalls gets all the calls that were made to PutBucketNotificationConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationConfigurationRequestCalls())
func (mock *s3ClientMock) PutBucketNotificationConfigurationRequestCalls() []struct {
	PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
} {
	var calls []struct {
		PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
	}
	mock.lockPutBucketNotificationConfigurationRequest.RLock()
	calls = mock.calls.PutBucketNotificationConfigurationRequest
	mock.lockPutBucketNotificationConfigurationRequest.RUnlock()
	return calls
}

// PutBucketNotificationConfigurationWithContext calls PutBucketNotificationConfigurationWithContextFunc.
func (mock *s3ClientMock) PutBucketNotificationConfigurationWithContext(contextMoqParam context.Context, putBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput, options ...request.Option) (*s3.PutBucketNotificationConfigurationOutput, error) {
	if mock.PutBucketNotificationConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketNotificationConfigurationWithContextFunc: method is nil but s3Client.PutBucketNotificationConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		PutBucketNotificationConfigurationInput: putBucketNotificationConfigurationInput,
		Options:                                 options,
	}
	mock.lockPutBucketNotificationConfigurationWithContext.Lock()
	mock.calls.PutBucketNotificationConfigurationWithContext = append(mock.calls.PutBucketNotificationConfigurationWithContext, callInfo)
	mock.lockPutBucketNotificationConfigurationWithContext.Unlock()
	return mock.PutBucketNotificationConfigurationWithContextFunc(contextMoqParam, putBucketNotificationConfigurationInput, options...)
}

// PutBucketNotificationConfigurationWithContextCalls gets all the calls that were made to PutBucketNotificationConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationConfigurationWithContextCalls())
func (mock *s3ClientMock) PutBucketNotificationConfigurationWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		PutBucketNotificationConfigurationInput *s3.PutBucketNotificationConfigurationInput
		Options                                 []request.Option
	}
	mock.lockPutBucketNotificationConfigurationWithContext.RLock()
	calls = mock.calls.PutBucketNotificationConfigurationWithContext
	mock.lockPutBucketNotificationConfigurationWithContext.RUnlock()
	return calls
}

// PutBucketNotificationRequest calls PutBucketNotificationRequestFunc.
func (mock *s3ClientMock) PutBucketNotificationRequest(putBucketNotificationInput *s3.PutBucketNotificationInput) (*request.Request, *s3.PutBucketNotificationOutput) {
	if mock.PutBucketNotificationRequestFunc == nil {
		panic("s3ClientMock.PutBucketNotificationRequestFunc: method is nil but s3Client.PutBucketNotificationRequest was just called")
	}
	callInfo := struct {
		PutBucketNotificationInput *s3.PutBucketNotificationInput
	}{
		PutBucketNotificationInput: putBucketNotificationInput,
	}
	mock.lockPutBucketNotificationRequest.Lock()
	mock.calls.PutBucketNotificationRequest = append(mock.calls.PutBucketNotificationRequest, callInfo)
	mock.lockPutBucketNotificationRequest.Unlock()
	return mock.PutBucketNotificationRequestFunc(putBucketNotificationInput)
}

// PutBucketNotificationRequestCalls gets all the calls that were made to PutBucketNotificationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationRequestCalls())
func (mock *s3ClientMock) PutBucketNotificationRequestCalls() []struct {
	PutBucketNotificationInput *s3.PutBucketNotificationInput
} {
	var calls []struct {
		PutBucketNotificationInput *s3.PutBucketNotificationInput
	}
	mock.lockPutBucketNotificationRequest.RLock()
	calls = mock.calls.PutBucketNotificationRequest
	mock.lockPutBucketNotificationRequest.RUnlock()
	return calls
}

// PutBucketNotificationWithContext calls PutBucketNotificationWithContextFunc.
func (mock *s3ClientMock) PutBucketNotificationWithContext(contextMoqParam context.Context, putBucketNotificationInput *s3.PutBucketNotificationInput, options ...request.Option) (*s3.PutBucketNotificationOutput, error) {
	if mock.PutBucketNotificationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketNotificationWithContextFunc: method is nil but s3Client.PutBucketNotificationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		PutBucketNotificationInput *s3.PutBucketNotificationInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		PutBucketNotificationInput: putBucketNotificationInput,
		Options:                    options,
	}
	mock.lockPutBucketNotificationWithContext.Lock()
	mock.calls.PutBucketNotificationWithContext = append(mock.calls.PutBucketNotificationWithContext, callInfo)
	mock.lockPutBucketNotificationWithContext.Unlock()
	return mock.PutBucketNotificationWithContextFunc(contextMoqParam, putBucketNotificationInput, options...)
}

// PutBucketNotificationWithContextCalls gets all the calls that were made to PutBucketNotificationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketNotificationWithContextCalls())
func (mock *s3ClientMock) PutBucketNotificationWithContextCalls() []struct {
	ContextMoqParam            context.Context
	PutBucketNotificationInput *s3.PutBucketNotificationInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		PutBucketNotificationInput *s3.PutBucketNotificationInput
		Options                    []request.Option
	}
	mock.lockPutBucketNotificationWithContext.RLock()
	calls = mock.calls.PutBucketNotificationWithContext
	mock.lockPutBucketNotificationWithContext.RUnlock()
	return calls
}

// PutBucketOwnershipControls calls PutBucketOwnershipControlsFunc.
func (mock *s3ClientMock) PutBucketOwnershipControls(putBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput) (*s3.PutBucketOwnershipControlsOutput, error) {
	if mock.PutBucketOwnershipControlsFunc == nil {
		panic("s3ClientMock.PutBucketOwnershipControlsFunc: method is nil but s3Client.PutBucketOwnershipControls was just called")
	}
	callInfo := struct {
		PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
	}{
		PutBucketOwnershipControlsInput: putBucketOwnershipControlsInput,
	}
	mock.lockPutBucketOwnershipControls.Lock()
	mock.calls.PutBucketOwnershipControls = append(mock.calls.PutBucketOwnershipControls, callInfo)
	mock.lockPutBucketOwnershipControls.Unlock()
	return mock.PutBucketOwnershipControlsFunc(putBucketOwnershipControlsInput)
}

// PutBucketOwnershipControlsCalls gets all the calls that were made to PutBucketOwnershipControls.
// Check the length with:
//     len(mockeds3Client.PutBucketOwnershipControlsCalls())
func (mock *s3ClientMock) PutBucketOwnershipControlsCalls() []struct {
	PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
} {
	var calls []struct {
		PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
	}
	mock.lockPutBucketOwnershipControls.RLock()
	calls = mock.calls.PutBucketOwnershipControls
	mock.lockPutBucketOwnershipControls.RUnlock()
	return calls
}

// PutBucketOwnershipControlsRequest calls PutBucketOwnershipControlsRequestFunc.
func (mock *s3ClientMock) PutBucketOwnershipControlsRequest(putBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput) (*request.Request, *s3.PutBucketOwnershipControlsOutput) {
	if mock.PutBucketOwnershipControlsRequestFunc == nil {
		panic("s3ClientMock.PutBucketOwnershipControlsRequestFunc: method is nil but s3Client.PutBucketOwnershipControlsRequest was just called")
	}
	callInfo := struct {
		PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
	}{
		PutBucketOwnershipControlsInput: putBucketOwnershipControlsInput,
	}
	mock.lockPutBucketOwnershipControlsRequest.Lock()
	mock.calls.PutBucketOwnershipControlsRequest = append(mock.calls.PutBucketOwnershipControlsRequest, callInfo)
	mock.lockPutBucketOwnershipControlsRequest.Unlock()
	return mock.PutBucketOwnershipControlsRequestFunc(putBucketOwnershipControlsInput)
}

// PutBucketOwnershipControlsRequestCalls gets all the calls that were made to PutBucketOwnershipControlsRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketOwnershipControlsRequestCalls())
func (mock *s3ClientMock) PutBucketOwnershipControlsRequestCalls() []struct {
	PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
} {
	var calls []struct {
		PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
	}
	mock.lockPutBucketOwnershipControlsRequest.RLock()
	calls = mock.calls.PutBucketOwnershipControlsRequest
	mock.lockPutBucketOwnershipControlsRequest.RUnlock()
	return calls
}

// PutBucketOwnershipControlsWithContext calls PutBucketOwnershipControlsWithContextFunc.
func (mock *s3ClientMock) PutBucketOwnershipControlsWithContext(contextMoqParam context.Context, putBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput, options ...request.Option) (*s3.PutBucketOwnershipControlsOutput, error) {
	if mock.PutBucketOwnershipControlsWithContextFunc == nil {
		panic("s3ClientMock.PutBucketOwnershipControlsWithContextFunc: method is nil but s3Client.PutBucketOwnershipControlsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		PutBucketOwnershipControlsInput: putBucketOwnershipControlsInput,
		Options:                         options,
	}
	mock.lockPutBucketOwnershipControlsWithContext.Lock()
	mock.calls.PutBucketOwnershipControlsWithContext = append(mock.calls.PutBucketOwnershipControlsWithContext, callInfo)
	mock.lockPutBucketOwnershipControlsWithContext.Unlock()
	return mock.PutBucketOwnershipControlsWithContextFunc(contextMoqParam, putBucketOwnershipControlsInput, options...)
}

// PutBucketOwnershipControlsWithContextCalls gets all the calls that were made to PutBucketOwnershipControlsWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketOwnershipControlsWithContextCalls())
func (mock *s3ClientMock) PutBucketOwnershipControlsWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		PutBucketOwnershipControlsInput *s3.PutBucketOwnershipControlsInput
		Options                         []request.Option
	}
	mock.lockPutBucketOwnershipControlsWithContext.RLock()
	calls = mock.calls.PutBucketOwnershipControlsWithContext
	mock.lockPutBucketOwnershipControlsWithContext.RUnlock()
	return calls
}

// PutBucketPolicy calls PutBucketPolicyFunc.
func (mock *s3ClientMock) PutBucketPolicy(putBucketPolicyInput *s3.PutBucketPolicyInput) (*s3.PutBucketPolicyOutput, error) {
	if mock.PutBucketPolicyFunc == nil {
		panic("s3ClientMock.PutBucketPolicyFunc: method is nil but s3Client.PutBucketPolicy was just called")
	}
	callInfo := struct {
		PutBucketPolicyInput *s3.PutBucketPolicyInput
	}{
		PutBucketPolicyInput: putBucketPolicyInput,
	}
	mock.lockPutBucketPolicy.Lock()
	mock.calls.PutBucketPolicy = append(mock.calls.PutBucketPolicy, callInfo)
	mock.lockPutBucketPolicy.Unlock()
	return mock.PutBucketPolicyFunc(putBucketPolicyInput)
}

// PutBucketPolicyCalls gets all the calls that were made to PutBucketPolicy.
// Check the length with:
//     len(mockeds3Client.PutBucketPolicyCalls())
func (mock *s3ClientMock) PutBucketPolicyCalls() []struct {
	PutBucketPolicyInput *s3.PutBucketPolicyInput
} {
	var calls []struct {
		PutBucketPolicyInput *s3.PutBucketPolicyInput
	}
	mock.lockPutBucketPolicy.RLock()
	calls = mock.calls.PutBucketPolicy
	mock.lockPutBucketPolicy.RUnlock()
	return calls
}

// PutBucketPolicyRequest calls PutBucketPolicyRequestFunc.
func (mock *s3ClientMock) PutBucketPolicyRequest(putBucketPolicyInput *s3.PutBucketPolicyInput) (*request.Request, *s3.PutBucketPolicyOutput) {
	if mock.PutBucketPolicyRequestFunc == nil {
		panic("s3ClientMock.PutBucketPolicyRequestFunc: method is nil but s3Client.PutBucketPolicyRequest was just called")
	}
	callInfo := struct {
		PutBucketPolicyInput *s3.PutBucketPolicyInput
	}{
		PutBucketPolicyInput: putBucketPolicyInput,
	}
	mock.lockPutBucketPolicyRequest.Lock()
	mock.calls.PutBucketPolicyRequest = append(mock.calls.PutBucketPolicyRequest, callInfo)
	mock.lockPutBucketPolicyRequest.Unlock()
	return mock.PutBucketPolicyRequestFunc(putBucketPolicyInput)
}

// PutBucketPolicyRequestCalls gets all the calls that were made to PutBucketPolicyRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketPolicyRequestCalls())
func (mock *s3ClientMock) PutBucketPolicyRequestCalls() []struct {
	PutBucketPolicyInput *s3.PutBucketPolicyInput
} {
	var calls []struct {
		PutBucketPolicyInput *s3.PutBucketPolicyInput
	}
	mock.lockPutBucketPolicyRequest.RLock()
	calls = mock.calls.PutBucketPolicyRequest
	mock.lockPutBucketPolicyRequest.RUnlock()
	return calls
}

// PutBucketPolicyWithContext calls PutBucketPolicyWithContextFunc.
func (mock *s3ClientMock) PutBucketPolicyWithContext(contextMoqParam context.Context, putBucketPolicyInput *s3.PutBucketPolicyInput, options ...request.Option) (*s3.PutBucketPolicyOutput, error) {
	if mock.PutBucketPolicyWithContextFunc == nil {
		panic("s3ClientMock.PutBucketPolicyWithContextFunc: method is nil but s3Client.PutBucketPolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		PutBucketPolicyInput *s3.PutBucketPolicyInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		PutBucketPolicyInput: putBucketPolicyInput,
		Options:              options,
	}
	mock.lockPutBucketPolicyWithContext.Lock()
	mock.calls.PutBucketPolicyWithContext = append(mock.calls.PutBucketPolicyWithContext, callInfo)
	mock.lockPutBucketPolicyWithContext.Unlock()
	return mock.PutBucketPolicyWithContextFunc(contextMoqParam, putBucketPolicyInput, options...)
}

// PutBucketPolicyWithContextCalls gets all the calls that were made to PutBucketPolicyWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketPolicyWithContextCalls())
func (mock *s3ClientMock) PutBucketPolicyWithContextCalls() []struct {
	ContextMoqParam      context.Context
	PutBucketPolicyInput *s3.PutBucketPolicyInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		PutBucketPolicyInput *s3.PutBucketPolicyInput
		Options              []request.Option
	}
	mock.lockPutBucketPolicyWithContext.RLock()
	calls = mock.calls.PutBucketPolicyWithContext
	mock.lockPutBucketPolicyWithContext.RUnlock()
	return calls
}

// PutBucketReplication calls PutBucketReplicationFunc.
func (mock *s3ClientMock) PutBucketReplication(putBucketReplicationInput *s3.PutBucketReplicationInput) (*s3.PutBucketReplicationOutput, error) {
	if mock.PutBucketReplicationFunc == nil {
		panic("s3ClientMock.PutBucketReplicationFunc: method is nil but s3Client.PutBucketReplication was just called")
	}
	callInfo := struct {
		PutBucketReplicationInput *s3.PutBucketReplicationInput
	}{
		PutBucketReplicationInput: putBucketReplicationInput,
	}
	mock.lockPutBucketReplication.Lock()
	mock.calls.PutBucketReplication = append(mock.calls.PutBucketReplication, callInfo)
	mock.lockPutBucketReplication.Unlock()
	return mock.PutBucketReplicationFunc(putBucketReplicationInput)
}

// PutBucketReplicationCalls gets all the calls that were made to PutBucketReplication.
// Check the length with:
//     len(mockeds3Client.PutBucketReplicationCalls())
func (mock *s3ClientMock) PutBucketReplicationCalls() []struct {
	PutBucketReplicationInput *s3.PutBucketReplicationInput
} {
	var calls []struct {
		PutBucketReplicationInput *s3.PutBucketReplicationInput
	}
	mock.lockPutBucketReplication.RLock()
	calls = mock.calls.PutBucketReplication
	mock.lockPutBucketReplication.RUnlock()
	return calls
}

// PutBucketReplicationRequest calls PutBucketReplicationRequestFunc.
func (mock *s3ClientMock) PutBucketReplicationRequest(putBucketReplicationInput *s3.PutBucketReplicationInput) (*request.Request, *s3.PutBucketReplicationOutput) {
	if mock.PutBucketReplicationRequestFunc == nil {
		panic("s3ClientMock.PutBucketReplicationRequestFunc: method is nil but s3Client.PutBucketReplicationRequest was just called")
	}
	callInfo := struct {
		PutBucketReplicationInput *s3.PutBucketReplicationInput
	}{
		PutBucketReplicationInput: putBucketReplicationInput,
	}
	mock.lockPutBucketReplicationRequest.Lock()
	mock.calls.PutBucketReplicationRequest = append(mock.calls.PutBucketReplicationRequest, callInfo)
	mock.lockPutBucketReplicationRequest.Unlock()
	return mock.PutBucketReplicationRequestFunc(putBucketReplicationInput)
}

// PutBucketReplicationRequestCalls gets all the calls that were made to PutBucketReplicationRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketReplicationRequestCalls())
func (mock *s3ClientMock) PutBucketReplicationRequestCalls() []struct {
	PutBucketReplicationInput *s3.PutBucketReplicationInput
} {
	var calls []struct {
		PutBucketReplicationInput *s3.PutBucketReplicationInput
	}
	mock.lockPutBucketReplicationRequest.RLock()
	calls = mock.calls.PutBucketReplicationRequest
	mock.lockPutBucketReplicationRequest.RUnlock()
	return calls
}

// PutBucketReplicationWithContext calls PutBucketReplicationWithContextFunc.
func (mock *s3ClientMock) PutBucketReplicationWithContext(contextMoqParam context.Context, putBucketReplicationInput *s3.PutBucketReplicationInput, options ...request.Option) (*s3.PutBucketReplicationOutput, error) {
	if mock.PutBucketReplicationWithContextFunc == nil {
		panic("s3ClientMock.PutBucketReplicationWithContextFunc: method is nil but s3Client.PutBucketReplicationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		PutBucketReplicationInput *s3.PutBucketReplicationInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		PutBucketReplicationInput: putBucketReplicationInput,
		Options:                   options,
	}
	mock.lockPutBucketReplicationWithContext.Lock()
	mock.calls.PutBucketReplicationWithContext = append(mock.calls.PutBucketReplicationWithContext, callInfo)
	mock.lockPutBucketReplicationWithContext.Unlock()
	return mock.PutBucketReplicationWithContextFunc(contextMoqParam, putBucketReplicationInput, options...)
}

// PutBucketReplicationWithContextCalls gets all the calls that were made to PutBucketReplicationWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketReplicationWithContextCalls())
func (mock *s3ClientMock) PutBucketReplicationWithContextCalls() []struct {
	ContextMoqParam           context.Context
	PutBucketReplicationInput *s3.PutBucketReplicationInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		PutBucketReplicationInput *s3.PutBucketReplicationInput
		Options                   []request.Option
	}
	mock.lockPutBucketReplicationWithContext.RLock()
	calls = mock.calls.PutBucketReplicationWithContext
	mock.lockPutBucketReplicationWithContext.RUnlock()
	return calls
}

// PutBucketRequestPayment calls PutBucketRequestPaymentFunc.
func (mock *s3ClientMock) PutBucketRequestPayment(putBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput) (*s3.PutBucketRequestPaymentOutput, error) {
	if mock.PutBucketRequestPaymentFunc == nil {
		panic("s3ClientMock.PutBucketRequestPaymentFunc: method is nil but s3Client.PutBucketRequestPayment was just called")
	}
	callInfo := struct {
		PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
	}{
		PutBucketRequestPaymentInput: putBucketRequestPaymentInput,
	}
	mock.lockPutBucketRequestPayment.Lock()
	mock.calls.PutBucketRequestPayment = append(mock.calls.PutBucketRequestPayment, callInfo)
	mock.lockPutBucketRequestPayment.Unlock()
	return mock.PutBucketRequestPaymentFunc(putBucketRequestPaymentInput)
}

// PutBucketRequestPaymentCalls gets all the calls that were made to PutBucketRequestPayment.
// Check the length with:
//     len(mockeds3Client.PutBucketRequestPaymentCalls())
func (mock *s3ClientMock) PutBucketRequestPaymentCalls() []struct {
	PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
} {
	var calls []struct {
		PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
	}
	mock.lockPutBucketRequestPayment.RLock()
	calls = mock.calls.PutBucketRequestPayment
	mock.lockPutBucketRequestPayment.RUnlock()
	return calls
}

// PutBucketRequestPaymentRequest calls PutBucketRequestPaymentRequestFunc.
func (mock *s3ClientMock) PutBucketRequestPaymentRequest(putBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput) (*request.Request, *s3.PutBucketRequestPaymentOutput) {
	if mock.PutBucketRequestPaymentRequestFunc == nil {
		panic("s3ClientMock.PutBucketRequestPaymentRequestFunc: method is nil but s3Client.PutBucketRequestPaymentRequest was just called")
	}
	callInfo := struct {
		PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
	}{
		PutBucketRequestPaymentInput: putBucketRequestPaymentInput,
	}
	mock.lockPutBucketRequestPaymentRequest.Lock()
	mock.calls.PutBucketRequestPaymentRequest = append(mock.calls.PutBucketRequestPaymentRequest, callInfo)
	mock.lockPutBucketRequestPaymentRequest.Unlock()
	return mock.PutBucketRequestPaymentRequestFunc(putBucketRequestPaymentInput)
}

// PutBucketRequestPaymentRequestCalls gets all the calls that were made to PutBucketRequestPaymentRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketRequestPaymentRequestCalls())
func (mock *s3ClientMock) PutBucketRequestPaymentRequestCalls() []struct {
	PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
} {
	var calls []struct {
		PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
	}
	mock.lockPutBucketRequestPaymentRequest.RLock()
	calls = mock.calls.PutBucketRequestPaymentRequest
	mock.lockPutBucketRequestPaymentRequest.RUnlock()
	return calls
}

// PutBucketRequestPaymentWithContext calls PutBucketRequestPaymentWithContextFunc.
func (mock *s3ClientMock) PutBucketRequestPaymentWithContext(contextMoqParam context.Context, putBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput, options ...request.Option) (*s3.PutBucketRequestPaymentOutput, error) {
	if mock.PutBucketRequestPaymentWithContextFunc == nil {
		panic("s3ClientMock.PutBucketRequestPaymentWithContextFunc: method is nil but s3Client.PutBucketRequestPaymentWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		PutBucketRequestPaymentInput: putBucketRequestPaymentInput,
		Options:                      options,
	}
	mock.lockPutBucketRequestPaymentWithContext.Lock()
	mock.calls.PutBucketRequestPaymentWithContext = append(mock.calls.PutBucketRequestPaymentWithContext, callInfo)
	mock.lockPutBucketRequestPaymentWithContext.Unlock()
	return mock.PutBucketRequestPaymentWithContextFunc(contextMoqParam, putBucketRequestPaymentInput, options...)
}

// PutBucketRequestPaymentWithContextCalls gets all the calls that were made to PutBucketRequestPaymentWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketRequestPaymentWithContextCalls())
func (mock *s3ClientMock) PutBucketRequestPaymentWithContextCalls() []struct {
	ContextMoqParam              context.Context
	PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		PutBucketRequestPaymentInput *s3.PutBucketRequestPaymentInput
		Options                      []request.Option
	}
	mock.lockPutBucketRequestPaymentWithContext.RLock()
	calls = mock.calls.PutBucketRequestPaymentWithContext
	mock.lockPutBucketRequestPaymentWithContext.RUnlock()
	return calls
}

// PutBucketTagging calls PutBucketTaggingFunc.
func (mock *s3ClientMock) PutBucketTagging(putBucketTaggingInput *s3.PutBucketTaggingInput) (*s3.PutBucketTaggingOutput, error) {
	if mock.PutBucketTaggingFunc == nil {
		panic("s3ClientMock.PutBucketTaggingFunc: method is nil but s3Client.PutBucketTagging was just called")
	}
	callInfo := struct {
		PutBucketTaggingInput *s3.PutBucketTaggingInput
	}{
		PutBucketTaggingInput: putBucketTaggingInput,
	}
	mock.lockPutBucketTagging.Lock()
	mock.calls.PutBucketTagging = append(mock.calls.PutBucketTagging, callInfo)
	mock.lockPutBucketTagging.Unlock()
	return mock.PutBucketTaggingFunc(putBucketTaggingInput)
}

// PutBucketTaggingCalls gets all the calls that were made to PutBucketTagging.
// Check the length with:
//     len(mockeds3Client.PutBucketTaggingCalls())
func (mock *s3ClientMock) PutBucketTaggingCalls() []struct {
	PutBucketTaggingInput *s3.PutBucketTaggingInput
} {
	var calls []struct {
		PutBucketTaggingInput *s3.PutBucketTaggingInput
	}
	mock.lockPutBucketTagging.RLock()
	calls = mock.calls.PutBucketTagging
	mock.lockPutBucketTagging.RUnlock()
	return calls
}

// PutBucketTaggingRequest calls PutBucketTaggingRequestFunc.
func (mock *s3ClientMock) PutBucketTaggingRequest(putBucketTaggingInput *s3.PutBucketTaggingInput) (*request.Request, *s3.PutBucketTaggingOutput) {
	if mock.PutBucketTaggingRequestFunc == nil {
		panic("s3ClientMock.PutBucketTaggingRequestFunc: method is nil but s3Client.PutBucketTaggingRequest was just called")
	}
	callInfo := struct {
		PutBucketTaggingInput *s3.PutBucketTaggingInput
	}{
		PutBucketTaggingInput: putBucketTaggingInput,
	}
	mock.lockPutBucketTaggingRequest.Lock()
	mock.calls.PutBucketTaggingRequest = append(mock.calls.PutBucketTaggingRequest, callInfo)
	mock.lockPutBucketTaggingRequest.Unlock()
	return mock.PutBucketTaggingRequestFunc(putBucketTaggingInput)
}

// PutBucketTaggingRequestCalls gets all the calls that were made to PutBucketTaggingRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketTaggingRequestCalls())
func (mock *s3ClientMock) PutBucketTaggingRequestCalls() []struct {
	PutBucketTaggingInput *s3.PutBucketTaggingInput
} {
	var calls []struct {
		PutBucketTaggingInput *s3.PutBucketTaggingInput
	}
	mock.lockPutBucketTaggingRequest.RLock()
	calls = mock.calls.PutBucketTaggingRequest
	mock.lockPutBucketTaggingRequest.RUnlock()
	return calls
}

// PutBucketTaggingWithContext calls PutBucketTaggingWithContextFunc.
func (mock *s3ClientMock) PutBucketTaggingWithContext(contextMoqParam context.Context, putBucketTaggingInput *s3.PutBucketTaggingInput, options ...request.Option) (*s3.PutBucketTaggingOutput, error) {
	if mock.PutBucketTaggingWithContextFunc == nil {
		panic("s3ClientMock.PutBucketTaggingWithContextFunc: method is nil but s3Client.PutBucketTaggingWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		PutBucketTaggingInput *s3.PutBucketTaggingInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		PutBucketTaggingInput: putBucketTaggingInput,
		Options:               options,
	}
	mock.lockPutBucketTaggingWithContext.Lock()
	mock.calls.PutBucketTaggingWithContext = append(mock.calls.PutBucketTaggingWithContext, callInfo)
	mock.lockPutBucketTaggingWithContext.Unlock()
	return mock.PutBucketTaggingWithContextFunc(contextMoqParam, putBucketTaggingInput, options...)
}

// PutBucketTaggingWithContextCalls gets all the calls that were made to PutBucketTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketTaggingWithContextCalls())
func (mock *s3ClientMock) PutBucketTaggingWithContextCalls() []struct {
	ContextMoqParam       context.Context
	PutBucketTaggingInput *s3.PutBucketTaggingInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		PutBucketTaggingInput *s3.PutBucketTaggingInput
		Options               []request.Option
	}
	mock.lockPutBucketTaggingWithContext.RLock()
	calls = mock.calls.PutBucketTaggingWithContext
	mock.lockPutBucketTaggingWithContext.RUnlock()
	return calls
}

// PutBucketVersioning calls PutBucketVersioningFunc.
func (mock *s3ClientMock) PutBucketVersioning(putBucketVersioningInput *s3.PutBucketVersioningInput) (*s3.PutBucketVersioningOutput, error) {
	if mock.PutBucketVersioningFunc == nil {
		panic("s3ClientMock.PutBucketVersioningFunc: method is nil but s3Client.PutBucketVersioning was just called")
	}
	callInfo := struct {
		PutBucketVersioningInput *s3.PutBucketVersioningInput
	}{
		PutBucketVersioningInput: putBucketVersioningInput,
	}
	mock.lockPutBucketVersioning.Lock()
	mock.calls.PutBucketVersioning = append(mock.calls.PutBucketVersioning, callInfo)
	mock.lockPutBucketVersioning.Unlock()
	return mock.PutBucketVersioningFunc(putBucketVersioningInput)
}

// PutBucketVersioningCalls gets all the calls that were made to PutBucketVersioning.
// Check the length with:
//     len(mockeds3Client.PutBucketVersioningCalls())
func (mock *s3ClientMock) PutBucketVersioningCalls() []struct {
	PutBucketVersioningInput *s3.PutBucketVersioningInput
} {
	var calls []struct {
		PutBucketVersioningInput *s3.PutBucketVersioningInput
	}
	mock.lockPutBucketVersioning.RLock()
	calls = mock.calls.PutBucketVersioning
	mock.lockPutBucketVersioning.RUnlock()
	return calls
}

// PutBucketVersioningRequest calls PutBucketVersioningRequestFunc.
func (mock *s3ClientMock) PutBucketVersioningRequest(putBucketVersioningInput *s3.PutBucketVersioningInput) (*request.Request, *s3.PutBucketVersioningOutput) {
	if mock.PutBucketVersioningRequestFunc == nil {
		panic("s3ClientMock.PutBucketVersioningRequestFunc: method is nil but s3Client.PutBucketVersioningRequest was just called")
	}
	callInfo := struct {
		PutBucketVersioningInput *s3.PutBucketVersioningInput
	}{
		PutBucketVersioningInput: putBucketVersioningInput,
	}
	mock.lockPutBucketVersioningRequest.Lock()
	mock.calls.PutBucketVersioningRequest = append(mock.calls.PutBucketVersioningRequest, callInfo)
	mock.lockPutBucketVersioningRequest.Unlock()
	return mock.PutBucketVersioningRequestFunc(putBucketVersioningInput)
}

// PutBucketVersioningRequestCalls gets all the calls that were made to PutBucketVersioningRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketVersioningRequestCalls())
func (mock *s3ClientMock) PutBucketVersioningRequestCalls() []struct {
	PutBucketVersioningInput *s3.PutBucketVersioningInput
} {
	var calls []struct {
		PutBucketVersioningInput *s3.PutBucketVersioningInput
	}
	mock.lockPutBucketVersioningRequest.RLock()
	calls = mock.calls.PutBucketVersioningRequest
	mock.lockPutBucketVersioningRequest.RUnlock()
	return calls
}

// PutBucketVersioningWithContext calls PutBucketVersioningWithContextFunc.
func (mock *s3ClientMock) PutBucketVersioningWithContext(contextMoqParam context.Context, putBucketVersioningInput *s3.PutBucketVersioningInput, options ...request.Option) (*s3.PutBucketVersioningOutput, error) {
	if mock.PutBucketVersioningWithContextFunc == nil {
		panic("s3ClientMock.PutBucketVersioningWithContextFunc: method is nil but s3Client.PutBucketVersioningWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		PutBucketVersioningInput *s3.PutBucketVersioningInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		PutBucketVersioningInput: putBucketVersioningInput,
		Options:                  options,
	}
	mock.lockPutBucketVersioningWithContext.Lock()
	mock.calls.PutBucketVersioningWithContext = append(mock.calls.PutBucketVersioningWithContext, callInfo)
	mock.lockPutBucketVersioningWithContext.Unlock()
	return mock.PutBucketVersioningWithContextFunc(contextMoqParam, putBucketVersioningInput, options...)
}

// PutBucketVersioningWithContextCalls gets all the calls that were made to PutBucketVersioningWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketVersioningWithContextCalls())
func (mock *s3ClientMock) PutBucketVersioningWithContextCalls() []struct {
	ContextMoqParam          context.Context
	PutBucketVersioningInput *s3.PutBucketVersioningInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		PutBucketVersioningInput *s3.PutBucketVersioningInput
		Options                  []request.Option
	}
	mock.lockPutBucketVersioningWithContext.RLock()
	calls = mock.calls.PutBucketVersioningWithContext
	mock.lockPutBucketVersioningWithContext.RUnlock()
	return calls
}

// PutBucketWebsite calls PutBucketWebsiteFunc.
func (mock *s3ClientMock) PutBucketWebsite(putBucketWebsiteInput *s3.PutBucketWebsiteInput) (*s3.PutBucketWebsiteOutput, error) {
	if mock.PutBucketWebsiteFunc == nil {
		panic("s3ClientMock.PutBucketWebsiteFunc: method is nil but s3Client.PutBucketWebsite was just called")
	}
	callInfo := struct {
		PutBucketWebsiteInput *s3.PutBucketWebsiteInput
	}{
		PutBucketWebsiteInput: putBucketWebsiteInput,
	}
	mock.lockPutBucketWebsite.Lock()
	mock.calls.PutBucketWebsite = append(mock.calls.PutBucketWebsite, callInfo)
	mock.lockPutBucketWebsite.Unlock()
	return mock.PutBucketWebsiteFunc(putBucketWebsiteInput)
}

// PutBucketWebsiteCalls gets all the calls that were made to PutBucketWebsite.
// Check the length with:
//     len(mockeds3Client.PutBucketWebsiteCalls())
func (mock *s3ClientMock) PutBucketWebsiteCalls() []struct {
	PutBucketWebsiteInput *s3.PutBucketWebsiteInput
} {
	var calls []struct {
		PutBucketWebsiteInput *s3.PutBucketWebsiteInput
	}
	mock.lockPutBucketWebsite.RLock()
	calls = mock.calls.PutBucketWebsite
	mock.lockPutBucketWebsite.RUnlock()
	return calls
}

// PutBucketWebsiteRequest calls PutBucketWebsiteRequestFunc.
func (mock *s3ClientMock) PutBucketWebsiteRequest(putBucketWebsiteInput *s3.PutBucketWebsiteInput) (*request.Request, *s3.PutBucketWebsiteOutput) {
	if mock.PutBucketWebsiteRequestFunc == nil {
		panic("s3ClientMock.PutBucketWebsiteRequestFunc: method is nil but s3Client.PutBucketWebsiteRequest was just called")
	}
	callInfo := struct {
		PutBucketWebsiteInput *s3.PutBucketWebsiteInput
	}{
		PutBucketWebsiteInput: putBucketWebsiteInput,
	}
	mock.lockPutBucketWebsiteRequest.Lock()
	mock.calls.PutBucketWebsiteRequest = append(mock.calls.PutBucketWebsiteRequest, callInfo)
	mock.lockPutBucketWebsiteRequest.Unlock()
	return mock.PutBucketWebsiteRequestFunc(putBucketWebsiteInput)
}

// PutBucketWebsiteRequestCalls gets all the calls that were made to PutBucketWebsiteRequest.
// Check the length with:
//     len(mockeds3Client.PutBucketWebsiteRequestCalls())
func (mock *s3ClientMock) PutBucketWebsiteRequestCalls() []struct {
	PutBucketWebsiteInput *s3.PutBucketWebsiteInput
} {
	var calls []struct {
		PutBucketWebsiteInput *s3.PutBucketWebsiteInput
	}
	mock.lockPutBucketWebsiteRequest.RLock()
	calls = mock.calls.PutBucketWebsiteRequest
	mock.lockPutBucketWebsiteRequest.RUnlock()
	return calls
}

// PutBucketWebsiteWithContext calls PutBucketWebsiteWithContextFunc.
func (mock *s3ClientMock) PutBucketWebsiteWithContext(contextMoqParam context.Context, putBucketWebsiteInput *s3.PutBucketWebsiteInput, options ...request.Option) (*s3.PutBucketWebsiteOutput, error) {
	if mock.PutBucketWebsiteWithContextFunc == nil {
		panic("s3ClientMock.PutBucketWebsiteWithContextFunc: method is nil but s3Client.PutBucketWebsiteWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		PutBucketWebsiteInput *s3.PutBucketWebsiteInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		PutBucketWebsiteInput: putBucketWebsiteInput,
		Options:               options,
	}
	mock.lockPutBucketWebsiteWithContext.Lock()
	mock.calls.PutBucketWebsiteWithContext = append(mock.calls.PutBucketWebsiteWithContext, callInfo)
	mock.lockPutBucketWebsiteWithContext.Unlock()
	return mock.PutBucketWebsiteWithContextFunc(contextMoqParam, putBucketWebsiteInput, options...)
}

// PutBucketWebsiteWithContextCalls gets all the calls that were made to PutBucketWebsiteWithContext.
// Check the length with:
//     len(mockeds3Client.PutBucketWebsiteWithContextCalls())
func (mock *s3ClientMock) PutBucketWebsiteWithContextCalls() []struct {
	ContextMoqParam       context.Context
	PutBucketWebsiteInput *s3.PutBucketWebsiteInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		PutBucketWebsiteInput *s3.PutBucketWebsiteInput
		Options               []request.Option
	}
	mock.lockPutBucketWebsiteWithContext.RLock()
	calls = mock.calls.PutBucketWebsiteWithContext
	mock.lockPutBucketWebsiteWithContext.RUnlock()
	return calls
}

// PutObject calls PutObjectFunc.
func (mock *s3ClientMock) PutObject(putObjectInput *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
	if mock.PutObjectFunc == nil {
		panic("s3ClientMock.PutObjectFunc: method is nil but s3Client.PutObject was just called")
	}
	callInfo := struct {
		PutObjectInput *s3.PutObjectInput
	}{
		PutObjectInput: putObjectInput,
	}
	mock.lockPutObject.Lock()
	mock.calls.PutObject = append(mock.calls.PutObject, callInfo)
	mock.lockPutObject.Unlock()
	return mock.PutObjectFunc(putObjectInput)
}

// PutObjectCalls gets all the calls that were made to PutObject.
// Check the length with:
//     len(mockeds3Client.PutObjectCalls())
func (mock *s3ClientMock) PutObjectCalls() []struct {
	PutObjectInput *s3.PutObjectInput
} {
	var calls []struct {
		PutObjectInput *s3.PutObjectInput
	}
	mock.lockPutObject.RLock()
	calls = mock.calls.PutObject
	mock.lockPutObject.RUnlock()
	return calls
}

// PutObjectAcl calls PutObjectAclFunc.
func (mock *s3ClientMock) PutObjectAcl(putObjectAclInput *s3.PutObjectAclInput) (*s3.PutObjectAclOutput, error) {
	if mock.PutObjectAclFunc == nil {
		panic("s3ClientMock.PutObjectAclFunc: method is nil but s3Client.PutObjectAcl was just called")
	}
	callInfo := struct {
		PutObjectAclInput *s3.PutObjectAclInput
	}{
		PutObjectAclInput: putObjectAclInput,
	}
	mock.lockPutObjectAcl.Lock()
	mock.calls.PutObjectAcl = append(mock.calls.PutObjectAcl, callInfo)
	mock.lockPutObjectAcl.Unlock()
	return mock.PutObjectAclFunc(putObjectAclInput)
}

// PutObjectAclCalls gets all the calls that were made to PutObjectAcl.
// Check the length with:
//     len(mockeds3Client.PutObjectAclCalls())
func (mock *s3ClientMock) PutObjectAclCalls() []struct {
	PutObjectAclInput *s3.PutObjectAclInput
} {
	var calls []struct {
		PutObjectAclInput *s3.PutObjectAclInput
	}
	mock.lockPutObjectAcl.RLock()
	calls = mock.calls.PutObjectAcl
	mock.lockPutObjectAcl.RUnlock()
	return calls
}

// PutObjectAclRequest calls PutObjectAclRequestFunc.
func (mock *s3ClientMock) PutObjectAclRequest(putObjectAclInput *s3.PutObjectAclInput) (*request.Request, *s3.PutObjectAclOutput) {
	if mock.PutObjectAclRequestFunc == nil {
		panic("s3ClientMock.PutObjectAclRequestFunc: method is nil but s3Client.PutObjectAclRequest was just called")
	}
	callInfo := struct {
		PutObjectAclInput *s3.PutObjectAclInput
	}{
		PutObjectAclInput: putObjectAclInput,
	}
	mock.lockPutObjectAclRequest.Lock()
	mock.calls.PutObjectAclRequest = append(mock.calls.PutObjectAclRequest, callInfo)
	mock.lockPutObjectAclRequest.Unlock()
	return mock.PutObjectAclRequestFunc(putObjectAclInput)
}

// PutObjectAclRequestCalls gets all the calls that were made to PutObjectAclRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectAclRequestCalls())
func (mock *s3ClientMock) PutObjectAclRequestCalls() []struct {
	PutObjectAclInput *s3.PutObjectAclInput
} {
	var calls []struct {
		PutObjectAclInput *s3.PutObjectAclInput
	}
	mock.lockPutObjectAclRequest.RLock()
	calls = mock.calls.PutObjectAclRequest
	mock.lockPutObjectAclRequest.RUnlock()
	return calls
}

// PutObjectAclWithContext calls PutObjectAclWithContextFunc.
func (mock *s3ClientMock) PutObjectAclWithContext(contextMoqParam context.Context, putObjectAclInput *s3.PutObjectAclInput, options ...request.Option) (*s3.PutObjectAclOutput, error) {
	if mock.PutObjectAclWithContextFunc == nil {
		panic("s3ClientMock.PutObjectAclWithContextFunc: method is nil but s3Client.PutObjectAclWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		PutObjectAclInput *s3.PutObjectAclInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		PutObjectAclInput: putObjectAclInput,
		Options:           options,
	}
	mock.lockPutObjectAclWithContext.Lock()
	mock.calls.PutObjectAclWithContext = append(mock.calls.PutObjectAclWithContext, callInfo)
	mock.lockPutObjectAclWithContext.Unlock()
	return mock.PutObjectAclWithContextFunc(contextMoqParam, putObjectAclInput, options...)
}

// PutObjectAclWithContextCalls gets all the calls that were made to PutObjectAclWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectAclWithContextCalls())
func (mock *s3ClientMock) PutObjectAclWithContextCalls() []struct {
	ContextMoqParam   context.Context
	PutObjectAclInput *s3.PutObjectAclInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		PutObjectAclInput *s3.PutObjectAclInput
		Options           []request.Option
	}
	mock.lockPutObjectAclWithContext.RLock()
	calls = mock.calls.PutObjectAclWithContext
	mock.lockPutObjectAclWithContext.RUnlock()
	return calls
}

// PutObjectLegalHold calls PutObjectLegalHoldFunc.
func (mock *s3ClientMock) PutObjectLegalHold(putObjectLegalHoldInput *s3.PutObjectLegalHoldInput) (*s3.PutObjectLegalHoldOutput, error) {
	if mock.PutObjectLegalHoldFunc == nil {
		panic("s3ClientMock.PutObjectLegalHoldFunc: method is nil but s3Client.PutObjectLegalHold was just called")
	}
	callInfo := struct {
		PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
	}{
		PutObjectLegalHoldInput: putObjectLegalHoldInput,
	}
	mock.lockPutObjectLegalHold.Lock()
	mock.calls.PutObjectLegalHold = append(mock.calls.PutObjectLegalHold, callInfo)
	mock.lockPutObjectLegalHold.Unlock()
	return mock.PutObjectLegalHoldFunc(putObjectLegalHoldInput)
}

// PutObjectLegalHoldCalls gets all the calls that were made to PutObjectLegalHold.
// Check the length with:
//     len(mockeds3Client.PutObjectLegalHoldCalls())
func (mock *s3ClientMock) PutObjectLegalHoldCalls() []struct {
	PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
} {
	var calls []struct {
		PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
	}
	mock.lockPutObjectLegalHold.RLock()
	calls = mock.calls.PutObjectLegalHold
	mock.lockPutObjectLegalHold.RUnlock()
	return calls
}

// PutObjectLegalHoldRequest calls PutObjectLegalHoldRequestFunc.
func (mock *s3ClientMock) PutObjectLegalHoldRequest(putObjectLegalHoldInput *s3.PutObjectLegalHoldInput) (*request.Request, *s3.PutObjectLegalHoldOutput) {
	if mock.PutObjectLegalHoldRequestFunc == nil {
		panic("s3ClientMock.PutObjectLegalHoldRequestFunc: method is nil but s3Client.PutObjectLegalHoldRequest was just called")
	}
	callInfo := struct {
		PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
	}{
		PutObjectLegalHoldInput: putObjectLegalHoldInput,
	}
	mock.lockPutObjectLegalHoldRequest.Lock()
	mock.calls.PutObjectLegalHoldRequest = append(mock.calls.PutObjectLegalHoldRequest, callInfo)
	mock.lockPutObjectLegalHoldRequest.Unlock()
	return mock.PutObjectLegalHoldRequestFunc(putObjectLegalHoldInput)
}

// PutObjectLegalHoldRequestCalls gets all the calls that were made to PutObjectLegalHoldRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectLegalHoldRequestCalls())
func (mock *s3ClientMock) PutObjectLegalHoldRequestCalls() []struct {
	PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
} {
	var calls []struct {
		PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
	}
	mock.lockPutObjectLegalHoldRequest.RLock()
	calls = mock.calls.PutObjectLegalHoldRequest
	mock.lockPutObjectLegalHoldRequest.RUnlock()
	return calls
}

// PutObjectLegalHoldWithContext calls PutObjectLegalHoldWithContextFunc.
func (mock *s3ClientMock) PutObjectLegalHoldWithContext(contextMoqParam context.Context, putObjectLegalHoldInput *s3.PutObjectLegalHoldInput, options ...request.Option) (*s3.PutObjectLegalHoldOutput, error) {
	if mock.PutObjectLegalHoldWithContextFunc == nil {
		panic("s3ClientMock.PutObjectLegalHoldWithContextFunc: method is nil but s3Client.PutObjectLegalHoldWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		PutObjectLegalHoldInput: putObjectLegalHoldInput,
		Options:                 options,
	}
	mock.lockPutObjectLegalHoldWithContext.Lock()
	mock.calls.PutObjectLegalHoldWithContext = append(mock.calls.PutObjectLegalHoldWithContext, callInfo)
	mock.lockPutObjectLegalHoldWithContext.Unlock()
	return mock.PutObjectLegalHoldWithContextFunc(contextMoqParam, putObjectLegalHoldInput, options...)
}

// PutObjectLegalHoldWithContextCalls gets all the calls that were made to PutObjectLegalHoldWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectLegalHoldWithContextCalls())
func (mock *s3ClientMock) PutObjectLegalHoldWithContextCalls() []struct {
	ContextMoqParam         context.Context
	PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		PutObjectLegalHoldInput *s3.PutObjectLegalHoldInput
		Options                 []request.Option
	}
	mock.lockPutObjectLegalHoldWithContext.RLock()
	calls = mock.calls.PutObjectLegalHoldWithContext
	mock.lockPutObjectLegalHoldWithContext.RUnlock()
	return calls
}

// PutObjectLockConfiguration calls PutObjectLockConfigurationFunc.
func (mock *s3ClientMock) PutObjectLockConfiguration(putObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput) (*s3.PutObjectLockConfigurationOutput, error) {
	if mock.PutObjectLockConfigurationFunc == nil {
		panic("s3ClientMock.PutObjectLockConfigurationFunc: method is nil but s3Client.PutObjectLockConfiguration was just called")
	}
	callInfo := struct {
		PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
	}{
		PutObjectLockConfigurationInput: putObjectLockConfigurationInput,
	}
	mock.lockPutObjectLockConfiguration.Lock()
	mock.calls.PutObjectLockConfiguration = append(mock.calls.PutObjectLockConfiguration, callInfo)
	mock.lockPutObjectLockConfiguration.Unlock()
	return mock.PutObjectLockConfigurationFunc(putObjectLockConfigurationInput)
}

// PutObjectLockConfigurationCalls gets all the calls that were made to PutObjectLockConfiguration.
// Check the length with:
//     len(mockeds3Client.PutObjectLockConfigurationCalls())
func (mock *s3ClientMock) PutObjectLockConfigurationCalls() []struct {
	PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
} {
	var calls []struct {
		PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
	}
	mock.lockPutObjectLockConfiguration.RLock()
	calls = mock.calls.PutObjectLockConfiguration
	mock.lockPutObjectLockConfiguration.RUnlock()
	return calls
}

// PutObjectLockConfigurationRequest calls PutObjectLockConfigurationRequestFunc.
func (mock *s3ClientMock) PutObjectLockConfigurationRequest(putObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput) (*request.Request, *s3.PutObjectLockConfigurationOutput) {
	if mock.PutObjectLockConfigurationRequestFunc == nil {
		panic("s3ClientMock.PutObjectLockConfigurationRequestFunc: method is nil but s3Client.PutObjectLockConfigurationRequest was just called")
	}
	callInfo := struct {
		PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
	}{
		PutObjectLockConfigurationInput: putObjectLockConfigurationInput,
	}
	mock.lockPutObjectLockConfigurationRequest.Lock()
	mock.calls.PutObjectLockConfigurationRequest = append(mock.calls.PutObjectLockConfigurationRequest, callInfo)
	mock.lockPutObjectLockConfigurationRequest.Unlock()
	return mock.PutObjectLockConfigurationRequestFunc(putObjectLockConfigurationInput)
}

// PutObjectLockConfigurationRequestCalls gets all the calls that were made to PutObjectLockConfigurationRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectLockConfigurationRequestCalls())
func (mock *s3ClientMock) PutObjectLockConfigurationRequestCalls() []struct {
	PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
} {
	var calls []struct {
		PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
	}
	mock.lockPutObjectLockConfigurationRequest.RLock()
	calls = mock.calls.PutObjectLockConfigurationRequest
	mock.lockPutObjectLockConfigurationRequest.RUnlock()
	return calls
}

// PutObjectLockConfigurationWithContext calls PutObjectLockConfigurationWithContextFunc.
func (mock *s3ClientMock) PutObjectLockConfigurationWithContext(contextMoqParam context.Context, putObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput, options ...request.Option) (*s3.PutObjectLockConfigurationOutput, error) {
	if mock.PutObjectLockConfigurationWithContextFunc == nil {
		panic("s3ClientMock.PutObjectLockConfigurationWithContextFunc: method is nil but s3Client.PutObjectLockConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		PutObjectLockConfigurationInput: putObjectLockConfigurationInput,
		Options:                         options,
	}
	mock.lockPutObjectLockConfigurationWithContext.Lock()
	mock.calls.PutObjectLockConfigurationWithContext = append(mock.calls.PutObjectLockConfigurationWithContext, callInfo)
	mock.lockPutObjectLockConfigurationWithContext.Unlock()
	return mock.PutObjectLockConfigurationWithContextFunc(contextMoqParam, putObjectLockConfigurationInput, options...)
}

// PutObjectLockConfigurationWithContextCalls gets all the calls that were made to PutObjectLockConfigurationWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectLockConfigurationWithContextCalls())
func (mock *s3ClientMock) PutObjectLockConfigurationWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		PutObjectLockConfigurationInput *s3.PutObjectLockConfigurationInput
		Options                         []request.Option
	}
	mock.lockPutObjectLockConfigurationWithContext.RLock()
	calls = mock.calls.PutObjectLockConfigurationWithContext
	mock.lockPutObjectLockConfigurationWithContext.RUnlock()
	return calls
}

// PutObjectRequest calls PutObjectRequestFunc.
func (mock *s3ClientMock) PutObjectRequest(putObjectInput *s3.PutObjectInput) (*request.Request, *s3.PutObjectOutput) {
	if mock.PutObjectRequestFunc == nil {
		panic("s3ClientMock.PutObjectRequestFunc: method is nil but s3Client.PutObjectRequest was just called")
	}
	callInfo := struct {
		PutObjectInput *s3.PutObjectInput
	}{
		PutObjectInput: putObjectInput,
	}
	mock.lockPutObjectRequest.Lock()
	mock.calls.PutObjectRequest = append(mock.calls.PutObjectRequest, callInfo)
	mock.lockPutObjectRequest.Unlock()
	return mock.PutObjectRequestFunc(putObjectInput)
}

// PutObjectRequestCalls gets all the calls that were made to PutObjectRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectRequestCalls())
func (mock *s3ClientMock) PutObjectRequestCalls() []struct {
	PutObjectInput *s3.PutObjectInput
} {
	var calls []struct {
		PutObjectInput *s3.PutObjectInput
	}
	mock.lockPutObjectRequest.RLock()
	calls = mock.calls.PutObjectRequest
	mock.lockPutObjectRequest.RUnlock()
	return calls
}

// PutObjectRetention calls PutObjectRetentionFunc.
func (mock *s3ClientMock) PutObjectRetention(putObjectRetentionInput *s3.PutObjectRetentionInput) (*s3.PutObjectRetentionOutput, error) {
	if mock.PutObjectRetentionFunc == nil {
		panic("s3ClientMock.PutObjectRetentionFunc: method is nil but s3Client.PutObjectRetention was just called")
	}
	callInfo := struct {
		PutObjectRetentionInput *s3.PutObjectRetentionInput
	}{
		PutObjectRetentionInput: putObjectRetentionInput,
	}
	mock.lockPutObjectRetention.Lock()
	mock.calls.PutObjectRetention = append(mock.calls.PutObjectRetention, callInfo)
	mock.lockPutObjectRetention.Unlock()
	return mock.PutObjectRetentionFunc(putObjectRetentionInput)
}

// PutObjectRetentionCalls gets all the calls that were made to PutObjectRetention.
// Check the length with:
//     len(mockeds3Client.PutObjectRetentionCalls())
func (mock *s3ClientMock) PutObjectRetentionCalls() []struct {
	PutObjectRetentionInput *s3.PutObjectRetentionInput
} {
	var calls []struct {
		PutObjectRetentionInput *s3.PutObjectRetentionInput
	}
	mock.lockPutObjectRetention.RLock()
	calls = mock.calls.PutObjectRetention
	mock.lockPutObjectRetention.RUnlock()
	return calls
}

// PutObjectRetentionRequest calls PutObjectRetentionRequestFunc.
func (mock *s3ClientMock) PutObjectRetentionRequest(putObjectRetentionInput *s3.PutObjectRetentionInput) (*request.Request, *s3.PutObjectRetentionOutput) {
	if mock.PutObjectRetentionRequestFunc == nil {
		panic("s3ClientMock.PutObjectRetentionRequestFunc: method is nil but s3Client.PutObjectRetentionRequest was just called")
	}
	callInfo := struct {
		PutObjectRetentionInput *s3.PutObjectRetentionInput
	}{
		PutObjectRetentionInput: putObjectRetentionInput,
	}
	mock.lockPutObjectRetentionRequest.Lock()
	mock.calls.PutObjectRetentionRequest = append(mock.calls.PutObjectRetentionRequest, callInfo)
	mock.lockPutObjectRetentionRequest.Unlock()
	return mock.PutObjectRetentionRequestFunc(putObjectRetentionInput)
}

// PutObjectRetentionRequestCalls gets all the calls that were made to PutObjectRetentionRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectRetentionRequestCalls())
func (mock *s3ClientMock) PutObjectRetentionRequestCalls() []struct {
	PutObjectRetentionInput *s3.PutObjectRetentionInput
} {
	var calls []struct {
		PutObjectRetentionInput *s3.PutObjectRetentionInput
	}
	mock.lockPutObjectRetentionRequest.RLock()
	calls = mock.calls.PutObjectRetentionRequest
	mock.lockPutObjectRetentionRequest.RUnlock()
	return calls
}

// PutObjectRetentionWithContext calls PutObjectRetentionWithContextFunc.
func (mock *s3ClientMock) PutObjectRetentionWithContext(contextMoqParam context.Context, putObjectRetentionInput *s3.PutObjectRetentionInput, options ...request.Option) (*s3.PutObjectRetentionOutput, error) {
	if mock.PutObjectRetentionWithContextFunc == nil {
		panic("s3ClientMock.PutObjectRetentionWithContextFunc: method is nil but s3Client.PutObjectRetentionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		PutObjectRetentionInput *s3.PutObjectRetentionInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		PutObjectRetentionInput: putObjectRetentionInput,
		Options:                 options,
	}
	mock.lockPutObjectRetentionWithContext.Lock()
	mock.calls.PutObjectRetentionWithContext = append(mock.calls.PutObjectRetentionWithContext, callInfo)
	mock.lockPutObjectRetentionWithContext.Unlock()
	return mock.PutObjectRetentionWithContextFunc(contextMoqParam, putObjectRetentionInput, options...)
}

// PutObjectRetentionWithContextCalls gets all the calls that were made to PutObjectRetentionWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectRetentionWithContextCalls())
func (mock *s3ClientMock) PutObjectRetentionWithContextCalls() []struct {
	ContextMoqParam         context.Context
	PutObjectRetentionInput *s3.PutObjectRetentionInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		PutObjectRetentionInput *s3.PutObjectRetentionInput
		Options                 []request.Option
	}
	mock.lockPutObjectRetentionWithContext.RLock()
	calls = mock.calls.PutObjectRetentionWithContext
	mock.lockPutObjectRetentionWithContext.RUnlock()
	return calls
}

// PutObjectTagging calls PutObjectTaggingFunc.
func (mock *s3ClientMock) PutObjectTagging(putObjectTaggingInput *s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error) {
	if mock.PutObjectTaggingFunc == nil {
		panic("s3ClientMock.PutObjectTaggingFunc: method is nil but s3Client.PutObjectTagging was just called")
	}
	callInfo := struct {
		PutObjectTaggingInput *s3.PutObjectTaggingInput
	}{
		PutObjectTaggingInput: putObjectTaggingInput,
	}
	mock.lockPutObjectTagging.Lock()
	mock.calls.PutObjectTagging = append(mock.calls.PutObjectTagging, callInfo)
	mock.lockPutObjectTagging.Unlock()
	return mock.PutObjectTaggingFunc(putObjectTaggingInput)
}

// PutObjectTaggingCalls gets all the calls that were made to PutObjectTagging.
// Check the length with:
//     len(mockeds3Client.PutObjectTaggingCalls())
func (mock *s3ClientMock) PutObjectTaggingCalls() []struct {
	PutObjectTaggingInput *s3.PutObjectTaggingInput
} {
	var calls []struct {
		PutObjectTaggingInput *s3.PutObjectTaggingInput
	}
	mock.lockPutObjectTagging.RLock()
	calls = mock.calls.PutObjectTagging
	mock.lockPutObjectTagging.RUnlock()
	return calls
}

// PutObjectTaggingRequest calls PutObjectTaggingRequestFunc.
func (mock *s3ClientMock) PutObjectTaggingRequest(putObjectTaggingInput *s3.PutObjectTaggingInput) (*request.Request, *s3.PutObjectTaggingOutput) {
	if mock.PutObjectTaggingRequestFunc == nil {
		panic("s3ClientMock.PutObjectTaggingRequestFunc: method is nil but s3Client.PutObjectTaggingRequest was just called")
	}
	callInfo := struct {
		PutObjectTaggingInput *s3.PutObjectTaggingInput
	}{
		PutObjectTaggingInput: putObjectTaggingInput,
	}
	mock.lockPutObjectTaggingRequest.Lock()
	mock.calls.PutObjectTaggingRequest = append(mock.calls.PutObjectTaggingRequest, callInfo)
	mock.lockPutObjectTaggingRequest.Unlock()
	return mock.PutObjectTaggingRequestFunc(putObjectTaggingInput)
}

// PutObjectTaggingRequestCalls gets all the calls that were made to PutObjectTaggingRequest.
// Check the length with:
//     len(mockeds3Client.PutObjectTaggingRequestCalls())
func (mock *s3ClientMock) PutObjectTaggingRequestCalls() []struct {
	PutObjectTaggingInput *s3.PutObjectTaggingInput
} {
	var calls []struct {
		PutObjectTaggingInput *s3.PutObjectTaggingInput
	}
	mock.lockPutObjectTaggingRequest.RLock()
	calls = mock.calls.PutObjectTaggingRequest
	mock.lockPutObjectTaggingRequest.RUnlock()
	return calls
}

// PutObjectTaggingWithContext calls PutObjectTaggingWithContextFunc.
func (mock *s3ClientMock) PutObjectTaggingWithContext(contextMoqParam context.Context, putObjectTaggingInput *s3.PutObjectTaggingInput, options ...request.Option) (*s3.PutObjectTaggingOutput, error) {
	if mock.PutObjectTaggingWithContextFunc == nil {
		panic("s3ClientMock.PutObjectTaggingWithContextFunc: method is nil but s3Client.PutObjectTaggingWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam       context.Context
		PutObjectTaggingInput *s3.PutObjectTaggingInput
		Options               []request.Option
	}{
		ContextMoqParam:       contextMoqParam,
		PutObjectTaggingInput: putObjectTaggingInput,
		Options:               options,
	}
	mock.lockPutObjectTaggingWithContext.Lock()
	mock.calls.PutObjectTaggingWithContext = append(mock.calls.PutObjectTaggingWithContext, callInfo)
	mock.lockPutObjectTaggingWithContext.Unlock()
	return mock.PutObjectTaggingWithContextFunc(contextMoqParam, putObjectTaggingInput, options...)
}

// PutObjectTaggingWithContextCalls gets all the calls that were made to PutObjectTaggingWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectTaggingWithContextCalls())
func (mock *s3ClientMock) PutObjectTaggingWithContextCalls() []struct {
	ContextMoqParam       context.Context
	PutObjectTaggingInput *s3.PutObjectTaggingInput
	Options               []request.Option
} {
	var calls []struct {
		ContextMoqParam       context.Context
		PutObjectTaggingInput *s3.PutObjectTaggingInput
		Options               []request.Option
	}
	mock.lockPutObjectTaggingWithContext.RLock()
	calls = mock.calls.PutObjectTaggingWithContext
	mock.lockPutObjectTaggingWithContext.RUnlock()
	return calls
}

// PutObjectWithContext calls PutObjectWithContextFunc.
func (mock *s3ClientMock) PutObjectWithContext(contextMoqParam context.Context, putObjectInput *s3.PutObjectInput, options ...request.Option) (*s3.PutObjectOutput, error) {
	if mock.PutObjectWithContextFunc == nil {
		panic("s3ClientMock.PutObjectWithContextFunc: method is nil but s3Client.PutObjectWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		PutObjectInput  *s3.PutObjectInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		PutObjectInput:  putObjectInput,
		Options:         options,
	}
	mock.lockPutObjectWithContext.Lock()
	mock.calls.PutObjectWithContext = append(mock.calls.PutObjectWithContext, callInfo)
	mock.lockPutObjectWithContext.Unlock()
	return mock.PutObjectWithContextFunc(contextMoqParam, putObjectInput, options...)
}

// PutObjectWithContextCalls gets all the calls that were made to PutObjectWithContext.
// Check the length with:
//     len(mockeds3Client.PutObjectWithContextCalls())
func (mock *s3ClientMock) PutObjectWithContextCalls() []struct {
	ContextMoqParam context.Context
	PutObjectInput  *s3.PutObjectInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		PutObjectInput  *s3.PutObjectInput
		Options         []request.Option
	}
	mock.lockPutObjectWithContext.RLock()
	calls = mock.calls.PutObjectWithContext
	mock.lockPutObjectWithContext.RUnlock()
	return calls
}

// PutPublicAccessBlock calls PutPublicAccessBlockFunc.
func (mock *s3ClientMock) PutPublicAccessBlock(putPublicAccessBlockInput *s3.PutPublicAccessBlockInput) (*s3.PutPublicAccessBlockOutput, error) {
	if mock.PutPublicAccessBlockFunc == nil {
		panic("s3ClientMock.PutPublicAccessBlockFunc: method is nil but s3Client.PutPublicAccessBlock was just called")
	}
	callInfo := struct {
		PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
	}{
		PutPublicAccessBlockInput: putPublicAccessBlockInput,
	}
	mock.lockPutPublicAccessBlock.Lock()
	mock.calls.PutPublicAccessBlock = append(mock.calls.PutPublicAccessBlock, callInfo)
	mock.lockPutPublicAccessBlock.Unlock()
	return mock.PutPublicAccessBlockFunc(putPublicAccessBlockInput)
}

// PutPublicAccessBlockCalls gets all the calls that were made to PutPublicAccessBlock.
// Check the length with:
//     len(mockeds3Client.PutPublicAccessBlockCalls())
func (mock *s3ClientMock) PutPublicAccessBlockCalls() []struct {
	PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
} {
	var calls []struct {
		PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
	}
	mock.lockPutPublicAccessBlock.RLock()
	calls = mock.calls.PutPublicAccessBlock
	mock.lockPutPublicAccessBlock.RUnlock()
	return calls
}

// PutPublicAccessBlockRequest calls PutPublicAccessBlockRequestFunc.
func (mock *s3ClientMock) PutPublicAccessBlockRequest(putPublicAccessBlockInput *s3.PutPublicAccessBlockInput) (*request.Request, *s3.PutPublicAccessBlockOutput) {
	if mock.PutPublicAccessBlockRequestFunc == nil {
		panic("s3ClientMock.PutPublicAccessBlockRequestFunc: method is nil but s3Client.PutPublicAccessBlockRequest was just called")
	}
	callInfo := struct {
		PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
	}{
		PutPublicAccessBlockInput: putPublicAccessBlockInput,
	}
	mock.lockPutPublicAccessBlockRequest.Lock()
	mock.calls.PutPublicAccessBlockRequest = append(mock.calls.PutPublicAccessBlockRequest, callInfo)
	mock.lockPutPublicAccessBlockRequest.Unlock()
	return mock.PutPublicAccessBlockRequestFunc(putPublicAccessBlockInput)
}

// PutPublicAccessBlockRequestCalls gets all the calls that were made to PutPublicAccessBlockRequest.
// Check the length with:
//     len(mockeds3Client.PutPublicAccessBlockRequestCalls())
func (mock *s3ClientMock) PutPublicAccessBlockRequestCalls() []struct {
	PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
} {
	var calls []struct {
		PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
	}
	mock.lockPutPublicAccessBlockRequest.RLock()
	calls = mock.calls.PutPublicAccessBlockRequest
	mock.lockPutPublicAccessBlockRequest.RUnlock()
	return calls
}

// PutPublicAccessBlockWithContext calls PutPublicAccessBlockWithContextFunc.
func (mock *s3ClientMock) PutPublicAccessBlockWithContext(contextMoqParam context.Context, putPublicAccessBlockInput *s3.PutPublicAccessBlockInput, options ...request.Option) (*s3.PutPublicAccessBlockOutput, error) {
	if mock.PutPublicAccessBlockWithContextFunc == nil {
		panic("s3ClientMock.PutPublicAccessBlockWithContextFunc: method is nil but s3Client.PutPublicAccessBlockWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		PutPublicAccessBlockInput: putPublicAccessBlockInput,
		Options:                   options,
	}
	mock.lockPutPublicAccessBlockWithContext.Lock()
	mock.calls.PutPublicAccessBlockWithContext = append(mock.calls.PutPublicAccessBlockWithContext, callInfo)
	mock.lockPutPublicAccessBlockWithContext.Unlock()
	return mock.PutPublicAccessBlockWithContextFunc(contextMoqParam, putPublicAccessBlockInput, options...)
}

// PutPublicAccessBlockWithContextCalls gets all the calls that were made to PutPublicAccessBlockWithContext.
// Check the length with:
//     len(mockeds3Client.PutPublicAccessBlockWithContextCalls())
func (mock *s3ClientMock) PutPublicAccessBlockWithContextCalls() []struct {
	ContextMoqParam           context.Context
	PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		PutPublicAccessBlockInput *s3.PutPublicAccessBlockInput
		Options                   []request.Option
	}
	mock.lockPutPublicAccessBlockWithContext.RLock()
	calls = mock.calls.PutPublicAccessBlockWithContext
	mock.lockPutPublicAccessBlockWithContext.RUnlock()
	return calls
}

// RestoreObject calls RestoreObjectFunc.
func (mock *s3ClientMock) RestoreObject(restoreObjectInput *s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error) {
	if mock.RestoreObjectFunc == nil {
		panic("s3ClientMock.RestoreObjectFunc: method is nil but s3Client.RestoreObject was just called")
	}
	callInfo := struct {
		RestoreObjectInput *s3.RestoreObjectInput
	}{
		RestoreObjectInput: restoreObjectInput,
	}
	mock.lockRestoreObject.Lock()
	mock.calls.RestoreObject = append(mock.calls.RestoreObject, callInfo)
	mock.lockRestoreObject.Unlock()
	return mock.RestoreObjectFunc(restoreObjectInput)
}

// RestoreObjectCalls gets all the calls that were made to RestoreObject.
// Check the length with:
//     len(mockeds3Client.RestoreObjectCalls())
func (mock *s3ClientMock) RestoreObjectCalls() []struct {
	RestoreObjectInput *s3.RestoreObjectInput
} {
	var calls []struct {
		RestoreObjectInput *s3.RestoreObjectInput
	}
	mock.lockRestoreObject.RLock()
	calls = mock.calls.RestoreObject
	mock.lockRestoreObject.RUnlock()
	return calls
}

// RestoreObjectRequest calls RestoreObjectRequestFunc.
func (mock *s3ClientMock) RestoreObjectRequest(restoreObjectInput *s3.RestoreObjectInput) (*request.Request, *s3.RestoreObjectOutput) {
	if mock.RestoreObjectRequestFunc == nil {
		panic("s3ClientMock.RestoreObjectRequestFunc: method is nil but s3Client.RestoreObjectRequest was just called")
	}
	callInfo := struct {
		RestoreObjectInput *s3.RestoreObjectInput
	}{
		RestoreObjectInput: restoreObjectInput,
	}
	mock.lockRestoreObjectRequest.Lock()
	mock.calls.RestoreObjectRequest = append(mock.calls.RestoreObjectRequest, callInfo)
	mock.lockRestoreObjectRequest.Unlock()
	return mock.RestoreObjectRequestFunc(restoreObjectInput)
}

// RestoreObjectRequestCalls gets all the calls that were made to RestoreObjectRequest.
// Check the length with:
//     len(mockeds3Client.RestoreObjectRequestCalls())
func (mock *s3ClientMock) RestoreObjectRequestCalls() []struct {
	RestoreObjectInput *s3.RestoreObjectInput
} {
	var calls []struct {
		RestoreObjectInput *s3.RestoreObjectInput
	}
	mock.lockRestoreObjectRequest.RLock()
	calls = mock.calls.RestoreObjectRequest
	mock.lockRestoreObjectRequest.RUnlock()
	return calls
}

// RestoreObjectWithContext calls RestoreObjectWithContextFunc.
func (mock *s3ClientMock) RestoreObjectWithContext(contextMoqParam context.Context, restoreObjectInput *s3.RestoreObjectInput, options ...request.Option) (*s3.RestoreObjectOutput, error) {
	if mock.RestoreObjectWithContextFunc == nil {
		panic("s3ClientMock.RestoreObjectWithContextFunc: method is nil but s3Client.RestoreObjectWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		RestoreObjectInput *s3.RestoreObjectInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		RestoreObjectInput: restoreObjectInput,
		Options:            options,
	}
	mock.lockRestoreObjectWithContext.Lock()
	mock.calls.RestoreObjectWithContext = append(mock.calls.RestoreObjectWithContext, callInfo)
	mock.lockRestoreObjectWithContext.Unlock()
	return mock.RestoreObjectWithContextFunc(contextMoqParam, restoreObjectInput, options...)
}

// RestoreObjectWithContextCalls gets all the calls that were made to RestoreObjectWithContext.
// Check the length with:
//     len(mockeds3Client.RestoreObjectWithContextCalls())
func (mock *s3ClientMock) RestoreObjectWithContextCalls() []struct {
	ContextMoqParam    context.Context
	RestoreObjectInput *s3.RestoreObjectInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		RestoreObjectInput *s3.RestoreObjectInput
		Options            []request.Option
	}
	mock.lockRestoreObjectWithContext.RLock()
	calls = mock.calls.RestoreObjectWithContext
	mock.lockRestoreObjectWithContext.RUnlock()
	return calls
}

// SelectObjectContent calls SelectObjectContentFunc.
func (mock *s3ClientMock) SelectObjectContent(selectObjectContentInput *s3.SelectObjectContentInput) (*s3.SelectObjectContentOutput, error) {
	if mock.SelectObjectContentFunc == nil {
		panic("s3ClientMock.SelectObjectContentFunc: method is nil but s3Client.SelectObjectContent was just called")
	}
	callInfo := struct {
		SelectObjectContentInput *s3.SelectObjectContentInput
	}{
		SelectObjectContentInput: selectObjectContentInput,
	}
	mock.lockSelectObjectContent.Lock()
	mock.calls.SelectObjectContent = append(mock.calls.SelectObjectContent, callInfo)
	mock.lockSelectObjectContent.Unlock()
	return mock.SelectObjectContentFunc(selectObjectContentInput)
}

// SelectObjectContentCalls gets all the calls that were made to SelectObjectContent.
// Check the length with:
//     len(mockeds3Client.SelectObjectContentCalls())
func (mock *s3ClientMock) SelectObjectContentCalls() []struct {
	SelectObjectContentInput *s3.SelectObjectContentInput
} {
	var calls []struct {
		SelectObjectContentInput *s3.SelectObjectContentInput
	}
	mock.lockSelectObjectContent.RLock()
	calls = mock.calls.SelectObjectContent
	mock.lockSelectObjectContent.RUnlock()
	return calls
}

// SelectObjectContentRequest calls SelectObjectContentRequestFunc.
func (mock *s3ClientMock) SelectObjectContentRequest(selectObjectContentInput *s3.SelectObjectContentInput) (*request.Request, *s3.SelectObjectContentOutput) {
	if mock.SelectObjectContentRequestFunc == nil {
		panic("s3ClientMock.SelectObjectContentRequestFunc: method is nil but s3Client.SelectObjectContentRequest was just called")
	}
	callInfo := struct {
		SelectObjectContentInput *s3.SelectObjectContentInput
	}{
		SelectObjectContentInput: selectObjectContentInput,
	}
	mock.lockSelectObjectContentRequest.Lock()
	mock.calls.SelectObjectContentRequest = append(mock.calls.SelectObjectContentRequest, callInfo)
	mock.lockSelectObjectContentRequest.Unlock()
	return mock.SelectObjectContentRequestFunc(selectObjectContentInput)
}

// SelectObjectContentRequestCalls gets all the calls that were made to SelectObjectContentRequest.
// Check the length with:
//     len(mockeds3Client.SelectObjectContentRequestCalls())
func (mock *s3ClientMock) SelectObjectContentRequestCalls() []struct {
	SelectObjectContentInput *s3.SelectObjectContentInput
} {
	var calls []struct {
		SelectObjectContentInput *s3.SelectObjectContentInput
	}
	mock.lockSelectObjectContentRequest.RLock()
	calls = mock.calls.SelectObjectContentRequest
	mock.lockSelectObjectContentRequest.RUnlock()
	return calls
}

// SelectObjectContentWithContext calls SelectObjectContentWithContextFunc.
func (mock *s3ClientMock) SelectObjectContentWithContext(contextMoqParam context.Context, selectObjectContentInput *s3.SelectObjectContentInput, options ...request.Option) (*s3.SelectObjectContentOutput, error) {
	if mock.SelectObjectContentWithContextFunc == nil {
		panic("s3ClientMock.SelectObjectContentWithContextFunc: method is nil but s3Client.SelectObjectContentWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		SelectObjectContentInput *s3.SelectObjectContentInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		SelectObjectContentInput: selectObjectContentInput,
		Options:                  options,
	}
	mock.lockSelectObjectContentWithContext.Lock()
	mock.calls.SelectObjectContentWithContext = append(mock.calls.SelectObjectContentWithContext, callInfo)
	mock.lockSelectObjectContentWithContext.Unlock()
	return mock.SelectObjectContentWithContextFunc(contextMoqParam, selectObjectContentInput, options...)
}

// SelectObjectContentWithContextCalls gets all the calls that were made to SelectObjectContentWithContext.
// Check the length with:
//     len(mockeds3Client.SelectObjectContentWithContextCalls())
func (mock *s3ClientMock) SelectObjectContentWithContextCalls() []struct {
	ContextMoqParam          context.Context
	SelectObjectContentInput *s3.SelectObjectContentInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		SelectObjectContentInput *s3.SelectObjectContentInput
		Options                  []request.Option
	}
	mock.lockSelectObjectContentWithContext.RLock()
	calls = mock.calls.SelectObjectContentWithContext
	mock.lockSelectObjectContentWithContext.RUnlock()
	return calls
}

// UploadPart calls UploadPartFunc.
func (mock *s3ClientMock) UploadPart(uploadPartInput *s3.UploadPartInput) (*s3.UploadPartOutput, error) {
	if mock.UploadPartFunc == nil {
		panic("s3ClientMock.UploadPartFunc: method is nil but s3Client.UploadPart was just called")
	}
	callInfo := struct {
		UploadPartInput *s3.UploadPartInput
	}{
		UploadPartInput: uploadPartInput,
	}
	mock.lockUploadPart.Lock()
	mock.calls.UploadPart = append(mock.calls.UploadPart, callInfo)
	mock.lockUploadPart.Unlock()
	return mock.UploadPartFunc(uploadPartInput)
}

// UploadPartCalls gets all the calls that were made to UploadPart.
// Check the length with:
//     len(mockeds3Client.UploadPartCalls())
func (mock *s3ClientMock) UploadPartCalls() []struct {
	UploadPartInput *s3.UploadPartInput
} {
	var calls []struct {
		UploadPartInput *s3.UploadPartInput
	}
	mock.lockUploadPart.RLock()
	calls = mock.calls.UploadPart
	mock.lockUploadPart.RUnlock()
	return calls
}

// UploadPartCopy calls UploadPartCopyFunc.
func (mock *s3ClientMock) UploadPartCopy(uploadPartCopyInput *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
	if mock.UploadPartCopyFunc == nil {
		panic("s3ClientMock.UploadPartCopyFunc: method is nil but s3Client.UploadPartCopy was just called")
	}
	callInfo := struct {
		UploadPartCopyInput *s3.UploadPartCopyInput
	}{
		UploadPartCopyInput: uploadPartCopyInput,
	}
	mock.lockUploadPartCopy.Lock()
	mock.calls.UploadPartCopy = append(mock.calls.UploadPartCopy, callInfo)
	mock.lockUploadPartCopy.Unlock()
	return mock.UploadPartCopyFunc(uploadPartCopyInput)
}

// UploadPartCopyCalls gets all the calls that were made to UploadPartCopy.
// Check the length with:
//     len(mockeds3Client.UploadPartCopyCalls())
func (mock *s3ClientMock) UploadPartCopyCalls() []struct {
	UploadPartCopyInput *s3.UploadPartCopyInput
} {
	var calls []struct {
		UploadPartCopyInput *s3.UploadPartCopyInput
	}
	mock.lockUploadPartCopy.RLock()
	calls = mock.calls.UploadPartCopy
	mock.lockUploadPartCopy.RUnlock()
	return calls
}

// UploadPartCopyRequest calls UploadPartCopyRequestFunc.
func (mock *s3ClientMock) UploadPartCopyRequest(uploadPartCopyInput *s3.UploadPartCopyInput) (*request.Request, *s3.UploadPartCopyOutput) {
	if mock.UploadPartCopyRequestFunc == nil {
		panic("s3ClientMock.UploadPartCopyRequestFunc: method is nil but s3Client.UploadPartCopyRequest was just called")
	}
	callInfo := struct {
		UploadPartCopyInput *s3.UploadPartCopyInput
	}{
		UploadPartCopyInput: uploadPartCopyInput,
	}
	mock.lockUploadPartCopyRequest.Lock()
	mock.calls.UploadPartCopyRequest = append(mock.calls.UploadPartCopyRequest, callInfo)
	mock.lockUploadPartCopyRequest.Unlock()
	return mock.UploadPartCopyRequestFunc(uploadPartCopyInput)
}

// UploadPartCopyRequestCalls gets all the calls that were made to UploadPartCopyRequest.
// Check the length with:
//     len(mockeds3Client.UploadPartCopyRequestCalls())
func (mock *s3ClientMock) UploadPartCopyRequestCalls() []struct {
	UploadPartCopyInput *s3.UploadPartCopyInput
} {
	var calls []struct {
		UploadPartCopyInput *s3.UploadPartCopyInput
	}
	mock.lockUploadPartCopyRequest.RLock()
	calls = mock.calls.UploadPartCopyRequest
	mock.lockUploadPartCopyRequest.RUnlock()
	return calls
}

// UploadPartCopyWithContext calls UploadPartCopyWithContextFunc.
func (mock *s3ClientMock) UploadPartCopyWithContext(contextMoqParam context.Context, uploadPartCopyInput *s3.UploadPartCopyInput, options ...request.Option) (*s3.UploadPartCopyOutput, error) {
	if mock.UploadPartCopyWithContextFunc == nil {
		panic("s3ClientMock.UploadPartCopyWithContextFunc: method is nil but s3Client.UploadPartCopyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		UploadPartCopyInput *s3.UploadPartCopyInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		UploadPartCopyInput: uploadPartCopyInput,
		Options:             options,
	}
	mock.lockUploadPartCopyWithContext.Lock()
	mock.calls.UploadPartCopyWithContext = append(mock.calls.UploadPartCopyWithContext, callInfo)
	mock.lockUploadPartCopyWithContext.Unlock()
	return mock.UploadPartCopyWithContextFunc(contextMoqParam, uploadPartCopyInput, options...)
}

// UploadPartCopyWithContextCalls gets all the calls that were made to UploadPartCopyWithContext.
// Check the length with:
//     len(mockeds3Client.UploadPartCopyWithContextCalls())
func (mock *s3ClientMock) UploadPartCopyWithContextCalls() []struct {
	ContextMoqParam     context.Context
	UploadPartCopyInput *s3.UploadPartCopyInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		UploadPartCopyInput *s3.UploadPartCopyInput
		Options             []request.Option
	}
	mock.lockUploadPartCopyWithContext.RLock()
	calls = mock.calls.UploadPartCopyWithContext
	mock.lockUploadPartCopyWithContext.RUnlock()
	return calls
}

// UploadPartRequest calls UploadPartRequestFunc.
func (mock *s3ClientMock) UploadPartRequest(uploadPartInput *s3.UploadPartInput) (*request.Request, *s3.UploadPartOutput) {
	if mock.UploadPartRequestFunc == nil {
		panic("s3ClientMock.UploadPartRequestFunc: method is nil but s3Client.UploadPartRequest was just called")
	}
	callInfo := struct {
		UploadPartInput *s3.UploadPartInput
	}{
		UploadPartInput: uploadPartInput,
	}
	mock.lockUploadPartRequest.Lock()
	mock.calls.UploadPartRequest = append(mock.calls.UploadPartRequest, callInfo)
	mock.lockUploadPartRequest.Unlock()
	return mock.UploadPartRequestFunc(uploadPartInput)
}

// UploadPartRequestCalls gets all the calls that were made to UploadPartRequest.
// Check the length with:
//     len(mockeds3Client.UploadPartRequestCalls())
func (mock *s3ClientMock) UploadPartRequestCalls() []struct {
	UploadPartInput *s3.UploadPartInput
} {
	var calls []struct {
		UploadPartInput *s3.UploadPartInput
	}
	mock.lockUploadPartRequest.RLock()
	calls = mock.calls.UploadPartRequest
	mock.lockUploadPartRequest.RUnlock()
	return calls
}

// UploadPartWithContext calls UploadPartWithContextFunc.
func (mock *s3ClientMock) UploadPartWithContext(contextMoqParam context.Context, uploadPartInput *s3.UploadPartInput, options ...request.Option) (*s3.UploadPartOutput, error) {
	if mock.UploadPartWithContextFunc == nil {
		panic("s3ClientMock.UploadPartWithContextFunc: method is nil but s3Client.UploadPartWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UploadPartInput *s3.UploadPartInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		UploadPartInput: uploadPartInput,
		Options:         options,
	}
	mock.lockUploadPartWithContext.Lock()
	mock.calls.UploadPartWithContext = append(mock.calls.UploadPartWithContext, callInfo)
	mock.lockUploadPartWithContext.Unlock()
	return mock.UploadPartWithContextFunc(contextMoqParam, uploadPartInput, options...)
}

// UploadPartWithContextCalls gets all the calls that were made to UploadPartWithContext.
// Check the length with:
//     len(mockeds3Client.UploadPartWithContextCalls())
func (mock *s3ClientMock) UploadPartWithContextCalls() []struct {
	ContextMoqParam context.Context
	UploadPartInput *s3.UploadPartInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		UploadPartInput *s3.UploadPartInput
		Options         []request.Option
	}
	mock.lockUploadPartWithContext.RLock()
	calls = mock.calls.UploadPartWithContext
	mock.lockUploadPartWithContext.RUnlock()
	return calls
}

// WaitUntilBucketExists calls WaitUntilBucketExistsFunc.
func (mock *s3ClientMock) WaitUntilBucketExists(headBucketInput *s3.HeadBucketInput) error {
	if mock.WaitUntilBucketExistsFunc == nil {
		panic("s3ClientMock.WaitUntilBucketExistsFunc: method is nil but s3Client.WaitUntilBucketExists was just called")
	}
	callInfo := struct {
		HeadBucketInput *s3.HeadBucketInput
	}{
		HeadBucketInput: headBucketInput,
	}
	mock.lockWaitUntilBucketExists.Lock()
	mock.calls.WaitUntilBucketExists = append(mock.calls.WaitUntilBucketExists, callInfo)
	mock.lockWaitUntilBucketExists.Unlock()
	return mock.WaitUntilBucketExistsFunc(headBucketInput)
}

// WaitUntilBucketExistsCalls gets all the calls that were made to WaitUntilBucketExists.
// Check the length with:
//     len(mockeds3Client.WaitUntilBucketExistsCalls())
func (mock *s3ClientMock) WaitUntilBucketExistsCalls() []struct {
	HeadBucketInput *s3.HeadBucketInput
} {
	var calls []struct {
		HeadBucketInput *s3.HeadBucketInput
	}
	mock.lockWaitUntilBucketExists.RLock()
	calls = mock.calls.WaitUntilBucketExists
	mock.lockWaitUntilBucketExists.RUnlock()
	return calls
}

// WaitUntilBucketExistsWithContext calls WaitUntilBucketExistsWithContextFunc.
func (mock *s3ClientMock) WaitUntilBucketExistsWithContext(contextMoqParam context.Context, headBucketInput *s3.HeadBucketInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilBucketExistsWithContextFunc == nil {
		panic("s3ClientMock.WaitUntilBucketExistsWithContextFunc: method is nil but s3Client.WaitUntilBucketExistsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		HeadBucketInput *s3.HeadBucketInput
		WaiterOptions   []request.WaiterOption
	}{
		ContextMoqParam: contextMoqParam,
		HeadBucketInput: headBucketInput,
		WaiterOptions:   waiterOptions,
	}
	mock.lockWaitUntilBucketExistsWithContext.Lock()
	mock.calls.WaitUntilBucketExistsWithContext = append(mock.calls.WaitUntilBucketExistsWithContext, callInfo)
	mock.lockWaitUntilBucketExistsWithContext.Unlock()
	return mock.WaitUntilBucketExistsWithContextFunc(contextMoqParam, headBucketInput, waiterOptions...)
}

// WaitUntilBucketExistsWithContextCalls gets all the calls that were made to WaitUntilBucketExistsWithContext.
// Check the length with:
//     len(mockeds3Client.WaitUntilBucketExistsWithContextCalls())
func (mock *s3ClientMock) WaitUntilBucketExistsWithContextCalls() []struct {
	ContextMoqParam context.Context
	HeadBucketInput *s3.HeadBucketInput
	WaiterOptions   []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam context.Context
		HeadBucketInput *s3.HeadBucketInput
		WaiterOptions   []request.WaiterOption
	}
	mock.lockWaitUntilBucketExistsWithContext.RLock()
	calls = mock.calls.WaitUntilBucketExistsWithContext
	mock.lockWaitUntilBucketExistsWithContext.RUnlock()
	return calls
}

// WaitUntilBucketNotExists calls WaitUntilBucketNotExistsFunc.
func (mock *s3ClientMock) WaitUntilBucketNotExists(headBucketInput *s3.HeadBucketInput) error {
	if mock.WaitUntilBucketNotExistsFunc == nil {
		panic("s3ClientMock.WaitUntilBucketNotExistsFunc: method is nil but s3Client.WaitUntilBucketNotExists was just called")
	}
	callInfo := struct {
		HeadBucketInput *s3.HeadBucketInput
	}{
		HeadBucketInput: headBucketInput,
	}
	mock.lockWaitUntilBucketNotExists.Lock()
	mock.calls.WaitUntilBucketNotExists = append(mock.calls.WaitUntilBucketNotExists, callInfo)
	mock.lockWaitUntilBucketNotExists.Unlock()
	return mock.WaitUntilBucketNotExistsFunc(headBucketInput)
}

// WaitUntilBucketNotExistsCalls gets all the calls that were made to WaitUntilBucketNotExists.
// Check the length with:
//     len(mockeds3Client.WaitUntilBucketNotExistsCalls())
func (mock *s3ClientMock) WaitUntilBucketNotExistsCalls() []struct {
	HeadBucketInput *s3.HeadBucketInput
} {
	var calls []struct {
		HeadBucketInput *s3.HeadBucketInput
	}
	mock.lockWaitUntilBucketNotExists.RLock()
	calls = mock.calls.WaitUntilBucketNotExists
	mock.lockWaitUntilBucketNotExists.RUnlock()
	return calls
}

// WaitUntilBucketNotExistsWithContext calls WaitUntilBucketNotExistsWithContextFunc.
func (mock *s3ClientMock) WaitUntilBucketNotExistsWithContext(contextMoqParam context.Context, headBucketInput *s3.HeadBucketInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilBucketNotExistsWithContextFunc == nil {
		panic("s3ClientMock.WaitUntilBucketNotExistsWithContextFunc: method is nil but s3Client.WaitUntilBucketNotExistsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		HeadBucketInput *s3.HeadBucketInput
		WaiterOptions   []request.WaiterOption
	}{
		ContextMoqParam: contextMoqParam,
		HeadBucketInput: headBucketInput,
		WaiterOptions:   waiterOptions,
	}
	mock.lockWaitUntilBucketNotExistsWithContext.Lock()
	mock.calls.WaitUntilBucketNotExistsWithContext = append(mock.calls.WaitUntilBucketNotExistsWithContext, callInfo)
	mock.lockWaitUntilBucketNotExistsWithContext.Unlock()
	return mock.WaitUntilBucketNotExistsWithContextFunc(contextMoqParam, headBucketInput, waiterOptions...)
}

// WaitUntilBucketNotExistsWithContextCalls gets all the calls that were made to WaitUntilBucketNotExistsWithContext.
// Check the length with:
//     len(mockeds3Client.WaitUntilBucketNotExistsWithContextCalls())
func (mock *s3ClientMock) WaitUntilBucketNotExistsWithContextCalls() []struct {
	ContextMoqParam context.Context
	HeadBucketInput *s3.HeadBucketInput
	WaiterOptions   []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam context.Context
		HeadBucketInput *s3.HeadBucketInput
		WaiterOptions   []request.WaiterOption
	}
	mock.lockWaitUntilBucketNotExistsWithContext.RLock()
	calls = mock.calls.WaitUntilBucketNotExistsWithContext
	mock.lockWaitUntilBucketNotExistsWithContext.RUnlock()
	return calls
}

// WaitUntilObjectExists calls WaitUntilObjectExistsFunc.
func (mock *s3ClientMock) WaitUntilObjectExists(headObjectInput *s3.HeadObjectInput) error {
	if mock.WaitUntilObjectExistsFunc == nil {
		panic("s3ClientMock.WaitUntilObjectExistsFunc: method is nil but s3Client.WaitUntilObjectExists was just called")
	}
	callInfo := struct {
		HeadObjectInput *s3.HeadObjectInput
	}{
		HeadObjectInput: headObjectInput,
	}
	mock.lockWaitUntilObjectExists.Lock()
	mock.calls.WaitUntilObjectExists = append(mock.calls.WaitUntilObjectExists, callInfo)
	mock.lockWaitUntilObjectExists.Unlock()
	return mock.WaitUntilObjectExistsFunc(headObjectInput)
}

// WaitUntilObjectExistsCalls gets all the calls that were made to WaitUntilObjectExists.
// Check the length with:
//     len(mockeds3Client.WaitUntilObjectExistsCalls())
func (mock *s3ClientMock) WaitUntilObjectExistsCalls() []struct {
	HeadObjectInput *s3.HeadObjectInput
} {
	var calls []struct {
		HeadObjectInput *s3.HeadObjectInput
	}
	mock.lockWaitUntilObjectExists.RLock()
	calls = mock.calls.WaitUntilObjectExists
	mock.lockWaitUntilObjectExists.RUnlock()
	return calls
}

// WaitUntilObjectExistsWithContext calls WaitUntilObjectExistsWithContextFunc.
func (mock *s3ClientMock) WaitUntilObjectExistsWithContext(contextMoqParam context.Context, headObjectInput *s3.HeadObjectInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilObjectExistsWithContextFunc == nil {
		panic("s3ClientMock.WaitUntilObjectExistsWithContextFunc: method is nil but s3Client.WaitUntilObjectExistsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		HeadObjectInput *s3.HeadObjectInput
		WaiterOptions   []request.WaiterOption
	}{
		ContextMoqParam: contextMoqParam,
		HeadObjectInput: headObjectInput,
		WaiterOptions:   waiterOptions,
	}
	mock.lockWaitUntilObjectExistsWithContext.Lock()
	mock.calls.WaitUntilObjectExistsWithContext = append(mock.calls.WaitUntilObjectExistsWithContext, callInfo)
	mock.lockWaitUntilObjectExistsWithContext.Unlock()
	return mock.WaitUntilObjectExistsWithContextFunc(contextMoqParam, headObjectInput, waiterOptions...)
}

// WaitUntilObjectExistsWithContextCalls gets all the calls that were made to WaitUntilObjectExistsWithContext.
// Check the length with:
//     len(mockeds3Client.WaitUntilObjectExistsWithContextCalls())
func (mock *s3ClientMock) WaitUntilObjectExistsWithContextCalls() []struct {
	ContextMoqParam context.Context
	HeadObjectInput *s3.HeadObjectInput
	WaiterOptions   []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam context.Context
		HeadObjectInput *s3.HeadObjectInput
		WaiterOptions   []request.WaiterOption
	}
	mock.lockWaitUntilObjectExistsWithContext.RLock()
	calls = mock.calls.WaitUntilObjectExistsWithContext
	mock.lockWaitUntilObjectExistsWithContext.RUnlock()
	return calls
}

// WaitUntilObjectNotExists calls WaitUntilObjectNotExistsFunc.
func (mock *s3ClientMock) WaitUntilObjectNotExists(headObjectInput *s3.HeadObjectInput) error {
	if mock.WaitUntilObjectNotExistsFunc == nil {
		panic("s3ClientMock.WaitUntilObjectNotExistsFunc: method is nil but s3Client.WaitUntilObjectNotExists was just called")
	}
	callInfo := struct {
		HeadObjectInput *s3.HeadObjectInput
	}{
		HeadObjectInput: headObjectInput,
	}
	mock.lockWaitUntilObjectNotExists.Lock()
	mock.calls.WaitUntilObjectNotExists = append(mock.calls.WaitUntilObjectNotExists, callInfo)
	mock.lockWaitUntilObjectNotExists.Unlock()
	return mock.WaitUntilObjectNotExistsFunc(headObjectInput)
}

// WaitUntilObjectNotExistsCalls gets all the calls that were made to WaitUntilObjectNotExists.
// Check the length with:
//     len(mockeds3Client.WaitUntilObjectNotExistsCalls())
func (mock *s3ClientMock) WaitUntilObjectNotExistsCalls() []struct {
	HeadObjectInput *s3.HeadObjectInput
} {
	var calls []struct {
		HeadObjectInput *s3.HeadObjectInput
	}
	mock.lockWaitUntilObjectNotExists.RLock()
	calls = mock.calls.WaitUntilObjectNotExists
	mock.lockWaitUntilObjectNotExists.RUnlock()
	return calls
}

// WaitUntilObjectNotExistsWithContext calls WaitUntilObjectNotExistsWithContextFunc.
func (mock *s3ClientMock) WaitUntilObjectNotExistsWithContext(contextMoqParam context.Context, headObjectInput *s3.HeadObjectInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilObjectNotExistsWithContextFunc == nil {
		panic("s3ClientMock.WaitUntilObjectNotExistsWithContextFunc: method is nil but s3Client.WaitUntilObjectNotExistsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		HeadObjectInput *s3.HeadObjectInput
		WaiterOptions   []request.WaiterOption
	}{
		ContextMoqParam: contextMoqParam,
		HeadObjectInput: headObjectInput,
		WaiterOptions:   waiterOptions,
	}
	mock.lockWaitUntilObjectNotExistsWithContext.Lock()
	mock.calls.WaitUntilObjectNotExistsWithContext = append(mock.calls.WaitUntilObjectNotExistsWithContext, callInfo)
	mock.lockWaitUntilObjectNotExistsWithContext.Unlock()
	return mock.WaitUntilObjectNotExistsWithContextFunc(contextMoqParam, headObjectInput, waiterOptions...)
}

// WaitUntilObjectNotExistsWithContextCalls gets all the calls that were made to WaitUntilObjectNotExistsWithContext.
// Check the length with:
//     len(mockeds3Client.WaitUntilObjectNotExistsWithContextCalls())
func (mock *s3ClientMock) WaitUntilObjectNotExistsWithContextCalls() []struct {
	ContextMoqParam context.Context
	HeadObjectInput *s3.HeadObjectInput
	WaiterOptions   []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam context.Context
		HeadObjectInput *s3.HeadObjectInput
		WaiterOptions   []request.WaiterOption
	}
	mock.lockWaitUntilObjectNotExistsWithContext.RLock()
	calls = mock.calls.WaitUntilObjectNotExistsWithContext
	mock.lockWaitUntilObjectNotExistsWithContext.RUnlock()
	return calls
}

// WriteGetObjectResponse calls WriteGetObjectResponseFunc.
func (mock *s3ClientMock) WriteGetObjectResponse(writeGetObjectResponseInput *s3.WriteGetObjectResponseInput) (*s3.WriteGetObjectResponseOutput, error) {
	if mock.WriteGetObjectResponseFunc == nil {
		panic("s3ClientMock.WriteGetObjectResponseFunc: method is nil but s3Client.WriteGetObjectResponse was just called")
	}
	callInfo := struct {
		WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
	}{
		WriteGetObjectResponseInput: writeGetObjectResponseInput,
	}
	mock.lockWriteGetObjectResponse.Lock()
	mock.calls.WriteGetObjectResponse = append(mock.calls.WriteGetObjectResponse, callInfo)
	mock.lockWriteGetObjectResponse.Unlock()
	return mock.WriteGetObjectResponseFunc(writeGetObjectResponseInput)
}

// WriteGetObjectResponseCalls gets all the calls that were made to WriteGetObjectResponse.
// Check the length with:
//     len(mockeds3Client.WriteGetObjectResponseCalls())
func (mock *s3ClientMock) WriteGetObjectResponseCalls() []struct {
	WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
} {
	var calls []struct {
		WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
	}
	mock.lockWriteGetObjectResponse.RLock()
	calls = mock.calls.WriteGetObjectResponse
	mock.lockWriteGetObjectResponse.RUnlock()
	return calls
}

// WriteGetObjectResponseRequest calls WriteGetObjectResponseRequestFunc.
func (mock *s3ClientMock) WriteGetObjectResponseRequest(writeGetObjectResponseInput *s3.WriteGetObjectResponseInput) (*request.Request, *s3.WriteGetObjectResponseOutput) {
	if mock.WriteGetObjectResponseRequestFunc == nil {
		panic("s3ClientMock.WriteGetObjectResponseRequestFunc: method is nil but s3Client.WriteGetObjectResponseRequest was just called")
	}
	callInfo := struct {
		WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
	}{
		WriteGetObjectResponseInput: writeGetObjectResponseInput,
	}
	mock.lockWriteGetObjectResponseRequest.Lock()
	mock.calls.WriteGetObjectResponseRequest = append(mock.calls.WriteGetObjectResponseRequest, callInfo)
	mock.lockWriteGetObjectResponseRequest.Unlock()
	return mock.WriteGetObjectResponseRequestFunc(writeGetObjectResponseInput)
}

// WriteGetObjectResponseRequestCalls gets all the calls that were made to WriteGetObjectResponseRequest.
// Check the length with:
//     len(mockeds3Client.WriteGetObjectResponseRequestCalls())
func (mock *s3ClientMock) WriteGetObjectResponseRequestCalls() []struct {
	WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
} {
	var calls []struct {
		WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
	}
	mock.lockWriteGetObjectResponseRequest.RLock()
	calls = mock.calls.WriteGetObjectResponseRequest
	mock.lockWriteGetObjectResponseRequest.RUnlock()
	return calls
}

// WriteGetObjectResponseWithContext calls WriteGetObjectResponseWithContextFunc.
func (mock *s3ClientMock) WriteGetObjectResponseWithContext(contextMoqParam context.Context, writeGetObjectResponseInput *s3.WriteGetObjectResponseInput, options ...request.Option) (*s3.WriteGetObjectResponseOutput, error) {
	if mock.WriteGetObjectResponseWithContextFunc == nil {
		panic("s3ClientMock.WriteGetObjectResponseWithContextFunc: method is nil but s3Client.WriteGetObjectResponseWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		WriteGetObjectResponseInput: writeGetObjectResponseInput,
		Options:                     options,
	}
	mock.lockWriteGetObjectResponseWithContext.Lock()
	mock.calls.WriteGetObjectResponseWithContext = append(mock.calls.WriteGetObjectResponseWithContext, callInfo)
	mock.lockWriteGetObjectResponseWithContext.Unlock()
	return mock.WriteGetObjectResponseWithContextFunc(contextMoqParam, writeGetObjectResponseInput, options...)
}

// WriteGetObjectResponseWithContextCalls gets all the calls that were made to WriteGetObjectResponseWithContext.
// Check the length with:
//     len(mockeds3Client.WriteGetObjectResponseWithContextCalls())
func (mock *s3ClientMock) WriteGetObjectResponseWithContextCalls() []struct {
	ContextMoqParam             context.Context
	WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		WriteGetObjectResponseInput *s3.WriteGetObjectResponseInput
		Options                     []request.Option
	}
	mock.lockWriteGetObjectResponseWithContext.RLock()
	calls = mock.calls.WriteGetObjectResponseWithContext
	mock.lockWriteGetObjectResponseWithContext.RUnlock()
	return calls
}
