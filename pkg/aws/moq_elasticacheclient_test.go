// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticache"
	"sync"
)

// Ensure, that elasticacheClientMock does implement elasticacheClient.
// If this is not the case, regenerate this file with moq.
var _ elasticacheClient = &elasticacheClientMock{}

// elasticacheClientMock is a mock implementation of elasticacheClient.
//
// 	func TestSomethingThatUseselasticacheClient(t *testing.T) {
//
// 		// make and configure a mocked elasticacheClient
// 		mockedelasticacheClient := &elasticacheClientMock{
// 			AddTagsToResourceFunc: func(addTagsToResourceInput *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error) {
// 				panic("mock out the AddTagsToResource method")
// 			},
// 			AddTagsToResourceRequestFunc: func(addTagsToResourceInput *elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage) {
// 				panic("mock out the AddTagsToResourceRequest method")
// 			},
// 			AddTagsToResourceWithContextFunc: func(contextMoqParam context.Context, addTagsToResourceInput *elasticache.AddTagsToResourceInput, options ...request.Option) (*elasticache.TagListMessage, error) {
// 				panic("mock out the AddTagsToResourceWithContext method")
// 			},
// 			AuthorizeCacheSecurityGroupIngressFunc: func(authorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
// 				panic("mock out the AuthorizeCacheSecurityGroupIngress method")
// 			},
// 			AuthorizeCacheSecurityGroupIngressRequestFunc: func(authorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
// 				panic("mock out the AuthorizeCacheSecurityGroupIngressRequest method")
// 			},
// 			AuthorizeCacheSecurityGroupIngressWithContextFunc: func(contextMoqParam context.Context, authorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput, options ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
// 				panic("mock out the AuthorizeCacheSecurityGroupIngressWithContext method")
// 			},
// 			BatchApplyUpdateActionFunc: func(batchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error) {
// 				panic("mock out the BatchApplyUpdateAction method")
// 			},
// 			BatchApplyUpdateActionRequestFunc: func(batchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput) (*request.Request, *elasticache.BatchApplyUpdateActionOutput) {
// 				panic("mock out the BatchApplyUpdateActionRequest method")
// 			},
// 			BatchApplyUpdateActionWithContextFunc: func(contextMoqParam context.Context, batchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput, options ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error) {
// 				panic("mock out the BatchApplyUpdateActionWithContext method")
// 			},
// 			BatchStopUpdateActionFunc: func(batchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error) {
// 				panic("mock out the BatchStopUpdateAction method")
// 			},
// 			BatchStopUpdateActionRequestFunc: func(batchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput) (*request.Request, *elasticache.BatchStopUpdateActionOutput) {
// 				panic("mock out the BatchStopUpdateActionRequest method")
// 			},
// 			BatchStopUpdateActionWithContextFunc: func(contextMoqParam context.Context, batchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput, options ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error) {
// 				panic("mock out the BatchStopUpdateActionWithContext method")
// 			},
// 			CompleteMigrationFunc: func(completeMigrationInput *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error) {
// 				panic("mock out the CompleteMigration method")
// 			},
// 			CompleteMigrationRequestFunc: func(completeMigrationInput *elasticache.CompleteMigrationInput) (*request.Request, *elasticache.CompleteMigrationOutput) {
// 				panic("mock out the CompleteMigrationRequest method")
// 			},
// 			CompleteMigrationWithContextFunc: func(contextMoqParam context.Context, completeMigrationInput *elasticache.CompleteMigrationInput, options ...request.Option) (*elasticache.CompleteMigrationOutput, error) {
// 				panic("mock out the CompleteMigrationWithContext method")
// 			},
// 			CopySnapshotFunc: func(copySnapshotInput *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error) {
// 				panic("mock out the CopySnapshot method")
// 			},
// 			CopySnapshotRequestFunc: func(copySnapshotInput *elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput) {
// 				panic("mock out the CopySnapshotRequest method")
// 			},
// 			CopySnapshotWithContextFunc: func(contextMoqParam context.Context, copySnapshotInput *elasticache.CopySnapshotInput, options ...request.Option) (*elasticache.CopySnapshotOutput, error) {
// 				panic("mock out the CopySnapshotWithContext method")
// 			},
// 			CreateCacheClusterFunc: func(createCacheClusterInput *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error) {
// 				panic("mock out the CreateCacheCluster method")
// 			},
// 			CreateCacheClusterRequestFunc: func(createCacheClusterInput *elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput) {
// 				panic("mock out the CreateCacheClusterRequest method")
// 			},
// 			CreateCacheClusterWithContextFunc: func(contextMoqParam context.Context, createCacheClusterInput *elasticache.CreateCacheClusterInput, options ...request.Option) (*elasticache.CreateCacheClusterOutput, error) {
// 				panic("mock out the CreateCacheClusterWithContext method")
// 			},
// 			CreateCacheParameterGroupFunc: func(createCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error) {
// 				panic("mock out the CreateCacheParameterGroup method")
// 			},
// 			CreateCacheParameterGroupRequestFunc: func(createCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput) {
// 				panic("mock out the CreateCacheParameterGroupRequest method")
// 			},
// 			CreateCacheParameterGroupWithContextFunc: func(contextMoqParam context.Context, createCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput, options ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error) {
// 				panic("mock out the CreateCacheParameterGroupWithContext method")
// 			},
// 			CreateCacheSecurityGroupFunc: func(createCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error) {
// 				panic("mock out the CreateCacheSecurityGroup method")
// 			},
// 			CreateCacheSecurityGroupRequestFunc: func(createCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput) {
// 				panic("mock out the CreateCacheSecurityGroupRequest method")
// 			},
// 			CreateCacheSecurityGroupWithContextFunc: func(contextMoqParam context.Context, createCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput, options ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error) {
// 				panic("mock out the CreateCacheSecurityGroupWithContext method")
// 			},
// 			CreateCacheSubnetGroupFunc: func(createCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error) {
// 				panic("mock out the CreateCacheSubnetGroup method")
// 			},
// 			CreateCacheSubnetGroupRequestFunc: func(createCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput) {
// 				panic("mock out the CreateCacheSubnetGroupRequest method")
// 			},
// 			CreateCacheSubnetGroupWithContextFunc: func(contextMoqParam context.Context, createCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput, options ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error) {
// 				panic("mock out the CreateCacheSubnetGroupWithContext method")
// 			},
// 			CreateGlobalReplicationGroupFunc: func(createGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
// 				panic("mock out the CreateGlobalReplicationGroup method")
// 			},
// 			CreateGlobalReplicationGroupRequestFunc: func(createGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput) (*request.Request, *elasticache.CreateGlobalReplicationGroupOutput) {
// 				panic("mock out the CreateGlobalReplicationGroupRequest method")
// 			},
// 			CreateGlobalReplicationGroupWithContextFunc: func(contextMoqParam context.Context, createGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput, options ...request.Option) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
// 				panic("mock out the CreateGlobalReplicationGroupWithContext method")
// 			},
// 			CreateReplicationGroupFunc: func(createReplicationGroupInput *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error) {
// 				panic("mock out the CreateReplicationGroup method")
// 			},
// 			CreateReplicationGroupRequestFunc: func(createReplicationGroupInput *elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput) {
// 				panic("mock out the CreateReplicationGroupRequest method")
// 			},
// 			CreateReplicationGroupWithContextFunc: func(contextMoqParam context.Context, createReplicationGroupInput *elasticache.CreateReplicationGroupInput, options ...request.Option) (*elasticache.CreateReplicationGroupOutput, error) {
// 				panic("mock out the CreateReplicationGroupWithContext method")
// 			},
// 			CreateSnapshotFunc: func(createSnapshotInput *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error) {
// 				panic("mock out the CreateSnapshot method")
// 			},
// 			CreateSnapshotRequestFunc: func(createSnapshotInput *elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput) {
// 				panic("mock out the CreateSnapshotRequest method")
// 			},
// 			CreateSnapshotWithContextFunc: func(contextMoqParam context.Context, createSnapshotInput *elasticache.CreateSnapshotInput, options ...request.Option) (*elasticache.CreateSnapshotOutput, error) {
// 				panic("mock out the CreateSnapshotWithContext method")
// 			},
// 			CreateUserFunc: func(createUserInput *elasticache.CreateUserInput) (*elasticache.CreateUserOutput, error) {
// 				panic("mock out the CreateUser method")
// 			},
// 			CreateUserGroupFunc: func(createUserGroupInput *elasticache.CreateUserGroupInput) (*elasticache.CreateUserGroupOutput, error) {
// 				panic("mock out the CreateUserGroup method")
// 			},
// 			CreateUserGroupRequestFunc: func(createUserGroupInput *elasticache.CreateUserGroupInput) (*request.Request, *elasticache.CreateUserGroupOutput) {
// 				panic("mock out the CreateUserGroupRequest method")
// 			},
// 			CreateUserGroupWithContextFunc: func(contextMoqParam context.Context, createUserGroupInput *elasticache.CreateUserGroupInput, options ...request.Option) (*elasticache.CreateUserGroupOutput, error) {
// 				panic("mock out the CreateUserGroupWithContext method")
// 			},
// 			CreateUserRequestFunc: func(createUserInput *elasticache.CreateUserInput) (*request.Request, *elasticache.CreateUserOutput) {
// 				panic("mock out the CreateUserRequest method")
// 			},
// 			CreateUserWithContextFunc: func(contextMoqParam context.Context, createUserInput *elasticache.CreateUserInput, options ...request.Option) (*elasticache.CreateUserOutput, error) {
// 				panic("mock out the CreateUserWithContext method")
// 			},
// 			DecreaseNodeGroupsInGlobalReplicationGroupFunc: func(decreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
// 				panic("mock out the DecreaseNodeGroupsInGlobalReplicationGroup method")
// 			},
// 			DecreaseNodeGroupsInGlobalReplicationGroupRequestFunc: func(decreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput) {
// 				panic("mock out the DecreaseNodeGroupsInGlobalReplicationGroupRequest method")
// 			},
// 			DecreaseNodeGroupsInGlobalReplicationGroupWithContextFunc: func(contextMoqParam context.Context, decreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput, options ...request.Option) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
// 				panic("mock out the DecreaseNodeGroupsInGlobalReplicationGroupWithContext method")
// 			},
// 			DecreaseReplicaCountFunc: func(decreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error) {
// 				panic("mock out the DecreaseReplicaCount method")
// 			},
// 			DecreaseReplicaCountRequestFunc: func(decreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput) (*request.Request, *elasticache.DecreaseReplicaCountOutput) {
// 				panic("mock out the DecreaseReplicaCountRequest method")
// 			},
// 			DecreaseReplicaCountWithContextFunc: func(contextMoqParam context.Context, decreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput, options ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error) {
// 				panic("mock out the DecreaseReplicaCountWithContext method")
// 			},
// 			DeleteCacheClusterFunc: func(deleteCacheClusterInput *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error) {
// 				panic("mock out the DeleteCacheCluster method")
// 			},
// 			DeleteCacheClusterRequestFunc: func(deleteCacheClusterInput *elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput) {
// 				panic("mock out the DeleteCacheClusterRequest method")
// 			},
// 			DeleteCacheClusterWithContextFunc: func(contextMoqParam context.Context, deleteCacheClusterInput *elasticache.DeleteCacheClusterInput, options ...request.Option) (*elasticache.DeleteCacheClusterOutput, error) {
// 				panic("mock out the DeleteCacheClusterWithContext method")
// 			},
// 			DeleteCacheParameterGroupFunc: func(deleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error) {
// 				panic("mock out the DeleteCacheParameterGroup method")
// 			},
// 			DeleteCacheParameterGroupRequestFunc: func(deleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput) {
// 				panic("mock out the DeleteCacheParameterGroupRequest method")
// 			},
// 			DeleteCacheParameterGroupWithContextFunc: func(contextMoqParam context.Context, deleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput, options ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error) {
// 				panic("mock out the DeleteCacheParameterGroupWithContext method")
// 			},
// 			DeleteCacheSecurityGroupFunc: func(deleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
// 				panic("mock out the DeleteCacheSecurityGroup method")
// 			},
// 			DeleteCacheSecurityGroupRequestFunc: func(deleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput) {
// 				panic("mock out the DeleteCacheSecurityGroupRequest method")
// 			},
// 			DeleteCacheSecurityGroupWithContextFunc: func(contextMoqParam context.Context, deleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput, options ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
// 				panic("mock out the DeleteCacheSecurityGroupWithContext method")
// 			},
// 			DeleteCacheSubnetGroupFunc: func(deleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
// 				panic("mock out the DeleteCacheSubnetGroup method")
// 			},
// 			DeleteCacheSubnetGroupRequestFunc: func(deleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput) {
// 				panic("mock out the DeleteCacheSubnetGroupRequest method")
// 			},
// 			DeleteCacheSubnetGroupWithContextFunc: func(contextMoqParam context.Context, deleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput, options ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
// 				panic("mock out the DeleteCacheSubnetGroupWithContext method")
// 			},
// 			DeleteGlobalReplicationGroupFunc: func(deleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
// 				panic("mock out the DeleteGlobalReplicationGroup method")
// 			},
// 			DeleteGlobalReplicationGroupRequestFunc: func(deleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput) (*request.Request, *elasticache.DeleteGlobalReplicationGroupOutput) {
// 				panic("mock out the DeleteGlobalReplicationGroupRequest method")
// 			},
// 			DeleteGlobalReplicationGroupWithContextFunc: func(contextMoqParam context.Context, deleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput, options ...request.Option) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
// 				panic("mock out the DeleteGlobalReplicationGroupWithContext method")
// 			},
// 			DeleteReplicationGroupFunc: func(deleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error) {
// 				panic("mock out the DeleteReplicationGroup method")
// 			},
// 			DeleteReplicationGroupRequestFunc: func(deleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput) {
// 				panic("mock out the DeleteReplicationGroupRequest method")
// 			},
// 			DeleteReplicationGroupWithContextFunc: func(contextMoqParam context.Context, deleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput, options ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error) {
// 				panic("mock out the DeleteReplicationGroupWithContext method")
// 			},
// 			DeleteSnapshotFunc: func(deleteSnapshotInput *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error) {
// 				panic("mock out the DeleteSnapshot method")
// 			},
// 			DeleteSnapshotRequestFunc: func(deleteSnapshotInput *elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput) {
// 				panic("mock out the DeleteSnapshotRequest method")
// 			},
// 			DeleteSnapshotWithContextFunc: func(contextMoqParam context.Context, deleteSnapshotInput *elasticache.DeleteSnapshotInput, options ...request.Option) (*elasticache.DeleteSnapshotOutput, error) {
// 				panic("mock out the DeleteSnapshotWithContext method")
// 			},
// 			DeleteUserFunc: func(deleteUserInput *elasticache.DeleteUserInput) (*elasticache.DeleteUserOutput, error) {
// 				panic("mock out the DeleteUser method")
// 			},
// 			DeleteUserGroupFunc: func(deleteUserGroupInput *elasticache.DeleteUserGroupInput) (*elasticache.DeleteUserGroupOutput, error) {
// 				panic("mock out the DeleteUserGroup method")
// 			},
// 			DeleteUserGroupRequestFunc: func(deleteUserGroupInput *elasticache.DeleteUserGroupInput) (*request.Request, *elasticache.DeleteUserGroupOutput) {
// 				panic("mock out the DeleteUserGroupRequest method")
// 			},
// 			DeleteUserGroupWithContextFunc: func(contextMoqParam context.Context, deleteUserGroupInput *elasticache.DeleteUserGroupInput, options ...request.Option) (*elasticache.DeleteUserGroupOutput, error) {
// 				panic("mock out the DeleteUserGroupWithContext method")
// 			},
// 			DeleteUserRequestFunc: func(deleteUserInput *elasticache.DeleteUserInput) (*request.Request, *elasticache.DeleteUserOutput) {
// 				panic("mock out the DeleteUserRequest method")
// 			},
// 			DeleteUserWithContextFunc: func(contextMoqParam context.Context, deleteUserInput *elasticache.DeleteUserInput, options ...request.Option) (*elasticache.DeleteUserOutput, error) {
// 				panic("mock out the DeleteUserWithContext method")
// 			},
// 			DescribeCacheClustersFunc: func(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error) {
// 				panic("mock out the DescribeCacheClusters method")
// 			},
// 			DescribeCacheClustersPagesFunc: func(describeCacheClustersInput *elasticache.DescribeCacheClustersInput, fn func(*elasticache.DescribeCacheClustersOutput, bool) bool) error {
// 				panic("mock out the DescribeCacheClustersPages method")
// 			},
// 			DescribeCacheClustersPagesWithContextFunc: func(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, fn func(*elasticache.DescribeCacheClustersOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeCacheClustersPagesWithContext method")
// 			},
// 			DescribeCacheClustersRequestFunc: func(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput) {
// 				panic("mock out the DescribeCacheClustersRequest method")
// 			},
// 			DescribeCacheClustersWithContextFunc: func(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, options ...request.Option) (*elasticache.DescribeCacheClustersOutput, error) {
// 				panic("mock out the DescribeCacheClustersWithContext method")
// 			},
// 			DescribeCacheEngineVersionsFunc: func(describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
// 				panic("mock out the DescribeCacheEngineVersions method")
// 			},
// 			DescribeCacheEngineVersionsPagesFunc: func(describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput, fn func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error {
// 				panic("mock out the DescribeCacheEngineVersionsPages method")
// 			},
// 			DescribeCacheEngineVersionsPagesWithContextFunc: func(contextMoqParam context.Context, describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput, fn func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeCacheEngineVersionsPagesWithContext method")
// 			},
// 			DescribeCacheEngineVersionsRequestFunc: func(describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput) {
// 				panic("mock out the DescribeCacheEngineVersionsRequest method")
// 			},
// 			DescribeCacheEngineVersionsWithContextFunc: func(contextMoqParam context.Context, describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput, options ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
// 				panic("mock out the DescribeCacheEngineVersionsWithContext method")
// 			},
// 			DescribeCacheParameterGroupsFunc: func(describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
// 				panic("mock out the DescribeCacheParameterGroups method")
// 			},
// 			DescribeCacheParameterGroupsPagesFunc: func(describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput, fn func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeCacheParameterGroupsPages method")
// 			},
// 			DescribeCacheParameterGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput, fn func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeCacheParameterGroupsPagesWithContext method")
// 			},
// 			DescribeCacheParameterGroupsRequestFunc: func(describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput) {
// 				panic("mock out the DescribeCacheParameterGroupsRequest method")
// 			},
// 			DescribeCacheParameterGroupsWithContextFunc: func(contextMoqParam context.Context, describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput, options ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
// 				panic("mock out the DescribeCacheParameterGroupsWithContext method")
// 			},
// 			DescribeCacheParametersFunc: func(describeCacheParametersInput *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error) {
// 				panic("mock out the DescribeCacheParameters method")
// 			},
// 			DescribeCacheParametersPagesFunc: func(describeCacheParametersInput *elasticache.DescribeCacheParametersInput, fn func(*elasticache.DescribeCacheParametersOutput, bool) bool) error {
// 				panic("mock out the DescribeCacheParametersPages method")
// 			},
// 			DescribeCacheParametersPagesWithContextFunc: func(contextMoqParam context.Context, describeCacheParametersInput *elasticache.DescribeCacheParametersInput, fn func(*elasticache.DescribeCacheParametersOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeCacheParametersPagesWithContext method")
// 			},
// 			DescribeCacheParametersRequestFunc: func(describeCacheParametersInput *elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput) {
// 				panic("mock out the DescribeCacheParametersRequest method")
// 			},
// 			DescribeCacheParametersWithContextFunc: func(contextMoqParam context.Context, describeCacheParametersInput *elasticache.DescribeCacheParametersInput, options ...request.Option) (*elasticache.DescribeCacheParametersOutput, error) {
// 				panic("mock out the DescribeCacheParametersWithContext method")
// 			},
// 			DescribeCacheSecurityGroupsFunc: func(describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
// 				panic("mock out the DescribeCacheSecurityGroups method")
// 			},
// 			DescribeCacheSecurityGroupsPagesFunc: func(describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput, fn func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeCacheSecurityGroupsPages method")
// 			},
// 			DescribeCacheSecurityGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput, fn func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeCacheSecurityGroupsPagesWithContext method")
// 			},
// 			DescribeCacheSecurityGroupsRequestFunc: func(describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput) {
// 				panic("mock out the DescribeCacheSecurityGroupsRequest method")
// 			},
// 			DescribeCacheSecurityGroupsWithContextFunc: func(contextMoqParam context.Context, describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput, options ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
// 				panic("mock out the DescribeCacheSecurityGroupsWithContext method")
// 			},
// 			DescribeCacheSubnetGroupsFunc: func(describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
// 				panic("mock out the DescribeCacheSubnetGroups method")
// 			},
// 			DescribeCacheSubnetGroupsPagesFunc: func(describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput, fn func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeCacheSubnetGroupsPages method")
// 			},
// 			DescribeCacheSubnetGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput, fn func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeCacheSubnetGroupsPagesWithContext method")
// 			},
// 			DescribeCacheSubnetGroupsRequestFunc: func(describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput) {
// 				panic("mock out the DescribeCacheSubnetGroupsRequest method")
// 			},
// 			DescribeCacheSubnetGroupsWithContextFunc: func(contextMoqParam context.Context, describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput, options ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
// 				panic("mock out the DescribeCacheSubnetGroupsWithContext method")
// 			},
// 			DescribeEngineDefaultParametersFunc: func(describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
// 				panic("mock out the DescribeEngineDefaultParameters method")
// 			},
// 			DescribeEngineDefaultParametersPagesFunc: func(describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput, fn func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error {
// 				panic("mock out the DescribeEngineDefaultParametersPages method")
// 			},
// 			DescribeEngineDefaultParametersPagesWithContextFunc: func(contextMoqParam context.Context, describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput, fn func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeEngineDefaultParametersPagesWithContext method")
// 			},
// 			DescribeEngineDefaultParametersRequestFunc: func(describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput) {
// 				panic("mock out the DescribeEngineDefaultParametersRequest method")
// 			},
// 			DescribeEngineDefaultParametersWithContextFunc: func(contextMoqParam context.Context, describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput, options ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
// 				panic("mock out the DescribeEngineDefaultParametersWithContext method")
// 			},
// 			DescribeEventsFunc: func(describeEventsInput *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error) {
// 				panic("mock out the DescribeEvents method")
// 			},
// 			DescribeEventsPagesFunc: func(describeEventsInput *elasticache.DescribeEventsInput, fn func(*elasticache.DescribeEventsOutput, bool) bool) error {
// 				panic("mock out the DescribeEventsPages method")
// 			},
// 			DescribeEventsPagesWithContextFunc: func(contextMoqParam context.Context, describeEventsInput *elasticache.DescribeEventsInput, fn func(*elasticache.DescribeEventsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeEventsPagesWithContext method")
// 			},
// 			DescribeEventsRequestFunc: func(describeEventsInput *elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput) {
// 				panic("mock out the DescribeEventsRequest method")
// 			},
// 			DescribeEventsWithContextFunc: func(contextMoqParam context.Context, describeEventsInput *elasticache.DescribeEventsInput, options ...request.Option) (*elasticache.DescribeEventsOutput, error) {
// 				panic("mock out the DescribeEventsWithContext method")
// 			},
// 			DescribeGlobalReplicationGroupsFunc: func(describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
// 				panic("mock out the DescribeGlobalReplicationGroups method")
// 			},
// 			DescribeGlobalReplicationGroupsPagesFunc: func(describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput, fn func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeGlobalReplicationGroupsPages method")
// 			},
// 			DescribeGlobalReplicationGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput, fn func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeGlobalReplicationGroupsPagesWithContext method")
// 			},
// 			DescribeGlobalReplicationGroupsRequestFunc: func(describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput) (*request.Request, *elasticache.DescribeGlobalReplicationGroupsOutput) {
// 				panic("mock out the DescribeGlobalReplicationGroupsRequest method")
// 			},
// 			DescribeGlobalReplicationGroupsWithContextFunc: func(contextMoqParam context.Context, describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput, options ...request.Option) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
// 				panic("mock out the DescribeGlobalReplicationGroupsWithContext method")
// 			},
// 			DescribeReplicationGroupsFunc: func(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error) {
// 				panic("mock out the DescribeReplicationGroups method")
// 			},
// 			DescribeReplicationGroupsPagesFunc: func(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, fn func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeReplicationGroupsPages method")
// 			},
// 			DescribeReplicationGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, fn func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeReplicationGroupsPagesWithContext method")
// 			},
// 			DescribeReplicationGroupsRequestFunc: func(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput) {
// 				panic("mock out the DescribeReplicationGroupsRequest method")
// 			},
// 			DescribeReplicationGroupsWithContextFunc: func(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, options ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error) {
// 				panic("mock out the DescribeReplicationGroupsWithContext method")
// 			},
// 			DescribeReservedCacheNodesFunc: func(describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error) {
// 				panic("mock out the DescribeReservedCacheNodes method")
// 			},
// 			DescribeReservedCacheNodesOfferingsFunc: func(describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
// 				panic("mock out the DescribeReservedCacheNodesOfferings method")
// 			},
// 			DescribeReservedCacheNodesOfferingsPagesFunc: func(describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput, fn func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error {
// 				panic("mock out the DescribeReservedCacheNodesOfferingsPages method")
// 			},
// 			DescribeReservedCacheNodesOfferingsPagesWithContextFunc: func(contextMoqParam context.Context, describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput, fn func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeReservedCacheNodesOfferingsPagesWithContext method")
// 			},
// 			DescribeReservedCacheNodesOfferingsRequestFunc: func(describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
// 				panic("mock out the DescribeReservedCacheNodesOfferingsRequest method")
// 			},
// 			DescribeReservedCacheNodesOfferingsWithContextFunc: func(contextMoqParam context.Context, describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput, options ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
// 				panic("mock out the DescribeReservedCacheNodesOfferingsWithContext method")
// 			},
// 			DescribeReservedCacheNodesPagesFunc: func(describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput, fn func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error {
// 				panic("mock out the DescribeReservedCacheNodesPages method")
// 			},
// 			DescribeReservedCacheNodesPagesWithContextFunc: func(contextMoqParam context.Context, describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput, fn func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeReservedCacheNodesPagesWithContext method")
// 			},
// 			DescribeReservedCacheNodesRequestFunc: func(describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput) {
// 				panic("mock out the DescribeReservedCacheNodesRequest method")
// 			},
// 			DescribeReservedCacheNodesWithContextFunc: func(contextMoqParam context.Context, describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput, options ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error) {
// 				panic("mock out the DescribeReservedCacheNodesWithContext method")
// 			},
// 			DescribeServiceUpdatesFunc: func(describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error) {
// 				panic("mock out the DescribeServiceUpdates method")
// 			},
// 			DescribeServiceUpdatesPagesFunc: func(describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput, fn func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) error {
// 				panic("mock out the DescribeServiceUpdatesPages method")
// 			},
// 			DescribeServiceUpdatesPagesWithContextFunc: func(contextMoqParam context.Context, describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput, fn func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeServiceUpdatesPagesWithContext method")
// 			},
// 			DescribeServiceUpdatesRequestFunc: func(describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput) (*request.Request, *elasticache.DescribeServiceUpdatesOutput) {
// 				panic("mock out the DescribeServiceUpdatesRequest method")
// 			},
// 			DescribeServiceUpdatesWithContextFunc: func(contextMoqParam context.Context, describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput, options ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error) {
// 				panic("mock out the DescribeServiceUpdatesWithContext method")
// 			},
// 			DescribeSnapshotsFunc: func(describeSnapshotsInput *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error) {
// 				panic("mock out the DescribeSnapshots method")
// 			},
// 			DescribeSnapshotsPagesFunc: func(describeSnapshotsInput *elasticache.DescribeSnapshotsInput, fn func(*elasticache.DescribeSnapshotsOutput, bool) bool) error {
// 				panic("mock out the DescribeSnapshotsPages method")
// 			},
// 			DescribeSnapshotsPagesWithContextFunc: func(contextMoqParam context.Context, describeSnapshotsInput *elasticache.DescribeSnapshotsInput, fn func(*elasticache.DescribeSnapshotsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeSnapshotsPagesWithContext method")
// 			},
// 			DescribeSnapshotsRequestFunc: func(describeSnapshotsInput *elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput) {
// 				panic("mock out the DescribeSnapshotsRequest method")
// 			},
// 			DescribeSnapshotsWithContextFunc: func(contextMoqParam context.Context, describeSnapshotsInput *elasticache.DescribeSnapshotsInput, options ...request.Option) (*elasticache.DescribeSnapshotsOutput, error) {
// 				panic("mock out the DescribeSnapshotsWithContext method")
// 			},
// 			DescribeUpdateActionsFunc: func(describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error) {
// 				panic("mock out the DescribeUpdateActions method")
// 			},
// 			DescribeUpdateActionsPagesFunc: func(describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput, fn func(*elasticache.DescribeUpdateActionsOutput, bool) bool) error {
// 				panic("mock out the DescribeUpdateActionsPages method")
// 			},
// 			DescribeUpdateActionsPagesWithContextFunc: func(contextMoqParam context.Context, describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput, fn func(*elasticache.DescribeUpdateActionsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeUpdateActionsPagesWithContext method")
// 			},
// 			DescribeUpdateActionsRequestFunc: func(describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput) (*request.Request, *elasticache.DescribeUpdateActionsOutput) {
// 				panic("mock out the DescribeUpdateActionsRequest method")
// 			},
// 			DescribeUpdateActionsWithContextFunc: func(contextMoqParam context.Context, describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput, options ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error) {
// 				panic("mock out the DescribeUpdateActionsWithContext method")
// 			},
// 			DescribeUserGroupsFunc: func(describeUserGroupsInput *elasticache.DescribeUserGroupsInput) (*elasticache.DescribeUserGroupsOutput, error) {
// 				panic("mock out the DescribeUserGroups method")
// 			},
// 			DescribeUserGroupsPagesFunc: func(describeUserGroupsInput *elasticache.DescribeUserGroupsInput, fn func(*elasticache.DescribeUserGroupsOutput, bool) bool) error {
// 				panic("mock out the DescribeUserGroupsPages method")
// 			},
// 			DescribeUserGroupsPagesWithContextFunc: func(contextMoqParam context.Context, describeUserGroupsInput *elasticache.DescribeUserGroupsInput, fn func(*elasticache.DescribeUserGroupsOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeUserGroupsPagesWithContext method")
// 			},
// 			DescribeUserGroupsRequestFunc: func(describeUserGroupsInput *elasticache.DescribeUserGroupsInput) (*request.Request, *elasticache.DescribeUserGroupsOutput) {
// 				panic("mock out the DescribeUserGroupsRequest method")
// 			},
// 			DescribeUserGroupsWithContextFunc: func(contextMoqParam context.Context, describeUserGroupsInput *elasticache.DescribeUserGroupsInput, options ...request.Option) (*elasticache.DescribeUserGroupsOutput, error) {
// 				panic("mock out the DescribeUserGroupsWithContext method")
// 			},
// 			DescribeUsersFunc: func(describeUsersInput *elasticache.DescribeUsersInput) (*elasticache.DescribeUsersOutput, error) {
// 				panic("mock out the DescribeUsers method")
// 			},
// 			DescribeUsersPagesFunc: func(describeUsersInput *elasticache.DescribeUsersInput, fn func(*elasticache.DescribeUsersOutput, bool) bool) error {
// 				panic("mock out the DescribeUsersPages method")
// 			},
// 			DescribeUsersPagesWithContextFunc: func(contextMoqParam context.Context, describeUsersInput *elasticache.DescribeUsersInput, fn func(*elasticache.DescribeUsersOutput, bool) bool, options ...request.Option) error {
// 				panic("mock out the DescribeUsersPagesWithContext method")
// 			},
// 			DescribeUsersRequestFunc: func(describeUsersInput *elasticache.DescribeUsersInput) (*request.Request, *elasticache.DescribeUsersOutput) {
// 				panic("mock out the DescribeUsersRequest method")
// 			},
// 			DescribeUsersWithContextFunc: func(contextMoqParam context.Context, describeUsersInput *elasticache.DescribeUsersInput, options ...request.Option) (*elasticache.DescribeUsersOutput, error) {
// 				panic("mock out the DescribeUsersWithContext method")
// 			},
// 			DisassociateGlobalReplicationGroupFunc: func(disassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
// 				panic("mock out the DisassociateGlobalReplicationGroup method")
// 			},
// 			DisassociateGlobalReplicationGroupRequestFunc: func(disassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput) (*request.Request, *elasticache.DisassociateGlobalReplicationGroupOutput) {
// 				panic("mock out the DisassociateGlobalReplicationGroupRequest method")
// 			},
// 			DisassociateGlobalReplicationGroupWithContextFunc: func(contextMoqParam context.Context, disassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput, options ...request.Option) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
// 				panic("mock out the DisassociateGlobalReplicationGroupWithContext method")
// 			},
// 			FailoverGlobalReplicationGroupFunc: func(failoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
// 				panic("mock out the FailoverGlobalReplicationGroup method")
// 			},
// 			FailoverGlobalReplicationGroupRequestFunc: func(failoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput) (*request.Request, *elasticache.FailoverGlobalReplicationGroupOutput) {
// 				panic("mock out the FailoverGlobalReplicationGroupRequest method")
// 			},
// 			FailoverGlobalReplicationGroupWithContextFunc: func(contextMoqParam context.Context, failoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput, options ...request.Option) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
// 				panic("mock out the FailoverGlobalReplicationGroupWithContext method")
// 			},
// 			IncreaseNodeGroupsInGlobalReplicationGroupFunc: func(increaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
// 				panic("mock out the IncreaseNodeGroupsInGlobalReplicationGroup method")
// 			},
// 			IncreaseNodeGroupsInGlobalReplicationGroupRequestFunc: func(increaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput) {
// 				panic("mock out the IncreaseNodeGroupsInGlobalReplicationGroupRequest method")
// 			},
// 			IncreaseNodeGroupsInGlobalReplicationGroupWithContextFunc: func(contextMoqParam context.Context, increaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput, options ...request.Option) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
// 				panic("mock out the IncreaseNodeGroupsInGlobalReplicationGroupWithContext method")
// 			},
// 			IncreaseReplicaCountFunc: func(increaseReplicaCountInput *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error) {
// 				panic("mock out the IncreaseReplicaCount method")
// 			},
// 			IncreaseReplicaCountRequestFunc: func(increaseReplicaCountInput *elasticache.IncreaseReplicaCountInput) (*request.Request, *elasticache.IncreaseReplicaCountOutput) {
// 				panic("mock out the IncreaseReplicaCountRequest method")
// 			},
// 			IncreaseReplicaCountWithContextFunc: func(contextMoqParam context.Context, increaseReplicaCountInput *elasticache.IncreaseReplicaCountInput, options ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error) {
// 				panic("mock out the IncreaseReplicaCountWithContext method")
// 			},
// 			ListAllowedNodeTypeModificationsFunc: func(listAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
// 				panic("mock out the ListAllowedNodeTypeModifications method")
// 			},
// 			ListAllowedNodeTypeModificationsRequestFunc: func(listAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput) {
// 				panic("mock out the ListAllowedNodeTypeModificationsRequest method")
// 			},
// 			ListAllowedNodeTypeModificationsWithContextFunc: func(contextMoqParam context.Context, listAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput, options ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
// 				panic("mock out the ListAllowedNodeTypeModificationsWithContext method")
// 			},
// 			ListTagsForResourceFunc: func(listTagsForResourceInput *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error) {
// 				panic("mock out the ListTagsForResource method")
// 			},
// 			ListTagsForResourceRequestFunc: func(listTagsForResourceInput *elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage) {
// 				panic("mock out the ListTagsForResourceRequest method")
// 			},
// 			ListTagsForResourceWithContextFunc: func(contextMoqParam context.Context, listTagsForResourceInput *elasticache.ListTagsForResourceInput, options ...request.Option) (*elasticache.TagListMessage, error) {
// 				panic("mock out the ListTagsForResourceWithContext method")
// 			},
// 			ModifyCacheClusterFunc: func(modifyCacheClusterInput *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error) {
// 				panic("mock out the ModifyCacheCluster method")
// 			},
// 			ModifyCacheClusterRequestFunc: func(modifyCacheClusterInput *elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput) {
// 				panic("mock out the ModifyCacheClusterRequest method")
// 			},
// 			ModifyCacheClusterWithContextFunc: func(contextMoqParam context.Context, modifyCacheClusterInput *elasticache.ModifyCacheClusterInput, options ...request.Option) (*elasticache.ModifyCacheClusterOutput, error) {
// 				panic("mock out the ModifyCacheClusterWithContext method")
// 			},
// 			ModifyCacheParameterGroupFunc: func(modifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
// 				panic("mock out the ModifyCacheParameterGroup method")
// 			},
// 			ModifyCacheParameterGroupRequestFunc: func(modifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
// 				panic("mock out the ModifyCacheParameterGroupRequest method")
// 			},
// 			ModifyCacheParameterGroupWithContextFunc: func(contextMoqParam context.Context, modifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput, options ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
// 				panic("mock out the ModifyCacheParameterGroupWithContext method")
// 			},
// 			ModifyCacheSubnetGroupFunc: func(modifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
// 				panic("mock out the ModifyCacheSubnetGroup method")
// 			},
// 			ModifyCacheSubnetGroupRequestFunc: func(modifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput) {
// 				panic("mock out the ModifyCacheSubnetGroupRequest method")
// 			},
// 			ModifyCacheSubnetGroupWithContextFunc: func(contextMoqParam context.Context, modifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput, options ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
// 				panic("mock out the ModifyCacheSubnetGroupWithContext method")
// 			},
// 			ModifyGlobalReplicationGroupFunc: func(modifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
// 				panic("mock out the ModifyGlobalReplicationGroup method")
// 			},
// 			ModifyGlobalReplicationGroupRequestFunc: func(modifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput) (*request.Request, *elasticache.ModifyGlobalReplicationGroupOutput) {
// 				panic("mock out the ModifyGlobalReplicationGroupRequest method")
// 			},
// 			ModifyGlobalReplicationGroupWithContextFunc: func(contextMoqParam context.Context, modifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput, options ...request.Option) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
// 				panic("mock out the ModifyGlobalReplicationGroupWithContext method")
// 			},
// 			ModifyReplicationGroupFunc: func(modifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error) {
// 				panic("mock out the ModifyReplicationGroup method")
// 			},
// 			ModifyReplicationGroupRequestFunc: func(modifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput) {
// 				panic("mock out the ModifyReplicationGroupRequest method")
// 			},
// 			ModifyReplicationGroupShardConfigurationFunc: func(modifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
// 				panic("mock out the ModifyReplicationGroupShardConfiguration method")
// 			},
// 			ModifyReplicationGroupShardConfigurationRequestFunc: func(modifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
// 				panic("mock out the ModifyReplicationGroupShardConfigurationRequest method")
// 			},
// 			ModifyReplicationGroupShardConfigurationWithContextFunc: func(contextMoqParam context.Context, modifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput, options ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
// 				panic("mock out the ModifyReplicationGroupShardConfigurationWithContext method")
// 			},
// 			ModifyReplicationGroupWithContextFunc: func(contextMoqParam context.Context, modifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput, options ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error) {
// 				panic("mock out the ModifyReplicationGroupWithContext method")
// 			},
// 			ModifyUserFunc: func(modifyUserInput *elasticache.ModifyUserInput) (*elasticache.ModifyUserOutput, error) {
// 				panic("mock out the ModifyUser method")
// 			},
// 			ModifyUserGroupFunc: func(modifyUserGroupInput *elasticache.ModifyUserGroupInput) (*elasticache.ModifyUserGroupOutput, error) {
// 				panic("mock out the ModifyUserGroup method")
// 			},
// 			ModifyUserGroupRequestFunc: func(modifyUserGroupInput *elasticache.ModifyUserGroupInput) (*request.Request, *elasticache.ModifyUserGroupOutput) {
// 				panic("mock out the ModifyUserGroupRequest method")
// 			},
// 			ModifyUserGroupWithContextFunc: func(contextMoqParam context.Context, modifyUserGroupInput *elasticache.ModifyUserGroupInput, options ...request.Option) (*elasticache.ModifyUserGroupOutput, error) {
// 				panic("mock out the ModifyUserGroupWithContext method")
// 			},
// 			ModifyUserRequestFunc: func(modifyUserInput *elasticache.ModifyUserInput) (*request.Request, *elasticache.ModifyUserOutput) {
// 				panic("mock out the ModifyUserRequest method")
// 			},
// 			ModifyUserWithContextFunc: func(contextMoqParam context.Context, modifyUserInput *elasticache.ModifyUserInput, options ...request.Option) (*elasticache.ModifyUserOutput, error) {
// 				panic("mock out the ModifyUserWithContext method")
// 			},
// 			PurchaseReservedCacheNodesOfferingFunc: func(purchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
// 				panic("mock out the PurchaseReservedCacheNodesOffering method")
// 			},
// 			PurchaseReservedCacheNodesOfferingRequestFunc: func(purchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
// 				panic("mock out the PurchaseReservedCacheNodesOfferingRequest method")
// 			},
// 			PurchaseReservedCacheNodesOfferingWithContextFunc: func(contextMoqParam context.Context, purchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput, options ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
// 				panic("mock out the PurchaseReservedCacheNodesOfferingWithContext method")
// 			},
// 			RebalanceSlotsInGlobalReplicationGroupFunc: func(rebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
// 				panic("mock out the RebalanceSlotsInGlobalReplicationGroup method")
// 			},
// 			RebalanceSlotsInGlobalReplicationGroupRequestFunc: func(rebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*request.Request, *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput) {
// 				panic("mock out the RebalanceSlotsInGlobalReplicationGroupRequest method")
// 			},
// 			RebalanceSlotsInGlobalReplicationGroupWithContextFunc: func(contextMoqParam context.Context, rebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput, options ...request.Option) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
// 				panic("mock out the RebalanceSlotsInGlobalReplicationGroupWithContext method")
// 			},
// 			RebootCacheClusterFunc: func(rebootCacheClusterInput *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error) {
// 				panic("mock out the RebootCacheCluster method")
// 			},
// 			RebootCacheClusterRequestFunc: func(rebootCacheClusterInput *elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput) {
// 				panic("mock out the RebootCacheClusterRequest method")
// 			},
// 			RebootCacheClusterWithContextFunc: func(contextMoqParam context.Context, rebootCacheClusterInput *elasticache.RebootCacheClusterInput, options ...request.Option) (*elasticache.RebootCacheClusterOutput, error) {
// 				panic("mock out the RebootCacheClusterWithContext method")
// 			},
// 			RemoveTagsFromResourceFunc: func(removeTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error) {
// 				panic("mock out the RemoveTagsFromResource method")
// 			},
// 			RemoveTagsFromResourceRequestFunc: func(removeTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage) {
// 				panic("mock out the RemoveTagsFromResourceRequest method")
// 			},
// 			RemoveTagsFromResourceWithContextFunc: func(contextMoqParam context.Context, removeTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput, options ...request.Option) (*elasticache.TagListMessage, error) {
// 				panic("mock out the RemoveTagsFromResourceWithContext method")
// 			},
// 			ResetCacheParameterGroupFunc: func(resetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
// 				panic("mock out the ResetCacheParameterGroup method")
// 			},
// 			ResetCacheParameterGroupRequestFunc: func(resetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
// 				panic("mock out the ResetCacheParameterGroupRequest method")
// 			},
// 			ResetCacheParameterGroupWithContextFunc: func(contextMoqParam context.Context, resetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput, options ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
// 				panic("mock out the ResetCacheParameterGroupWithContext method")
// 			},
// 			RevokeCacheSecurityGroupIngressFunc: func(revokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
// 				panic("mock out the RevokeCacheSecurityGroupIngress method")
// 			},
// 			RevokeCacheSecurityGroupIngressRequestFunc: func(revokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput) {
// 				panic("mock out the RevokeCacheSecurityGroupIngressRequest method")
// 			},
// 			RevokeCacheSecurityGroupIngressWithContextFunc: func(contextMoqParam context.Context, revokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput, options ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
// 				panic("mock out the RevokeCacheSecurityGroupIngressWithContext method")
// 			},
// 			StartMigrationFunc: func(startMigrationInput *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error) {
// 				panic("mock out the StartMigration method")
// 			},
// 			StartMigrationRequestFunc: func(startMigrationInput *elasticache.StartMigrationInput) (*request.Request, *elasticache.StartMigrationOutput) {
// 				panic("mock out the StartMigrationRequest method")
// 			},
// 			StartMigrationWithContextFunc: func(contextMoqParam context.Context, startMigrationInput *elasticache.StartMigrationInput, options ...request.Option) (*elasticache.StartMigrationOutput, error) {
// 				panic("mock out the StartMigrationWithContext method")
// 			},
// 			TestFailoverFunc: func(testFailoverInput *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error) {
// 				panic("mock out the TestFailover method")
// 			},
// 			TestFailoverRequestFunc: func(testFailoverInput *elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput) {
// 				panic("mock out the TestFailoverRequest method")
// 			},
// 			TestFailoverWithContextFunc: func(contextMoqParam context.Context, testFailoverInput *elasticache.TestFailoverInput, options ...request.Option) (*elasticache.TestFailoverOutput, error) {
// 				panic("mock out the TestFailoverWithContext method")
// 			},
// 			WaitUntilCacheClusterAvailableFunc: func(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) error {
// 				panic("mock out the WaitUntilCacheClusterAvailable method")
// 			},
// 			WaitUntilCacheClusterAvailableWithContextFunc: func(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilCacheClusterAvailableWithContext method")
// 			},
// 			WaitUntilCacheClusterDeletedFunc: func(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) error {
// 				panic("mock out the WaitUntilCacheClusterDeleted method")
// 			},
// 			WaitUntilCacheClusterDeletedWithContextFunc: func(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilCacheClusterDeletedWithContext method")
// 			},
// 			WaitUntilReplicationGroupAvailableFunc: func(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) error {
// 				panic("mock out the WaitUntilReplicationGroupAvailable method")
// 			},
// 			WaitUntilReplicationGroupAvailableWithContextFunc: func(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilReplicationGroupAvailableWithContext method")
// 			},
// 			WaitUntilReplicationGroupDeletedFunc: func(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) error {
// 				panic("mock out the WaitUntilReplicationGroupDeleted method")
// 			},
// 			WaitUntilReplicationGroupDeletedWithContextFunc: func(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, waiterOptions ...request.WaiterOption) error {
// 				panic("mock out the WaitUntilReplicationGroupDeletedWithContext method")
// 			},
// 		}
//
// 		// use mockedelasticacheClient in code that requires elasticacheClient
// 		// and then make assertions.
//
// 	}
type elasticacheClientMock struct {
	// AddTagsToResourceFunc mocks the AddTagsToResource method.
	AddTagsToResourceFunc func(addTagsToResourceInput *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error)

	// AddTagsToResourceRequestFunc mocks the AddTagsToResourceRequest method.
	AddTagsToResourceRequestFunc func(addTagsToResourceInput *elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage)

	// AddTagsToResourceWithContextFunc mocks the AddTagsToResourceWithContext method.
	AddTagsToResourceWithContextFunc func(contextMoqParam context.Context, addTagsToResourceInput *elasticache.AddTagsToResourceInput, options ...request.Option) (*elasticache.TagListMessage, error)

	// AuthorizeCacheSecurityGroupIngressFunc mocks the AuthorizeCacheSecurityGroupIngress method.
	AuthorizeCacheSecurityGroupIngressFunc func(authorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)

	// AuthorizeCacheSecurityGroupIngressRequestFunc mocks the AuthorizeCacheSecurityGroupIngressRequest method.
	AuthorizeCacheSecurityGroupIngressRequestFunc func(authorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput)

	// AuthorizeCacheSecurityGroupIngressWithContextFunc mocks the AuthorizeCacheSecurityGroupIngressWithContext method.
	AuthorizeCacheSecurityGroupIngressWithContextFunc func(contextMoqParam context.Context, authorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput, options ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)

	// BatchApplyUpdateActionFunc mocks the BatchApplyUpdateAction method.
	BatchApplyUpdateActionFunc func(batchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error)

	// BatchApplyUpdateActionRequestFunc mocks the BatchApplyUpdateActionRequest method.
	BatchApplyUpdateActionRequestFunc func(batchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput) (*request.Request, *elasticache.BatchApplyUpdateActionOutput)

	// BatchApplyUpdateActionWithContextFunc mocks the BatchApplyUpdateActionWithContext method.
	BatchApplyUpdateActionWithContextFunc func(contextMoqParam context.Context, batchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput, options ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error)

	// BatchStopUpdateActionFunc mocks the BatchStopUpdateAction method.
	BatchStopUpdateActionFunc func(batchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error)

	// BatchStopUpdateActionRequestFunc mocks the BatchStopUpdateActionRequest method.
	BatchStopUpdateActionRequestFunc func(batchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput) (*request.Request, *elasticache.BatchStopUpdateActionOutput)

	// BatchStopUpdateActionWithContextFunc mocks the BatchStopUpdateActionWithContext method.
	BatchStopUpdateActionWithContextFunc func(contextMoqParam context.Context, batchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput, options ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error)

	// CompleteMigrationFunc mocks the CompleteMigration method.
	CompleteMigrationFunc func(completeMigrationInput *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error)

	// CompleteMigrationRequestFunc mocks the CompleteMigrationRequest method.
	CompleteMigrationRequestFunc func(completeMigrationInput *elasticache.CompleteMigrationInput) (*request.Request, *elasticache.CompleteMigrationOutput)

	// CompleteMigrationWithContextFunc mocks the CompleteMigrationWithContext method.
	CompleteMigrationWithContextFunc func(contextMoqParam context.Context, completeMigrationInput *elasticache.CompleteMigrationInput, options ...request.Option) (*elasticache.CompleteMigrationOutput, error)

	// CopySnapshotFunc mocks the CopySnapshot method.
	CopySnapshotFunc func(copySnapshotInput *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error)

	// CopySnapshotRequestFunc mocks the CopySnapshotRequest method.
	CopySnapshotRequestFunc func(copySnapshotInput *elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput)

	// CopySnapshotWithContextFunc mocks the CopySnapshotWithContext method.
	CopySnapshotWithContextFunc func(contextMoqParam context.Context, copySnapshotInput *elasticache.CopySnapshotInput, options ...request.Option) (*elasticache.CopySnapshotOutput, error)

	// CreateCacheClusterFunc mocks the CreateCacheCluster method.
	CreateCacheClusterFunc func(createCacheClusterInput *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error)

	// CreateCacheClusterRequestFunc mocks the CreateCacheClusterRequest method.
	CreateCacheClusterRequestFunc func(createCacheClusterInput *elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput)

	// CreateCacheClusterWithContextFunc mocks the CreateCacheClusterWithContext method.
	CreateCacheClusterWithContextFunc func(contextMoqParam context.Context, createCacheClusterInput *elasticache.CreateCacheClusterInput, options ...request.Option) (*elasticache.CreateCacheClusterOutput, error)

	// CreateCacheParameterGroupFunc mocks the CreateCacheParameterGroup method.
	CreateCacheParameterGroupFunc func(createCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error)

	// CreateCacheParameterGroupRequestFunc mocks the CreateCacheParameterGroupRequest method.
	CreateCacheParameterGroupRequestFunc func(createCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput)

	// CreateCacheParameterGroupWithContextFunc mocks the CreateCacheParameterGroupWithContext method.
	CreateCacheParameterGroupWithContextFunc func(contextMoqParam context.Context, createCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput, options ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error)

	// CreateCacheSecurityGroupFunc mocks the CreateCacheSecurityGroup method.
	CreateCacheSecurityGroupFunc func(createCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error)

	// CreateCacheSecurityGroupRequestFunc mocks the CreateCacheSecurityGroupRequest method.
	CreateCacheSecurityGroupRequestFunc func(createCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput)

	// CreateCacheSecurityGroupWithContextFunc mocks the CreateCacheSecurityGroupWithContext method.
	CreateCacheSecurityGroupWithContextFunc func(contextMoqParam context.Context, createCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput, options ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error)

	// CreateCacheSubnetGroupFunc mocks the CreateCacheSubnetGroup method.
	CreateCacheSubnetGroupFunc func(createCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error)

	// CreateCacheSubnetGroupRequestFunc mocks the CreateCacheSubnetGroupRequest method.
	CreateCacheSubnetGroupRequestFunc func(createCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput)

	// CreateCacheSubnetGroupWithContextFunc mocks the CreateCacheSubnetGroupWithContext method.
	CreateCacheSubnetGroupWithContextFunc func(contextMoqParam context.Context, createCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput, options ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error)

	// CreateGlobalReplicationGroupFunc mocks the CreateGlobalReplicationGroup method.
	CreateGlobalReplicationGroupFunc func(createGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error)

	// CreateGlobalReplicationGroupRequestFunc mocks the CreateGlobalReplicationGroupRequest method.
	CreateGlobalReplicationGroupRequestFunc func(createGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput) (*request.Request, *elasticache.CreateGlobalReplicationGroupOutput)

	// CreateGlobalReplicationGroupWithContextFunc mocks the CreateGlobalReplicationGroupWithContext method.
	CreateGlobalReplicationGroupWithContextFunc func(contextMoqParam context.Context, createGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput, options ...request.Option) (*elasticache.CreateGlobalReplicationGroupOutput, error)

	// CreateReplicationGroupFunc mocks the CreateReplicationGroup method.
	CreateReplicationGroupFunc func(createReplicationGroupInput *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error)

	// CreateReplicationGroupRequestFunc mocks the CreateReplicationGroupRequest method.
	CreateReplicationGroupRequestFunc func(createReplicationGroupInput *elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput)

	// CreateReplicationGroupWithContextFunc mocks the CreateReplicationGroupWithContext method.
	CreateReplicationGroupWithContextFunc func(contextMoqParam context.Context, createReplicationGroupInput *elasticache.CreateReplicationGroupInput, options ...request.Option) (*elasticache.CreateReplicationGroupOutput, error)

	// CreateSnapshotFunc mocks the CreateSnapshot method.
	CreateSnapshotFunc func(createSnapshotInput *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error)

	// CreateSnapshotRequestFunc mocks the CreateSnapshotRequest method.
	CreateSnapshotRequestFunc func(createSnapshotInput *elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput)

	// CreateSnapshotWithContextFunc mocks the CreateSnapshotWithContext method.
	CreateSnapshotWithContextFunc func(contextMoqParam context.Context, createSnapshotInput *elasticache.CreateSnapshotInput, options ...request.Option) (*elasticache.CreateSnapshotOutput, error)

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(createUserInput *elasticache.CreateUserInput) (*elasticache.CreateUserOutput, error)

	// CreateUserGroupFunc mocks the CreateUserGroup method.
	CreateUserGroupFunc func(createUserGroupInput *elasticache.CreateUserGroupInput) (*elasticache.CreateUserGroupOutput, error)

	// CreateUserGroupRequestFunc mocks the CreateUserGroupRequest method.
	CreateUserGroupRequestFunc func(createUserGroupInput *elasticache.CreateUserGroupInput) (*request.Request, *elasticache.CreateUserGroupOutput)

	// CreateUserGroupWithContextFunc mocks the CreateUserGroupWithContext method.
	CreateUserGroupWithContextFunc func(contextMoqParam context.Context, createUserGroupInput *elasticache.CreateUserGroupInput, options ...request.Option) (*elasticache.CreateUserGroupOutput, error)

	// CreateUserRequestFunc mocks the CreateUserRequest method.
	CreateUserRequestFunc func(createUserInput *elasticache.CreateUserInput) (*request.Request, *elasticache.CreateUserOutput)

	// CreateUserWithContextFunc mocks the CreateUserWithContext method.
	CreateUserWithContextFunc func(contextMoqParam context.Context, createUserInput *elasticache.CreateUserInput, options ...request.Option) (*elasticache.CreateUserOutput, error)

	// DecreaseNodeGroupsInGlobalReplicationGroupFunc mocks the DecreaseNodeGroupsInGlobalReplicationGroup method.
	DecreaseNodeGroupsInGlobalReplicationGroupFunc func(decreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error)

	// DecreaseNodeGroupsInGlobalReplicationGroupRequestFunc mocks the DecreaseNodeGroupsInGlobalReplicationGroupRequest method.
	DecreaseNodeGroupsInGlobalReplicationGroupRequestFunc func(decreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput)

	// DecreaseNodeGroupsInGlobalReplicationGroupWithContextFunc mocks the DecreaseNodeGroupsInGlobalReplicationGroupWithContext method.
	DecreaseNodeGroupsInGlobalReplicationGroupWithContextFunc func(contextMoqParam context.Context, decreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput, options ...request.Option) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error)

	// DecreaseReplicaCountFunc mocks the DecreaseReplicaCount method.
	DecreaseReplicaCountFunc func(decreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error)

	// DecreaseReplicaCountRequestFunc mocks the DecreaseReplicaCountRequest method.
	DecreaseReplicaCountRequestFunc func(decreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput) (*request.Request, *elasticache.DecreaseReplicaCountOutput)

	// DecreaseReplicaCountWithContextFunc mocks the DecreaseReplicaCountWithContext method.
	DecreaseReplicaCountWithContextFunc func(contextMoqParam context.Context, decreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput, options ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error)

	// DeleteCacheClusterFunc mocks the DeleteCacheCluster method.
	DeleteCacheClusterFunc func(deleteCacheClusterInput *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error)

	// DeleteCacheClusterRequestFunc mocks the DeleteCacheClusterRequest method.
	DeleteCacheClusterRequestFunc func(deleteCacheClusterInput *elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput)

	// DeleteCacheClusterWithContextFunc mocks the DeleteCacheClusterWithContext method.
	DeleteCacheClusterWithContextFunc func(contextMoqParam context.Context, deleteCacheClusterInput *elasticache.DeleteCacheClusterInput, options ...request.Option) (*elasticache.DeleteCacheClusterOutput, error)

	// DeleteCacheParameterGroupFunc mocks the DeleteCacheParameterGroup method.
	DeleteCacheParameterGroupFunc func(deleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error)

	// DeleteCacheParameterGroupRequestFunc mocks the DeleteCacheParameterGroupRequest method.
	DeleteCacheParameterGroupRequestFunc func(deleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput)

	// DeleteCacheParameterGroupWithContextFunc mocks the DeleteCacheParameterGroupWithContext method.
	DeleteCacheParameterGroupWithContextFunc func(contextMoqParam context.Context, deleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput, options ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error)

	// DeleteCacheSecurityGroupFunc mocks the DeleteCacheSecurityGroup method.
	DeleteCacheSecurityGroupFunc func(deleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error)

	// DeleteCacheSecurityGroupRequestFunc mocks the DeleteCacheSecurityGroupRequest method.
	DeleteCacheSecurityGroupRequestFunc func(deleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput)

	// DeleteCacheSecurityGroupWithContextFunc mocks the DeleteCacheSecurityGroupWithContext method.
	DeleteCacheSecurityGroupWithContextFunc func(contextMoqParam context.Context, deleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput, options ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error)

	// DeleteCacheSubnetGroupFunc mocks the DeleteCacheSubnetGroup method.
	DeleteCacheSubnetGroupFunc func(deleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error)

	// DeleteCacheSubnetGroupRequestFunc mocks the DeleteCacheSubnetGroupRequest method.
	DeleteCacheSubnetGroupRequestFunc func(deleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput)

	// DeleteCacheSubnetGroupWithContextFunc mocks the DeleteCacheSubnetGroupWithContext method.
	DeleteCacheSubnetGroupWithContextFunc func(contextMoqParam context.Context, deleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput, options ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error)

	// DeleteGlobalReplicationGroupFunc mocks the DeleteGlobalReplicationGroup method.
	DeleteGlobalReplicationGroupFunc func(deleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error)

	// DeleteGlobalReplicationGroupRequestFunc mocks the DeleteGlobalReplicationGroupRequest method.
	DeleteGlobalReplicationGroupRequestFunc func(deleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput) (*request.Request, *elasticache.DeleteGlobalReplicationGroupOutput)

	// DeleteGlobalReplicationGroupWithContextFunc mocks the DeleteGlobalReplicationGroupWithContext method.
	DeleteGlobalReplicationGroupWithContextFunc func(contextMoqParam context.Context, deleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput, options ...request.Option) (*elasticache.DeleteGlobalReplicationGroupOutput, error)

	// DeleteReplicationGroupFunc mocks the DeleteReplicationGroup method.
	DeleteReplicationGroupFunc func(deleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error)

	// DeleteReplicationGroupRequestFunc mocks the DeleteReplicationGroupRequest method.
	DeleteReplicationGroupRequestFunc func(deleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput)

	// DeleteReplicationGroupWithContextFunc mocks the DeleteReplicationGroupWithContext method.
	DeleteReplicationGroupWithContextFunc func(contextMoqParam context.Context, deleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput, options ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error)

	// DeleteSnapshotFunc mocks the DeleteSnapshot method.
	DeleteSnapshotFunc func(deleteSnapshotInput *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error)

	// DeleteSnapshotRequestFunc mocks the DeleteSnapshotRequest method.
	DeleteSnapshotRequestFunc func(deleteSnapshotInput *elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput)

	// DeleteSnapshotWithContextFunc mocks the DeleteSnapshotWithContext method.
	DeleteSnapshotWithContextFunc func(contextMoqParam context.Context, deleteSnapshotInput *elasticache.DeleteSnapshotInput, options ...request.Option) (*elasticache.DeleteSnapshotOutput, error)

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(deleteUserInput *elasticache.DeleteUserInput) (*elasticache.DeleteUserOutput, error)

	// DeleteUserGroupFunc mocks the DeleteUserGroup method.
	DeleteUserGroupFunc func(deleteUserGroupInput *elasticache.DeleteUserGroupInput) (*elasticache.DeleteUserGroupOutput, error)

	// DeleteUserGroupRequestFunc mocks the DeleteUserGroupRequest method.
	DeleteUserGroupRequestFunc func(deleteUserGroupInput *elasticache.DeleteUserGroupInput) (*request.Request, *elasticache.DeleteUserGroupOutput)

	// DeleteUserGroupWithContextFunc mocks the DeleteUserGroupWithContext method.
	DeleteUserGroupWithContextFunc func(contextMoqParam context.Context, deleteUserGroupInput *elasticache.DeleteUserGroupInput, options ...request.Option) (*elasticache.DeleteUserGroupOutput, error)

	// DeleteUserRequestFunc mocks the DeleteUserRequest method.
	DeleteUserRequestFunc func(deleteUserInput *elasticache.DeleteUserInput) (*request.Request, *elasticache.DeleteUserOutput)

	// DeleteUserWithContextFunc mocks the DeleteUserWithContext method.
	DeleteUserWithContextFunc func(contextMoqParam context.Context, deleteUserInput *elasticache.DeleteUserInput, options ...request.Option) (*elasticache.DeleteUserOutput, error)

	// DescribeCacheClustersFunc mocks the DescribeCacheClusters method.
	DescribeCacheClustersFunc func(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error)

	// DescribeCacheClustersPagesFunc mocks the DescribeCacheClustersPages method.
	DescribeCacheClustersPagesFunc func(describeCacheClustersInput *elasticache.DescribeCacheClustersInput, fn func(*elasticache.DescribeCacheClustersOutput, bool) bool) error

	// DescribeCacheClustersPagesWithContextFunc mocks the DescribeCacheClustersPagesWithContext method.
	DescribeCacheClustersPagesWithContextFunc func(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, fn func(*elasticache.DescribeCacheClustersOutput, bool) bool, options ...request.Option) error

	// DescribeCacheClustersRequestFunc mocks the DescribeCacheClustersRequest method.
	DescribeCacheClustersRequestFunc func(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput)

	// DescribeCacheClustersWithContextFunc mocks the DescribeCacheClustersWithContext method.
	DescribeCacheClustersWithContextFunc func(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, options ...request.Option) (*elasticache.DescribeCacheClustersOutput, error)

	// DescribeCacheEngineVersionsFunc mocks the DescribeCacheEngineVersions method.
	DescribeCacheEngineVersionsFunc func(describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error)

	// DescribeCacheEngineVersionsPagesFunc mocks the DescribeCacheEngineVersionsPages method.
	DescribeCacheEngineVersionsPagesFunc func(describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput, fn func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error

	// DescribeCacheEngineVersionsPagesWithContextFunc mocks the DescribeCacheEngineVersionsPagesWithContext method.
	DescribeCacheEngineVersionsPagesWithContextFunc func(contextMoqParam context.Context, describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput, fn func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, options ...request.Option) error

	// DescribeCacheEngineVersionsRequestFunc mocks the DescribeCacheEngineVersionsRequest method.
	DescribeCacheEngineVersionsRequestFunc func(describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput)

	// DescribeCacheEngineVersionsWithContextFunc mocks the DescribeCacheEngineVersionsWithContext method.
	DescribeCacheEngineVersionsWithContextFunc func(contextMoqParam context.Context, describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput, options ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error)

	// DescribeCacheParameterGroupsFunc mocks the DescribeCacheParameterGroups method.
	DescribeCacheParameterGroupsFunc func(describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error)

	// DescribeCacheParameterGroupsPagesFunc mocks the DescribeCacheParameterGroupsPages method.
	DescribeCacheParameterGroupsPagesFunc func(describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput, fn func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error

	// DescribeCacheParameterGroupsPagesWithContextFunc mocks the DescribeCacheParameterGroupsPagesWithContext method.
	DescribeCacheParameterGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput, fn func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeCacheParameterGroupsRequestFunc mocks the DescribeCacheParameterGroupsRequest method.
	DescribeCacheParameterGroupsRequestFunc func(describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput)

	// DescribeCacheParameterGroupsWithContextFunc mocks the DescribeCacheParameterGroupsWithContext method.
	DescribeCacheParameterGroupsWithContextFunc func(contextMoqParam context.Context, describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput, options ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error)

	// DescribeCacheParametersFunc mocks the DescribeCacheParameters method.
	DescribeCacheParametersFunc func(describeCacheParametersInput *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error)

	// DescribeCacheParametersPagesFunc mocks the DescribeCacheParametersPages method.
	DescribeCacheParametersPagesFunc func(describeCacheParametersInput *elasticache.DescribeCacheParametersInput, fn func(*elasticache.DescribeCacheParametersOutput, bool) bool) error

	// DescribeCacheParametersPagesWithContextFunc mocks the DescribeCacheParametersPagesWithContext method.
	DescribeCacheParametersPagesWithContextFunc func(contextMoqParam context.Context, describeCacheParametersInput *elasticache.DescribeCacheParametersInput, fn func(*elasticache.DescribeCacheParametersOutput, bool) bool, options ...request.Option) error

	// DescribeCacheParametersRequestFunc mocks the DescribeCacheParametersRequest method.
	DescribeCacheParametersRequestFunc func(describeCacheParametersInput *elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput)

	// DescribeCacheParametersWithContextFunc mocks the DescribeCacheParametersWithContext method.
	DescribeCacheParametersWithContextFunc func(contextMoqParam context.Context, describeCacheParametersInput *elasticache.DescribeCacheParametersInput, options ...request.Option) (*elasticache.DescribeCacheParametersOutput, error)

	// DescribeCacheSecurityGroupsFunc mocks the DescribeCacheSecurityGroups method.
	DescribeCacheSecurityGroupsFunc func(describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error)

	// DescribeCacheSecurityGroupsPagesFunc mocks the DescribeCacheSecurityGroupsPages method.
	DescribeCacheSecurityGroupsPagesFunc func(describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput, fn func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error

	// DescribeCacheSecurityGroupsPagesWithContextFunc mocks the DescribeCacheSecurityGroupsPagesWithContext method.
	DescribeCacheSecurityGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput, fn func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeCacheSecurityGroupsRequestFunc mocks the DescribeCacheSecurityGroupsRequest method.
	DescribeCacheSecurityGroupsRequestFunc func(describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput)

	// DescribeCacheSecurityGroupsWithContextFunc mocks the DescribeCacheSecurityGroupsWithContext method.
	DescribeCacheSecurityGroupsWithContextFunc func(contextMoqParam context.Context, describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput, options ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error)

	// DescribeCacheSubnetGroupsFunc mocks the DescribeCacheSubnetGroups method.
	DescribeCacheSubnetGroupsFunc func(describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error)

	// DescribeCacheSubnetGroupsPagesFunc mocks the DescribeCacheSubnetGroupsPages method.
	DescribeCacheSubnetGroupsPagesFunc func(describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput, fn func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error

	// DescribeCacheSubnetGroupsPagesWithContextFunc mocks the DescribeCacheSubnetGroupsPagesWithContext method.
	DescribeCacheSubnetGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput, fn func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeCacheSubnetGroupsRequestFunc mocks the DescribeCacheSubnetGroupsRequest method.
	DescribeCacheSubnetGroupsRequestFunc func(describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput)

	// DescribeCacheSubnetGroupsWithContextFunc mocks the DescribeCacheSubnetGroupsWithContext method.
	DescribeCacheSubnetGroupsWithContextFunc func(contextMoqParam context.Context, describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput, options ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error)

	// DescribeEngineDefaultParametersFunc mocks the DescribeEngineDefaultParameters method.
	DescribeEngineDefaultParametersFunc func(describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error)

	// DescribeEngineDefaultParametersPagesFunc mocks the DescribeEngineDefaultParametersPages method.
	DescribeEngineDefaultParametersPagesFunc func(describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput, fn func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error

	// DescribeEngineDefaultParametersPagesWithContextFunc mocks the DescribeEngineDefaultParametersPagesWithContext method.
	DescribeEngineDefaultParametersPagesWithContextFunc func(contextMoqParam context.Context, describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput, fn func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, options ...request.Option) error

	// DescribeEngineDefaultParametersRequestFunc mocks the DescribeEngineDefaultParametersRequest method.
	DescribeEngineDefaultParametersRequestFunc func(describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput)

	// DescribeEngineDefaultParametersWithContextFunc mocks the DescribeEngineDefaultParametersWithContext method.
	DescribeEngineDefaultParametersWithContextFunc func(contextMoqParam context.Context, describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput, options ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error)

	// DescribeEventsFunc mocks the DescribeEvents method.
	DescribeEventsFunc func(describeEventsInput *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error)

	// DescribeEventsPagesFunc mocks the DescribeEventsPages method.
	DescribeEventsPagesFunc func(describeEventsInput *elasticache.DescribeEventsInput, fn func(*elasticache.DescribeEventsOutput, bool) bool) error

	// DescribeEventsPagesWithContextFunc mocks the DescribeEventsPagesWithContext method.
	DescribeEventsPagesWithContextFunc func(contextMoqParam context.Context, describeEventsInput *elasticache.DescribeEventsInput, fn func(*elasticache.DescribeEventsOutput, bool) bool, options ...request.Option) error

	// DescribeEventsRequestFunc mocks the DescribeEventsRequest method.
	DescribeEventsRequestFunc func(describeEventsInput *elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput)

	// DescribeEventsWithContextFunc mocks the DescribeEventsWithContext method.
	DescribeEventsWithContextFunc func(contextMoqParam context.Context, describeEventsInput *elasticache.DescribeEventsInput, options ...request.Option) (*elasticache.DescribeEventsOutput, error)

	// DescribeGlobalReplicationGroupsFunc mocks the DescribeGlobalReplicationGroups method.
	DescribeGlobalReplicationGroupsFunc func(describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error)

	// DescribeGlobalReplicationGroupsPagesFunc mocks the DescribeGlobalReplicationGroupsPages method.
	DescribeGlobalReplicationGroupsPagesFunc func(describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput, fn func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool) error

	// DescribeGlobalReplicationGroupsPagesWithContextFunc mocks the DescribeGlobalReplicationGroupsPagesWithContext method.
	DescribeGlobalReplicationGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput, fn func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeGlobalReplicationGroupsRequestFunc mocks the DescribeGlobalReplicationGroupsRequest method.
	DescribeGlobalReplicationGroupsRequestFunc func(describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput) (*request.Request, *elasticache.DescribeGlobalReplicationGroupsOutput)

	// DescribeGlobalReplicationGroupsWithContextFunc mocks the DescribeGlobalReplicationGroupsWithContext method.
	DescribeGlobalReplicationGroupsWithContextFunc func(contextMoqParam context.Context, describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput, options ...request.Option) (*elasticache.DescribeGlobalReplicationGroupsOutput, error)

	// DescribeReplicationGroupsFunc mocks the DescribeReplicationGroups method.
	DescribeReplicationGroupsFunc func(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error)

	// DescribeReplicationGroupsPagesFunc mocks the DescribeReplicationGroupsPages method.
	DescribeReplicationGroupsPagesFunc func(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, fn func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error

	// DescribeReplicationGroupsPagesWithContextFunc mocks the DescribeReplicationGroupsPagesWithContext method.
	DescribeReplicationGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, fn func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeReplicationGroupsRequestFunc mocks the DescribeReplicationGroupsRequest method.
	DescribeReplicationGroupsRequestFunc func(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput)

	// DescribeReplicationGroupsWithContextFunc mocks the DescribeReplicationGroupsWithContext method.
	DescribeReplicationGroupsWithContextFunc func(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, options ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error)

	// DescribeReservedCacheNodesFunc mocks the DescribeReservedCacheNodes method.
	DescribeReservedCacheNodesFunc func(describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error)

	// DescribeReservedCacheNodesOfferingsFunc mocks the DescribeReservedCacheNodesOfferings method.
	DescribeReservedCacheNodesOfferingsFunc func(describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)

	// DescribeReservedCacheNodesOfferingsPagesFunc mocks the DescribeReservedCacheNodesOfferingsPages method.
	DescribeReservedCacheNodesOfferingsPagesFunc func(describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput, fn func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error

	// DescribeReservedCacheNodesOfferingsPagesWithContextFunc mocks the DescribeReservedCacheNodesOfferingsPagesWithContext method.
	DescribeReservedCacheNodesOfferingsPagesWithContextFunc func(contextMoqParam context.Context, describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput, fn func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, options ...request.Option) error

	// DescribeReservedCacheNodesOfferingsRequestFunc mocks the DescribeReservedCacheNodesOfferingsRequest method.
	DescribeReservedCacheNodesOfferingsRequestFunc func(describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput)

	// DescribeReservedCacheNodesOfferingsWithContextFunc mocks the DescribeReservedCacheNodesOfferingsWithContext method.
	DescribeReservedCacheNodesOfferingsWithContextFunc func(contextMoqParam context.Context, describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput, options ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)

	// DescribeReservedCacheNodesPagesFunc mocks the DescribeReservedCacheNodesPages method.
	DescribeReservedCacheNodesPagesFunc func(describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput, fn func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error

	// DescribeReservedCacheNodesPagesWithContextFunc mocks the DescribeReservedCacheNodesPagesWithContext method.
	DescribeReservedCacheNodesPagesWithContextFunc func(contextMoqParam context.Context, describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput, fn func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, options ...request.Option) error

	// DescribeReservedCacheNodesRequestFunc mocks the DescribeReservedCacheNodesRequest method.
	DescribeReservedCacheNodesRequestFunc func(describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput)

	// DescribeReservedCacheNodesWithContextFunc mocks the DescribeReservedCacheNodesWithContext method.
	DescribeReservedCacheNodesWithContextFunc func(contextMoqParam context.Context, describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput, options ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error)

	// DescribeServiceUpdatesFunc mocks the DescribeServiceUpdates method.
	DescribeServiceUpdatesFunc func(describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error)

	// DescribeServiceUpdatesPagesFunc mocks the DescribeServiceUpdatesPages method.
	DescribeServiceUpdatesPagesFunc func(describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput, fn func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) error

	// DescribeServiceUpdatesPagesWithContextFunc mocks the DescribeServiceUpdatesPagesWithContext method.
	DescribeServiceUpdatesPagesWithContextFunc func(contextMoqParam context.Context, describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput, fn func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, options ...request.Option) error

	// DescribeServiceUpdatesRequestFunc mocks the DescribeServiceUpdatesRequest method.
	DescribeServiceUpdatesRequestFunc func(describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput) (*request.Request, *elasticache.DescribeServiceUpdatesOutput)

	// DescribeServiceUpdatesWithContextFunc mocks the DescribeServiceUpdatesWithContext method.
	DescribeServiceUpdatesWithContextFunc func(contextMoqParam context.Context, describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput, options ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error)

	// DescribeSnapshotsFunc mocks the DescribeSnapshots method.
	DescribeSnapshotsFunc func(describeSnapshotsInput *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error)

	// DescribeSnapshotsPagesFunc mocks the DescribeSnapshotsPages method.
	DescribeSnapshotsPagesFunc func(describeSnapshotsInput *elasticache.DescribeSnapshotsInput, fn func(*elasticache.DescribeSnapshotsOutput, bool) bool) error

	// DescribeSnapshotsPagesWithContextFunc mocks the DescribeSnapshotsPagesWithContext method.
	DescribeSnapshotsPagesWithContextFunc func(contextMoqParam context.Context, describeSnapshotsInput *elasticache.DescribeSnapshotsInput, fn func(*elasticache.DescribeSnapshotsOutput, bool) bool, options ...request.Option) error

	// DescribeSnapshotsRequestFunc mocks the DescribeSnapshotsRequest method.
	DescribeSnapshotsRequestFunc func(describeSnapshotsInput *elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput)

	// DescribeSnapshotsWithContextFunc mocks the DescribeSnapshotsWithContext method.
	DescribeSnapshotsWithContextFunc func(contextMoqParam context.Context, describeSnapshotsInput *elasticache.DescribeSnapshotsInput, options ...request.Option) (*elasticache.DescribeSnapshotsOutput, error)

	// DescribeUpdateActionsFunc mocks the DescribeUpdateActions method.
	DescribeUpdateActionsFunc func(describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error)

	// DescribeUpdateActionsPagesFunc mocks the DescribeUpdateActionsPages method.
	DescribeUpdateActionsPagesFunc func(describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput, fn func(*elasticache.DescribeUpdateActionsOutput, bool) bool) error

	// DescribeUpdateActionsPagesWithContextFunc mocks the DescribeUpdateActionsPagesWithContext method.
	DescribeUpdateActionsPagesWithContextFunc func(contextMoqParam context.Context, describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput, fn func(*elasticache.DescribeUpdateActionsOutput, bool) bool, options ...request.Option) error

	// DescribeUpdateActionsRequestFunc mocks the DescribeUpdateActionsRequest method.
	DescribeUpdateActionsRequestFunc func(describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput) (*request.Request, *elasticache.DescribeUpdateActionsOutput)

	// DescribeUpdateActionsWithContextFunc mocks the DescribeUpdateActionsWithContext method.
	DescribeUpdateActionsWithContextFunc func(contextMoqParam context.Context, describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput, options ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error)

	// DescribeUserGroupsFunc mocks the DescribeUserGroups method.
	DescribeUserGroupsFunc func(describeUserGroupsInput *elasticache.DescribeUserGroupsInput) (*elasticache.DescribeUserGroupsOutput, error)

	// DescribeUserGroupsPagesFunc mocks the DescribeUserGroupsPages method.
	DescribeUserGroupsPagesFunc func(describeUserGroupsInput *elasticache.DescribeUserGroupsInput, fn func(*elasticache.DescribeUserGroupsOutput, bool) bool) error

	// DescribeUserGroupsPagesWithContextFunc mocks the DescribeUserGroupsPagesWithContext method.
	DescribeUserGroupsPagesWithContextFunc func(contextMoqParam context.Context, describeUserGroupsInput *elasticache.DescribeUserGroupsInput, fn func(*elasticache.DescribeUserGroupsOutput, bool) bool, options ...request.Option) error

	// DescribeUserGroupsRequestFunc mocks the DescribeUserGroupsRequest method.
	DescribeUserGroupsRequestFunc func(describeUserGroupsInput *elasticache.DescribeUserGroupsInput) (*request.Request, *elasticache.DescribeUserGroupsOutput)

	// DescribeUserGroupsWithContextFunc mocks the DescribeUserGroupsWithContext method.
	DescribeUserGroupsWithContextFunc func(contextMoqParam context.Context, describeUserGroupsInput *elasticache.DescribeUserGroupsInput, options ...request.Option) (*elasticache.DescribeUserGroupsOutput, error)

	// DescribeUsersFunc mocks the DescribeUsers method.
	DescribeUsersFunc func(describeUsersInput *elasticache.DescribeUsersInput) (*elasticache.DescribeUsersOutput, error)

	// DescribeUsersPagesFunc mocks the DescribeUsersPages method.
	DescribeUsersPagesFunc func(describeUsersInput *elasticache.DescribeUsersInput, fn func(*elasticache.DescribeUsersOutput, bool) bool) error

	// DescribeUsersPagesWithContextFunc mocks the DescribeUsersPagesWithContext method.
	DescribeUsersPagesWithContextFunc func(contextMoqParam context.Context, describeUsersInput *elasticache.DescribeUsersInput, fn func(*elasticache.DescribeUsersOutput, bool) bool, options ...request.Option) error

	// DescribeUsersRequestFunc mocks the DescribeUsersRequest method.
	DescribeUsersRequestFunc func(describeUsersInput *elasticache.DescribeUsersInput) (*request.Request, *elasticache.DescribeUsersOutput)

	// DescribeUsersWithContextFunc mocks the DescribeUsersWithContext method.
	DescribeUsersWithContextFunc func(contextMoqParam context.Context, describeUsersInput *elasticache.DescribeUsersInput, options ...request.Option) (*elasticache.DescribeUsersOutput, error)

	// DisassociateGlobalReplicationGroupFunc mocks the DisassociateGlobalReplicationGroup method.
	DisassociateGlobalReplicationGroupFunc func(disassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error)

	// DisassociateGlobalReplicationGroupRequestFunc mocks the DisassociateGlobalReplicationGroupRequest method.
	DisassociateGlobalReplicationGroupRequestFunc func(disassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput) (*request.Request, *elasticache.DisassociateGlobalReplicationGroupOutput)

	// DisassociateGlobalReplicationGroupWithContextFunc mocks the DisassociateGlobalReplicationGroupWithContext method.
	DisassociateGlobalReplicationGroupWithContextFunc func(contextMoqParam context.Context, disassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput, options ...request.Option) (*elasticache.DisassociateGlobalReplicationGroupOutput, error)

	// FailoverGlobalReplicationGroupFunc mocks the FailoverGlobalReplicationGroup method.
	FailoverGlobalReplicationGroupFunc func(failoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error)

	// FailoverGlobalReplicationGroupRequestFunc mocks the FailoverGlobalReplicationGroupRequest method.
	FailoverGlobalReplicationGroupRequestFunc func(failoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput) (*request.Request, *elasticache.FailoverGlobalReplicationGroupOutput)

	// FailoverGlobalReplicationGroupWithContextFunc mocks the FailoverGlobalReplicationGroupWithContext method.
	FailoverGlobalReplicationGroupWithContextFunc func(contextMoqParam context.Context, failoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput, options ...request.Option) (*elasticache.FailoverGlobalReplicationGroupOutput, error)

	// IncreaseNodeGroupsInGlobalReplicationGroupFunc mocks the IncreaseNodeGroupsInGlobalReplicationGroup method.
	IncreaseNodeGroupsInGlobalReplicationGroupFunc func(increaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error)

	// IncreaseNodeGroupsInGlobalReplicationGroupRequestFunc mocks the IncreaseNodeGroupsInGlobalReplicationGroupRequest method.
	IncreaseNodeGroupsInGlobalReplicationGroupRequestFunc func(increaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput)

	// IncreaseNodeGroupsInGlobalReplicationGroupWithContextFunc mocks the IncreaseNodeGroupsInGlobalReplicationGroupWithContext method.
	IncreaseNodeGroupsInGlobalReplicationGroupWithContextFunc func(contextMoqParam context.Context, increaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput, options ...request.Option) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error)

	// IncreaseReplicaCountFunc mocks the IncreaseReplicaCount method.
	IncreaseReplicaCountFunc func(increaseReplicaCountInput *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error)

	// IncreaseReplicaCountRequestFunc mocks the IncreaseReplicaCountRequest method.
	IncreaseReplicaCountRequestFunc func(increaseReplicaCountInput *elasticache.IncreaseReplicaCountInput) (*request.Request, *elasticache.IncreaseReplicaCountOutput)

	// IncreaseReplicaCountWithContextFunc mocks the IncreaseReplicaCountWithContext method.
	IncreaseReplicaCountWithContextFunc func(contextMoqParam context.Context, increaseReplicaCountInput *elasticache.IncreaseReplicaCountInput, options ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error)

	// ListAllowedNodeTypeModificationsFunc mocks the ListAllowedNodeTypeModifications method.
	ListAllowedNodeTypeModificationsFunc func(listAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)

	// ListAllowedNodeTypeModificationsRequestFunc mocks the ListAllowedNodeTypeModificationsRequest method.
	ListAllowedNodeTypeModificationsRequestFunc func(listAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput)

	// ListAllowedNodeTypeModificationsWithContextFunc mocks the ListAllowedNodeTypeModificationsWithContext method.
	ListAllowedNodeTypeModificationsWithContextFunc func(contextMoqParam context.Context, listAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput, options ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)

	// ListTagsForResourceFunc mocks the ListTagsForResource method.
	ListTagsForResourceFunc func(listTagsForResourceInput *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error)

	// ListTagsForResourceRequestFunc mocks the ListTagsForResourceRequest method.
	ListTagsForResourceRequestFunc func(listTagsForResourceInput *elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage)

	// ListTagsForResourceWithContextFunc mocks the ListTagsForResourceWithContext method.
	ListTagsForResourceWithContextFunc func(contextMoqParam context.Context, listTagsForResourceInput *elasticache.ListTagsForResourceInput, options ...request.Option) (*elasticache.TagListMessage, error)

	// ModifyCacheClusterFunc mocks the ModifyCacheCluster method.
	ModifyCacheClusterFunc func(modifyCacheClusterInput *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error)

	// ModifyCacheClusterRequestFunc mocks the ModifyCacheClusterRequest method.
	ModifyCacheClusterRequestFunc func(modifyCacheClusterInput *elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput)

	// ModifyCacheClusterWithContextFunc mocks the ModifyCacheClusterWithContext method.
	ModifyCacheClusterWithContextFunc func(contextMoqParam context.Context, modifyCacheClusterInput *elasticache.ModifyCacheClusterInput, options ...request.Option) (*elasticache.ModifyCacheClusterOutput, error)

	// ModifyCacheParameterGroupFunc mocks the ModifyCacheParameterGroup method.
	ModifyCacheParameterGroupFunc func(modifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)

	// ModifyCacheParameterGroupRequestFunc mocks the ModifyCacheParameterGroupRequest method.
	ModifyCacheParameterGroupRequestFunc func(modifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage)

	// ModifyCacheParameterGroupWithContextFunc mocks the ModifyCacheParameterGroupWithContext method.
	ModifyCacheParameterGroupWithContextFunc func(contextMoqParam context.Context, modifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput, options ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)

	// ModifyCacheSubnetGroupFunc mocks the ModifyCacheSubnetGroup method.
	ModifyCacheSubnetGroupFunc func(modifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error)

	// ModifyCacheSubnetGroupRequestFunc mocks the ModifyCacheSubnetGroupRequest method.
	ModifyCacheSubnetGroupRequestFunc func(modifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput)

	// ModifyCacheSubnetGroupWithContextFunc mocks the ModifyCacheSubnetGroupWithContext method.
	ModifyCacheSubnetGroupWithContextFunc func(contextMoqParam context.Context, modifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput, options ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error)

	// ModifyGlobalReplicationGroupFunc mocks the ModifyGlobalReplicationGroup method.
	ModifyGlobalReplicationGroupFunc func(modifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error)

	// ModifyGlobalReplicationGroupRequestFunc mocks the ModifyGlobalReplicationGroupRequest method.
	ModifyGlobalReplicationGroupRequestFunc func(modifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput) (*request.Request, *elasticache.ModifyGlobalReplicationGroupOutput)

	// ModifyGlobalReplicationGroupWithContextFunc mocks the ModifyGlobalReplicationGroupWithContext method.
	ModifyGlobalReplicationGroupWithContextFunc func(contextMoqParam context.Context, modifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput, options ...request.Option) (*elasticache.ModifyGlobalReplicationGroupOutput, error)

	// ModifyReplicationGroupFunc mocks the ModifyReplicationGroup method.
	ModifyReplicationGroupFunc func(modifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error)

	// ModifyReplicationGroupRequestFunc mocks the ModifyReplicationGroupRequest method.
	ModifyReplicationGroupRequestFunc func(modifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput)

	// ModifyReplicationGroupShardConfigurationFunc mocks the ModifyReplicationGroupShardConfiguration method.
	ModifyReplicationGroupShardConfigurationFunc func(modifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)

	// ModifyReplicationGroupShardConfigurationRequestFunc mocks the ModifyReplicationGroupShardConfigurationRequest method.
	ModifyReplicationGroupShardConfigurationRequestFunc func(modifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput)

	// ModifyReplicationGroupShardConfigurationWithContextFunc mocks the ModifyReplicationGroupShardConfigurationWithContext method.
	ModifyReplicationGroupShardConfigurationWithContextFunc func(contextMoqParam context.Context, modifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput, options ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)

	// ModifyReplicationGroupWithContextFunc mocks the ModifyReplicationGroupWithContext method.
	ModifyReplicationGroupWithContextFunc func(contextMoqParam context.Context, modifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput, options ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error)

	// ModifyUserFunc mocks the ModifyUser method.
	ModifyUserFunc func(modifyUserInput *elasticache.ModifyUserInput) (*elasticache.ModifyUserOutput, error)

	// ModifyUserGroupFunc mocks the ModifyUserGroup method.
	ModifyUserGroupFunc func(modifyUserGroupInput *elasticache.ModifyUserGroupInput) (*elasticache.ModifyUserGroupOutput, error)

	// ModifyUserGroupRequestFunc mocks the ModifyUserGroupRequest method.
	ModifyUserGroupRequestFunc func(modifyUserGroupInput *elasticache.ModifyUserGroupInput) (*request.Request, *elasticache.ModifyUserGroupOutput)

	// ModifyUserGroupWithContextFunc mocks the ModifyUserGroupWithContext method.
	ModifyUserGroupWithContextFunc func(contextMoqParam context.Context, modifyUserGroupInput *elasticache.ModifyUserGroupInput, options ...request.Option) (*elasticache.ModifyUserGroupOutput, error)

	// ModifyUserRequestFunc mocks the ModifyUserRequest method.
	ModifyUserRequestFunc func(modifyUserInput *elasticache.ModifyUserInput) (*request.Request, *elasticache.ModifyUserOutput)

	// ModifyUserWithContextFunc mocks the ModifyUserWithContext method.
	ModifyUserWithContextFunc func(contextMoqParam context.Context, modifyUserInput *elasticache.ModifyUserInput, options ...request.Option) (*elasticache.ModifyUserOutput, error)

	// PurchaseReservedCacheNodesOfferingFunc mocks the PurchaseReservedCacheNodesOffering method.
	PurchaseReservedCacheNodesOfferingFunc func(purchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)

	// PurchaseReservedCacheNodesOfferingRequestFunc mocks the PurchaseReservedCacheNodesOfferingRequest method.
	PurchaseReservedCacheNodesOfferingRequestFunc func(purchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput)

	// PurchaseReservedCacheNodesOfferingWithContextFunc mocks the PurchaseReservedCacheNodesOfferingWithContext method.
	PurchaseReservedCacheNodesOfferingWithContextFunc func(contextMoqParam context.Context, purchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput, options ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)

	// RebalanceSlotsInGlobalReplicationGroupFunc mocks the RebalanceSlotsInGlobalReplicationGroup method.
	RebalanceSlotsInGlobalReplicationGroupFunc func(rebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error)

	// RebalanceSlotsInGlobalReplicationGroupRequestFunc mocks the RebalanceSlotsInGlobalReplicationGroupRequest method.
	RebalanceSlotsInGlobalReplicationGroupRequestFunc func(rebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*request.Request, *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput)

	// RebalanceSlotsInGlobalReplicationGroupWithContextFunc mocks the RebalanceSlotsInGlobalReplicationGroupWithContext method.
	RebalanceSlotsInGlobalReplicationGroupWithContextFunc func(contextMoqParam context.Context, rebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput, options ...request.Option) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error)

	// RebootCacheClusterFunc mocks the RebootCacheCluster method.
	RebootCacheClusterFunc func(rebootCacheClusterInput *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error)

	// RebootCacheClusterRequestFunc mocks the RebootCacheClusterRequest method.
	RebootCacheClusterRequestFunc func(rebootCacheClusterInput *elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput)

	// RebootCacheClusterWithContextFunc mocks the RebootCacheClusterWithContext method.
	RebootCacheClusterWithContextFunc func(contextMoqParam context.Context, rebootCacheClusterInput *elasticache.RebootCacheClusterInput, options ...request.Option) (*elasticache.RebootCacheClusterOutput, error)

	// RemoveTagsFromResourceFunc mocks the RemoveTagsFromResource method.
	RemoveTagsFromResourceFunc func(removeTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error)

	// RemoveTagsFromResourceRequestFunc mocks the RemoveTagsFromResourceRequest method.
	RemoveTagsFromResourceRequestFunc func(removeTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage)

	// RemoveTagsFromResourceWithContextFunc mocks the RemoveTagsFromResourceWithContext method.
	RemoveTagsFromResourceWithContextFunc func(contextMoqParam context.Context, removeTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput, options ...request.Option) (*elasticache.TagListMessage, error)

	// ResetCacheParameterGroupFunc mocks the ResetCacheParameterGroup method.
	ResetCacheParameterGroupFunc func(resetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)

	// ResetCacheParameterGroupRequestFunc mocks the ResetCacheParameterGroupRequest method.
	ResetCacheParameterGroupRequestFunc func(resetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage)

	// ResetCacheParameterGroupWithContextFunc mocks the ResetCacheParameterGroupWithContext method.
	ResetCacheParameterGroupWithContextFunc func(contextMoqParam context.Context, resetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput, options ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)

	// RevokeCacheSecurityGroupIngressFunc mocks the RevokeCacheSecurityGroupIngress method.
	RevokeCacheSecurityGroupIngressFunc func(revokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)

	// RevokeCacheSecurityGroupIngressRequestFunc mocks the RevokeCacheSecurityGroupIngressRequest method.
	RevokeCacheSecurityGroupIngressRequestFunc func(revokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput)

	// RevokeCacheSecurityGroupIngressWithContextFunc mocks the RevokeCacheSecurityGroupIngressWithContext method.
	RevokeCacheSecurityGroupIngressWithContextFunc func(contextMoqParam context.Context, revokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput, options ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)

	// StartMigrationFunc mocks the StartMigration method.
	StartMigrationFunc func(startMigrationInput *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error)

	// StartMigrationRequestFunc mocks the StartMigrationRequest method.
	StartMigrationRequestFunc func(startMigrationInput *elasticache.StartMigrationInput) (*request.Request, *elasticache.StartMigrationOutput)

	// StartMigrationWithContextFunc mocks the StartMigrationWithContext method.
	StartMigrationWithContextFunc func(contextMoqParam context.Context, startMigrationInput *elasticache.StartMigrationInput, options ...request.Option) (*elasticache.StartMigrationOutput, error)

	// TestFailoverFunc mocks the TestFailover method.
	TestFailoverFunc func(testFailoverInput *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error)

	// TestFailoverRequestFunc mocks the TestFailoverRequest method.
	TestFailoverRequestFunc func(testFailoverInput *elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput)

	// TestFailoverWithContextFunc mocks the TestFailoverWithContext method.
	TestFailoverWithContextFunc func(contextMoqParam context.Context, testFailoverInput *elasticache.TestFailoverInput, options ...request.Option) (*elasticache.TestFailoverOutput, error)

	// WaitUntilCacheClusterAvailableFunc mocks the WaitUntilCacheClusterAvailable method.
	WaitUntilCacheClusterAvailableFunc func(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) error

	// WaitUntilCacheClusterAvailableWithContextFunc mocks the WaitUntilCacheClusterAvailableWithContext method.
	WaitUntilCacheClusterAvailableWithContextFunc func(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilCacheClusterDeletedFunc mocks the WaitUntilCacheClusterDeleted method.
	WaitUntilCacheClusterDeletedFunc func(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) error

	// WaitUntilCacheClusterDeletedWithContextFunc mocks the WaitUntilCacheClusterDeletedWithContext method.
	WaitUntilCacheClusterDeletedWithContextFunc func(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilReplicationGroupAvailableFunc mocks the WaitUntilReplicationGroupAvailable method.
	WaitUntilReplicationGroupAvailableFunc func(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) error

	// WaitUntilReplicationGroupAvailableWithContextFunc mocks the WaitUntilReplicationGroupAvailableWithContext method.
	WaitUntilReplicationGroupAvailableWithContextFunc func(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, waiterOptions ...request.WaiterOption) error

	// WaitUntilReplicationGroupDeletedFunc mocks the WaitUntilReplicationGroupDeleted method.
	WaitUntilReplicationGroupDeletedFunc func(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) error

	// WaitUntilReplicationGroupDeletedWithContextFunc mocks the WaitUntilReplicationGroupDeletedWithContext method.
	WaitUntilReplicationGroupDeletedWithContextFunc func(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, waiterOptions ...request.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// AddTagsToResource holds details about calls to the AddTagsToResource method.
		AddTagsToResource []struct {
			// AddTagsToResourceInput is the addTagsToResourceInput argument value.
			AddTagsToResourceInput *elasticache.AddTagsToResourceInput
		}
		// AddTagsToResourceRequest holds details about calls to the AddTagsToResourceRequest method.
		AddTagsToResourceRequest []struct {
			// AddTagsToResourceInput is the addTagsToResourceInput argument value.
			AddTagsToResourceInput *elasticache.AddTagsToResourceInput
		}
		// AddTagsToResourceWithContext holds details about calls to the AddTagsToResourceWithContext method.
		AddTagsToResourceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AddTagsToResourceInput is the addTagsToResourceInput argument value.
			AddTagsToResourceInput *elasticache.AddTagsToResourceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// AuthorizeCacheSecurityGroupIngress holds details about calls to the AuthorizeCacheSecurityGroupIngress method.
		AuthorizeCacheSecurityGroupIngress []struct {
			// AuthorizeCacheSecurityGroupIngressInput is the authorizeCacheSecurityGroupIngressInput argument value.
			AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
		}
		// AuthorizeCacheSecurityGroupIngressRequest holds details about calls to the AuthorizeCacheSecurityGroupIngressRequest method.
		AuthorizeCacheSecurityGroupIngressRequest []struct {
			// AuthorizeCacheSecurityGroupIngressInput is the authorizeCacheSecurityGroupIngressInput argument value.
			AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
		}
		// AuthorizeCacheSecurityGroupIngressWithContext holds details about calls to the AuthorizeCacheSecurityGroupIngressWithContext method.
		AuthorizeCacheSecurityGroupIngressWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AuthorizeCacheSecurityGroupIngressInput is the authorizeCacheSecurityGroupIngressInput argument value.
			AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
			// Options is the options argument value.
			Options []request.Option
		}
		// BatchApplyUpdateAction holds details about calls to the BatchApplyUpdateAction method.
		BatchApplyUpdateAction []struct {
			// BatchApplyUpdateActionInput is the batchApplyUpdateActionInput argument value.
			BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
		}
		// BatchApplyUpdateActionRequest holds details about calls to the BatchApplyUpdateActionRequest method.
		BatchApplyUpdateActionRequest []struct {
			// BatchApplyUpdateActionInput is the batchApplyUpdateActionInput argument value.
			BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
		}
		// BatchApplyUpdateActionWithContext holds details about calls to the BatchApplyUpdateActionWithContext method.
		BatchApplyUpdateActionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// BatchApplyUpdateActionInput is the batchApplyUpdateActionInput argument value.
			BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// BatchStopUpdateAction holds details about calls to the BatchStopUpdateAction method.
		BatchStopUpdateAction []struct {
			// BatchStopUpdateActionInput is the batchStopUpdateActionInput argument value.
			BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
		}
		// BatchStopUpdateActionRequest holds details about calls to the BatchStopUpdateActionRequest method.
		BatchStopUpdateActionRequest []struct {
			// BatchStopUpdateActionInput is the batchStopUpdateActionInput argument value.
			BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
		}
		// BatchStopUpdateActionWithContext holds details about calls to the BatchStopUpdateActionWithContext method.
		BatchStopUpdateActionWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// BatchStopUpdateActionInput is the batchStopUpdateActionInput argument value.
			BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CompleteMigration holds details about calls to the CompleteMigration method.
		CompleteMigration []struct {
			// CompleteMigrationInput is the completeMigrationInput argument value.
			CompleteMigrationInput *elasticache.CompleteMigrationInput
		}
		// CompleteMigrationRequest holds details about calls to the CompleteMigrationRequest method.
		CompleteMigrationRequest []struct {
			// CompleteMigrationInput is the completeMigrationInput argument value.
			CompleteMigrationInput *elasticache.CompleteMigrationInput
		}
		// CompleteMigrationWithContext holds details about calls to the CompleteMigrationWithContext method.
		CompleteMigrationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CompleteMigrationInput is the completeMigrationInput argument value.
			CompleteMigrationInput *elasticache.CompleteMigrationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CopySnapshot holds details about calls to the CopySnapshot method.
		CopySnapshot []struct {
			// CopySnapshotInput is the copySnapshotInput argument value.
			CopySnapshotInput *elasticache.CopySnapshotInput
		}
		// CopySnapshotRequest holds details about calls to the CopySnapshotRequest method.
		CopySnapshotRequest []struct {
			// CopySnapshotInput is the copySnapshotInput argument value.
			CopySnapshotInput *elasticache.CopySnapshotInput
		}
		// CopySnapshotWithContext holds details about calls to the CopySnapshotWithContext method.
		CopySnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CopySnapshotInput is the copySnapshotInput argument value.
			CopySnapshotInput *elasticache.CopySnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateCacheCluster holds details about calls to the CreateCacheCluster method.
		CreateCacheCluster []struct {
			// CreateCacheClusterInput is the createCacheClusterInput argument value.
			CreateCacheClusterInput *elasticache.CreateCacheClusterInput
		}
		// CreateCacheClusterRequest holds details about calls to the CreateCacheClusterRequest method.
		CreateCacheClusterRequest []struct {
			// CreateCacheClusterInput is the createCacheClusterInput argument value.
			CreateCacheClusterInput *elasticache.CreateCacheClusterInput
		}
		// CreateCacheClusterWithContext holds details about calls to the CreateCacheClusterWithContext method.
		CreateCacheClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateCacheClusterInput is the createCacheClusterInput argument value.
			CreateCacheClusterInput *elasticache.CreateCacheClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateCacheParameterGroup holds details about calls to the CreateCacheParameterGroup method.
		CreateCacheParameterGroup []struct {
			// CreateCacheParameterGroupInput is the createCacheParameterGroupInput argument value.
			CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
		}
		// CreateCacheParameterGroupRequest holds details about calls to the CreateCacheParameterGroupRequest method.
		CreateCacheParameterGroupRequest []struct {
			// CreateCacheParameterGroupInput is the createCacheParameterGroupInput argument value.
			CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
		}
		// CreateCacheParameterGroupWithContext holds details about calls to the CreateCacheParameterGroupWithContext method.
		CreateCacheParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateCacheParameterGroupInput is the createCacheParameterGroupInput argument value.
			CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateCacheSecurityGroup holds details about calls to the CreateCacheSecurityGroup method.
		CreateCacheSecurityGroup []struct {
			// CreateCacheSecurityGroupInput is the createCacheSecurityGroupInput argument value.
			CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
		}
		// CreateCacheSecurityGroupRequest holds details about calls to the CreateCacheSecurityGroupRequest method.
		CreateCacheSecurityGroupRequest []struct {
			// CreateCacheSecurityGroupInput is the createCacheSecurityGroupInput argument value.
			CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
		}
		// CreateCacheSecurityGroupWithContext holds details about calls to the CreateCacheSecurityGroupWithContext method.
		CreateCacheSecurityGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateCacheSecurityGroupInput is the createCacheSecurityGroupInput argument value.
			CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateCacheSubnetGroup holds details about calls to the CreateCacheSubnetGroup method.
		CreateCacheSubnetGroup []struct {
			// CreateCacheSubnetGroupInput is the createCacheSubnetGroupInput argument value.
			CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
		}
		// CreateCacheSubnetGroupRequest holds details about calls to the CreateCacheSubnetGroupRequest method.
		CreateCacheSubnetGroupRequest []struct {
			// CreateCacheSubnetGroupInput is the createCacheSubnetGroupInput argument value.
			CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
		}
		// CreateCacheSubnetGroupWithContext holds details about calls to the CreateCacheSubnetGroupWithContext method.
		CreateCacheSubnetGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateCacheSubnetGroupInput is the createCacheSubnetGroupInput argument value.
			CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateGlobalReplicationGroup holds details about calls to the CreateGlobalReplicationGroup method.
		CreateGlobalReplicationGroup []struct {
			// CreateGlobalReplicationGroupInput is the createGlobalReplicationGroupInput argument value.
			CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
		}
		// CreateGlobalReplicationGroupRequest holds details about calls to the CreateGlobalReplicationGroupRequest method.
		CreateGlobalReplicationGroupRequest []struct {
			// CreateGlobalReplicationGroupInput is the createGlobalReplicationGroupInput argument value.
			CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
		}
		// CreateGlobalReplicationGroupWithContext holds details about calls to the CreateGlobalReplicationGroupWithContext method.
		CreateGlobalReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateGlobalReplicationGroupInput is the createGlobalReplicationGroupInput argument value.
			CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateReplicationGroup holds details about calls to the CreateReplicationGroup method.
		CreateReplicationGroup []struct {
			// CreateReplicationGroupInput is the createReplicationGroupInput argument value.
			CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
		}
		// CreateReplicationGroupRequest holds details about calls to the CreateReplicationGroupRequest method.
		CreateReplicationGroupRequest []struct {
			// CreateReplicationGroupInput is the createReplicationGroupInput argument value.
			CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
		}
		// CreateReplicationGroupWithContext holds details about calls to the CreateReplicationGroupWithContext method.
		CreateReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateReplicationGroupInput is the createReplicationGroupInput argument value.
			CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateSnapshot holds details about calls to the CreateSnapshot method.
		CreateSnapshot []struct {
			// CreateSnapshotInput is the createSnapshotInput argument value.
			CreateSnapshotInput *elasticache.CreateSnapshotInput
		}
		// CreateSnapshotRequest holds details about calls to the CreateSnapshotRequest method.
		CreateSnapshotRequest []struct {
			// CreateSnapshotInput is the createSnapshotInput argument value.
			CreateSnapshotInput *elasticache.CreateSnapshotInput
		}
		// CreateSnapshotWithContext holds details about calls to the CreateSnapshotWithContext method.
		CreateSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateSnapshotInput is the createSnapshotInput argument value.
			CreateSnapshotInput *elasticache.CreateSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// CreateUserInput is the createUserInput argument value.
			CreateUserInput *elasticache.CreateUserInput
		}
		// CreateUserGroup holds details about calls to the CreateUserGroup method.
		CreateUserGroup []struct {
			// CreateUserGroupInput is the createUserGroupInput argument value.
			CreateUserGroupInput *elasticache.CreateUserGroupInput
		}
		// CreateUserGroupRequest holds details about calls to the CreateUserGroupRequest method.
		CreateUserGroupRequest []struct {
			// CreateUserGroupInput is the createUserGroupInput argument value.
			CreateUserGroupInput *elasticache.CreateUserGroupInput
		}
		// CreateUserGroupWithContext holds details about calls to the CreateUserGroupWithContext method.
		CreateUserGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateUserGroupInput is the createUserGroupInput argument value.
			CreateUserGroupInput *elasticache.CreateUserGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateUserRequest holds details about calls to the CreateUserRequest method.
		CreateUserRequest []struct {
			// CreateUserInput is the createUserInput argument value.
			CreateUserInput *elasticache.CreateUserInput
		}
		// CreateUserWithContext holds details about calls to the CreateUserWithContext method.
		CreateUserWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateUserInput is the createUserInput argument value.
			CreateUserInput *elasticache.CreateUserInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DecreaseNodeGroupsInGlobalReplicationGroup holds details about calls to the DecreaseNodeGroupsInGlobalReplicationGroup method.
		DecreaseNodeGroupsInGlobalReplicationGroup []struct {
			// DecreaseNodeGroupsInGlobalReplicationGroupInput is the decreaseNodeGroupsInGlobalReplicationGroupInput argument value.
			DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
		}
		// DecreaseNodeGroupsInGlobalReplicationGroupRequest holds details about calls to the DecreaseNodeGroupsInGlobalReplicationGroupRequest method.
		DecreaseNodeGroupsInGlobalReplicationGroupRequest []struct {
			// DecreaseNodeGroupsInGlobalReplicationGroupInput is the decreaseNodeGroupsInGlobalReplicationGroupInput argument value.
			DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
		}
		// DecreaseNodeGroupsInGlobalReplicationGroupWithContext holds details about calls to the DecreaseNodeGroupsInGlobalReplicationGroupWithContext method.
		DecreaseNodeGroupsInGlobalReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DecreaseNodeGroupsInGlobalReplicationGroupInput is the decreaseNodeGroupsInGlobalReplicationGroupInput argument value.
			DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DecreaseReplicaCount holds details about calls to the DecreaseReplicaCount method.
		DecreaseReplicaCount []struct {
			// DecreaseReplicaCountInput is the decreaseReplicaCountInput argument value.
			DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
		}
		// DecreaseReplicaCountRequest holds details about calls to the DecreaseReplicaCountRequest method.
		DecreaseReplicaCountRequest []struct {
			// DecreaseReplicaCountInput is the decreaseReplicaCountInput argument value.
			DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
		}
		// DecreaseReplicaCountWithContext holds details about calls to the DecreaseReplicaCountWithContext method.
		DecreaseReplicaCountWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DecreaseReplicaCountInput is the decreaseReplicaCountInput argument value.
			DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteCacheCluster holds details about calls to the DeleteCacheCluster method.
		DeleteCacheCluster []struct {
			// DeleteCacheClusterInput is the deleteCacheClusterInput argument value.
			DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
		}
		// DeleteCacheClusterRequest holds details about calls to the DeleteCacheClusterRequest method.
		DeleteCacheClusterRequest []struct {
			// DeleteCacheClusterInput is the deleteCacheClusterInput argument value.
			DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
		}
		// DeleteCacheClusterWithContext holds details about calls to the DeleteCacheClusterWithContext method.
		DeleteCacheClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteCacheClusterInput is the deleteCacheClusterInput argument value.
			DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteCacheParameterGroup holds details about calls to the DeleteCacheParameterGroup method.
		DeleteCacheParameterGroup []struct {
			// DeleteCacheParameterGroupInput is the deleteCacheParameterGroupInput argument value.
			DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
		}
		// DeleteCacheParameterGroupRequest holds details about calls to the DeleteCacheParameterGroupRequest method.
		DeleteCacheParameterGroupRequest []struct {
			// DeleteCacheParameterGroupInput is the deleteCacheParameterGroupInput argument value.
			DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
		}
		// DeleteCacheParameterGroupWithContext holds details about calls to the DeleteCacheParameterGroupWithContext method.
		DeleteCacheParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteCacheParameterGroupInput is the deleteCacheParameterGroupInput argument value.
			DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteCacheSecurityGroup holds details about calls to the DeleteCacheSecurityGroup method.
		DeleteCacheSecurityGroup []struct {
			// DeleteCacheSecurityGroupInput is the deleteCacheSecurityGroupInput argument value.
			DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
		}
		// DeleteCacheSecurityGroupRequest holds details about calls to the DeleteCacheSecurityGroupRequest method.
		DeleteCacheSecurityGroupRequest []struct {
			// DeleteCacheSecurityGroupInput is the deleteCacheSecurityGroupInput argument value.
			DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
		}
		// DeleteCacheSecurityGroupWithContext holds details about calls to the DeleteCacheSecurityGroupWithContext method.
		DeleteCacheSecurityGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteCacheSecurityGroupInput is the deleteCacheSecurityGroupInput argument value.
			DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteCacheSubnetGroup holds details about calls to the DeleteCacheSubnetGroup method.
		DeleteCacheSubnetGroup []struct {
			// DeleteCacheSubnetGroupInput is the deleteCacheSubnetGroupInput argument value.
			DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
		}
		// DeleteCacheSubnetGroupRequest holds details about calls to the DeleteCacheSubnetGroupRequest method.
		DeleteCacheSubnetGroupRequest []struct {
			// DeleteCacheSubnetGroupInput is the deleteCacheSubnetGroupInput argument value.
			DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
		}
		// DeleteCacheSubnetGroupWithContext holds details about calls to the DeleteCacheSubnetGroupWithContext method.
		DeleteCacheSubnetGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteCacheSubnetGroupInput is the deleteCacheSubnetGroupInput argument value.
			DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteGlobalReplicationGroup holds details about calls to the DeleteGlobalReplicationGroup method.
		DeleteGlobalReplicationGroup []struct {
			// DeleteGlobalReplicationGroupInput is the deleteGlobalReplicationGroupInput argument value.
			DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
		}
		// DeleteGlobalReplicationGroupRequest holds details about calls to the DeleteGlobalReplicationGroupRequest method.
		DeleteGlobalReplicationGroupRequest []struct {
			// DeleteGlobalReplicationGroupInput is the deleteGlobalReplicationGroupInput argument value.
			DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
		}
		// DeleteGlobalReplicationGroupWithContext holds details about calls to the DeleteGlobalReplicationGroupWithContext method.
		DeleteGlobalReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteGlobalReplicationGroupInput is the deleteGlobalReplicationGroupInput argument value.
			DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteReplicationGroup holds details about calls to the DeleteReplicationGroup method.
		DeleteReplicationGroup []struct {
			// DeleteReplicationGroupInput is the deleteReplicationGroupInput argument value.
			DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
		}
		// DeleteReplicationGroupRequest holds details about calls to the DeleteReplicationGroupRequest method.
		DeleteReplicationGroupRequest []struct {
			// DeleteReplicationGroupInput is the deleteReplicationGroupInput argument value.
			DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
		}
		// DeleteReplicationGroupWithContext holds details about calls to the DeleteReplicationGroupWithContext method.
		DeleteReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteReplicationGroupInput is the deleteReplicationGroupInput argument value.
			DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteSnapshot holds details about calls to the DeleteSnapshot method.
		DeleteSnapshot []struct {
			// DeleteSnapshotInput is the deleteSnapshotInput argument value.
			DeleteSnapshotInput *elasticache.DeleteSnapshotInput
		}
		// DeleteSnapshotRequest holds details about calls to the DeleteSnapshotRequest method.
		DeleteSnapshotRequest []struct {
			// DeleteSnapshotInput is the deleteSnapshotInput argument value.
			DeleteSnapshotInput *elasticache.DeleteSnapshotInput
		}
		// DeleteSnapshotWithContext holds details about calls to the DeleteSnapshotWithContext method.
		DeleteSnapshotWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteSnapshotInput is the deleteSnapshotInput argument value.
			DeleteSnapshotInput *elasticache.DeleteSnapshotInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// DeleteUserInput is the deleteUserInput argument value.
			DeleteUserInput *elasticache.DeleteUserInput
		}
		// DeleteUserGroup holds details about calls to the DeleteUserGroup method.
		DeleteUserGroup []struct {
			// DeleteUserGroupInput is the deleteUserGroupInput argument value.
			DeleteUserGroupInput *elasticache.DeleteUserGroupInput
		}
		// DeleteUserGroupRequest holds details about calls to the DeleteUserGroupRequest method.
		DeleteUserGroupRequest []struct {
			// DeleteUserGroupInput is the deleteUserGroupInput argument value.
			DeleteUserGroupInput *elasticache.DeleteUserGroupInput
		}
		// DeleteUserGroupWithContext holds details about calls to the DeleteUserGroupWithContext method.
		DeleteUserGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteUserGroupInput is the deleteUserGroupInput argument value.
			DeleteUserGroupInput *elasticache.DeleteUserGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteUserRequest holds details about calls to the DeleteUserRequest method.
		DeleteUserRequest []struct {
			// DeleteUserInput is the deleteUserInput argument value.
			DeleteUserInput *elasticache.DeleteUserInput
		}
		// DeleteUserWithContext holds details about calls to the DeleteUserWithContext method.
		DeleteUserWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteUserInput is the deleteUserInput argument value.
			DeleteUserInput *elasticache.DeleteUserInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheClusters holds details about calls to the DescribeCacheClusters method.
		DescribeCacheClusters []struct {
			// DescribeCacheClustersInput is the describeCacheClustersInput argument value.
			DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		}
		// DescribeCacheClustersPages holds details about calls to the DescribeCacheClustersPages method.
		DescribeCacheClustersPages []struct {
			// DescribeCacheClustersInput is the describeCacheClustersInput argument value.
			DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheClustersOutput, bool) bool
		}
		// DescribeCacheClustersPagesWithContext holds details about calls to the DescribeCacheClustersPagesWithContext method.
		DescribeCacheClustersPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheClustersInput is the describeCacheClustersInput argument value.
			DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheClustersOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheClustersRequest holds details about calls to the DescribeCacheClustersRequest method.
		DescribeCacheClustersRequest []struct {
			// DescribeCacheClustersInput is the describeCacheClustersInput argument value.
			DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		}
		// DescribeCacheClustersWithContext holds details about calls to the DescribeCacheClustersWithContext method.
		DescribeCacheClustersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheClustersInput is the describeCacheClustersInput argument value.
			DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheEngineVersions holds details about calls to the DescribeCacheEngineVersions method.
		DescribeCacheEngineVersions []struct {
			// DescribeCacheEngineVersionsInput is the describeCacheEngineVersionsInput argument value.
			DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
		}
		// DescribeCacheEngineVersionsPages holds details about calls to the DescribeCacheEngineVersionsPages method.
		DescribeCacheEngineVersionsPages []struct {
			// DescribeCacheEngineVersionsInput is the describeCacheEngineVersionsInput argument value.
			DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
		}
		// DescribeCacheEngineVersionsPagesWithContext holds details about calls to the DescribeCacheEngineVersionsPagesWithContext method.
		DescribeCacheEngineVersionsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheEngineVersionsInput is the describeCacheEngineVersionsInput argument value.
			DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheEngineVersionsRequest holds details about calls to the DescribeCacheEngineVersionsRequest method.
		DescribeCacheEngineVersionsRequest []struct {
			// DescribeCacheEngineVersionsInput is the describeCacheEngineVersionsInput argument value.
			DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
		}
		// DescribeCacheEngineVersionsWithContext holds details about calls to the DescribeCacheEngineVersionsWithContext method.
		DescribeCacheEngineVersionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheEngineVersionsInput is the describeCacheEngineVersionsInput argument value.
			DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheParameterGroups holds details about calls to the DescribeCacheParameterGroups method.
		DescribeCacheParameterGroups []struct {
			// DescribeCacheParameterGroupsInput is the describeCacheParameterGroupsInput argument value.
			DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
		}
		// DescribeCacheParameterGroupsPages holds details about calls to the DescribeCacheParameterGroupsPages method.
		DescribeCacheParameterGroupsPages []struct {
			// DescribeCacheParameterGroupsInput is the describeCacheParameterGroupsInput argument value.
			DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
		}
		// DescribeCacheParameterGroupsPagesWithContext holds details about calls to the DescribeCacheParameterGroupsPagesWithContext method.
		DescribeCacheParameterGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheParameterGroupsInput is the describeCacheParameterGroupsInput argument value.
			DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheParameterGroupsRequest holds details about calls to the DescribeCacheParameterGroupsRequest method.
		DescribeCacheParameterGroupsRequest []struct {
			// DescribeCacheParameterGroupsInput is the describeCacheParameterGroupsInput argument value.
			DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
		}
		// DescribeCacheParameterGroupsWithContext holds details about calls to the DescribeCacheParameterGroupsWithContext method.
		DescribeCacheParameterGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheParameterGroupsInput is the describeCacheParameterGroupsInput argument value.
			DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheParameters holds details about calls to the DescribeCacheParameters method.
		DescribeCacheParameters []struct {
			// DescribeCacheParametersInput is the describeCacheParametersInput argument value.
			DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
		}
		// DescribeCacheParametersPages holds details about calls to the DescribeCacheParametersPages method.
		DescribeCacheParametersPages []struct {
			// DescribeCacheParametersInput is the describeCacheParametersInput argument value.
			DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheParametersOutput, bool) bool
		}
		// DescribeCacheParametersPagesWithContext holds details about calls to the DescribeCacheParametersPagesWithContext method.
		DescribeCacheParametersPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheParametersInput is the describeCacheParametersInput argument value.
			DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheParametersOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheParametersRequest holds details about calls to the DescribeCacheParametersRequest method.
		DescribeCacheParametersRequest []struct {
			// DescribeCacheParametersInput is the describeCacheParametersInput argument value.
			DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
		}
		// DescribeCacheParametersWithContext holds details about calls to the DescribeCacheParametersWithContext method.
		DescribeCacheParametersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheParametersInput is the describeCacheParametersInput argument value.
			DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheSecurityGroups holds details about calls to the DescribeCacheSecurityGroups method.
		DescribeCacheSecurityGroups []struct {
			// DescribeCacheSecurityGroupsInput is the describeCacheSecurityGroupsInput argument value.
			DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
		}
		// DescribeCacheSecurityGroupsPages holds details about calls to the DescribeCacheSecurityGroupsPages method.
		DescribeCacheSecurityGroupsPages []struct {
			// DescribeCacheSecurityGroupsInput is the describeCacheSecurityGroupsInput argument value.
			DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
		}
		// DescribeCacheSecurityGroupsPagesWithContext holds details about calls to the DescribeCacheSecurityGroupsPagesWithContext method.
		DescribeCacheSecurityGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheSecurityGroupsInput is the describeCacheSecurityGroupsInput argument value.
			DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheSecurityGroupsRequest holds details about calls to the DescribeCacheSecurityGroupsRequest method.
		DescribeCacheSecurityGroupsRequest []struct {
			// DescribeCacheSecurityGroupsInput is the describeCacheSecurityGroupsInput argument value.
			DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
		}
		// DescribeCacheSecurityGroupsWithContext holds details about calls to the DescribeCacheSecurityGroupsWithContext method.
		DescribeCacheSecurityGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheSecurityGroupsInput is the describeCacheSecurityGroupsInput argument value.
			DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheSubnetGroups holds details about calls to the DescribeCacheSubnetGroups method.
		DescribeCacheSubnetGroups []struct {
			// DescribeCacheSubnetGroupsInput is the describeCacheSubnetGroupsInput argument value.
			DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
		}
		// DescribeCacheSubnetGroupsPages holds details about calls to the DescribeCacheSubnetGroupsPages method.
		DescribeCacheSubnetGroupsPages []struct {
			// DescribeCacheSubnetGroupsInput is the describeCacheSubnetGroupsInput argument value.
			DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
		}
		// DescribeCacheSubnetGroupsPagesWithContext holds details about calls to the DescribeCacheSubnetGroupsPagesWithContext method.
		DescribeCacheSubnetGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheSubnetGroupsInput is the describeCacheSubnetGroupsInput argument value.
			DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeCacheSubnetGroupsRequest holds details about calls to the DescribeCacheSubnetGroupsRequest method.
		DescribeCacheSubnetGroupsRequest []struct {
			// DescribeCacheSubnetGroupsInput is the describeCacheSubnetGroupsInput argument value.
			DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
		}
		// DescribeCacheSubnetGroupsWithContext holds details about calls to the DescribeCacheSubnetGroupsWithContext method.
		DescribeCacheSubnetGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheSubnetGroupsInput is the describeCacheSubnetGroupsInput argument value.
			DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEngineDefaultParameters holds details about calls to the DescribeEngineDefaultParameters method.
		DescribeEngineDefaultParameters []struct {
			// DescribeEngineDefaultParametersInput is the describeEngineDefaultParametersInput argument value.
			DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
		}
		// DescribeEngineDefaultParametersPages holds details about calls to the DescribeEngineDefaultParametersPages method.
		DescribeEngineDefaultParametersPages []struct {
			// DescribeEngineDefaultParametersInput is the describeEngineDefaultParametersInput argument value.
			DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
		}
		// DescribeEngineDefaultParametersPagesWithContext holds details about calls to the DescribeEngineDefaultParametersPagesWithContext method.
		DescribeEngineDefaultParametersPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEngineDefaultParametersInput is the describeEngineDefaultParametersInput argument value.
			DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEngineDefaultParametersRequest holds details about calls to the DescribeEngineDefaultParametersRequest method.
		DescribeEngineDefaultParametersRequest []struct {
			// DescribeEngineDefaultParametersInput is the describeEngineDefaultParametersInput argument value.
			DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
		}
		// DescribeEngineDefaultParametersWithContext holds details about calls to the DescribeEngineDefaultParametersWithContext method.
		DescribeEngineDefaultParametersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEngineDefaultParametersInput is the describeEngineDefaultParametersInput argument value.
			DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEvents holds details about calls to the DescribeEvents method.
		DescribeEvents []struct {
			// DescribeEventsInput is the describeEventsInput argument value.
			DescribeEventsInput *elasticache.DescribeEventsInput
		}
		// DescribeEventsPages holds details about calls to the DescribeEventsPages method.
		DescribeEventsPages []struct {
			// DescribeEventsInput is the describeEventsInput argument value.
			DescribeEventsInput *elasticache.DescribeEventsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeEventsOutput, bool) bool
		}
		// DescribeEventsPagesWithContext holds details about calls to the DescribeEventsPagesWithContext method.
		DescribeEventsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEventsInput is the describeEventsInput argument value.
			DescribeEventsInput *elasticache.DescribeEventsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeEventsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeEventsRequest holds details about calls to the DescribeEventsRequest method.
		DescribeEventsRequest []struct {
			// DescribeEventsInput is the describeEventsInput argument value.
			DescribeEventsInput *elasticache.DescribeEventsInput
		}
		// DescribeEventsWithContext holds details about calls to the DescribeEventsWithContext method.
		DescribeEventsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeEventsInput is the describeEventsInput argument value.
			DescribeEventsInput *elasticache.DescribeEventsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeGlobalReplicationGroups holds details about calls to the DescribeGlobalReplicationGroups method.
		DescribeGlobalReplicationGroups []struct {
			// DescribeGlobalReplicationGroupsInput is the describeGlobalReplicationGroupsInput argument value.
			DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
		}
		// DescribeGlobalReplicationGroupsPages holds details about calls to the DescribeGlobalReplicationGroupsPages method.
		DescribeGlobalReplicationGroupsPages []struct {
			// DescribeGlobalReplicationGroupsInput is the describeGlobalReplicationGroupsInput argument value.
			DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
		}
		// DescribeGlobalReplicationGroupsPagesWithContext holds details about calls to the DescribeGlobalReplicationGroupsPagesWithContext method.
		DescribeGlobalReplicationGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeGlobalReplicationGroupsInput is the describeGlobalReplicationGroupsInput argument value.
			DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeGlobalReplicationGroupsRequest holds details about calls to the DescribeGlobalReplicationGroupsRequest method.
		DescribeGlobalReplicationGroupsRequest []struct {
			// DescribeGlobalReplicationGroupsInput is the describeGlobalReplicationGroupsInput argument value.
			DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
		}
		// DescribeGlobalReplicationGroupsWithContext holds details about calls to the DescribeGlobalReplicationGroupsWithContext method.
		DescribeGlobalReplicationGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeGlobalReplicationGroupsInput is the describeGlobalReplicationGroupsInput argument value.
			DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeReplicationGroups holds details about calls to the DescribeReplicationGroups method.
		DescribeReplicationGroups []struct {
			// DescribeReplicationGroupsInput is the describeReplicationGroupsInput argument value.
			DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		}
		// DescribeReplicationGroupsPages holds details about calls to the DescribeReplicationGroupsPages method.
		DescribeReplicationGroupsPages []struct {
			// DescribeReplicationGroupsInput is the describeReplicationGroupsInput argument value.
			DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
		}
		// DescribeReplicationGroupsPagesWithContext holds details about calls to the DescribeReplicationGroupsPagesWithContext method.
		DescribeReplicationGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReplicationGroupsInput is the describeReplicationGroupsInput argument value.
			DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeReplicationGroupsRequest holds details about calls to the DescribeReplicationGroupsRequest method.
		DescribeReplicationGroupsRequest []struct {
			// DescribeReplicationGroupsInput is the describeReplicationGroupsInput argument value.
			DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		}
		// DescribeReplicationGroupsWithContext holds details about calls to the DescribeReplicationGroupsWithContext method.
		DescribeReplicationGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReplicationGroupsInput is the describeReplicationGroupsInput argument value.
			DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeReservedCacheNodes holds details about calls to the DescribeReservedCacheNodes method.
		DescribeReservedCacheNodes []struct {
			// DescribeReservedCacheNodesInput is the describeReservedCacheNodesInput argument value.
			DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
		}
		// DescribeReservedCacheNodesOfferings holds details about calls to the DescribeReservedCacheNodesOfferings method.
		DescribeReservedCacheNodesOfferings []struct {
			// DescribeReservedCacheNodesOfferingsInput is the describeReservedCacheNodesOfferingsInput argument value.
			DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
		}
		// DescribeReservedCacheNodesOfferingsPages holds details about calls to the DescribeReservedCacheNodesOfferingsPages method.
		DescribeReservedCacheNodesOfferingsPages []struct {
			// DescribeReservedCacheNodesOfferingsInput is the describeReservedCacheNodesOfferingsInput argument value.
			DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
		}
		// DescribeReservedCacheNodesOfferingsPagesWithContext holds details about calls to the DescribeReservedCacheNodesOfferingsPagesWithContext method.
		DescribeReservedCacheNodesOfferingsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReservedCacheNodesOfferingsInput is the describeReservedCacheNodesOfferingsInput argument value.
			DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeReservedCacheNodesOfferingsRequest holds details about calls to the DescribeReservedCacheNodesOfferingsRequest method.
		DescribeReservedCacheNodesOfferingsRequest []struct {
			// DescribeReservedCacheNodesOfferingsInput is the describeReservedCacheNodesOfferingsInput argument value.
			DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
		}
		// DescribeReservedCacheNodesOfferingsWithContext holds details about calls to the DescribeReservedCacheNodesOfferingsWithContext method.
		DescribeReservedCacheNodesOfferingsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReservedCacheNodesOfferingsInput is the describeReservedCacheNodesOfferingsInput argument value.
			DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeReservedCacheNodesPages holds details about calls to the DescribeReservedCacheNodesPages method.
		DescribeReservedCacheNodesPages []struct {
			// DescribeReservedCacheNodesInput is the describeReservedCacheNodesInput argument value.
			DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
		}
		// DescribeReservedCacheNodesPagesWithContext holds details about calls to the DescribeReservedCacheNodesPagesWithContext method.
		DescribeReservedCacheNodesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReservedCacheNodesInput is the describeReservedCacheNodesInput argument value.
			DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeReservedCacheNodesRequest holds details about calls to the DescribeReservedCacheNodesRequest method.
		DescribeReservedCacheNodesRequest []struct {
			// DescribeReservedCacheNodesInput is the describeReservedCacheNodesInput argument value.
			DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
		}
		// DescribeReservedCacheNodesWithContext holds details about calls to the DescribeReservedCacheNodesWithContext method.
		DescribeReservedCacheNodesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReservedCacheNodesInput is the describeReservedCacheNodesInput argument value.
			DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeServiceUpdates holds details about calls to the DescribeServiceUpdates method.
		DescribeServiceUpdates []struct {
			// DescribeServiceUpdatesInput is the describeServiceUpdatesInput argument value.
			DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
		}
		// DescribeServiceUpdatesPages holds details about calls to the DescribeServiceUpdatesPages method.
		DescribeServiceUpdatesPages []struct {
			// DescribeServiceUpdatesInput is the describeServiceUpdatesInput argument value.
			DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
		}
		// DescribeServiceUpdatesPagesWithContext holds details about calls to the DescribeServiceUpdatesPagesWithContext method.
		DescribeServiceUpdatesPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeServiceUpdatesInput is the describeServiceUpdatesInput argument value.
			DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeServiceUpdatesRequest holds details about calls to the DescribeServiceUpdatesRequest method.
		DescribeServiceUpdatesRequest []struct {
			// DescribeServiceUpdatesInput is the describeServiceUpdatesInput argument value.
			DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
		}
		// DescribeServiceUpdatesWithContext holds details about calls to the DescribeServiceUpdatesWithContext method.
		DescribeServiceUpdatesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeServiceUpdatesInput is the describeServiceUpdatesInput argument value.
			DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeSnapshots holds details about calls to the DescribeSnapshots method.
		DescribeSnapshots []struct {
			// DescribeSnapshotsInput is the describeSnapshotsInput argument value.
			DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
		}
		// DescribeSnapshotsPages holds details about calls to the DescribeSnapshotsPages method.
		DescribeSnapshotsPages []struct {
			// DescribeSnapshotsInput is the describeSnapshotsInput argument value.
			DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeSnapshotsOutput, bool) bool
		}
		// DescribeSnapshotsPagesWithContext holds details about calls to the DescribeSnapshotsPagesWithContext method.
		DescribeSnapshotsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeSnapshotsInput is the describeSnapshotsInput argument value.
			DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeSnapshotsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeSnapshotsRequest holds details about calls to the DescribeSnapshotsRequest method.
		DescribeSnapshotsRequest []struct {
			// DescribeSnapshotsInput is the describeSnapshotsInput argument value.
			DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
		}
		// DescribeSnapshotsWithContext holds details about calls to the DescribeSnapshotsWithContext method.
		DescribeSnapshotsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeSnapshotsInput is the describeSnapshotsInput argument value.
			DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeUpdateActions holds details about calls to the DescribeUpdateActions method.
		DescribeUpdateActions []struct {
			// DescribeUpdateActionsInput is the describeUpdateActionsInput argument value.
			DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
		}
		// DescribeUpdateActionsPages holds details about calls to the DescribeUpdateActionsPages method.
		DescribeUpdateActionsPages []struct {
			// DescribeUpdateActionsInput is the describeUpdateActionsInput argument value.
			DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeUpdateActionsOutput, bool) bool
		}
		// DescribeUpdateActionsPagesWithContext holds details about calls to the DescribeUpdateActionsPagesWithContext method.
		DescribeUpdateActionsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeUpdateActionsInput is the describeUpdateActionsInput argument value.
			DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeUpdateActionsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeUpdateActionsRequest holds details about calls to the DescribeUpdateActionsRequest method.
		DescribeUpdateActionsRequest []struct {
			// DescribeUpdateActionsInput is the describeUpdateActionsInput argument value.
			DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
		}
		// DescribeUpdateActionsWithContext holds details about calls to the DescribeUpdateActionsWithContext method.
		DescribeUpdateActionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeUpdateActionsInput is the describeUpdateActionsInput argument value.
			DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeUserGroups holds details about calls to the DescribeUserGroups method.
		DescribeUserGroups []struct {
			// DescribeUserGroupsInput is the describeUserGroupsInput argument value.
			DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
		}
		// DescribeUserGroupsPages holds details about calls to the DescribeUserGroupsPages method.
		DescribeUserGroupsPages []struct {
			// DescribeUserGroupsInput is the describeUserGroupsInput argument value.
			DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeUserGroupsOutput, bool) bool
		}
		// DescribeUserGroupsPagesWithContext holds details about calls to the DescribeUserGroupsPagesWithContext method.
		DescribeUserGroupsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeUserGroupsInput is the describeUserGroupsInput argument value.
			DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeUserGroupsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeUserGroupsRequest holds details about calls to the DescribeUserGroupsRequest method.
		DescribeUserGroupsRequest []struct {
			// DescribeUserGroupsInput is the describeUserGroupsInput argument value.
			DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
		}
		// DescribeUserGroupsWithContext holds details about calls to the DescribeUserGroupsWithContext method.
		DescribeUserGroupsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeUserGroupsInput is the describeUserGroupsInput argument value.
			DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeUsers holds details about calls to the DescribeUsers method.
		DescribeUsers []struct {
			// DescribeUsersInput is the describeUsersInput argument value.
			DescribeUsersInput *elasticache.DescribeUsersInput
		}
		// DescribeUsersPages holds details about calls to the DescribeUsersPages method.
		DescribeUsersPages []struct {
			// DescribeUsersInput is the describeUsersInput argument value.
			DescribeUsersInput *elasticache.DescribeUsersInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeUsersOutput, bool) bool
		}
		// DescribeUsersPagesWithContext holds details about calls to the DescribeUsersPagesWithContext method.
		DescribeUsersPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeUsersInput is the describeUsersInput argument value.
			DescribeUsersInput *elasticache.DescribeUsersInput
			// Fn is the fn argument value.
			Fn func(*elasticache.DescribeUsersOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeUsersRequest holds details about calls to the DescribeUsersRequest method.
		DescribeUsersRequest []struct {
			// DescribeUsersInput is the describeUsersInput argument value.
			DescribeUsersInput *elasticache.DescribeUsersInput
		}
		// DescribeUsersWithContext holds details about calls to the DescribeUsersWithContext method.
		DescribeUsersWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeUsersInput is the describeUsersInput argument value.
			DescribeUsersInput *elasticache.DescribeUsersInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DisassociateGlobalReplicationGroup holds details about calls to the DisassociateGlobalReplicationGroup method.
		DisassociateGlobalReplicationGroup []struct {
			// DisassociateGlobalReplicationGroupInput is the disassociateGlobalReplicationGroupInput argument value.
			DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
		}
		// DisassociateGlobalReplicationGroupRequest holds details about calls to the DisassociateGlobalReplicationGroupRequest method.
		DisassociateGlobalReplicationGroupRequest []struct {
			// DisassociateGlobalReplicationGroupInput is the disassociateGlobalReplicationGroupInput argument value.
			DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
		}
		// DisassociateGlobalReplicationGroupWithContext holds details about calls to the DisassociateGlobalReplicationGroupWithContext method.
		DisassociateGlobalReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DisassociateGlobalReplicationGroupInput is the disassociateGlobalReplicationGroupInput argument value.
			DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// FailoverGlobalReplicationGroup holds details about calls to the FailoverGlobalReplicationGroup method.
		FailoverGlobalReplicationGroup []struct {
			// FailoverGlobalReplicationGroupInput is the failoverGlobalReplicationGroupInput argument value.
			FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
		}
		// FailoverGlobalReplicationGroupRequest holds details about calls to the FailoverGlobalReplicationGroupRequest method.
		FailoverGlobalReplicationGroupRequest []struct {
			// FailoverGlobalReplicationGroupInput is the failoverGlobalReplicationGroupInput argument value.
			FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
		}
		// FailoverGlobalReplicationGroupWithContext holds details about calls to the FailoverGlobalReplicationGroupWithContext method.
		FailoverGlobalReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// FailoverGlobalReplicationGroupInput is the failoverGlobalReplicationGroupInput argument value.
			FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// IncreaseNodeGroupsInGlobalReplicationGroup holds details about calls to the IncreaseNodeGroupsInGlobalReplicationGroup method.
		IncreaseNodeGroupsInGlobalReplicationGroup []struct {
			// IncreaseNodeGroupsInGlobalReplicationGroupInput is the increaseNodeGroupsInGlobalReplicationGroupInput argument value.
			IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
		}
		// IncreaseNodeGroupsInGlobalReplicationGroupRequest holds details about calls to the IncreaseNodeGroupsInGlobalReplicationGroupRequest method.
		IncreaseNodeGroupsInGlobalReplicationGroupRequest []struct {
			// IncreaseNodeGroupsInGlobalReplicationGroupInput is the increaseNodeGroupsInGlobalReplicationGroupInput argument value.
			IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
		}
		// IncreaseNodeGroupsInGlobalReplicationGroupWithContext holds details about calls to the IncreaseNodeGroupsInGlobalReplicationGroupWithContext method.
		IncreaseNodeGroupsInGlobalReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// IncreaseNodeGroupsInGlobalReplicationGroupInput is the increaseNodeGroupsInGlobalReplicationGroupInput argument value.
			IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// IncreaseReplicaCount holds details about calls to the IncreaseReplicaCount method.
		IncreaseReplicaCount []struct {
			// IncreaseReplicaCountInput is the increaseReplicaCountInput argument value.
			IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
		}
		// IncreaseReplicaCountRequest holds details about calls to the IncreaseReplicaCountRequest method.
		IncreaseReplicaCountRequest []struct {
			// IncreaseReplicaCountInput is the increaseReplicaCountInput argument value.
			IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
		}
		// IncreaseReplicaCountWithContext holds details about calls to the IncreaseReplicaCountWithContext method.
		IncreaseReplicaCountWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// IncreaseReplicaCountInput is the increaseReplicaCountInput argument value.
			IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListAllowedNodeTypeModifications holds details about calls to the ListAllowedNodeTypeModifications method.
		ListAllowedNodeTypeModifications []struct {
			// ListAllowedNodeTypeModificationsInput is the listAllowedNodeTypeModificationsInput argument value.
			ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
		}
		// ListAllowedNodeTypeModificationsRequest holds details about calls to the ListAllowedNodeTypeModificationsRequest method.
		ListAllowedNodeTypeModificationsRequest []struct {
			// ListAllowedNodeTypeModificationsInput is the listAllowedNodeTypeModificationsInput argument value.
			ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
		}
		// ListAllowedNodeTypeModificationsWithContext holds details about calls to the ListAllowedNodeTypeModificationsWithContext method.
		ListAllowedNodeTypeModificationsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAllowedNodeTypeModificationsInput is the listAllowedNodeTypeModificationsInput argument value.
			ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListTagsForResource holds details about calls to the ListTagsForResource method.
		ListTagsForResource []struct {
			// ListTagsForResourceInput is the listTagsForResourceInput argument value.
			ListTagsForResourceInput *elasticache.ListTagsForResourceInput
		}
		// ListTagsForResourceRequest holds details about calls to the ListTagsForResourceRequest method.
		ListTagsForResourceRequest []struct {
			// ListTagsForResourceInput is the listTagsForResourceInput argument value.
			ListTagsForResourceInput *elasticache.ListTagsForResourceInput
		}
		// ListTagsForResourceWithContext holds details about calls to the ListTagsForResourceWithContext method.
		ListTagsForResourceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListTagsForResourceInput is the listTagsForResourceInput argument value.
			ListTagsForResourceInput *elasticache.ListTagsForResourceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyCacheCluster holds details about calls to the ModifyCacheCluster method.
		ModifyCacheCluster []struct {
			// ModifyCacheClusterInput is the modifyCacheClusterInput argument value.
			ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
		}
		// ModifyCacheClusterRequest holds details about calls to the ModifyCacheClusterRequest method.
		ModifyCacheClusterRequest []struct {
			// ModifyCacheClusterInput is the modifyCacheClusterInput argument value.
			ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
		}
		// ModifyCacheClusterWithContext holds details about calls to the ModifyCacheClusterWithContext method.
		ModifyCacheClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyCacheClusterInput is the modifyCacheClusterInput argument value.
			ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyCacheParameterGroup holds details about calls to the ModifyCacheParameterGroup method.
		ModifyCacheParameterGroup []struct {
			// ModifyCacheParameterGroupInput is the modifyCacheParameterGroupInput argument value.
			ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
		}
		// ModifyCacheParameterGroupRequest holds details about calls to the ModifyCacheParameterGroupRequest method.
		ModifyCacheParameterGroupRequest []struct {
			// ModifyCacheParameterGroupInput is the modifyCacheParameterGroupInput argument value.
			ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
		}
		// ModifyCacheParameterGroupWithContext holds details about calls to the ModifyCacheParameterGroupWithContext method.
		ModifyCacheParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyCacheParameterGroupInput is the modifyCacheParameterGroupInput argument value.
			ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyCacheSubnetGroup holds details about calls to the ModifyCacheSubnetGroup method.
		ModifyCacheSubnetGroup []struct {
			// ModifyCacheSubnetGroupInput is the modifyCacheSubnetGroupInput argument value.
			ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
		}
		// ModifyCacheSubnetGroupRequest holds details about calls to the ModifyCacheSubnetGroupRequest method.
		ModifyCacheSubnetGroupRequest []struct {
			// ModifyCacheSubnetGroupInput is the modifyCacheSubnetGroupInput argument value.
			ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
		}
		// ModifyCacheSubnetGroupWithContext holds details about calls to the ModifyCacheSubnetGroupWithContext method.
		ModifyCacheSubnetGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyCacheSubnetGroupInput is the modifyCacheSubnetGroupInput argument value.
			ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyGlobalReplicationGroup holds details about calls to the ModifyGlobalReplicationGroup method.
		ModifyGlobalReplicationGroup []struct {
			// ModifyGlobalReplicationGroupInput is the modifyGlobalReplicationGroupInput argument value.
			ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
		}
		// ModifyGlobalReplicationGroupRequest holds details about calls to the ModifyGlobalReplicationGroupRequest method.
		ModifyGlobalReplicationGroupRequest []struct {
			// ModifyGlobalReplicationGroupInput is the modifyGlobalReplicationGroupInput argument value.
			ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
		}
		// ModifyGlobalReplicationGroupWithContext holds details about calls to the ModifyGlobalReplicationGroupWithContext method.
		ModifyGlobalReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyGlobalReplicationGroupInput is the modifyGlobalReplicationGroupInput argument value.
			ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyReplicationGroup holds details about calls to the ModifyReplicationGroup method.
		ModifyReplicationGroup []struct {
			// ModifyReplicationGroupInput is the modifyReplicationGroupInput argument value.
			ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
		}
		// ModifyReplicationGroupRequest holds details about calls to the ModifyReplicationGroupRequest method.
		ModifyReplicationGroupRequest []struct {
			// ModifyReplicationGroupInput is the modifyReplicationGroupInput argument value.
			ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
		}
		// ModifyReplicationGroupShardConfiguration holds details about calls to the ModifyReplicationGroupShardConfiguration method.
		ModifyReplicationGroupShardConfiguration []struct {
			// ModifyReplicationGroupShardConfigurationInput is the modifyReplicationGroupShardConfigurationInput argument value.
			ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
		}
		// ModifyReplicationGroupShardConfigurationRequest holds details about calls to the ModifyReplicationGroupShardConfigurationRequest method.
		ModifyReplicationGroupShardConfigurationRequest []struct {
			// ModifyReplicationGroupShardConfigurationInput is the modifyReplicationGroupShardConfigurationInput argument value.
			ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
		}
		// ModifyReplicationGroupShardConfigurationWithContext holds details about calls to the ModifyReplicationGroupShardConfigurationWithContext method.
		ModifyReplicationGroupShardConfigurationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyReplicationGroupShardConfigurationInput is the modifyReplicationGroupShardConfigurationInput argument value.
			ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyReplicationGroupWithContext holds details about calls to the ModifyReplicationGroupWithContext method.
		ModifyReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyReplicationGroupInput is the modifyReplicationGroupInput argument value.
			ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyUser holds details about calls to the ModifyUser method.
		ModifyUser []struct {
			// ModifyUserInput is the modifyUserInput argument value.
			ModifyUserInput *elasticache.ModifyUserInput
		}
		// ModifyUserGroup holds details about calls to the ModifyUserGroup method.
		ModifyUserGroup []struct {
			// ModifyUserGroupInput is the modifyUserGroupInput argument value.
			ModifyUserGroupInput *elasticache.ModifyUserGroupInput
		}
		// ModifyUserGroupRequest holds details about calls to the ModifyUserGroupRequest method.
		ModifyUserGroupRequest []struct {
			// ModifyUserGroupInput is the modifyUserGroupInput argument value.
			ModifyUserGroupInput *elasticache.ModifyUserGroupInput
		}
		// ModifyUserGroupWithContext holds details about calls to the ModifyUserGroupWithContext method.
		ModifyUserGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyUserGroupInput is the modifyUserGroupInput argument value.
			ModifyUserGroupInput *elasticache.ModifyUserGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ModifyUserRequest holds details about calls to the ModifyUserRequest method.
		ModifyUserRequest []struct {
			// ModifyUserInput is the modifyUserInput argument value.
			ModifyUserInput *elasticache.ModifyUserInput
		}
		// ModifyUserWithContext holds details about calls to the ModifyUserWithContext method.
		ModifyUserWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ModifyUserInput is the modifyUserInput argument value.
			ModifyUserInput *elasticache.ModifyUserInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PurchaseReservedCacheNodesOffering holds details about calls to the PurchaseReservedCacheNodesOffering method.
		PurchaseReservedCacheNodesOffering []struct {
			// PurchaseReservedCacheNodesOfferingInput is the purchaseReservedCacheNodesOfferingInput argument value.
			PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
		}
		// PurchaseReservedCacheNodesOfferingRequest holds details about calls to the PurchaseReservedCacheNodesOfferingRequest method.
		PurchaseReservedCacheNodesOfferingRequest []struct {
			// PurchaseReservedCacheNodesOfferingInput is the purchaseReservedCacheNodesOfferingInput argument value.
			PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
		}
		// PurchaseReservedCacheNodesOfferingWithContext holds details about calls to the PurchaseReservedCacheNodesOfferingWithContext method.
		PurchaseReservedCacheNodesOfferingWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PurchaseReservedCacheNodesOfferingInput is the purchaseReservedCacheNodesOfferingInput argument value.
			PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RebalanceSlotsInGlobalReplicationGroup holds details about calls to the RebalanceSlotsInGlobalReplicationGroup method.
		RebalanceSlotsInGlobalReplicationGroup []struct {
			// RebalanceSlotsInGlobalReplicationGroupInput is the rebalanceSlotsInGlobalReplicationGroupInput argument value.
			RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
		}
		// RebalanceSlotsInGlobalReplicationGroupRequest holds details about calls to the RebalanceSlotsInGlobalReplicationGroupRequest method.
		RebalanceSlotsInGlobalReplicationGroupRequest []struct {
			// RebalanceSlotsInGlobalReplicationGroupInput is the rebalanceSlotsInGlobalReplicationGroupInput argument value.
			RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
		}
		// RebalanceSlotsInGlobalReplicationGroupWithContext holds details about calls to the RebalanceSlotsInGlobalReplicationGroupWithContext method.
		RebalanceSlotsInGlobalReplicationGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RebalanceSlotsInGlobalReplicationGroupInput is the rebalanceSlotsInGlobalReplicationGroupInput argument value.
			RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RebootCacheCluster holds details about calls to the RebootCacheCluster method.
		RebootCacheCluster []struct {
			// RebootCacheClusterInput is the rebootCacheClusterInput argument value.
			RebootCacheClusterInput *elasticache.RebootCacheClusterInput
		}
		// RebootCacheClusterRequest holds details about calls to the RebootCacheClusterRequest method.
		RebootCacheClusterRequest []struct {
			// RebootCacheClusterInput is the rebootCacheClusterInput argument value.
			RebootCacheClusterInput *elasticache.RebootCacheClusterInput
		}
		// RebootCacheClusterWithContext holds details about calls to the RebootCacheClusterWithContext method.
		RebootCacheClusterWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RebootCacheClusterInput is the rebootCacheClusterInput argument value.
			RebootCacheClusterInput *elasticache.RebootCacheClusterInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemoveTagsFromResource holds details about calls to the RemoveTagsFromResource method.
		RemoveTagsFromResource []struct {
			// RemoveTagsFromResourceInput is the removeTagsFromResourceInput argument value.
			RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
		}
		// RemoveTagsFromResourceRequest holds details about calls to the RemoveTagsFromResourceRequest method.
		RemoveTagsFromResourceRequest []struct {
			// RemoveTagsFromResourceInput is the removeTagsFromResourceInput argument value.
			RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
		}
		// RemoveTagsFromResourceWithContext holds details about calls to the RemoveTagsFromResourceWithContext method.
		RemoveTagsFromResourceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemoveTagsFromResourceInput is the removeTagsFromResourceInput argument value.
			RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ResetCacheParameterGroup holds details about calls to the ResetCacheParameterGroup method.
		ResetCacheParameterGroup []struct {
			// ResetCacheParameterGroupInput is the resetCacheParameterGroupInput argument value.
			ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
		}
		// ResetCacheParameterGroupRequest holds details about calls to the ResetCacheParameterGroupRequest method.
		ResetCacheParameterGroupRequest []struct {
			// ResetCacheParameterGroupInput is the resetCacheParameterGroupInput argument value.
			ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
		}
		// ResetCacheParameterGroupWithContext holds details about calls to the ResetCacheParameterGroupWithContext method.
		ResetCacheParameterGroupWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ResetCacheParameterGroupInput is the resetCacheParameterGroupInput argument value.
			ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RevokeCacheSecurityGroupIngress holds details about calls to the RevokeCacheSecurityGroupIngress method.
		RevokeCacheSecurityGroupIngress []struct {
			// RevokeCacheSecurityGroupIngressInput is the revokeCacheSecurityGroupIngressInput argument value.
			RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
		}
		// RevokeCacheSecurityGroupIngressRequest holds details about calls to the RevokeCacheSecurityGroupIngressRequest method.
		RevokeCacheSecurityGroupIngressRequest []struct {
			// RevokeCacheSecurityGroupIngressInput is the revokeCacheSecurityGroupIngressInput argument value.
			RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
		}
		// RevokeCacheSecurityGroupIngressWithContext holds details about calls to the RevokeCacheSecurityGroupIngressWithContext method.
		RevokeCacheSecurityGroupIngressWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RevokeCacheSecurityGroupIngressInput is the revokeCacheSecurityGroupIngressInput argument value.
			RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StartMigration holds details about calls to the StartMigration method.
		StartMigration []struct {
			// StartMigrationInput is the startMigrationInput argument value.
			StartMigrationInput *elasticache.StartMigrationInput
		}
		// StartMigrationRequest holds details about calls to the StartMigrationRequest method.
		StartMigrationRequest []struct {
			// StartMigrationInput is the startMigrationInput argument value.
			StartMigrationInput *elasticache.StartMigrationInput
		}
		// StartMigrationWithContext holds details about calls to the StartMigrationWithContext method.
		StartMigrationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StartMigrationInput is the startMigrationInput argument value.
			StartMigrationInput *elasticache.StartMigrationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// TestFailover holds details about calls to the TestFailover method.
		TestFailover []struct {
			// TestFailoverInput is the testFailoverInput argument value.
			TestFailoverInput *elasticache.TestFailoverInput
		}
		// TestFailoverRequest holds details about calls to the TestFailoverRequest method.
		TestFailoverRequest []struct {
			// TestFailoverInput is the testFailoverInput argument value.
			TestFailoverInput *elasticache.TestFailoverInput
		}
		// TestFailoverWithContext holds details about calls to the TestFailoverWithContext method.
		TestFailoverWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// TestFailoverInput is the testFailoverInput argument value.
			TestFailoverInput *elasticache.TestFailoverInput
			// Options is the options argument value.
			Options []request.Option
		}
		// WaitUntilCacheClusterAvailable holds details about calls to the WaitUntilCacheClusterAvailable method.
		WaitUntilCacheClusterAvailable []struct {
			// DescribeCacheClustersInput is the describeCacheClustersInput argument value.
			DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		}
		// WaitUntilCacheClusterAvailableWithContext holds details about calls to the WaitUntilCacheClusterAvailableWithContext method.
		WaitUntilCacheClusterAvailableWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheClustersInput is the describeCacheClustersInput argument value.
			DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilCacheClusterDeleted holds details about calls to the WaitUntilCacheClusterDeleted method.
		WaitUntilCacheClusterDeleted []struct {
			// DescribeCacheClustersInput is the describeCacheClustersInput argument value.
			DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		}
		// WaitUntilCacheClusterDeletedWithContext holds details about calls to the WaitUntilCacheClusterDeletedWithContext method.
		WaitUntilCacheClusterDeletedWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeCacheClustersInput is the describeCacheClustersInput argument value.
			DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilReplicationGroupAvailable holds details about calls to the WaitUntilReplicationGroupAvailable method.
		WaitUntilReplicationGroupAvailable []struct {
			// DescribeReplicationGroupsInput is the describeReplicationGroupsInput argument value.
			DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		}
		// WaitUntilReplicationGroupAvailableWithContext holds details about calls to the WaitUntilReplicationGroupAvailableWithContext method.
		WaitUntilReplicationGroupAvailableWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReplicationGroupsInput is the describeReplicationGroupsInput argument value.
			DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
		// WaitUntilReplicationGroupDeleted holds details about calls to the WaitUntilReplicationGroupDeleted method.
		WaitUntilReplicationGroupDeleted []struct {
			// DescribeReplicationGroupsInput is the describeReplicationGroupsInput argument value.
			DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		}
		// WaitUntilReplicationGroupDeletedWithContext holds details about calls to the WaitUntilReplicationGroupDeletedWithContext method.
		WaitUntilReplicationGroupDeletedWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeReplicationGroupsInput is the describeReplicationGroupsInput argument value.
			DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
			// WaiterOptions is the waiterOptions argument value.
			WaiterOptions []request.WaiterOption
		}
	}
	lockAddTagsToResource                                     sync.RWMutex
	lockAddTagsToResourceRequest                              sync.RWMutex
	lockAddTagsToResourceWithContext                          sync.RWMutex
	lockAuthorizeCacheSecurityGroupIngress                    sync.RWMutex
	lockAuthorizeCacheSecurityGroupIngressRequest             sync.RWMutex
	lockAuthorizeCacheSecurityGroupIngressWithContext         sync.RWMutex
	lockBatchApplyUpdateAction                                sync.RWMutex
	lockBatchApplyUpdateActionRequest                         sync.RWMutex
	lockBatchApplyUpdateActionWithContext                     sync.RWMutex
	lockBatchStopUpdateAction                                 sync.RWMutex
	lockBatchStopUpdateActionRequest                          sync.RWMutex
	lockBatchStopUpdateActionWithContext                      sync.RWMutex
	lockCompleteMigration                                     sync.RWMutex
	lockCompleteMigrationRequest                              sync.RWMutex
	lockCompleteMigrationWithContext                          sync.RWMutex
	lockCopySnapshot                                          sync.RWMutex
	lockCopySnapshotRequest                                   sync.RWMutex
	lockCopySnapshotWithContext                               sync.RWMutex
	lockCreateCacheCluster                                    sync.RWMutex
	lockCreateCacheClusterRequest                             sync.RWMutex
	lockCreateCacheClusterWithContext                         sync.RWMutex
	lockCreateCacheParameterGroup                             sync.RWMutex
	lockCreateCacheParameterGroupRequest                      sync.RWMutex
	lockCreateCacheParameterGroupWithContext                  sync.RWMutex
	lockCreateCacheSecurityGroup                              sync.RWMutex
	lockCreateCacheSecurityGroupRequest                       sync.RWMutex
	lockCreateCacheSecurityGroupWithContext                   sync.RWMutex
	lockCreateCacheSubnetGroup                                sync.RWMutex
	lockCreateCacheSubnetGroupRequest                         sync.RWMutex
	lockCreateCacheSubnetGroupWithContext                     sync.RWMutex
	lockCreateGlobalReplicationGroup                          sync.RWMutex
	lockCreateGlobalReplicationGroupRequest                   sync.RWMutex
	lockCreateGlobalReplicationGroupWithContext               sync.RWMutex
	lockCreateReplicationGroup                                sync.RWMutex
	lockCreateReplicationGroupRequest                         sync.RWMutex
	lockCreateReplicationGroupWithContext                     sync.RWMutex
	lockCreateSnapshot                                        sync.RWMutex
	lockCreateSnapshotRequest                                 sync.RWMutex
	lockCreateSnapshotWithContext                             sync.RWMutex
	lockCreateUser                                            sync.RWMutex
	lockCreateUserGroup                                       sync.RWMutex
	lockCreateUserGroupRequest                                sync.RWMutex
	lockCreateUserGroupWithContext                            sync.RWMutex
	lockCreateUserRequest                                     sync.RWMutex
	lockCreateUserWithContext                                 sync.RWMutex
	lockDecreaseNodeGroupsInGlobalReplicationGroup            sync.RWMutex
	lockDecreaseNodeGroupsInGlobalReplicationGroupRequest     sync.RWMutex
	lockDecreaseNodeGroupsInGlobalReplicationGroupWithContext sync.RWMutex
	lockDecreaseReplicaCount                                  sync.RWMutex
	lockDecreaseReplicaCountRequest                           sync.RWMutex
	lockDecreaseReplicaCountWithContext                       sync.RWMutex
	lockDeleteCacheCluster                                    sync.RWMutex
	lockDeleteCacheClusterRequest                             sync.RWMutex
	lockDeleteCacheClusterWithContext                         sync.RWMutex
	lockDeleteCacheParameterGroup                             sync.RWMutex
	lockDeleteCacheParameterGroupRequest                      sync.RWMutex
	lockDeleteCacheParameterGroupWithContext                  sync.RWMutex
	lockDeleteCacheSecurityGroup                              sync.RWMutex
	lockDeleteCacheSecurityGroupRequest                       sync.RWMutex
	lockDeleteCacheSecurityGroupWithContext                   sync.RWMutex
	lockDeleteCacheSubnetGroup                                sync.RWMutex
	lockDeleteCacheSubnetGroupRequest                         sync.RWMutex
	lockDeleteCacheSubnetGroupWithContext                     sync.RWMutex
	lockDeleteGlobalReplicationGroup                          sync.RWMutex
	lockDeleteGlobalReplicationGroupRequest                   sync.RWMutex
	lockDeleteGlobalReplicationGroupWithContext               sync.RWMutex
	lockDeleteReplicationGroup                                sync.RWMutex
	lockDeleteReplicationGroupRequest                         sync.RWMutex
	lockDeleteReplicationGroupWithContext                     sync.RWMutex
	lockDeleteSnapshot                                        sync.RWMutex
	lockDeleteSnapshotRequest                                 sync.RWMutex
	lockDeleteSnapshotWithContext                             sync.RWMutex
	lockDeleteUser                                            sync.RWMutex
	lockDeleteUserGroup                                       sync.RWMutex
	lockDeleteUserGroupRequest                                sync.RWMutex
	lockDeleteUserGroupWithContext                            sync.RWMutex
	lockDeleteUserRequest                                     sync.RWMutex
	lockDeleteUserWithContext                                 sync.RWMutex
	lockDescribeCacheClusters                                 sync.RWMutex
	lockDescribeCacheClustersPages                            sync.RWMutex
	lockDescribeCacheClustersPagesWithContext                 sync.RWMutex
	lockDescribeCacheClustersRequest                          sync.RWMutex
	lockDescribeCacheClustersWithContext                      sync.RWMutex
	lockDescribeCacheEngineVersions                           sync.RWMutex
	lockDescribeCacheEngineVersionsPages                      sync.RWMutex
	lockDescribeCacheEngineVersionsPagesWithContext           sync.RWMutex
	lockDescribeCacheEngineVersionsRequest                    sync.RWMutex
	lockDescribeCacheEngineVersionsWithContext                sync.RWMutex
	lockDescribeCacheParameterGroups                          sync.RWMutex
	lockDescribeCacheParameterGroupsPages                     sync.RWMutex
	lockDescribeCacheParameterGroupsPagesWithContext          sync.RWMutex
	lockDescribeCacheParameterGroupsRequest                   sync.RWMutex
	lockDescribeCacheParameterGroupsWithContext               sync.RWMutex
	lockDescribeCacheParameters                               sync.RWMutex
	lockDescribeCacheParametersPages                          sync.RWMutex
	lockDescribeCacheParametersPagesWithContext               sync.RWMutex
	lockDescribeCacheParametersRequest                        sync.RWMutex
	lockDescribeCacheParametersWithContext                    sync.RWMutex
	lockDescribeCacheSecurityGroups                           sync.RWMutex
	lockDescribeCacheSecurityGroupsPages                      sync.RWMutex
	lockDescribeCacheSecurityGroupsPagesWithContext           sync.RWMutex
	lockDescribeCacheSecurityGroupsRequest                    sync.RWMutex
	lockDescribeCacheSecurityGroupsWithContext                sync.RWMutex
	lockDescribeCacheSubnetGroups                             sync.RWMutex
	lockDescribeCacheSubnetGroupsPages                        sync.RWMutex
	lockDescribeCacheSubnetGroupsPagesWithContext             sync.RWMutex
	lockDescribeCacheSubnetGroupsRequest                      sync.RWMutex
	lockDescribeCacheSubnetGroupsWithContext                  sync.RWMutex
	lockDescribeEngineDefaultParameters                       sync.RWMutex
	lockDescribeEngineDefaultParametersPages                  sync.RWMutex
	lockDescribeEngineDefaultParametersPagesWithContext       sync.RWMutex
	lockDescribeEngineDefaultParametersRequest                sync.RWMutex
	lockDescribeEngineDefaultParametersWithContext            sync.RWMutex
	lockDescribeEvents                                        sync.RWMutex
	lockDescribeEventsPages                                   sync.RWMutex
	lockDescribeEventsPagesWithContext                        sync.RWMutex
	lockDescribeEventsRequest                                 sync.RWMutex
	lockDescribeEventsWithContext                             sync.RWMutex
	lockDescribeGlobalReplicationGroups                       sync.RWMutex
	lockDescribeGlobalReplicationGroupsPages                  sync.RWMutex
	lockDescribeGlobalReplicationGroupsPagesWithContext       sync.RWMutex
	lockDescribeGlobalReplicationGroupsRequest                sync.RWMutex
	lockDescribeGlobalReplicationGroupsWithContext            sync.RWMutex
	lockDescribeReplicationGroups                             sync.RWMutex
	lockDescribeReplicationGroupsPages                        sync.RWMutex
	lockDescribeReplicationGroupsPagesWithContext             sync.RWMutex
	lockDescribeReplicationGroupsRequest                      sync.RWMutex
	lockDescribeReplicationGroupsWithContext                  sync.RWMutex
	lockDescribeReservedCacheNodes                            sync.RWMutex
	lockDescribeReservedCacheNodesOfferings                   sync.RWMutex
	lockDescribeReservedCacheNodesOfferingsPages              sync.RWMutex
	lockDescribeReservedCacheNodesOfferingsPagesWithContext   sync.RWMutex
	lockDescribeReservedCacheNodesOfferingsRequest            sync.RWMutex
	lockDescribeReservedCacheNodesOfferingsWithContext        sync.RWMutex
	lockDescribeReservedCacheNodesPages                       sync.RWMutex
	lockDescribeReservedCacheNodesPagesWithContext            sync.RWMutex
	lockDescribeReservedCacheNodesRequest                     sync.RWMutex
	lockDescribeReservedCacheNodesWithContext                 sync.RWMutex
	lockDescribeServiceUpdates                                sync.RWMutex
	lockDescribeServiceUpdatesPages                           sync.RWMutex
	lockDescribeServiceUpdatesPagesWithContext                sync.RWMutex
	lockDescribeServiceUpdatesRequest                         sync.RWMutex
	lockDescribeServiceUpdatesWithContext                     sync.RWMutex
	lockDescribeSnapshots                                     sync.RWMutex
	lockDescribeSnapshotsPages                                sync.RWMutex
	lockDescribeSnapshotsPagesWithContext                     sync.RWMutex
	lockDescribeSnapshotsRequest                              sync.RWMutex
	lockDescribeSnapshotsWithContext                          sync.RWMutex
	lockDescribeUpdateActions                                 sync.RWMutex
	lockDescribeUpdateActionsPages                            sync.RWMutex
	lockDescribeUpdateActionsPagesWithContext                 sync.RWMutex
	lockDescribeUpdateActionsRequest                          sync.RWMutex
	lockDescribeUpdateActionsWithContext                      sync.RWMutex
	lockDescribeUserGroups                                    sync.RWMutex
	lockDescribeUserGroupsPages                               sync.RWMutex
	lockDescribeUserGroupsPagesWithContext                    sync.RWMutex
	lockDescribeUserGroupsRequest                             sync.RWMutex
	lockDescribeUserGroupsWithContext                         sync.RWMutex
	lockDescribeUsers                                         sync.RWMutex
	lockDescribeUsersPages                                    sync.RWMutex
	lockDescribeUsersPagesWithContext                         sync.RWMutex
	lockDescribeUsersRequest                                  sync.RWMutex
	lockDescribeUsersWithContext                              sync.RWMutex
	lockDisassociateGlobalReplicationGroup                    sync.RWMutex
	lockDisassociateGlobalReplicationGroupRequest             sync.RWMutex
	lockDisassociateGlobalReplicationGroupWithContext         sync.RWMutex
	lockFailoverGlobalReplicationGroup                        sync.RWMutex
	lockFailoverGlobalReplicationGroupRequest                 sync.RWMutex
	lockFailoverGlobalReplicationGroupWithContext             sync.RWMutex
	lockIncreaseNodeGroupsInGlobalReplicationGroup            sync.RWMutex
	lockIncreaseNodeGroupsInGlobalReplicationGroupRequest     sync.RWMutex
	lockIncreaseNodeGroupsInGlobalReplicationGroupWithContext sync.RWMutex
	lockIncreaseReplicaCount                                  sync.RWMutex
	lockIncreaseReplicaCountRequest                           sync.RWMutex
	lockIncreaseReplicaCountWithContext                       sync.RWMutex
	lockListAllowedNodeTypeModifications                      sync.RWMutex
	lockListAllowedNodeTypeModificationsRequest               sync.RWMutex
	lockListAllowedNodeTypeModificationsWithContext           sync.RWMutex
	lockListTagsForResource                                   sync.RWMutex
	lockListTagsForResourceRequest                            sync.RWMutex
	lockListTagsForResourceWithContext                        sync.RWMutex
	lockModifyCacheCluster                                    sync.RWMutex
	lockModifyCacheClusterRequest                             sync.RWMutex
	lockModifyCacheClusterWithContext                         sync.RWMutex
	lockModifyCacheParameterGroup                             sync.RWMutex
	lockModifyCacheParameterGroupRequest                      sync.RWMutex
	lockModifyCacheParameterGroupWithContext                  sync.RWMutex
	lockModifyCacheSubnetGroup                                sync.RWMutex
	lockModifyCacheSubnetGroupRequest                         sync.RWMutex
	lockModifyCacheSubnetGroupWithContext                     sync.RWMutex
	lockModifyGlobalReplicationGroup                          sync.RWMutex
	lockModifyGlobalReplicationGroupRequest                   sync.RWMutex
	lockModifyGlobalReplicationGroupWithContext               sync.RWMutex
	lockModifyReplicationGroup                                sync.RWMutex
	lockModifyReplicationGroupRequest                         sync.RWMutex
	lockModifyReplicationGroupShardConfiguration              sync.RWMutex
	lockModifyReplicationGroupShardConfigurationRequest       sync.RWMutex
	lockModifyReplicationGroupShardConfigurationWithContext   sync.RWMutex
	lockModifyReplicationGroupWithContext                     sync.RWMutex
	lockModifyUser                                            sync.RWMutex
	lockModifyUserGroup                                       sync.RWMutex
	lockModifyUserGroupRequest                                sync.RWMutex
	lockModifyUserGroupWithContext                            sync.RWMutex
	lockModifyUserRequest                                     sync.RWMutex
	lockModifyUserWithContext                                 sync.RWMutex
	lockPurchaseReservedCacheNodesOffering                    sync.RWMutex
	lockPurchaseReservedCacheNodesOfferingRequest             sync.RWMutex
	lockPurchaseReservedCacheNodesOfferingWithContext         sync.RWMutex
	lockRebalanceSlotsInGlobalReplicationGroup                sync.RWMutex
	lockRebalanceSlotsInGlobalReplicationGroupRequest         sync.RWMutex
	lockRebalanceSlotsInGlobalReplicationGroupWithContext     sync.RWMutex
	lockRebootCacheCluster                                    sync.RWMutex
	lockRebootCacheClusterRequest                             sync.RWMutex
	lockRebootCacheClusterWithContext                         sync.RWMutex
	lockRemoveTagsFromResource                                sync.RWMutex
	lockRemoveTagsFromResourceRequest                         sync.RWMutex
	lockRemoveTagsFromResourceWithContext                     sync.RWMutex
	lockResetCacheParameterGroup                              sync.RWMutex
	lockResetCacheParameterGroupRequest                       sync.RWMutex
	lockResetCacheParameterGroupWithContext                   sync.RWMutex
	lockRevokeCacheSecurityGroupIngress                       sync.RWMutex
	lockRevokeCacheSecurityGroupIngressRequest                sync.RWMutex
	lockRevokeCacheSecurityGroupIngressWithContext            sync.RWMutex
	lockStartMigration                                        sync.RWMutex
	lockStartMigrationRequest                                 sync.RWMutex
	lockStartMigrationWithContext                             sync.RWMutex
	lockTestFailover                                          sync.RWMutex
	lockTestFailoverRequest                                   sync.RWMutex
	lockTestFailoverWithContext                               sync.RWMutex
	lockWaitUntilCacheClusterAvailable                        sync.RWMutex
	lockWaitUntilCacheClusterAvailableWithContext             sync.RWMutex
	lockWaitUntilCacheClusterDeleted                          sync.RWMutex
	lockWaitUntilCacheClusterDeletedWithContext               sync.RWMutex
	lockWaitUntilReplicationGroupAvailable                    sync.RWMutex
	lockWaitUntilReplicationGroupAvailableWithContext         sync.RWMutex
	lockWaitUntilReplicationGroupDeleted                      sync.RWMutex
	lockWaitUntilReplicationGroupDeletedWithContext           sync.RWMutex
}

// AddTagsToResource calls AddTagsToResourceFunc.
func (mock *elasticacheClientMock) AddTagsToResource(addTagsToResourceInput *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error) {
	if mock.AddTagsToResourceFunc == nil {
		panic("elasticacheClientMock.AddTagsToResourceFunc: method is nil but elasticacheClient.AddTagsToResource was just called")
	}
	callInfo := struct {
		AddTagsToResourceInput *elasticache.AddTagsToResourceInput
	}{
		AddTagsToResourceInput: addTagsToResourceInput,
	}
	mock.lockAddTagsToResource.Lock()
	mock.calls.AddTagsToResource = append(mock.calls.AddTagsToResource, callInfo)
	mock.lockAddTagsToResource.Unlock()
	return mock.AddTagsToResourceFunc(addTagsToResourceInput)
}

// AddTagsToResourceCalls gets all the calls that were made to AddTagsToResource.
// Check the length with:
//     len(mockedelasticacheClient.AddTagsToResourceCalls())
func (mock *elasticacheClientMock) AddTagsToResourceCalls() []struct {
	AddTagsToResourceInput *elasticache.AddTagsToResourceInput
} {
	var calls []struct {
		AddTagsToResourceInput *elasticache.AddTagsToResourceInput
	}
	mock.lockAddTagsToResource.RLock()
	calls = mock.calls.AddTagsToResource
	mock.lockAddTagsToResource.RUnlock()
	return calls
}

// AddTagsToResourceRequest calls AddTagsToResourceRequestFunc.
func (mock *elasticacheClientMock) AddTagsToResourceRequest(addTagsToResourceInput *elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage) {
	if mock.AddTagsToResourceRequestFunc == nil {
		panic("elasticacheClientMock.AddTagsToResourceRequestFunc: method is nil but elasticacheClient.AddTagsToResourceRequest was just called")
	}
	callInfo := struct {
		AddTagsToResourceInput *elasticache.AddTagsToResourceInput
	}{
		AddTagsToResourceInput: addTagsToResourceInput,
	}
	mock.lockAddTagsToResourceRequest.Lock()
	mock.calls.AddTagsToResourceRequest = append(mock.calls.AddTagsToResourceRequest, callInfo)
	mock.lockAddTagsToResourceRequest.Unlock()
	return mock.AddTagsToResourceRequestFunc(addTagsToResourceInput)
}

// AddTagsToResourceRequestCalls gets all the calls that were made to AddTagsToResourceRequest.
// Check the length with:
//     len(mockedelasticacheClient.AddTagsToResourceRequestCalls())
func (mock *elasticacheClientMock) AddTagsToResourceRequestCalls() []struct {
	AddTagsToResourceInput *elasticache.AddTagsToResourceInput
} {
	var calls []struct {
		AddTagsToResourceInput *elasticache.AddTagsToResourceInput
	}
	mock.lockAddTagsToResourceRequest.RLock()
	calls = mock.calls.AddTagsToResourceRequest
	mock.lockAddTagsToResourceRequest.RUnlock()
	return calls
}

// AddTagsToResourceWithContext calls AddTagsToResourceWithContextFunc.
func (mock *elasticacheClientMock) AddTagsToResourceWithContext(contextMoqParam context.Context, addTagsToResourceInput *elasticache.AddTagsToResourceInput, options ...request.Option) (*elasticache.TagListMessage, error) {
	if mock.AddTagsToResourceWithContextFunc == nil {
		panic("elasticacheClientMock.AddTagsToResourceWithContextFunc: method is nil but elasticacheClient.AddTagsToResourceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		AddTagsToResourceInput *elasticache.AddTagsToResourceInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		AddTagsToResourceInput: addTagsToResourceInput,
		Options:                options,
	}
	mock.lockAddTagsToResourceWithContext.Lock()
	mock.calls.AddTagsToResourceWithContext = append(mock.calls.AddTagsToResourceWithContext, callInfo)
	mock.lockAddTagsToResourceWithContext.Unlock()
	return mock.AddTagsToResourceWithContextFunc(contextMoqParam, addTagsToResourceInput, options...)
}

// AddTagsToResourceWithContextCalls gets all the calls that were made to AddTagsToResourceWithContext.
// Check the length with:
//     len(mockedelasticacheClient.AddTagsToResourceWithContextCalls())
func (mock *elasticacheClientMock) AddTagsToResourceWithContextCalls() []struct {
	ContextMoqParam        context.Context
	AddTagsToResourceInput *elasticache.AddTagsToResourceInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		AddTagsToResourceInput *elasticache.AddTagsToResourceInput
		Options                []request.Option
	}
	mock.lockAddTagsToResourceWithContext.RLock()
	calls = mock.calls.AddTagsToResourceWithContext
	mock.lockAddTagsToResourceWithContext.RUnlock()
	return calls
}

// AuthorizeCacheSecurityGroupIngress calls AuthorizeCacheSecurityGroupIngressFunc.
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngress(authorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	if mock.AuthorizeCacheSecurityGroupIngressFunc == nil {
		panic("elasticacheClientMock.AuthorizeCacheSecurityGroupIngressFunc: method is nil but elasticacheClient.AuthorizeCacheSecurityGroupIngress was just called")
	}
	callInfo := struct {
		AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}{
		AuthorizeCacheSecurityGroupIngressInput: authorizeCacheSecurityGroupIngressInput,
	}
	mock.lockAuthorizeCacheSecurityGroupIngress.Lock()
	mock.calls.AuthorizeCacheSecurityGroupIngress = append(mock.calls.AuthorizeCacheSecurityGroupIngress, callInfo)
	mock.lockAuthorizeCacheSecurityGroupIngress.Unlock()
	return mock.AuthorizeCacheSecurityGroupIngressFunc(authorizeCacheSecurityGroupIngressInput)
}

// AuthorizeCacheSecurityGroupIngressCalls gets all the calls that were made to AuthorizeCacheSecurityGroupIngress.
// Check the length with:
//     len(mockedelasticacheClient.AuthorizeCacheSecurityGroupIngressCalls())
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngressCalls() []struct {
	AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
} {
	var calls []struct {
		AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}
	mock.lockAuthorizeCacheSecurityGroupIngress.RLock()
	calls = mock.calls.AuthorizeCacheSecurityGroupIngress
	mock.lockAuthorizeCacheSecurityGroupIngress.RUnlock()
	return calls
}

// AuthorizeCacheSecurityGroupIngressRequest calls AuthorizeCacheSecurityGroupIngressRequestFunc.
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngressRequest(authorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
	if mock.AuthorizeCacheSecurityGroupIngressRequestFunc == nil {
		panic("elasticacheClientMock.AuthorizeCacheSecurityGroupIngressRequestFunc: method is nil but elasticacheClient.AuthorizeCacheSecurityGroupIngressRequest was just called")
	}
	callInfo := struct {
		AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}{
		AuthorizeCacheSecurityGroupIngressInput: authorizeCacheSecurityGroupIngressInput,
	}
	mock.lockAuthorizeCacheSecurityGroupIngressRequest.Lock()
	mock.calls.AuthorizeCacheSecurityGroupIngressRequest = append(mock.calls.AuthorizeCacheSecurityGroupIngressRequest, callInfo)
	mock.lockAuthorizeCacheSecurityGroupIngressRequest.Unlock()
	return mock.AuthorizeCacheSecurityGroupIngressRequestFunc(authorizeCacheSecurityGroupIngressInput)
}

// AuthorizeCacheSecurityGroupIngressRequestCalls gets all the calls that were made to AuthorizeCacheSecurityGroupIngressRequest.
// Check the length with:
//     len(mockedelasticacheClient.AuthorizeCacheSecurityGroupIngressRequestCalls())
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngressRequestCalls() []struct {
	AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
} {
	var calls []struct {
		AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}
	mock.lockAuthorizeCacheSecurityGroupIngressRequest.RLock()
	calls = mock.calls.AuthorizeCacheSecurityGroupIngressRequest
	mock.lockAuthorizeCacheSecurityGroupIngressRequest.RUnlock()
	return calls
}

// AuthorizeCacheSecurityGroupIngressWithContext calls AuthorizeCacheSecurityGroupIngressWithContextFunc.
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngressWithContext(contextMoqParam context.Context, authorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput, options ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	if mock.AuthorizeCacheSecurityGroupIngressWithContextFunc == nil {
		panic("elasticacheClientMock.AuthorizeCacheSecurityGroupIngressWithContextFunc: method is nil but elasticacheClient.AuthorizeCacheSecurityGroupIngressWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		AuthorizeCacheSecurityGroupIngressInput: authorizeCacheSecurityGroupIngressInput,
		Options:                                 options,
	}
	mock.lockAuthorizeCacheSecurityGroupIngressWithContext.Lock()
	mock.calls.AuthorizeCacheSecurityGroupIngressWithContext = append(mock.calls.AuthorizeCacheSecurityGroupIngressWithContext, callInfo)
	mock.lockAuthorizeCacheSecurityGroupIngressWithContext.Unlock()
	return mock.AuthorizeCacheSecurityGroupIngressWithContextFunc(contextMoqParam, authorizeCacheSecurityGroupIngressInput, options...)
}

// AuthorizeCacheSecurityGroupIngressWithContextCalls gets all the calls that were made to AuthorizeCacheSecurityGroupIngressWithContext.
// Check the length with:
//     len(mockedelasticacheClient.AuthorizeCacheSecurityGroupIngressWithContextCalls())
func (mock *elasticacheClientMock) AuthorizeCacheSecurityGroupIngressWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		AuthorizeCacheSecurityGroupIngressInput *elasticache.AuthorizeCacheSecurityGroupIngressInput
		Options                                 []request.Option
	}
	mock.lockAuthorizeCacheSecurityGroupIngressWithContext.RLock()
	calls = mock.calls.AuthorizeCacheSecurityGroupIngressWithContext
	mock.lockAuthorizeCacheSecurityGroupIngressWithContext.RUnlock()
	return calls
}

// BatchApplyUpdateAction calls BatchApplyUpdateActionFunc.
func (mock *elasticacheClientMock) BatchApplyUpdateAction(batchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput) (*elasticache.BatchApplyUpdateActionOutput, error) {
	if mock.BatchApplyUpdateActionFunc == nil {
		panic("elasticacheClientMock.BatchApplyUpdateActionFunc: method is nil but elasticacheClient.BatchApplyUpdateAction was just called")
	}
	callInfo := struct {
		BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
	}{
		BatchApplyUpdateActionInput: batchApplyUpdateActionInput,
	}
	mock.lockBatchApplyUpdateAction.Lock()
	mock.calls.BatchApplyUpdateAction = append(mock.calls.BatchApplyUpdateAction, callInfo)
	mock.lockBatchApplyUpdateAction.Unlock()
	return mock.BatchApplyUpdateActionFunc(batchApplyUpdateActionInput)
}

// BatchApplyUpdateActionCalls gets all the calls that were made to BatchApplyUpdateAction.
// Check the length with:
//     len(mockedelasticacheClient.BatchApplyUpdateActionCalls())
func (mock *elasticacheClientMock) BatchApplyUpdateActionCalls() []struct {
	BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
} {
	var calls []struct {
		BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
	}
	mock.lockBatchApplyUpdateAction.RLock()
	calls = mock.calls.BatchApplyUpdateAction
	mock.lockBatchApplyUpdateAction.RUnlock()
	return calls
}

// BatchApplyUpdateActionRequest calls BatchApplyUpdateActionRequestFunc.
func (mock *elasticacheClientMock) BatchApplyUpdateActionRequest(batchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput) (*request.Request, *elasticache.BatchApplyUpdateActionOutput) {
	if mock.BatchApplyUpdateActionRequestFunc == nil {
		panic("elasticacheClientMock.BatchApplyUpdateActionRequestFunc: method is nil but elasticacheClient.BatchApplyUpdateActionRequest was just called")
	}
	callInfo := struct {
		BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
	}{
		BatchApplyUpdateActionInput: batchApplyUpdateActionInput,
	}
	mock.lockBatchApplyUpdateActionRequest.Lock()
	mock.calls.BatchApplyUpdateActionRequest = append(mock.calls.BatchApplyUpdateActionRequest, callInfo)
	mock.lockBatchApplyUpdateActionRequest.Unlock()
	return mock.BatchApplyUpdateActionRequestFunc(batchApplyUpdateActionInput)
}

// BatchApplyUpdateActionRequestCalls gets all the calls that were made to BatchApplyUpdateActionRequest.
// Check the length with:
//     len(mockedelasticacheClient.BatchApplyUpdateActionRequestCalls())
func (mock *elasticacheClientMock) BatchApplyUpdateActionRequestCalls() []struct {
	BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
} {
	var calls []struct {
		BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
	}
	mock.lockBatchApplyUpdateActionRequest.RLock()
	calls = mock.calls.BatchApplyUpdateActionRequest
	mock.lockBatchApplyUpdateActionRequest.RUnlock()
	return calls
}

// BatchApplyUpdateActionWithContext calls BatchApplyUpdateActionWithContextFunc.
func (mock *elasticacheClientMock) BatchApplyUpdateActionWithContext(contextMoqParam context.Context, batchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput, options ...request.Option) (*elasticache.BatchApplyUpdateActionOutput, error) {
	if mock.BatchApplyUpdateActionWithContextFunc == nil {
		panic("elasticacheClientMock.BatchApplyUpdateActionWithContextFunc: method is nil but elasticacheClient.BatchApplyUpdateActionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		BatchApplyUpdateActionInput: batchApplyUpdateActionInput,
		Options:                     options,
	}
	mock.lockBatchApplyUpdateActionWithContext.Lock()
	mock.calls.BatchApplyUpdateActionWithContext = append(mock.calls.BatchApplyUpdateActionWithContext, callInfo)
	mock.lockBatchApplyUpdateActionWithContext.Unlock()
	return mock.BatchApplyUpdateActionWithContextFunc(contextMoqParam, batchApplyUpdateActionInput, options...)
}

// BatchApplyUpdateActionWithContextCalls gets all the calls that were made to BatchApplyUpdateActionWithContext.
// Check the length with:
//     len(mockedelasticacheClient.BatchApplyUpdateActionWithContextCalls())
func (mock *elasticacheClientMock) BatchApplyUpdateActionWithContextCalls() []struct {
	ContextMoqParam             context.Context
	BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		BatchApplyUpdateActionInput *elasticache.BatchApplyUpdateActionInput
		Options                     []request.Option
	}
	mock.lockBatchApplyUpdateActionWithContext.RLock()
	calls = mock.calls.BatchApplyUpdateActionWithContext
	mock.lockBatchApplyUpdateActionWithContext.RUnlock()
	return calls
}

// BatchStopUpdateAction calls BatchStopUpdateActionFunc.
func (mock *elasticacheClientMock) BatchStopUpdateAction(batchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput) (*elasticache.BatchStopUpdateActionOutput, error) {
	if mock.BatchStopUpdateActionFunc == nil {
		panic("elasticacheClientMock.BatchStopUpdateActionFunc: method is nil but elasticacheClient.BatchStopUpdateAction was just called")
	}
	callInfo := struct {
		BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
	}{
		BatchStopUpdateActionInput: batchStopUpdateActionInput,
	}
	mock.lockBatchStopUpdateAction.Lock()
	mock.calls.BatchStopUpdateAction = append(mock.calls.BatchStopUpdateAction, callInfo)
	mock.lockBatchStopUpdateAction.Unlock()
	return mock.BatchStopUpdateActionFunc(batchStopUpdateActionInput)
}

// BatchStopUpdateActionCalls gets all the calls that were made to BatchStopUpdateAction.
// Check the length with:
//     len(mockedelasticacheClient.BatchStopUpdateActionCalls())
func (mock *elasticacheClientMock) BatchStopUpdateActionCalls() []struct {
	BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
} {
	var calls []struct {
		BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
	}
	mock.lockBatchStopUpdateAction.RLock()
	calls = mock.calls.BatchStopUpdateAction
	mock.lockBatchStopUpdateAction.RUnlock()
	return calls
}

// BatchStopUpdateActionRequest calls BatchStopUpdateActionRequestFunc.
func (mock *elasticacheClientMock) BatchStopUpdateActionRequest(batchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput) (*request.Request, *elasticache.BatchStopUpdateActionOutput) {
	if mock.BatchStopUpdateActionRequestFunc == nil {
		panic("elasticacheClientMock.BatchStopUpdateActionRequestFunc: method is nil but elasticacheClient.BatchStopUpdateActionRequest was just called")
	}
	callInfo := struct {
		BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
	}{
		BatchStopUpdateActionInput: batchStopUpdateActionInput,
	}
	mock.lockBatchStopUpdateActionRequest.Lock()
	mock.calls.BatchStopUpdateActionRequest = append(mock.calls.BatchStopUpdateActionRequest, callInfo)
	mock.lockBatchStopUpdateActionRequest.Unlock()
	return mock.BatchStopUpdateActionRequestFunc(batchStopUpdateActionInput)
}

// BatchStopUpdateActionRequestCalls gets all the calls that were made to BatchStopUpdateActionRequest.
// Check the length with:
//     len(mockedelasticacheClient.BatchStopUpdateActionRequestCalls())
func (mock *elasticacheClientMock) BatchStopUpdateActionRequestCalls() []struct {
	BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
} {
	var calls []struct {
		BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
	}
	mock.lockBatchStopUpdateActionRequest.RLock()
	calls = mock.calls.BatchStopUpdateActionRequest
	mock.lockBatchStopUpdateActionRequest.RUnlock()
	return calls
}

// BatchStopUpdateActionWithContext calls BatchStopUpdateActionWithContextFunc.
func (mock *elasticacheClientMock) BatchStopUpdateActionWithContext(contextMoqParam context.Context, batchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput, options ...request.Option) (*elasticache.BatchStopUpdateActionOutput, error) {
	if mock.BatchStopUpdateActionWithContextFunc == nil {
		panic("elasticacheClientMock.BatchStopUpdateActionWithContextFunc: method is nil but elasticacheClient.BatchStopUpdateActionWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		BatchStopUpdateActionInput: batchStopUpdateActionInput,
		Options:                    options,
	}
	mock.lockBatchStopUpdateActionWithContext.Lock()
	mock.calls.BatchStopUpdateActionWithContext = append(mock.calls.BatchStopUpdateActionWithContext, callInfo)
	mock.lockBatchStopUpdateActionWithContext.Unlock()
	return mock.BatchStopUpdateActionWithContextFunc(contextMoqParam, batchStopUpdateActionInput, options...)
}

// BatchStopUpdateActionWithContextCalls gets all the calls that were made to BatchStopUpdateActionWithContext.
// Check the length with:
//     len(mockedelasticacheClient.BatchStopUpdateActionWithContextCalls())
func (mock *elasticacheClientMock) BatchStopUpdateActionWithContextCalls() []struct {
	ContextMoqParam            context.Context
	BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		BatchStopUpdateActionInput *elasticache.BatchStopUpdateActionInput
		Options                    []request.Option
	}
	mock.lockBatchStopUpdateActionWithContext.RLock()
	calls = mock.calls.BatchStopUpdateActionWithContext
	mock.lockBatchStopUpdateActionWithContext.RUnlock()
	return calls
}

// CompleteMigration calls CompleteMigrationFunc.
func (mock *elasticacheClientMock) CompleteMigration(completeMigrationInput *elasticache.CompleteMigrationInput) (*elasticache.CompleteMigrationOutput, error) {
	if mock.CompleteMigrationFunc == nil {
		panic("elasticacheClientMock.CompleteMigrationFunc: method is nil but elasticacheClient.CompleteMigration was just called")
	}
	callInfo := struct {
		CompleteMigrationInput *elasticache.CompleteMigrationInput
	}{
		CompleteMigrationInput: completeMigrationInput,
	}
	mock.lockCompleteMigration.Lock()
	mock.calls.CompleteMigration = append(mock.calls.CompleteMigration, callInfo)
	mock.lockCompleteMigration.Unlock()
	return mock.CompleteMigrationFunc(completeMigrationInput)
}

// CompleteMigrationCalls gets all the calls that were made to CompleteMigration.
// Check the length with:
//     len(mockedelasticacheClient.CompleteMigrationCalls())
func (mock *elasticacheClientMock) CompleteMigrationCalls() []struct {
	CompleteMigrationInput *elasticache.CompleteMigrationInput
} {
	var calls []struct {
		CompleteMigrationInput *elasticache.CompleteMigrationInput
	}
	mock.lockCompleteMigration.RLock()
	calls = mock.calls.CompleteMigration
	mock.lockCompleteMigration.RUnlock()
	return calls
}

// CompleteMigrationRequest calls CompleteMigrationRequestFunc.
func (mock *elasticacheClientMock) CompleteMigrationRequest(completeMigrationInput *elasticache.CompleteMigrationInput) (*request.Request, *elasticache.CompleteMigrationOutput) {
	if mock.CompleteMigrationRequestFunc == nil {
		panic("elasticacheClientMock.CompleteMigrationRequestFunc: method is nil but elasticacheClient.CompleteMigrationRequest was just called")
	}
	callInfo := struct {
		CompleteMigrationInput *elasticache.CompleteMigrationInput
	}{
		CompleteMigrationInput: completeMigrationInput,
	}
	mock.lockCompleteMigrationRequest.Lock()
	mock.calls.CompleteMigrationRequest = append(mock.calls.CompleteMigrationRequest, callInfo)
	mock.lockCompleteMigrationRequest.Unlock()
	return mock.CompleteMigrationRequestFunc(completeMigrationInput)
}

// CompleteMigrationRequestCalls gets all the calls that were made to CompleteMigrationRequest.
// Check the length with:
//     len(mockedelasticacheClient.CompleteMigrationRequestCalls())
func (mock *elasticacheClientMock) CompleteMigrationRequestCalls() []struct {
	CompleteMigrationInput *elasticache.CompleteMigrationInput
} {
	var calls []struct {
		CompleteMigrationInput *elasticache.CompleteMigrationInput
	}
	mock.lockCompleteMigrationRequest.RLock()
	calls = mock.calls.CompleteMigrationRequest
	mock.lockCompleteMigrationRequest.RUnlock()
	return calls
}

// CompleteMigrationWithContext calls CompleteMigrationWithContextFunc.
func (mock *elasticacheClientMock) CompleteMigrationWithContext(contextMoqParam context.Context, completeMigrationInput *elasticache.CompleteMigrationInput, options ...request.Option) (*elasticache.CompleteMigrationOutput, error) {
	if mock.CompleteMigrationWithContextFunc == nil {
		panic("elasticacheClientMock.CompleteMigrationWithContextFunc: method is nil but elasticacheClient.CompleteMigrationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		CompleteMigrationInput *elasticache.CompleteMigrationInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		CompleteMigrationInput: completeMigrationInput,
		Options:                options,
	}
	mock.lockCompleteMigrationWithContext.Lock()
	mock.calls.CompleteMigrationWithContext = append(mock.calls.CompleteMigrationWithContext, callInfo)
	mock.lockCompleteMigrationWithContext.Unlock()
	return mock.CompleteMigrationWithContextFunc(contextMoqParam, completeMigrationInput, options...)
}

// CompleteMigrationWithContextCalls gets all the calls that were made to CompleteMigrationWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CompleteMigrationWithContextCalls())
func (mock *elasticacheClientMock) CompleteMigrationWithContextCalls() []struct {
	ContextMoqParam        context.Context
	CompleteMigrationInput *elasticache.CompleteMigrationInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		CompleteMigrationInput *elasticache.CompleteMigrationInput
		Options                []request.Option
	}
	mock.lockCompleteMigrationWithContext.RLock()
	calls = mock.calls.CompleteMigrationWithContext
	mock.lockCompleteMigrationWithContext.RUnlock()
	return calls
}

// CopySnapshot calls CopySnapshotFunc.
func (mock *elasticacheClientMock) CopySnapshot(copySnapshotInput *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error) {
	if mock.CopySnapshotFunc == nil {
		panic("elasticacheClientMock.CopySnapshotFunc: method is nil but elasticacheClient.CopySnapshot was just called")
	}
	callInfo := struct {
		CopySnapshotInput *elasticache.CopySnapshotInput
	}{
		CopySnapshotInput: copySnapshotInput,
	}
	mock.lockCopySnapshot.Lock()
	mock.calls.CopySnapshot = append(mock.calls.CopySnapshot, callInfo)
	mock.lockCopySnapshot.Unlock()
	return mock.CopySnapshotFunc(copySnapshotInput)
}

// CopySnapshotCalls gets all the calls that were made to CopySnapshot.
// Check the length with:
//     len(mockedelasticacheClient.CopySnapshotCalls())
func (mock *elasticacheClientMock) CopySnapshotCalls() []struct {
	CopySnapshotInput *elasticache.CopySnapshotInput
} {
	var calls []struct {
		CopySnapshotInput *elasticache.CopySnapshotInput
	}
	mock.lockCopySnapshot.RLock()
	calls = mock.calls.CopySnapshot
	mock.lockCopySnapshot.RUnlock()
	return calls
}

// CopySnapshotRequest calls CopySnapshotRequestFunc.
func (mock *elasticacheClientMock) CopySnapshotRequest(copySnapshotInput *elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput) {
	if mock.CopySnapshotRequestFunc == nil {
		panic("elasticacheClientMock.CopySnapshotRequestFunc: method is nil but elasticacheClient.CopySnapshotRequest was just called")
	}
	callInfo := struct {
		CopySnapshotInput *elasticache.CopySnapshotInput
	}{
		CopySnapshotInput: copySnapshotInput,
	}
	mock.lockCopySnapshotRequest.Lock()
	mock.calls.CopySnapshotRequest = append(mock.calls.CopySnapshotRequest, callInfo)
	mock.lockCopySnapshotRequest.Unlock()
	return mock.CopySnapshotRequestFunc(copySnapshotInput)
}

// CopySnapshotRequestCalls gets all the calls that were made to CopySnapshotRequest.
// Check the length with:
//     len(mockedelasticacheClient.CopySnapshotRequestCalls())
func (mock *elasticacheClientMock) CopySnapshotRequestCalls() []struct {
	CopySnapshotInput *elasticache.CopySnapshotInput
} {
	var calls []struct {
		CopySnapshotInput *elasticache.CopySnapshotInput
	}
	mock.lockCopySnapshotRequest.RLock()
	calls = mock.calls.CopySnapshotRequest
	mock.lockCopySnapshotRequest.RUnlock()
	return calls
}

// CopySnapshotWithContext calls CopySnapshotWithContextFunc.
func (mock *elasticacheClientMock) CopySnapshotWithContext(contextMoqParam context.Context, copySnapshotInput *elasticache.CopySnapshotInput, options ...request.Option) (*elasticache.CopySnapshotOutput, error) {
	if mock.CopySnapshotWithContextFunc == nil {
		panic("elasticacheClientMock.CopySnapshotWithContextFunc: method is nil but elasticacheClient.CopySnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		CopySnapshotInput *elasticache.CopySnapshotInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		CopySnapshotInput: copySnapshotInput,
		Options:           options,
	}
	mock.lockCopySnapshotWithContext.Lock()
	mock.calls.CopySnapshotWithContext = append(mock.calls.CopySnapshotWithContext, callInfo)
	mock.lockCopySnapshotWithContext.Unlock()
	return mock.CopySnapshotWithContextFunc(contextMoqParam, copySnapshotInput, options...)
}

// CopySnapshotWithContextCalls gets all the calls that were made to CopySnapshotWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CopySnapshotWithContextCalls())
func (mock *elasticacheClientMock) CopySnapshotWithContextCalls() []struct {
	ContextMoqParam   context.Context
	CopySnapshotInput *elasticache.CopySnapshotInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		CopySnapshotInput *elasticache.CopySnapshotInput
		Options           []request.Option
	}
	mock.lockCopySnapshotWithContext.RLock()
	calls = mock.calls.CopySnapshotWithContext
	mock.lockCopySnapshotWithContext.RUnlock()
	return calls
}

// CreateCacheCluster calls CreateCacheClusterFunc.
func (mock *elasticacheClientMock) CreateCacheCluster(createCacheClusterInput *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error) {
	if mock.CreateCacheClusterFunc == nil {
		panic("elasticacheClientMock.CreateCacheClusterFunc: method is nil but elasticacheClient.CreateCacheCluster was just called")
	}
	callInfo := struct {
		CreateCacheClusterInput *elasticache.CreateCacheClusterInput
	}{
		CreateCacheClusterInput: createCacheClusterInput,
	}
	mock.lockCreateCacheCluster.Lock()
	mock.calls.CreateCacheCluster = append(mock.calls.CreateCacheCluster, callInfo)
	mock.lockCreateCacheCluster.Unlock()
	return mock.CreateCacheClusterFunc(createCacheClusterInput)
}

// CreateCacheClusterCalls gets all the calls that were made to CreateCacheCluster.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheClusterCalls())
func (mock *elasticacheClientMock) CreateCacheClusterCalls() []struct {
	CreateCacheClusterInput *elasticache.CreateCacheClusterInput
} {
	var calls []struct {
		CreateCacheClusterInput *elasticache.CreateCacheClusterInput
	}
	mock.lockCreateCacheCluster.RLock()
	calls = mock.calls.CreateCacheCluster
	mock.lockCreateCacheCluster.RUnlock()
	return calls
}

// CreateCacheClusterRequest calls CreateCacheClusterRequestFunc.
func (mock *elasticacheClientMock) CreateCacheClusterRequest(createCacheClusterInput *elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput) {
	if mock.CreateCacheClusterRequestFunc == nil {
		panic("elasticacheClientMock.CreateCacheClusterRequestFunc: method is nil but elasticacheClient.CreateCacheClusterRequest was just called")
	}
	callInfo := struct {
		CreateCacheClusterInput *elasticache.CreateCacheClusterInput
	}{
		CreateCacheClusterInput: createCacheClusterInput,
	}
	mock.lockCreateCacheClusterRequest.Lock()
	mock.calls.CreateCacheClusterRequest = append(mock.calls.CreateCacheClusterRequest, callInfo)
	mock.lockCreateCacheClusterRequest.Unlock()
	return mock.CreateCacheClusterRequestFunc(createCacheClusterInput)
}

// CreateCacheClusterRequestCalls gets all the calls that were made to CreateCacheClusterRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheClusterRequestCalls())
func (mock *elasticacheClientMock) CreateCacheClusterRequestCalls() []struct {
	CreateCacheClusterInput *elasticache.CreateCacheClusterInput
} {
	var calls []struct {
		CreateCacheClusterInput *elasticache.CreateCacheClusterInput
	}
	mock.lockCreateCacheClusterRequest.RLock()
	calls = mock.calls.CreateCacheClusterRequest
	mock.lockCreateCacheClusterRequest.RUnlock()
	return calls
}

// CreateCacheClusterWithContext calls CreateCacheClusterWithContextFunc.
func (mock *elasticacheClientMock) CreateCacheClusterWithContext(contextMoqParam context.Context, createCacheClusterInput *elasticache.CreateCacheClusterInput, options ...request.Option) (*elasticache.CreateCacheClusterOutput, error) {
	if mock.CreateCacheClusterWithContextFunc == nil {
		panic("elasticacheClientMock.CreateCacheClusterWithContextFunc: method is nil but elasticacheClient.CreateCacheClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		CreateCacheClusterInput *elasticache.CreateCacheClusterInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		CreateCacheClusterInput: createCacheClusterInput,
		Options:                 options,
	}
	mock.lockCreateCacheClusterWithContext.Lock()
	mock.calls.CreateCacheClusterWithContext = append(mock.calls.CreateCacheClusterWithContext, callInfo)
	mock.lockCreateCacheClusterWithContext.Unlock()
	return mock.CreateCacheClusterWithContextFunc(contextMoqParam, createCacheClusterInput, options...)
}

// CreateCacheClusterWithContextCalls gets all the calls that were made to CreateCacheClusterWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheClusterWithContextCalls())
func (mock *elasticacheClientMock) CreateCacheClusterWithContextCalls() []struct {
	ContextMoqParam         context.Context
	CreateCacheClusterInput *elasticache.CreateCacheClusterInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		CreateCacheClusterInput *elasticache.CreateCacheClusterInput
		Options                 []request.Option
	}
	mock.lockCreateCacheClusterWithContext.RLock()
	calls = mock.calls.CreateCacheClusterWithContext
	mock.lockCreateCacheClusterWithContext.RUnlock()
	return calls
}

// CreateCacheParameterGroup calls CreateCacheParameterGroupFunc.
func (mock *elasticacheClientMock) CreateCacheParameterGroup(createCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error) {
	if mock.CreateCacheParameterGroupFunc == nil {
		panic("elasticacheClientMock.CreateCacheParameterGroupFunc: method is nil but elasticacheClient.CreateCacheParameterGroup was just called")
	}
	callInfo := struct {
		CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
	}{
		CreateCacheParameterGroupInput: createCacheParameterGroupInput,
	}
	mock.lockCreateCacheParameterGroup.Lock()
	mock.calls.CreateCacheParameterGroup = append(mock.calls.CreateCacheParameterGroup, callInfo)
	mock.lockCreateCacheParameterGroup.Unlock()
	return mock.CreateCacheParameterGroupFunc(createCacheParameterGroupInput)
}

// CreateCacheParameterGroupCalls gets all the calls that were made to CreateCacheParameterGroup.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheParameterGroupCalls())
func (mock *elasticacheClientMock) CreateCacheParameterGroupCalls() []struct {
	CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
} {
	var calls []struct {
		CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
	}
	mock.lockCreateCacheParameterGroup.RLock()
	calls = mock.calls.CreateCacheParameterGroup
	mock.lockCreateCacheParameterGroup.RUnlock()
	return calls
}

// CreateCacheParameterGroupRequest calls CreateCacheParameterGroupRequestFunc.
func (mock *elasticacheClientMock) CreateCacheParameterGroupRequest(createCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput) {
	if mock.CreateCacheParameterGroupRequestFunc == nil {
		panic("elasticacheClientMock.CreateCacheParameterGroupRequestFunc: method is nil but elasticacheClient.CreateCacheParameterGroupRequest was just called")
	}
	callInfo := struct {
		CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
	}{
		CreateCacheParameterGroupInput: createCacheParameterGroupInput,
	}
	mock.lockCreateCacheParameterGroupRequest.Lock()
	mock.calls.CreateCacheParameterGroupRequest = append(mock.calls.CreateCacheParameterGroupRequest, callInfo)
	mock.lockCreateCacheParameterGroupRequest.Unlock()
	return mock.CreateCacheParameterGroupRequestFunc(createCacheParameterGroupInput)
}

// CreateCacheParameterGroupRequestCalls gets all the calls that were made to CreateCacheParameterGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheParameterGroupRequestCalls())
func (mock *elasticacheClientMock) CreateCacheParameterGroupRequestCalls() []struct {
	CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
} {
	var calls []struct {
		CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
	}
	mock.lockCreateCacheParameterGroupRequest.RLock()
	calls = mock.calls.CreateCacheParameterGroupRequest
	mock.lockCreateCacheParameterGroupRequest.RUnlock()
	return calls
}

// CreateCacheParameterGroupWithContext calls CreateCacheParameterGroupWithContextFunc.
func (mock *elasticacheClientMock) CreateCacheParameterGroupWithContext(contextMoqParam context.Context, createCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput, options ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error) {
	if mock.CreateCacheParameterGroupWithContextFunc == nil {
		panic("elasticacheClientMock.CreateCacheParameterGroupWithContextFunc: method is nil but elasticacheClient.CreateCacheParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		CreateCacheParameterGroupInput: createCacheParameterGroupInput,
		Options:                        options,
	}
	mock.lockCreateCacheParameterGroupWithContext.Lock()
	mock.calls.CreateCacheParameterGroupWithContext = append(mock.calls.CreateCacheParameterGroupWithContext, callInfo)
	mock.lockCreateCacheParameterGroupWithContext.Unlock()
	return mock.CreateCacheParameterGroupWithContextFunc(contextMoqParam, createCacheParameterGroupInput, options...)
}

// CreateCacheParameterGroupWithContextCalls gets all the calls that were made to CreateCacheParameterGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheParameterGroupWithContextCalls())
func (mock *elasticacheClientMock) CreateCacheParameterGroupWithContextCalls() []struct {
	ContextMoqParam                context.Context
	CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		CreateCacheParameterGroupInput *elasticache.CreateCacheParameterGroupInput
		Options                        []request.Option
	}
	mock.lockCreateCacheParameterGroupWithContext.RLock()
	calls = mock.calls.CreateCacheParameterGroupWithContext
	mock.lockCreateCacheParameterGroupWithContext.RUnlock()
	return calls
}

// CreateCacheSecurityGroup calls CreateCacheSecurityGroupFunc.
func (mock *elasticacheClientMock) CreateCacheSecurityGroup(createCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	if mock.CreateCacheSecurityGroupFunc == nil {
		panic("elasticacheClientMock.CreateCacheSecurityGroupFunc: method is nil but elasticacheClient.CreateCacheSecurityGroup was just called")
	}
	callInfo := struct {
		CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
	}{
		CreateCacheSecurityGroupInput: createCacheSecurityGroupInput,
	}
	mock.lockCreateCacheSecurityGroup.Lock()
	mock.calls.CreateCacheSecurityGroup = append(mock.calls.CreateCacheSecurityGroup, callInfo)
	mock.lockCreateCacheSecurityGroup.Unlock()
	return mock.CreateCacheSecurityGroupFunc(createCacheSecurityGroupInput)
}

// CreateCacheSecurityGroupCalls gets all the calls that were made to CreateCacheSecurityGroup.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSecurityGroupCalls())
func (mock *elasticacheClientMock) CreateCacheSecurityGroupCalls() []struct {
	CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
} {
	var calls []struct {
		CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
	}
	mock.lockCreateCacheSecurityGroup.RLock()
	calls = mock.calls.CreateCacheSecurityGroup
	mock.lockCreateCacheSecurityGroup.RUnlock()
	return calls
}

// CreateCacheSecurityGroupRequest calls CreateCacheSecurityGroupRequestFunc.
func (mock *elasticacheClientMock) CreateCacheSecurityGroupRequest(createCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput) {
	if mock.CreateCacheSecurityGroupRequestFunc == nil {
		panic("elasticacheClientMock.CreateCacheSecurityGroupRequestFunc: method is nil but elasticacheClient.CreateCacheSecurityGroupRequest was just called")
	}
	callInfo := struct {
		CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
	}{
		CreateCacheSecurityGroupInput: createCacheSecurityGroupInput,
	}
	mock.lockCreateCacheSecurityGroupRequest.Lock()
	mock.calls.CreateCacheSecurityGroupRequest = append(mock.calls.CreateCacheSecurityGroupRequest, callInfo)
	mock.lockCreateCacheSecurityGroupRequest.Unlock()
	return mock.CreateCacheSecurityGroupRequestFunc(createCacheSecurityGroupInput)
}

// CreateCacheSecurityGroupRequestCalls gets all the calls that were made to CreateCacheSecurityGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSecurityGroupRequestCalls())
func (mock *elasticacheClientMock) CreateCacheSecurityGroupRequestCalls() []struct {
	CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
} {
	var calls []struct {
		CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
	}
	mock.lockCreateCacheSecurityGroupRequest.RLock()
	calls = mock.calls.CreateCacheSecurityGroupRequest
	mock.lockCreateCacheSecurityGroupRequest.RUnlock()
	return calls
}

// CreateCacheSecurityGroupWithContext calls CreateCacheSecurityGroupWithContextFunc.
func (mock *elasticacheClientMock) CreateCacheSecurityGroupWithContext(contextMoqParam context.Context, createCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput, options ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	if mock.CreateCacheSecurityGroupWithContextFunc == nil {
		panic("elasticacheClientMock.CreateCacheSecurityGroupWithContextFunc: method is nil but elasticacheClient.CreateCacheSecurityGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		CreateCacheSecurityGroupInput: createCacheSecurityGroupInput,
		Options:                       options,
	}
	mock.lockCreateCacheSecurityGroupWithContext.Lock()
	mock.calls.CreateCacheSecurityGroupWithContext = append(mock.calls.CreateCacheSecurityGroupWithContext, callInfo)
	mock.lockCreateCacheSecurityGroupWithContext.Unlock()
	return mock.CreateCacheSecurityGroupWithContextFunc(contextMoqParam, createCacheSecurityGroupInput, options...)
}

// CreateCacheSecurityGroupWithContextCalls gets all the calls that were made to CreateCacheSecurityGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSecurityGroupWithContextCalls())
func (mock *elasticacheClientMock) CreateCacheSecurityGroupWithContextCalls() []struct {
	ContextMoqParam               context.Context
	CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		CreateCacheSecurityGroupInput *elasticache.CreateCacheSecurityGroupInput
		Options                       []request.Option
	}
	mock.lockCreateCacheSecurityGroupWithContext.RLock()
	calls = mock.calls.CreateCacheSecurityGroupWithContext
	mock.lockCreateCacheSecurityGroupWithContext.RUnlock()
	return calls
}

// CreateCacheSubnetGroup calls CreateCacheSubnetGroupFunc.
func (mock *elasticacheClientMock) CreateCacheSubnetGroup(createCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	if mock.CreateCacheSubnetGroupFunc == nil {
		panic("elasticacheClientMock.CreateCacheSubnetGroupFunc: method is nil but elasticacheClient.CreateCacheSubnetGroup was just called")
	}
	callInfo := struct {
		CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
	}{
		CreateCacheSubnetGroupInput: createCacheSubnetGroupInput,
	}
	mock.lockCreateCacheSubnetGroup.Lock()
	mock.calls.CreateCacheSubnetGroup = append(mock.calls.CreateCacheSubnetGroup, callInfo)
	mock.lockCreateCacheSubnetGroup.Unlock()
	return mock.CreateCacheSubnetGroupFunc(createCacheSubnetGroupInput)
}

// CreateCacheSubnetGroupCalls gets all the calls that were made to CreateCacheSubnetGroup.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSubnetGroupCalls())
func (mock *elasticacheClientMock) CreateCacheSubnetGroupCalls() []struct {
	CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
} {
	var calls []struct {
		CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
	}
	mock.lockCreateCacheSubnetGroup.RLock()
	calls = mock.calls.CreateCacheSubnetGroup
	mock.lockCreateCacheSubnetGroup.RUnlock()
	return calls
}

// CreateCacheSubnetGroupRequest calls CreateCacheSubnetGroupRequestFunc.
func (mock *elasticacheClientMock) CreateCacheSubnetGroupRequest(createCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput) {
	if mock.CreateCacheSubnetGroupRequestFunc == nil {
		panic("elasticacheClientMock.CreateCacheSubnetGroupRequestFunc: method is nil but elasticacheClient.CreateCacheSubnetGroupRequest was just called")
	}
	callInfo := struct {
		CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
	}{
		CreateCacheSubnetGroupInput: createCacheSubnetGroupInput,
	}
	mock.lockCreateCacheSubnetGroupRequest.Lock()
	mock.calls.CreateCacheSubnetGroupRequest = append(mock.calls.CreateCacheSubnetGroupRequest, callInfo)
	mock.lockCreateCacheSubnetGroupRequest.Unlock()
	return mock.CreateCacheSubnetGroupRequestFunc(createCacheSubnetGroupInput)
}

// CreateCacheSubnetGroupRequestCalls gets all the calls that were made to CreateCacheSubnetGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSubnetGroupRequestCalls())
func (mock *elasticacheClientMock) CreateCacheSubnetGroupRequestCalls() []struct {
	CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
} {
	var calls []struct {
		CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
	}
	mock.lockCreateCacheSubnetGroupRequest.RLock()
	calls = mock.calls.CreateCacheSubnetGroupRequest
	mock.lockCreateCacheSubnetGroupRequest.RUnlock()
	return calls
}

// CreateCacheSubnetGroupWithContext calls CreateCacheSubnetGroupWithContextFunc.
func (mock *elasticacheClientMock) CreateCacheSubnetGroupWithContext(contextMoqParam context.Context, createCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput, options ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	if mock.CreateCacheSubnetGroupWithContextFunc == nil {
		panic("elasticacheClientMock.CreateCacheSubnetGroupWithContextFunc: method is nil but elasticacheClient.CreateCacheSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		CreateCacheSubnetGroupInput: createCacheSubnetGroupInput,
		Options:                     options,
	}
	mock.lockCreateCacheSubnetGroupWithContext.Lock()
	mock.calls.CreateCacheSubnetGroupWithContext = append(mock.calls.CreateCacheSubnetGroupWithContext, callInfo)
	mock.lockCreateCacheSubnetGroupWithContext.Unlock()
	return mock.CreateCacheSubnetGroupWithContextFunc(contextMoqParam, createCacheSubnetGroupInput, options...)
}

// CreateCacheSubnetGroupWithContextCalls gets all the calls that were made to CreateCacheSubnetGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateCacheSubnetGroupWithContextCalls())
func (mock *elasticacheClientMock) CreateCacheSubnetGroupWithContextCalls() []struct {
	ContextMoqParam             context.Context
	CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		CreateCacheSubnetGroupInput *elasticache.CreateCacheSubnetGroupInput
		Options                     []request.Option
	}
	mock.lockCreateCacheSubnetGroupWithContext.RLock()
	calls = mock.calls.CreateCacheSubnetGroupWithContext
	mock.lockCreateCacheSubnetGroupWithContext.RUnlock()
	return calls
}

// CreateGlobalReplicationGroup calls CreateGlobalReplicationGroupFunc.
func (mock *elasticacheClientMock) CreateGlobalReplicationGroup(createGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
	if mock.CreateGlobalReplicationGroupFunc == nil {
		panic("elasticacheClientMock.CreateGlobalReplicationGroupFunc: method is nil but elasticacheClient.CreateGlobalReplicationGroup was just called")
	}
	callInfo := struct {
		CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
	}{
		CreateGlobalReplicationGroupInput: createGlobalReplicationGroupInput,
	}
	mock.lockCreateGlobalReplicationGroup.Lock()
	mock.calls.CreateGlobalReplicationGroup = append(mock.calls.CreateGlobalReplicationGroup, callInfo)
	mock.lockCreateGlobalReplicationGroup.Unlock()
	return mock.CreateGlobalReplicationGroupFunc(createGlobalReplicationGroupInput)
}

// CreateGlobalReplicationGroupCalls gets all the calls that were made to CreateGlobalReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.CreateGlobalReplicationGroupCalls())
func (mock *elasticacheClientMock) CreateGlobalReplicationGroupCalls() []struct {
	CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
} {
	var calls []struct {
		CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
	}
	mock.lockCreateGlobalReplicationGroup.RLock()
	calls = mock.calls.CreateGlobalReplicationGroup
	mock.lockCreateGlobalReplicationGroup.RUnlock()
	return calls
}

// CreateGlobalReplicationGroupRequest calls CreateGlobalReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) CreateGlobalReplicationGroupRequest(createGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput) (*request.Request, *elasticache.CreateGlobalReplicationGroupOutput) {
	if mock.CreateGlobalReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.CreateGlobalReplicationGroupRequestFunc: method is nil but elasticacheClient.CreateGlobalReplicationGroupRequest was just called")
	}
	callInfo := struct {
		CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
	}{
		CreateGlobalReplicationGroupInput: createGlobalReplicationGroupInput,
	}
	mock.lockCreateGlobalReplicationGroupRequest.Lock()
	mock.calls.CreateGlobalReplicationGroupRequest = append(mock.calls.CreateGlobalReplicationGroupRequest, callInfo)
	mock.lockCreateGlobalReplicationGroupRequest.Unlock()
	return mock.CreateGlobalReplicationGroupRequestFunc(createGlobalReplicationGroupInput)
}

// CreateGlobalReplicationGroupRequestCalls gets all the calls that were made to CreateGlobalReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateGlobalReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) CreateGlobalReplicationGroupRequestCalls() []struct {
	CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
} {
	var calls []struct {
		CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
	}
	mock.lockCreateGlobalReplicationGroupRequest.RLock()
	calls = mock.calls.CreateGlobalReplicationGroupRequest
	mock.lockCreateGlobalReplicationGroupRequest.RUnlock()
	return calls
}

// CreateGlobalReplicationGroupWithContext calls CreateGlobalReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) CreateGlobalReplicationGroupWithContext(contextMoqParam context.Context, createGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput, options ...request.Option) (*elasticache.CreateGlobalReplicationGroupOutput, error) {
	if mock.CreateGlobalReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.CreateGlobalReplicationGroupWithContextFunc: method is nil but elasticacheClient.CreateGlobalReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		CreateGlobalReplicationGroupInput: createGlobalReplicationGroupInput,
		Options:                           options,
	}
	mock.lockCreateGlobalReplicationGroupWithContext.Lock()
	mock.calls.CreateGlobalReplicationGroupWithContext = append(mock.calls.CreateGlobalReplicationGroupWithContext, callInfo)
	mock.lockCreateGlobalReplicationGroupWithContext.Unlock()
	return mock.CreateGlobalReplicationGroupWithContextFunc(contextMoqParam, createGlobalReplicationGroupInput, options...)
}

// CreateGlobalReplicationGroupWithContextCalls gets all the calls that were made to CreateGlobalReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateGlobalReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) CreateGlobalReplicationGroupWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		CreateGlobalReplicationGroupInput *elasticache.CreateGlobalReplicationGroupInput
		Options                           []request.Option
	}
	mock.lockCreateGlobalReplicationGroupWithContext.RLock()
	calls = mock.calls.CreateGlobalReplicationGroupWithContext
	mock.lockCreateGlobalReplicationGroupWithContext.RUnlock()
	return calls
}

// CreateReplicationGroup calls CreateReplicationGroupFunc.
func (mock *elasticacheClientMock) CreateReplicationGroup(createReplicationGroupInput *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error) {
	if mock.CreateReplicationGroupFunc == nil {
		panic("elasticacheClientMock.CreateReplicationGroupFunc: method is nil but elasticacheClient.CreateReplicationGroup was just called")
	}
	callInfo := struct {
		CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
	}{
		CreateReplicationGroupInput: createReplicationGroupInput,
	}
	mock.lockCreateReplicationGroup.Lock()
	mock.calls.CreateReplicationGroup = append(mock.calls.CreateReplicationGroup, callInfo)
	mock.lockCreateReplicationGroup.Unlock()
	return mock.CreateReplicationGroupFunc(createReplicationGroupInput)
}

// CreateReplicationGroupCalls gets all the calls that were made to CreateReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.CreateReplicationGroupCalls())
func (mock *elasticacheClientMock) CreateReplicationGroupCalls() []struct {
	CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
} {
	var calls []struct {
		CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
	}
	mock.lockCreateReplicationGroup.RLock()
	calls = mock.calls.CreateReplicationGroup
	mock.lockCreateReplicationGroup.RUnlock()
	return calls
}

// CreateReplicationGroupRequest calls CreateReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) CreateReplicationGroupRequest(createReplicationGroupInput *elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput) {
	if mock.CreateReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.CreateReplicationGroupRequestFunc: method is nil but elasticacheClient.CreateReplicationGroupRequest was just called")
	}
	callInfo := struct {
		CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
	}{
		CreateReplicationGroupInput: createReplicationGroupInput,
	}
	mock.lockCreateReplicationGroupRequest.Lock()
	mock.calls.CreateReplicationGroupRequest = append(mock.calls.CreateReplicationGroupRequest, callInfo)
	mock.lockCreateReplicationGroupRequest.Unlock()
	return mock.CreateReplicationGroupRequestFunc(createReplicationGroupInput)
}

// CreateReplicationGroupRequestCalls gets all the calls that were made to CreateReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) CreateReplicationGroupRequestCalls() []struct {
	CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
} {
	var calls []struct {
		CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
	}
	mock.lockCreateReplicationGroupRequest.RLock()
	calls = mock.calls.CreateReplicationGroupRequest
	mock.lockCreateReplicationGroupRequest.RUnlock()
	return calls
}

// CreateReplicationGroupWithContext calls CreateReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) CreateReplicationGroupWithContext(contextMoqParam context.Context, createReplicationGroupInput *elasticache.CreateReplicationGroupInput, options ...request.Option) (*elasticache.CreateReplicationGroupOutput, error) {
	if mock.CreateReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.CreateReplicationGroupWithContextFunc: method is nil but elasticacheClient.CreateReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		CreateReplicationGroupInput: createReplicationGroupInput,
		Options:                     options,
	}
	mock.lockCreateReplicationGroupWithContext.Lock()
	mock.calls.CreateReplicationGroupWithContext = append(mock.calls.CreateReplicationGroupWithContext, callInfo)
	mock.lockCreateReplicationGroupWithContext.Unlock()
	return mock.CreateReplicationGroupWithContextFunc(contextMoqParam, createReplicationGroupInput, options...)
}

// CreateReplicationGroupWithContextCalls gets all the calls that were made to CreateReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) CreateReplicationGroupWithContextCalls() []struct {
	ContextMoqParam             context.Context
	CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		CreateReplicationGroupInput *elasticache.CreateReplicationGroupInput
		Options                     []request.Option
	}
	mock.lockCreateReplicationGroupWithContext.RLock()
	calls = mock.calls.CreateReplicationGroupWithContext
	mock.lockCreateReplicationGroupWithContext.RUnlock()
	return calls
}

// CreateSnapshot calls CreateSnapshotFunc.
func (mock *elasticacheClientMock) CreateSnapshot(createSnapshotInput *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error) {
	if mock.CreateSnapshotFunc == nil {
		panic("elasticacheClientMock.CreateSnapshotFunc: method is nil but elasticacheClient.CreateSnapshot was just called")
	}
	callInfo := struct {
		CreateSnapshotInput *elasticache.CreateSnapshotInput
	}{
		CreateSnapshotInput: createSnapshotInput,
	}
	mock.lockCreateSnapshot.Lock()
	mock.calls.CreateSnapshot = append(mock.calls.CreateSnapshot, callInfo)
	mock.lockCreateSnapshot.Unlock()
	return mock.CreateSnapshotFunc(createSnapshotInput)
}

// CreateSnapshotCalls gets all the calls that were made to CreateSnapshot.
// Check the length with:
//     len(mockedelasticacheClient.CreateSnapshotCalls())
func (mock *elasticacheClientMock) CreateSnapshotCalls() []struct {
	CreateSnapshotInput *elasticache.CreateSnapshotInput
} {
	var calls []struct {
		CreateSnapshotInput *elasticache.CreateSnapshotInput
	}
	mock.lockCreateSnapshot.RLock()
	calls = mock.calls.CreateSnapshot
	mock.lockCreateSnapshot.RUnlock()
	return calls
}

// CreateSnapshotRequest calls CreateSnapshotRequestFunc.
func (mock *elasticacheClientMock) CreateSnapshotRequest(createSnapshotInput *elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput) {
	if mock.CreateSnapshotRequestFunc == nil {
		panic("elasticacheClientMock.CreateSnapshotRequestFunc: method is nil but elasticacheClient.CreateSnapshotRequest was just called")
	}
	callInfo := struct {
		CreateSnapshotInput *elasticache.CreateSnapshotInput
	}{
		CreateSnapshotInput: createSnapshotInput,
	}
	mock.lockCreateSnapshotRequest.Lock()
	mock.calls.CreateSnapshotRequest = append(mock.calls.CreateSnapshotRequest, callInfo)
	mock.lockCreateSnapshotRequest.Unlock()
	return mock.CreateSnapshotRequestFunc(createSnapshotInput)
}

// CreateSnapshotRequestCalls gets all the calls that were made to CreateSnapshotRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateSnapshotRequestCalls())
func (mock *elasticacheClientMock) CreateSnapshotRequestCalls() []struct {
	CreateSnapshotInput *elasticache.CreateSnapshotInput
} {
	var calls []struct {
		CreateSnapshotInput *elasticache.CreateSnapshotInput
	}
	mock.lockCreateSnapshotRequest.RLock()
	calls = mock.calls.CreateSnapshotRequest
	mock.lockCreateSnapshotRequest.RUnlock()
	return calls
}

// CreateSnapshotWithContext calls CreateSnapshotWithContextFunc.
func (mock *elasticacheClientMock) CreateSnapshotWithContext(contextMoqParam context.Context, createSnapshotInput *elasticache.CreateSnapshotInput, options ...request.Option) (*elasticache.CreateSnapshotOutput, error) {
	if mock.CreateSnapshotWithContextFunc == nil {
		panic("elasticacheClientMock.CreateSnapshotWithContextFunc: method is nil but elasticacheClient.CreateSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		CreateSnapshotInput *elasticache.CreateSnapshotInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		CreateSnapshotInput: createSnapshotInput,
		Options:             options,
	}
	mock.lockCreateSnapshotWithContext.Lock()
	mock.calls.CreateSnapshotWithContext = append(mock.calls.CreateSnapshotWithContext, callInfo)
	mock.lockCreateSnapshotWithContext.Unlock()
	return mock.CreateSnapshotWithContextFunc(contextMoqParam, createSnapshotInput, options...)
}

// CreateSnapshotWithContextCalls gets all the calls that were made to CreateSnapshotWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateSnapshotWithContextCalls())
func (mock *elasticacheClientMock) CreateSnapshotWithContextCalls() []struct {
	ContextMoqParam     context.Context
	CreateSnapshotInput *elasticache.CreateSnapshotInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		CreateSnapshotInput *elasticache.CreateSnapshotInput
		Options             []request.Option
	}
	mock.lockCreateSnapshotWithContext.RLock()
	calls = mock.calls.CreateSnapshotWithContext
	mock.lockCreateSnapshotWithContext.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *elasticacheClientMock) CreateUser(createUserInput *elasticache.CreateUserInput) (*elasticache.CreateUserOutput, error) {
	if mock.CreateUserFunc == nil {
		panic("elasticacheClientMock.CreateUserFunc: method is nil but elasticacheClient.CreateUser was just called")
	}
	callInfo := struct {
		CreateUserInput *elasticache.CreateUserInput
	}{
		CreateUserInput: createUserInput,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(createUserInput)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedelasticacheClient.CreateUserCalls())
func (mock *elasticacheClientMock) CreateUserCalls() []struct {
	CreateUserInput *elasticache.CreateUserInput
} {
	var calls []struct {
		CreateUserInput *elasticache.CreateUserInput
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// CreateUserGroup calls CreateUserGroupFunc.
func (mock *elasticacheClientMock) CreateUserGroup(createUserGroupInput *elasticache.CreateUserGroupInput) (*elasticache.CreateUserGroupOutput, error) {
	if mock.CreateUserGroupFunc == nil {
		panic("elasticacheClientMock.CreateUserGroupFunc: method is nil but elasticacheClient.CreateUserGroup was just called")
	}
	callInfo := struct {
		CreateUserGroupInput *elasticache.CreateUserGroupInput
	}{
		CreateUserGroupInput: createUserGroupInput,
	}
	mock.lockCreateUserGroup.Lock()
	mock.calls.CreateUserGroup = append(mock.calls.CreateUserGroup, callInfo)
	mock.lockCreateUserGroup.Unlock()
	return mock.CreateUserGroupFunc(createUserGroupInput)
}

// CreateUserGroupCalls gets all the calls that were made to CreateUserGroup.
// Check the length with:
//     len(mockedelasticacheClient.CreateUserGroupCalls())
func (mock *elasticacheClientMock) CreateUserGroupCalls() []struct {
	CreateUserGroupInput *elasticache.CreateUserGroupInput
} {
	var calls []struct {
		CreateUserGroupInput *elasticache.CreateUserGroupInput
	}
	mock.lockCreateUserGroup.RLock()
	calls = mock.calls.CreateUserGroup
	mock.lockCreateUserGroup.RUnlock()
	return calls
}

// CreateUserGroupRequest calls CreateUserGroupRequestFunc.
func (mock *elasticacheClientMock) CreateUserGroupRequest(createUserGroupInput *elasticache.CreateUserGroupInput) (*request.Request, *elasticache.CreateUserGroupOutput) {
	if mock.CreateUserGroupRequestFunc == nil {
		panic("elasticacheClientMock.CreateUserGroupRequestFunc: method is nil but elasticacheClient.CreateUserGroupRequest was just called")
	}
	callInfo := struct {
		CreateUserGroupInput *elasticache.CreateUserGroupInput
	}{
		CreateUserGroupInput: createUserGroupInput,
	}
	mock.lockCreateUserGroupRequest.Lock()
	mock.calls.CreateUserGroupRequest = append(mock.calls.CreateUserGroupRequest, callInfo)
	mock.lockCreateUserGroupRequest.Unlock()
	return mock.CreateUserGroupRequestFunc(createUserGroupInput)
}

// CreateUserGroupRequestCalls gets all the calls that were made to CreateUserGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateUserGroupRequestCalls())
func (mock *elasticacheClientMock) CreateUserGroupRequestCalls() []struct {
	CreateUserGroupInput *elasticache.CreateUserGroupInput
} {
	var calls []struct {
		CreateUserGroupInput *elasticache.CreateUserGroupInput
	}
	mock.lockCreateUserGroupRequest.RLock()
	calls = mock.calls.CreateUserGroupRequest
	mock.lockCreateUserGroupRequest.RUnlock()
	return calls
}

// CreateUserGroupWithContext calls CreateUserGroupWithContextFunc.
func (mock *elasticacheClientMock) CreateUserGroupWithContext(contextMoqParam context.Context, createUserGroupInput *elasticache.CreateUserGroupInput, options ...request.Option) (*elasticache.CreateUserGroupOutput, error) {
	if mock.CreateUserGroupWithContextFunc == nil {
		panic("elasticacheClientMock.CreateUserGroupWithContextFunc: method is nil but elasticacheClient.CreateUserGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		CreateUserGroupInput *elasticache.CreateUserGroupInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		CreateUserGroupInput: createUserGroupInput,
		Options:              options,
	}
	mock.lockCreateUserGroupWithContext.Lock()
	mock.calls.CreateUserGroupWithContext = append(mock.calls.CreateUserGroupWithContext, callInfo)
	mock.lockCreateUserGroupWithContext.Unlock()
	return mock.CreateUserGroupWithContextFunc(contextMoqParam, createUserGroupInput, options...)
}

// CreateUserGroupWithContextCalls gets all the calls that were made to CreateUserGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateUserGroupWithContextCalls())
func (mock *elasticacheClientMock) CreateUserGroupWithContextCalls() []struct {
	ContextMoqParam      context.Context
	CreateUserGroupInput *elasticache.CreateUserGroupInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		CreateUserGroupInput *elasticache.CreateUserGroupInput
		Options              []request.Option
	}
	mock.lockCreateUserGroupWithContext.RLock()
	calls = mock.calls.CreateUserGroupWithContext
	mock.lockCreateUserGroupWithContext.RUnlock()
	return calls
}

// CreateUserRequest calls CreateUserRequestFunc.
func (mock *elasticacheClientMock) CreateUserRequest(createUserInput *elasticache.CreateUserInput) (*request.Request, *elasticache.CreateUserOutput) {
	if mock.CreateUserRequestFunc == nil {
		panic("elasticacheClientMock.CreateUserRequestFunc: method is nil but elasticacheClient.CreateUserRequest was just called")
	}
	callInfo := struct {
		CreateUserInput *elasticache.CreateUserInput
	}{
		CreateUserInput: createUserInput,
	}
	mock.lockCreateUserRequest.Lock()
	mock.calls.CreateUserRequest = append(mock.calls.CreateUserRequest, callInfo)
	mock.lockCreateUserRequest.Unlock()
	return mock.CreateUserRequestFunc(createUserInput)
}

// CreateUserRequestCalls gets all the calls that were made to CreateUserRequest.
// Check the length with:
//     len(mockedelasticacheClient.CreateUserRequestCalls())
func (mock *elasticacheClientMock) CreateUserRequestCalls() []struct {
	CreateUserInput *elasticache.CreateUserInput
} {
	var calls []struct {
		CreateUserInput *elasticache.CreateUserInput
	}
	mock.lockCreateUserRequest.RLock()
	calls = mock.calls.CreateUserRequest
	mock.lockCreateUserRequest.RUnlock()
	return calls
}

// CreateUserWithContext calls CreateUserWithContextFunc.
func (mock *elasticacheClientMock) CreateUserWithContext(contextMoqParam context.Context, createUserInput *elasticache.CreateUserInput, options ...request.Option) (*elasticache.CreateUserOutput, error) {
	if mock.CreateUserWithContextFunc == nil {
		panic("elasticacheClientMock.CreateUserWithContextFunc: method is nil but elasticacheClient.CreateUserWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CreateUserInput *elasticache.CreateUserInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		CreateUserInput: createUserInput,
		Options:         options,
	}
	mock.lockCreateUserWithContext.Lock()
	mock.calls.CreateUserWithContext = append(mock.calls.CreateUserWithContext, callInfo)
	mock.lockCreateUserWithContext.Unlock()
	return mock.CreateUserWithContextFunc(contextMoqParam, createUserInput, options...)
}

// CreateUserWithContextCalls gets all the calls that were made to CreateUserWithContext.
// Check the length with:
//     len(mockedelasticacheClient.CreateUserWithContextCalls())
func (mock *elasticacheClientMock) CreateUserWithContextCalls() []struct {
	ContextMoqParam context.Context
	CreateUserInput *elasticache.CreateUserInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		CreateUserInput *elasticache.CreateUserInput
		Options         []request.Option
	}
	mock.lockCreateUserWithContext.RLock()
	calls = mock.calls.CreateUserWithContext
	mock.lockCreateUserWithContext.RUnlock()
	return calls
}

// DecreaseNodeGroupsInGlobalReplicationGroup calls DecreaseNodeGroupsInGlobalReplicationGroupFunc.
func (mock *elasticacheClientMock) DecreaseNodeGroupsInGlobalReplicationGroup(decreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	if mock.DecreaseNodeGroupsInGlobalReplicationGroupFunc == nil {
		panic("elasticacheClientMock.DecreaseNodeGroupsInGlobalReplicationGroupFunc: method is nil but elasticacheClient.DecreaseNodeGroupsInGlobalReplicationGroup was just called")
	}
	callInfo := struct {
		DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
	}{
		DecreaseNodeGroupsInGlobalReplicationGroupInput: decreaseNodeGroupsInGlobalReplicationGroupInput,
	}
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroup.Lock()
	mock.calls.DecreaseNodeGroupsInGlobalReplicationGroup = append(mock.calls.DecreaseNodeGroupsInGlobalReplicationGroup, callInfo)
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroup.Unlock()
	return mock.DecreaseNodeGroupsInGlobalReplicationGroupFunc(decreaseNodeGroupsInGlobalReplicationGroupInput)
}

// DecreaseNodeGroupsInGlobalReplicationGroupCalls gets all the calls that were made to DecreaseNodeGroupsInGlobalReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.DecreaseNodeGroupsInGlobalReplicationGroupCalls())
func (mock *elasticacheClientMock) DecreaseNodeGroupsInGlobalReplicationGroupCalls() []struct {
	DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
} {
	var calls []struct {
		DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
	}
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroup.RLock()
	calls = mock.calls.DecreaseNodeGroupsInGlobalReplicationGroup
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroup.RUnlock()
	return calls
}

// DecreaseNodeGroupsInGlobalReplicationGroupRequest calls DecreaseNodeGroupsInGlobalReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) DecreaseNodeGroupsInGlobalReplicationGroupRequest(decreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput) {
	if mock.DecreaseNodeGroupsInGlobalReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.DecreaseNodeGroupsInGlobalReplicationGroupRequestFunc: method is nil but elasticacheClient.DecreaseNodeGroupsInGlobalReplicationGroupRequest was just called")
	}
	callInfo := struct {
		DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
	}{
		DecreaseNodeGroupsInGlobalReplicationGroupInput: decreaseNodeGroupsInGlobalReplicationGroupInput,
	}
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroupRequest.Lock()
	mock.calls.DecreaseNodeGroupsInGlobalReplicationGroupRequest = append(mock.calls.DecreaseNodeGroupsInGlobalReplicationGroupRequest, callInfo)
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroupRequest.Unlock()
	return mock.DecreaseNodeGroupsInGlobalReplicationGroupRequestFunc(decreaseNodeGroupsInGlobalReplicationGroupInput)
}

// DecreaseNodeGroupsInGlobalReplicationGroupRequestCalls gets all the calls that were made to DecreaseNodeGroupsInGlobalReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DecreaseNodeGroupsInGlobalReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) DecreaseNodeGroupsInGlobalReplicationGroupRequestCalls() []struct {
	DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
} {
	var calls []struct {
		DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
	}
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroupRequest.RLock()
	calls = mock.calls.DecreaseNodeGroupsInGlobalReplicationGroupRequest
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroupRequest.RUnlock()
	return calls
}

// DecreaseNodeGroupsInGlobalReplicationGroupWithContext calls DecreaseNodeGroupsInGlobalReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) DecreaseNodeGroupsInGlobalReplicationGroupWithContext(contextMoqParam context.Context, decreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput, options ...request.Option) (*elasticache.DecreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	if mock.DecreaseNodeGroupsInGlobalReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DecreaseNodeGroupsInGlobalReplicationGroupWithContextFunc: method is nil but elasticacheClient.DecreaseNodeGroupsInGlobalReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                                 context.Context
		DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
		Options                                         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		DecreaseNodeGroupsInGlobalReplicationGroupInput: decreaseNodeGroupsInGlobalReplicationGroupInput,
		Options: options,
	}
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroupWithContext.Lock()
	mock.calls.DecreaseNodeGroupsInGlobalReplicationGroupWithContext = append(mock.calls.DecreaseNodeGroupsInGlobalReplicationGroupWithContext, callInfo)
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroupWithContext.Unlock()
	return mock.DecreaseNodeGroupsInGlobalReplicationGroupWithContextFunc(contextMoqParam, decreaseNodeGroupsInGlobalReplicationGroupInput, options...)
}

// DecreaseNodeGroupsInGlobalReplicationGroupWithContextCalls gets all the calls that were made to DecreaseNodeGroupsInGlobalReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DecreaseNodeGroupsInGlobalReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) DecreaseNodeGroupsInGlobalReplicationGroupWithContextCalls() []struct {
	ContextMoqParam                                 context.Context
	DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
	Options                                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                                 context.Context
		DecreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.DecreaseNodeGroupsInGlobalReplicationGroupInput
		Options                                         []request.Option
	}
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroupWithContext.RLock()
	calls = mock.calls.DecreaseNodeGroupsInGlobalReplicationGroupWithContext
	mock.lockDecreaseNodeGroupsInGlobalReplicationGroupWithContext.RUnlock()
	return calls
}

// DecreaseReplicaCount calls DecreaseReplicaCountFunc.
func (mock *elasticacheClientMock) DecreaseReplicaCount(decreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput) (*elasticache.DecreaseReplicaCountOutput, error) {
	if mock.DecreaseReplicaCountFunc == nil {
		panic("elasticacheClientMock.DecreaseReplicaCountFunc: method is nil but elasticacheClient.DecreaseReplicaCount was just called")
	}
	callInfo := struct {
		DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
	}{
		DecreaseReplicaCountInput: decreaseReplicaCountInput,
	}
	mock.lockDecreaseReplicaCount.Lock()
	mock.calls.DecreaseReplicaCount = append(mock.calls.DecreaseReplicaCount, callInfo)
	mock.lockDecreaseReplicaCount.Unlock()
	return mock.DecreaseReplicaCountFunc(decreaseReplicaCountInput)
}

// DecreaseReplicaCountCalls gets all the calls that were made to DecreaseReplicaCount.
// Check the length with:
//     len(mockedelasticacheClient.DecreaseReplicaCountCalls())
func (mock *elasticacheClientMock) DecreaseReplicaCountCalls() []struct {
	DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
} {
	var calls []struct {
		DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
	}
	mock.lockDecreaseReplicaCount.RLock()
	calls = mock.calls.DecreaseReplicaCount
	mock.lockDecreaseReplicaCount.RUnlock()
	return calls
}

// DecreaseReplicaCountRequest calls DecreaseReplicaCountRequestFunc.
func (mock *elasticacheClientMock) DecreaseReplicaCountRequest(decreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput) (*request.Request, *elasticache.DecreaseReplicaCountOutput) {
	if mock.DecreaseReplicaCountRequestFunc == nil {
		panic("elasticacheClientMock.DecreaseReplicaCountRequestFunc: method is nil but elasticacheClient.DecreaseReplicaCountRequest was just called")
	}
	callInfo := struct {
		DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
	}{
		DecreaseReplicaCountInput: decreaseReplicaCountInput,
	}
	mock.lockDecreaseReplicaCountRequest.Lock()
	mock.calls.DecreaseReplicaCountRequest = append(mock.calls.DecreaseReplicaCountRequest, callInfo)
	mock.lockDecreaseReplicaCountRequest.Unlock()
	return mock.DecreaseReplicaCountRequestFunc(decreaseReplicaCountInput)
}

// DecreaseReplicaCountRequestCalls gets all the calls that were made to DecreaseReplicaCountRequest.
// Check the length with:
//     len(mockedelasticacheClient.DecreaseReplicaCountRequestCalls())
func (mock *elasticacheClientMock) DecreaseReplicaCountRequestCalls() []struct {
	DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
} {
	var calls []struct {
		DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
	}
	mock.lockDecreaseReplicaCountRequest.RLock()
	calls = mock.calls.DecreaseReplicaCountRequest
	mock.lockDecreaseReplicaCountRequest.RUnlock()
	return calls
}

// DecreaseReplicaCountWithContext calls DecreaseReplicaCountWithContextFunc.
func (mock *elasticacheClientMock) DecreaseReplicaCountWithContext(contextMoqParam context.Context, decreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput, options ...request.Option) (*elasticache.DecreaseReplicaCountOutput, error) {
	if mock.DecreaseReplicaCountWithContextFunc == nil {
		panic("elasticacheClientMock.DecreaseReplicaCountWithContextFunc: method is nil but elasticacheClient.DecreaseReplicaCountWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		DecreaseReplicaCountInput: decreaseReplicaCountInput,
		Options:                   options,
	}
	mock.lockDecreaseReplicaCountWithContext.Lock()
	mock.calls.DecreaseReplicaCountWithContext = append(mock.calls.DecreaseReplicaCountWithContext, callInfo)
	mock.lockDecreaseReplicaCountWithContext.Unlock()
	return mock.DecreaseReplicaCountWithContextFunc(contextMoqParam, decreaseReplicaCountInput, options...)
}

// DecreaseReplicaCountWithContextCalls gets all the calls that were made to DecreaseReplicaCountWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DecreaseReplicaCountWithContextCalls())
func (mock *elasticacheClientMock) DecreaseReplicaCountWithContextCalls() []struct {
	ContextMoqParam           context.Context
	DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		DecreaseReplicaCountInput *elasticache.DecreaseReplicaCountInput
		Options                   []request.Option
	}
	mock.lockDecreaseReplicaCountWithContext.RLock()
	calls = mock.calls.DecreaseReplicaCountWithContext
	mock.lockDecreaseReplicaCountWithContext.RUnlock()
	return calls
}

// DeleteCacheCluster calls DeleteCacheClusterFunc.
func (mock *elasticacheClientMock) DeleteCacheCluster(deleteCacheClusterInput *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error) {
	if mock.DeleteCacheClusterFunc == nil {
		panic("elasticacheClientMock.DeleteCacheClusterFunc: method is nil but elasticacheClient.DeleteCacheCluster was just called")
	}
	callInfo := struct {
		DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
	}{
		DeleteCacheClusterInput: deleteCacheClusterInput,
	}
	mock.lockDeleteCacheCluster.Lock()
	mock.calls.DeleteCacheCluster = append(mock.calls.DeleteCacheCluster, callInfo)
	mock.lockDeleteCacheCluster.Unlock()
	return mock.DeleteCacheClusterFunc(deleteCacheClusterInput)
}

// DeleteCacheClusterCalls gets all the calls that were made to DeleteCacheCluster.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheClusterCalls())
func (mock *elasticacheClientMock) DeleteCacheClusterCalls() []struct {
	DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
} {
	var calls []struct {
		DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
	}
	mock.lockDeleteCacheCluster.RLock()
	calls = mock.calls.DeleteCacheCluster
	mock.lockDeleteCacheCluster.RUnlock()
	return calls
}

// DeleteCacheClusterRequest calls DeleteCacheClusterRequestFunc.
func (mock *elasticacheClientMock) DeleteCacheClusterRequest(deleteCacheClusterInput *elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput) {
	if mock.DeleteCacheClusterRequestFunc == nil {
		panic("elasticacheClientMock.DeleteCacheClusterRequestFunc: method is nil but elasticacheClient.DeleteCacheClusterRequest was just called")
	}
	callInfo := struct {
		DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
	}{
		DeleteCacheClusterInput: deleteCacheClusterInput,
	}
	mock.lockDeleteCacheClusterRequest.Lock()
	mock.calls.DeleteCacheClusterRequest = append(mock.calls.DeleteCacheClusterRequest, callInfo)
	mock.lockDeleteCacheClusterRequest.Unlock()
	return mock.DeleteCacheClusterRequestFunc(deleteCacheClusterInput)
}

// DeleteCacheClusterRequestCalls gets all the calls that were made to DeleteCacheClusterRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheClusterRequestCalls())
func (mock *elasticacheClientMock) DeleteCacheClusterRequestCalls() []struct {
	DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
} {
	var calls []struct {
		DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
	}
	mock.lockDeleteCacheClusterRequest.RLock()
	calls = mock.calls.DeleteCacheClusterRequest
	mock.lockDeleteCacheClusterRequest.RUnlock()
	return calls
}

// DeleteCacheClusterWithContext calls DeleteCacheClusterWithContextFunc.
func (mock *elasticacheClientMock) DeleteCacheClusterWithContext(contextMoqParam context.Context, deleteCacheClusterInput *elasticache.DeleteCacheClusterInput, options ...request.Option) (*elasticache.DeleteCacheClusterOutput, error) {
	if mock.DeleteCacheClusterWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteCacheClusterWithContextFunc: method is nil but elasticacheClient.DeleteCacheClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DeleteCacheClusterInput: deleteCacheClusterInput,
		Options:                 options,
	}
	mock.lockDeleteCacheClusterWithContext.Lock()
	mock.calls.DeleteCacheClusterWithContext = append(mock.calls.DeleteCacheClusterWithContext, callInfo)
	mock.lockDeleteCacheClusterWithContext.Unlock()
	return mock.DeleteCacheClusterWithContextFunc(contextMoqParam, deleteCacheClusterInput, options...)
}

// DeleteCacheClusterWithContextCalls gets all the calls that were made to DeleteCacheClusterWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheClusterWithContextCalls())
func (mock *elasticacheClientMock) DeleteCacheClusterWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DeleteCacheClusterInput *elasticache.DeleteCacheClusterInput
		Options                 []request.Option
	}
	mock.lockDeleteCacheClusterWithContext.RLock()
	calls = mock.calls.DeleteCacheClusterWithContext
	mock.lockDeleteCacheClusterWithContext.RUnlock()
	return calls
}

// DeleteCacheParameterGroup calls DeleteCacheParameterGroupFunc.
func (mock *elasticacheClientMock) DeleteCacheParameterGroup(deleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	if mock.DeleteCacheParameterGroupFunc == nil {
		panic("elasticacheClientMock.DeleteCacheParameterGroupFunc: method is nil but elasticacheClient.DeleteCacheParameterGroup was just called")
	}
	callInfo := struct {
		DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
	}{
		DeleteCacheParameterGroupInput: deleteCacheParameterGroupInput,
	}
	mock.lockDeleteCacheParameterGroup.Lock()
	mock.calls.DeleteCacheParameterGroup = append(mock.calls.DeleteCacheParameterGroup, callInfo)
	mock.lockDeleteCacheParameterGroup.Unlock()
	return mock.DeleteCacheParameterGroupFunc(deleteCacheParameterGroupInput)
}

// DeleteCacheParameterGroupCalls gets all the calls that were made to DeleteCacheParameterGroup.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheParameterGroupCalls())
func (mock *elasticacheClientMock) DeleteCacheParameterGroupCalls() []struct {
	DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
} {
	var calls []struct {
		DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
	}
	mock.lockDeleteCacheParameterGroup.RLock()
	calls = mock.calls.DeleteCacheParameterGroup
	mock.lockDeleteCacheParameterGroup.RUnlock()
	return calls
}

// DeleteCacheParameterGroupRequest calls DeleteCacheParameterGroupRequestFunc.
func (mock *elasticacheClientMock) DeleteCacheParameterGroupRequest(deleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput) {
	if mock.DeleteCacheParameterGroupRequestFunc == nil {
		panic("elasticacheClientMock.DeleteCacheParameterGroupRequestFunc: method is nil but elasticacheClient.DeleteCacheParameterGroupRequest was just called")
	}
	callInfo := struct {
		DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
	}{
		DeleteCacheParameterGroupInput: deleteCacheParameterGroupInput,
	}
	mock.lockDeleteCacheParameterGroupRequest.Lock()
	mock.calls.DeleteCacheParameterGroupRequest = append(mock.calls.DeleteCacheParameterGroupRequest, callInfo)
	mock.lockDeleteCacheParameterGroupRequest.Unlock()
	return mock.DeleteCacheParameterGroupRequestFunc(deleteCacheParameterGroupInput)
}

// DeleteCacheParameterGroupRequestCalls gets all the calls that were made to DeleteCacheParameterGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheParameterGroupRequestCalls())
func (mock *elasticacheClientMock) DeleteCacheParameterGroupRequestCalls() []struct {
	DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
} {
	var calls []struct {
		DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
	}
	mock.lockDeleteCacheParameterGroupRequest.RLock()
	calls = mock.calls.DeleteCacheParameterGroupRequest
	mock.lockDeleteCacheParameterGroupRequest.RUnlock()
	return calls
}

// DeleteCacheParameterGroupWithContext calls DeleteCacheParameterGroupWithContextFunc.
func (mock *elasticacheClientMock) DeleteCacheParameterGroupWithContext(contextMoqParam context.Context, deleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput, options ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	if mock.DeleteCacheParameterGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteCacheParameterGroupWithContextFunc: method is nil but elasticacheClient.DeleteCacheParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		DeleteCacheParameterGroupInput: deleteCacheParameterGroupInput,
		Options:                        options,
	}
	mock.lockDeleteCacheParameterGroupWithContext.Lock()
	mock.calls.DeleteCacheParameterGroupWithContext = append(mock.calls.DeleteCacheParameterGroupWithContext, callInfo)
	mock.lockDeleteCacheParameterGroupWithContext.Unlock()
	return mock.DeleteCacheParameterGroupWithContextFunc(contextMoqParam, deleteCacheParameterGroupInput, options...)
}

// DeleteCacheParameterGroupWithContextCalls gets all the calls that were made to DeleteCacheParameterGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheParameterGroupWithContextCalls())
func (mock *elasticacheClientMock) DeleteCacheParameterGroupWithContextCalls() []struct {
	ContextMoqParam                context.Context
	DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		DeleteCacheParameterGroupInput *elasticache.DeleteCacheParameterGroupInput
		Options                        []request.Option
	}
	mock.lockDeleteCacheParameterGroupWithContext.RLock()
	calls = mock.calls.DeleteCacheParameterGroupWithContext
	mock.lockDeleteCacheParameterGroupWithContext.RUnlock()
	return calls
}

// DeleteCacheSecurityGroup calls DeleteCacheSecurityGroupFunc.
func (mock *elasticacheClientMock) DeleteCacheSecurityGroup(deleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	if mock.DeleteCacheSecurityGroupFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSecurityGroupFunc: method is nil but elasticacheClient.DeleteCacheSecurityGroup was just called")
	}
	callInfo := struct {
		DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
	}{
		DeleteCacheSecurityGroupInput: deleteCacheSecurityGroupInput,
	}
	mock.lockDeleteCacheSecurityGroup.Lock()
	mock.calls.DeleteCacheSecurityGroup = append(mock.calls.DeleteCacheSecurityGroup, callInfo)
	mock.lockDeleteCacheSecurityGroup.Unlock()
	return mock.DeleteCacheSecurityGroupFunc(deleteCacheSecurityGroupInput)
}

// DeleteCacheSecurityGroupCalls gets all the calls that were made to DeleteCacheSecurityGroup.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSecurityGroupCalls())
func (mock *elasticacheClientMock) DeleteCacheSecurityGroupCalls() []struct {
	DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
} {
	var calls []struct {
		DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
	}
	mock.lockDeleteCacheSecurityGroup.RLock()
	calls = mock.calls.DeleteCacheSecurityGroup
	mock.lockDeleteCacheSecurityGroup.RUnlock()
	return calls
}

// DeleteCacheSecurityGroupRequest calls DeleteCacheSecurityGroupRequestFunc.
func (mock *elasticacheClientMock) DeleteCacheSecurityGroupRequest(deleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput) {
	if mock.DeleteCacheSecurityGroupRequestFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSecurityGroupRequestFunc: method is nil but elasticacheClient.DeleteCacheSecurityGroupRequest was just called")
	}
	callInfo := struct {
		DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
	}{
		DeleteCacheSecurityGroupInput: deleteCacheSecurityGroupInput,
	}
	mock.lockDeleteCacheSecurityGroupRequest.Lock()
	mock.calls.DeleteCacheSecurityGroupRequest = append(mock.calls.DeleteCacheSecurityGroupRequest, callInfo)
	mock.lockDeleteCacheSecurityGroupRequest.Unlock()
	return mock.DeleteCacheSecurityGroupRequestFunc(deleteCacheSecurityGroupInput)
}

// DeleteCacheSecurityGroupRequestCalls gets all the calls that were made to DeleteCacheSecurityGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSecurityGroupRequestCalls())
func (mock *elasticacheClientMock) DeleteCacheSecurityGroupRequestCalls() []struct {
	DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
} {
	var calls []struct {
		DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
	}
	mock.lockDeleteCacheSecurityGroupRequest.RLock()
	calls = mock.calls.DeleteCacheSecurityGroupRequest
	mock.lockDeleteCacheSecurityGroupRequest.RUnlock()
	return calls
}

// DeleteCacheSecurityGroupWithContext calls DeleteCacheSecurityGroupWithContextFunc.
func (mock *elasticacheClientMock) DeleteCacheSecurityGroupWithContext(contextMoqParam context.Context, deleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput, options ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	if mock.DeleteCacheSecurityGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSecurityGroupWithContextFunc: method is nil but elasticacheClient.DeleteCacheSecurityGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		DeleteCacheSecurityGroupInput: deleteCacheSecurityGroupInput,
		Options:                       options,
	}
	mock.lockDeleteCacheSecurityGroupWithContext.Lock()
	mock.calls.DeleteCacheSecurityGroupWithContext = append(mock.calls.DeleteCacheSecurityGroupWithContext, callInfo)
	mock.lockDeleteCacheSecurityGroupWithContext.Unlock()
	return mock.DeleteCacheSecurityGroupWithContextFunc(contextMoqParam, deleteCacheSecurityGroupInput, options...)
}

// DeleteCacheSecurityGroupWithContextCalls gets all the calls that were made to DeleteCacheSecurityGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSecurityGroupWithContextCalls())
func (mock *elasticacheClientMock) DeleteCacheSecurityGroupWithContextCalls() []struct {
	ContextMoqParam               context.Context
	DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		DeleteCacheSecurityGroupInput *elasticache.DeleteCacheSecurityGroupInput
		Options                       []request.Option
	}
	mock.lockDeleteCacheSecurityGroupWithContext.RLock()
	calls = mock.calls.DeleteCacheSecurityGroupWithContext
	mock.lockDeleteCacheSecurityGroupWithContext.RUnlock()
	return calls
}

// DeleteCacheSubnetGroup calls DeleteCacheSubnetGroupFunc.
func (mock *elasticacheClientMock) DeleteCacheSubnetGroup(deleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	if mock.DeleteCacheSubnetGroupFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSubnetGroupFunc: method is nil but elasticacheClient.DeleteCacheSubnetGroup was just called")
	}
	callInfo := struct {
		DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
	}{
		DeleteCacheSubnetGroupInput: deleteCacheSubnetGroupInput,
	}
	mock.lockDeleteCacheSubnetGroup.Lock()
	mock.calls.DeleteCacheSubnetGroup = append(mock.calls.DeleteCacheSubnetGroup, callInfo)
	mock.lockDeleteCacheSubnetGroup.Unlock()
	return mock.DeleteCacheSubnetGroupFunc(deleteCacheSubnetGroupInput)
}

// DeleteCacheSubnetGroupCalls gets all the calls that were made to DeleteCacheSubnetGroup.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSubnetGroupCalls())
func (mock *elasticacheClientMock) DeleteCacheSubnetGroupCalls() []struct {
	DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
} {
	var calls []struct {
		DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
	}
	mock.lockDeleteCacheSubnetGroup.RLock()
	calls = mock.calls.DeleteCacheSubnetGroup
	mock.lockDeleteCacheSubnetGroup.RUnlock()
	return calls
}

// DeleteCacheSubnetGroupRequest calls DeleteCacheSubnetGroupRequestFunc.
func (mock *elasticacheClientMock) DeleteCacheSubnetGroupRequest(deleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput) {
	if mock.DeleteCacheSubnetGroupRequestFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSubnetGroupRequestFunc: method is nil but elasticacheClient.DeleteCacheSubnetGroupRequest was just called")
	}
	callInfo := struct {
		DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
	}{
		DeleteCacheSubnetGroupInput: deleteCacheSubnetGroupInput,
	}
	mock.lockDeleteCacheSubnetGroupRequest.Lock()
	mock.calls.DeleteCacheSubnetGroupRequest = append(mock.calls.DeleteCacheSubnetGroupRequest, callInfo)
	mock.lockDeleteCacheSubnetGroupRequest.Unlock()
	return mock.DeleteCacheSubnetGroupRequestFunc(deleteCacheSubnetGroupInput)
}

// DeleteCacheSubnetGroupRequestCalls gets all the calls that were made to DeleteCacheSubnetGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSubnetGroupRequestCalls())
func (mock *elasticacheClientMock) DeleteCacheSubnetGroupRequestCalls() []struct {
	DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
} {
	var calls []struct {
		DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
	}
	mock.lockDeleteCacheSubnetGroupRequest.RLock()
	calls = mock.calls.DeleteCacheSubnetGroupRequest
	mock.lockDeleteCacheSubnetGroupRequest.RUnlock()
	return calls
}

// DeleteCacheSubnetGroupWithContext calls DeleteCacheSubnetGroupWithContextFunc.
func (mock *elasticacheClientMock) DeleteCacheSubnetGroupWithContext(contextMoqParam context.Context, deleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput, options ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	if mock.DeleteCacheSubnetGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteCacheSubnetGroupWithContextFunc: method is nil but elasticacheClient.DeleteCacheSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DeleteCacheSubnetGroupInput: deleteCacheSubnetGroupInput,
		Options:                     options,
	}
	mock.lockDeleteCacheSubnetGroupWithContext.Lock()
	mock.calls.DeleteCacheSubnetGroupWithContext = append(mock.calls.DeleteCacheSubnetGroupWithContext, callInfo)
	mock.lockDeleteCacheSubnetGroupWithContext.Unlock()
	return mock.DeleteCacheSubnetGroupWithContextFunc(contextMoqParam, deleteCacheSubnetGroupInput, options...)
}

// DeleteCacheSubnetGroupWithContextCalls gets all the calls that were made to DeleteCacheSubnetGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteCacheSubnetGroupWithContextCalls())
func (mock *elasticacheClientMock) DeleteCacheSubnetGroupWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DeleteCacheSubnetGroupInput *elasticache.DeleteCacheSubnetGroupInput
		Options                     []request.Option
	}
	mock.lockDeleteCacheSubnetGroupWithContext.RLock()
	calls = mock.calls.DeleteCacheSubnetGroupWithContext
	mock.lockDeleteCacheSubnetGroupWithContext.RUnlock()
	return calls
}

// DeleteGlobalReplicationGroup calls DeleteGlobalReplicationGroupFunc.
func (mock *elasticacheClientMock) DeleteGlobalReplicationGroup(deleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
	if mock.DeleteGlobalReplicationGroupFunc == nil {
		panic("elasticacheClientMock.DeleteGlobalReplicationGroupFunc: method is nil but elasticacheClient.DeleteGlobalReplicationGroup was just called")
	}
	callInfo := struct {
		DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
	}{
		DeleteGlobalReplicationGroupInput: deleteGlobalReplicationGroupInput,
	}
	mock.lockDeleteGlobalReplicationGroup.Lock()
	mock.calls.DeleteGlobalReplicationGroup = append(mock.calls.DeleteGlobalReplicationGroup, callInfo)
	mock.lockDeleteGlobalReplicationGroup.Unlock()
	return mock.DeleteGlobalReplicationGroupFunc(deleteGlobalReplicationGroupInput)
}

// DeleteGlobalReplicationGroupCalls gets all the calls that were made to DeleteGlobalReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.DeleteGlobalReplicationGroupCalls())
func (mock *elasticacheClientMock) DeleteGlobalReplicationGroupCalls() []struct {
	DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
} {
	var calls []struct {
		DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
	}
	mock.lockDeleteGlobalReplicationGroup.RLock()
	calls = mock.calls.DeleteGlobalReplicationGroup
	mock.lockDeleteGlobalReplicationGroup.RUnlock()
	return calls
}

// DeleteGlobalReplicationGroupRequest calls DeleteGlobalReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) DeleteGlobalReplicationGroupRequest(deleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput) (*request.Request, *elasticache.DeleteGlobalReplicationGroupOutput) {
	if mock.DeleteGlobalReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.DeleteGlobalReplicationGroupRequestFunc: method is nil but elasticacheClient.DeleteGlobalReplicationGroupRequest was just called")
	}
	callInfo := struct {
		DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
	}{
		DeleteGlobalReplicationGroupInput: deleteGlobalReplicationGroupInput,
	}
	mock.lockDeleteGlobalReplicationGroupRequest.Lock()
	mock.calls.DeleteGlobalReplicationGroupRequest = append(mock.calls.DeleteGlobalReplicationGroupRequest, callInfo)
	mock.lockDeleteGlobalReplicationGroupRequest.Unlock()
	return mock.DeleteGlobalReplicationGroupRequestFunc(deleteGlobalReplicationGroupInput)
}

// DeleteGlobalReplicationGroupRequestCalls gets all the calls that were made to DeleteGlobalReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteGlobalReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) DeleteGlobalReplicationGroupRequestCalls() []struct {
	DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
} {
	var calls []struct {
		DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
	}
	mock.lockDeleteGlobalReplicationGroupRequest.RLock()
	calls = mock.calls.DeleteGlobalReplicationGroupRequest
	mock.lockDeleteGlobalReplicationGroupRequest.RUnlock()
	return calls
}

// DeleteGlobalReplicationGroupWithContext calls DeleteGlobalReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) DeleteGlobalReplicationGroupWithContext(contextMoqParam context.Context, deleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput, options ...request.Option) (*elasticache.DeleteGlobalReplicationGroupOutput, error) {
	if mock.DeleteGlobalReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteGlobalReplicationGroupWithContextFunc: method is nil but elasticacheClient.DeleteGlobalReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		DeleteGlobalReplicationGroupInput: deleteGlobalReplicationGroupInput,
		Options:                           options,
	}
	mock.lockDeleteGlobalReplicationGroupWithContext.Lock()
	mock.calls.DeleteGlobalReplicationGroupWithContext = append(mock.calls.DeleteGlobalReplicationGroupWithContext, callInfo)
	mock.lockDeleteGlobalReplicationGroupWithContext.Unlock()
	return mock.DeleteGlobalReplicationGroupWithContextFunc(contextMoqParam, deleteGlobalReplicationGroupInput, options...)
}

// DeleteGlobalReplicationGroupWithContextCalls gets all the calls that were made to DeleteGlobalReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteGlobalReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) DeleteGlobalReplicationGroupWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		DeleteGlobalReplicationGroupInput *elasticache.DeleteGlobalReplicationGroupInput
		Options                           []request.Option
	}
	mock.lockDeleteGlobalReplicationGroupWithContext.RLock()
	calls = mock.calls.DeleteGlobalReplicationGroupWithContext
	mock.lockDeleteGlobalReplicationGroupWithContext.RUnlock()
	return calls
}

// DeleteReplicationGroup calls DeleteReplicationGroupFunc.
func (mock *elasticacheClientMock) DeleteReplicationGroup(deleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error) {
	if mock.DeleteReplicationGroupFunc == nil {
		panic("elasticacheClientMock.DeleteReplicationGroupFunc: method is nil but elasticacheClient.DeleteReplicationGroup was just called")
	}
	callInfo := struct {
		DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
	}{
		DeleteReplicationGroupInput: deleteReplicationGroupInput,
	}
	mock.lockDeleteReplicationGroup.Lock()
	mock.calls.DeleteReplicationGroup = append(mock.calls.DeleteReplicationGroup, callInfo)
	mock.lockDeleteReplicationGroup.Unlock()
	return mock.DeleteReplicationGroupFunc(deleteReplicationGroupInput)
}

// DeleteReplicationGroupCalls gets all the calls that were made to DeleteReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.DeleteReplicationGroupCalls())
func (mock *elasticacheClientMock) DeleteReplicationGroupCalls() []struct {
	DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
} {
	var calls []struct {
		DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
	}
	mock.lockDeleteReplicationGroup.RLock()
	calls = mock.calls.DeleteReplicationGroup
	mock.lockDeleteReplicationGroup.RUnlock()
	return calls
}

// DeleteReplicationGroupRequest calls DeleteReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) DeleteReplicationGroupRequest(deleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput) {
	if mock.DeleteReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.DeleteReplicationGroupRequestFunc: method is nil but elasticacheClient.DeleteReplicationGroupRequest was just called")
	}
	callInfo := struct {
		DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
	}{
		DeleteReplicationGroupInput: deleteReplicationGroupInput,
	}
	mock.lockDeleteReplicationGroupRequest.Lock()
	mock.calls.DeleteReplicationGroupRequest = append(mock.calls.DeleteReplicationGroupRequest, callInfo)
	mock.lockDeleteReplicationGroupRequest.Unlock()
	return mock.DeleteReplicationGroupRequestFunc(deleteReplicationGroupInput)
}

// DeleteReplicationGroupRequestCalls gets all the calls that were made to DeleteReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) DeleteReplicationGroupRequestCalls() []struct {
	DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
} {
	var calls []struct {
		DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
	}
	mock.lockDeleteReplicationGroupRequest.RLock()
	calls = mock.calls.DeleteReplicationGroupRequest
	mock.lockDeleteReplicationGroupRequest.RUnlock()
	return calls
}

// DeleteReplicationGroupWithContext calls DeleteReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) DeleteReplicationGroupWithContext(contextMoqParam context.Context, deleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput, options ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error) {
	if mock.DeleteReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteReplicationGroupWithContextFunc: method is nil but elasticacheClient.DeleteReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DeleteReplicationGroupInput: deleteReplicationGroupInput,
		Options:                     options,
	}
	mock.lockDeleteReplicationGroupWithContext.Lock()
	mock.calls.DeleteReplicationGroupWithContext = append(mock.calls.DeleteReplicationGroupWithContext, callInfo)
	mock.lockDeleteReplicationGroupWithContext.Unlock()
	return mock.DeleteReplicationGroupWithContextFunc(contextMoqParam, deleteReplicationGroupInput, options...)
}

// DeleteReplicationGroupWithContextCalls gets all the calls that were made to DeleteReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) DeleteReplicationGroupWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DeleteReplicationGroupInput *elasticache.DeleteReplicationGroupInput
		Options                     []request.Option
	}
	mock.lockDeleteReplicationGroupWithContext.RLock()
	calls = mock.calls.DeleteReplicationGroupWithContext
	mock.lockDeleteReplicationGroupWithContext.RUnlock()
	return calls
}

// DeleteSnapshot calls DeleteSnapshotFunc.
func (mock *elasticacheClientMock) DeleteSnapshot(deleteSnapshotInput *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error) {
	if mock.DeleteSnapshotFunc == nil {
		panic("elasticacheClientMock.DeleteSnapshotFunc: method is nil but elasticacheClient.DeleteSnapshot was just called")
	}
	callInfo := struct {
		DeleteSnapshotInput *elasticache.DeleteSnapshotInput
	}{
		DeleteSnapshotInput: deleteSnapshotInput,
	}
	mock.lockDeleteSnapshot.Lock()
	mock.calls.DeleteSnapshot = append(mock.calls.DeleteSnapshot, callInfo)
	mock.lockDeleteSnapshot.Unlock()
	return mock.DeleteSnapshotFunc(deleteSnapshotInput)
}

// DeleteSnapshotCalls gets all the calls that were made to DeleteSnapshot.
// Check the length with:
//     len(mockedelasticacheClient.DeleteSnapshotCalls())
func (mock *elasticacheClientMock) DeleteSnapshotCalls() []struct {
	DeleteSnapshotInput *elasticache.DeleteSnapshotInput
} {
	var calls []struct {
		DeleteSnapshotInput *elasticache.DeleteSnapshotInput
	}
	mock.lockDeleteSnapshot.RLock()
	calls = mock.calls.DeleteSnapshot
	mock.lockDeleteSnapshot.RUnlock()
	return calls
}

// DeleteSnapshotRequest calls DeleteSnapshotRequestFunc.
func (mock *elasticacheClientMock) DeleteSnapshotRequest(deleteSnapshotInput *elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput) {
	if mock.DeleteSnapshotRequestFunc == nil {
		panic("elasticacheClientMock.DeleteSnapshotRequestFunc: method is nil but elasticacheClient.DeleteSnapshotRequest was just called")
	}
	callInfo := struct {
		DeleteSnapshotInput *elasticache.DeleteSnapshotInput
	}{
		DeleteSnapshotInput: deleteSnapshotInput,
	}
	mock.lockDeleteSnapshotRequest.Lock()
	mock.calls.DeleteSnapshotRequest = append(mock.calls.DeleteSnapshotRequest, callInfo)
	mock.lockDeleteSnapshotRequest.Unlock()
	return mock.DeleteSnapshotRequestFunc(deleteSnapshotInput)
}

// DeleteSnapshotRequestCalls gets all the calls that were made to DeleteSnapshotRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteSnapshotRequestCalls())
func (mock *elasticacheClientMock) DeleteSnapshotRequestCalls() []struct {
	DeleteSnapshotInput *elasticache.DeleteSnapshotInput
} {
	var calls []struct {
		DeleteSnapshotInput *elasticache.DeleteSnapshotInput
	}
	mock.lockDeleteSnapshotRequest.RLock()
	calls = mock.calls.DeleteSnapshotRequest
	mock.lockDeleteSnapshotRequest.RUnlock()
	return calls
}

// DeleteSnapshotWithContext calls DeleteSnapshotWithContextFunc.
func (mock *elasticacheClientMock) DeleteSnapshotWithContext(contextMoqParam context.Context, deleteSnapshotInput *elasticache.DeleteSnapshotInput, options ...request.Option) (*elasticache.DeleteSnapshotOutput, error) {
	if mock.DeleteSnapshotWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteSnapshotWithContextFunc: method is nil but elasticacheClient.DeleteSnapshotWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		DeleteSnapshotInput *elasticache.DeleteSnapshotInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		DeleteSnapshotInput: deleteSnapshotInput,
		Options:             options,
	}
	mock.lockDeleteSnapshotWithContext.Lock()
	mock.calls.DeleteSnapshotWithContext = append(mock.calls.DeleteSnapshotWithContext, callInfo)
	mock.lockDeleteSnapshotWithContext.Unlock()
	return mock.DeleteSnapshotWithContextFunc(contextMoqParam, deleteSnapshotInput, options...)
}

// DeleteSnapshotWithContextCalls gets all the calls that were made to DeleteSnapshotWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteSnapshotWithContextCalls())
func (mock *elasticacheClientMock) DeleteSnapshotWithContextCalls() []struct {
	ContextMoqParam     context.Context
	DeleteSnapshotInput *elasticache.DeleteSnapshotInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		DeleteSnapshotInput *elasticache.DeleteSnapshotInput
		Options             []request.Option
	}
	mock.lockDeleteSnapshotWithContext.RLock()
	calls = mock.calls.DeleteSnapshotWithContext
	mock.lockDeleteSnapshotWithContext.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *elasticacheClientMock) DeleteUser(deleteUserInput *elasticache.DeleteUserInput) (*elasticache.DeleteUserOutput, error) {
	if mock.DeleteUserFunc == nil {
		panic("elasticacheClientMock.DeleteUserFunc: method is nil but elasticacheClient.DeleteUser was just called")
	}
	callInfo := struct {
		DeleteUserInput *elasticache.DeleteUserInput
	}{
		DeleteUserInput: deleteUserInput,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(deleteUserInput)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockedelasticacheClient.DeleteUserCalls())
func (mock *elasticacheClientMock) DeleteUserCalls() []struct {
	DeleteUserInput *elasticache.DeleteUserInput
} {
	var calls []struct {
		DeleteUserInput *elasticache.DeleteUserInput
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// DeleteUserGroup calls DeleteUserGroupFunc.
func (mock *elasticacheClientMock) DeleteUserGroup(deleteUserGroupInput *elasticache.DeleteUserGroupInput) (*elasticache.DeleteUserGroupOutput, error) {
	if mock.DeleteUserGroupFunc == nil {
		panic("elasticacheClientMock.DeleteUserGroupFunc: method is nil but elasticacheClient.DeleteUserGroup was just called")
	}
	callInfo := struct {
		DeleteUserGroupInput *elasticache.DeleteUserGroupInput
	}{
		DeleteUserGroupInput: deleteUserGroupInput,
	}
	mock.lockDeleteUserGroup.Lock()
	mock.calls.DeleteUserGroup = append(mock.calls.DeleteUserGroup, callInfo)
	mock.lockDeleteUserGroup.Unlock()
	return mock.DeleteUserGroupFunc(deleteUserGroupInput)
}

// DeleteUserGroupCalls gets all the calls that were made to DeleteUserGroup.
// Check the length with:
//     len(mockedelasticacheClient.DeleteUserGroupCalls())
func (mock *elasticacheClientMock) DeleteUserGroupCalls() []struct {
	DeleteUserGroupInput *elasticache.DeleteUserGroupInput
} {
	var calls []struct {
		DeleteUserGroupInput *elasticache.DeleteUserGroupInput
	}
	mock.lockDeleteUserGroup.RLock()
	calls = mock.calls.DeleteUserGroup
	mock.lockDeleteUserGroup.RUnlock()
	return calls
}

// DeleteUserGroupRequest calls DeleteUserGroupRequestFunc.
func (mock *elasticacheClientMock) DeleteUserGroupRequest(deleteUserGroupInput *elasticache.DeleteUserGroupInput) (*request.Request, *elasticache.DeleteUserGroupOutput) {
	if mock.DeleteUserGroupRequestFunc == nil {
		panic("elasticacheClientMock.DeleteUserGroupRequestFunc: method is nil but elasticacheClient.DeleteUserGroupRequest was just called")
	}
	callInfo := struct {
		DeleteUserGroupInput *elasticache.DeleteUserGroupInput
	}{
		DeleteUserGroupInput: deleteUserGroupInput,
	}
	mock.lockDeleteUserGroupRequest.Lock()
	mock.calls.DeleteUserGroupRequest = append(mock.calls.DeleteUserGroupRequest, callInfo)
	mock.lockDeleteUserGroupRequest.Unlock()
	return mock.DeleteUserGroupRequestFunc(deleteUserGroupInput)
}

// DeleteUserGroupRequestCalls gets all the calls that were made to DeleteUserGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteUserGroupRequestCalls())
func (mock *elasticacheClientMock) DeleteUserGroupRequestCalls() []struct {
	DeleteUserGroupInput *elasticache.DeleteUserGroupInput
} {
	var calls []struct {
		DeleteUserGroupInput *elasticache.DeleteUserGroupInput
	}
	mock.lockDeleteUserGroupRequest.RLock()
	calls = mock.calls.DeleteUserGroupRequest
	mock.lockDeleteUserGroupRequest.RUnlock()
	return calls
}

// DeleteUserGroupWithContext calls DeleteUserGroupWithContextFunc.
func (mock *elasticacheClientMock) DeleteUserGroupWithContext(contextMoqParam context.Context, deleteUserGroupInput *elasticache.DeleteUserGroupInput, options ...request.Option) (*elasticache.DeleteUserGroupOutput, error) {
	if mock.DeleteUserGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteUserGroupWithContextFunc: method is nil but elasticacheClient.DeleteUserGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		DeleteUserGroupInput *elasticache.DeleteUserGroupInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		DeleteUserGroupInput: deleteUserGroupInput,
		Options:              options,
	}
	mock.lockDeleteUserGroupWithContext.Lock()
	mock.calls.DeleteUserGroupWithContext = append(mock.calls.DeleteUserGroupWithContext, callInfo)
	mock.lockDeleteUserGroupWithContext.Unlock()
	return mock.DeleteUserGroupWithContextFunc(contextMoqParam, deleteUserGroupInput, options...)
}

// DeleteUserGroupWithContextCalls gets all the calls that were made to DeleteUserGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteUserGroupWithContextCalls())
func (mock *elasticacheClientMock) DeleteUserGroupWithContextCalls() []struct {
	ContextMoqParam      context.Context
	DeleteUserGroupInput *elasticache.DeleteUserGroupInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		DeleteUserGroupInput *elasticache.DeleteUserGroupInput
		Options              []request.Option
	}
	mock.lockDeleteUserGroupWithContext.RLock()
	calls = mock.calls.DeleteUserGroupWithContext
	mock.lockDeleteUserGroupWithContext.RUnlock()
	return calls
}

// DeleteUserRequest calls DeleteUserRequestFunc.
func (mock *elasticacheClientMock) DeleteUserRequest(deleteUserInput *elasticache.DeleteUserInput) (*request.Request, *elasticache.DeleteUserOutput) {
	if mock.DeleteUserRequestFunc == nil {
		panic("elasticacheClientMock.DeleteUserRequestFunc: method is nil but elasticacheClient.DeleteUserRequest was just called")
	}
	callInfo := struct {
		DeleteUserInput *elasticache.DeleteUserInput
	}{
		DeleteUserInput: deleteUserInput,
	}
	mock.lockDeleteUserRequest.Lock()
	mock.calls.DeleteUserRequest = append(mock.calls.DeleteUserRequest, callInfo)
	mock.lockDeleteUserRequest.Unlock()
	return mock.DeleteUserRequestFunc(deleteUserInput)
}

// DeleteUserRequestCalls gets all the calls that were made to DeleteUserRequest.
// Check the length with:
//     len(mockedelasticacheClient.DeleteUserRequestCalls())
func (mock *elasticacheClientMock) DeleteUserRequestCalls() []struct {
	DeleteUserInput *elasticache.DeleteUserInput
} {
	var calls []struct {
		DeleteUserInput *elasticache.DeleteUserInput
	}
	mock.lockDeleteUserRequest.RLock()
	calls = mock.calls.DeleteUserRequest
	mock.lockDeleteUserRequest.RUnlock()
	return calls
}

// DeleteUserWithContext calls DeleteUserWithContextFunc.
func (mock *elasticacheClientMock) DeleteUserWithContext(contextMoqParam context.Context, deleteUserInput *elasticache.DeleteUserInput, options ...request.Option) (*elasticache.DeleteUserOutput, error) {
	if mock.DeleteUserWithContextFunc == nil {
		panic("elasticacheClientMock.DeleteUserWithContextFunc: method is nil but elasticacheClient.DeleteUserWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		DeleteUserInput *elasticache.DeleteUserInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		DeleteUserInput: deleteUserInput,
		Options:         options,
	}
	mock.lockDeleteUserWithContext.Lock()
	mock.calls.DeleteUserWithContext = append(mock.calls.DeleteUserWithContext, callInfo)
	mock.lockDeleteUserWithContext.Unlock()
	return mock.DeleteUserWithContextFunc(contextMoqParam, deleteUserInput, options...)
}

// DeleteUserWithContextCalls gets all the calls that were made to DeleteUserWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DeleteUserWithContextCalls())
func (mock *elasticacheClientMock) DeleteUserWithContextCalls() []struct {
	ContextMoqParam context.Context
	DeleteUserInput *elasticache.DeleteUserInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		DeleteUserInput *elasticache.DeleteUserInput
		Options         []request.Option
	}
	mock.lockDeleteUserWithContext.RLock()
	calls = mock.calls.DeleteUserWithContext
	mock.lockDeleteUserWithContext.RUnlock()
	return calls
}

// DescribeCacheClusters calls DescribeCacheClustersFunc.
func (mock *elasticacheClientMock) DescribeCacheClusters(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error) {
	if mock.DescribeCacheClustersFunc == nil {
		panic("elasticacheClientMock.DescribeCacheClustersFunc: method is nil but elasticacheClient.DescribeCacheClusters was just called")
	}
	callInfo := struct {
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	}{
		DescribeCacheClustersInput: describeCacheClustersInput,
	}
	mock.lockDescribeCacheClusters.Lock()
	mock.calls.DescribeCacheClusters = append(mock.calls.DescribeCacheClusters, callInfo)
	mock.lockDescribeCacheClusters.Unlock()
	return mock.DescribeCacheClustersFunc(describeCacheClustersInput)
}

// DescribeCacheClustersCalls gets all the calls that were made to DescribeCacheClusters.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheClustersCalls())
func (mock *elasticacheClientMock) DescribeCacheClustersCalls() []struct {
	DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
} {
	var calls []struct {
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	}
	mock.lockDescribeCacheClusters.RLock()
	calls = mock.calls.DescribeCacheClusters
	mock.lockDescribeCacheClusters.RUnlock()
	return calls
}

// DescribeCacheClustersPages calls DescribeCacheClustersPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheClustersPages(describeCacheClustersInput *elasticache.DescribeCacheClustersInput, fn func(*elasticache.DescribeCacheClustersOutput, bool) bool) error {
	if mock.DescribeCacheClustersPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheClustersPagesFunc: method is nil but elasticacheClient.DescribeCacheClustersPages was just called")
	}
	callInfo := struct {
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		Fn                         func(*elasticache.DescribeCacheClustersOutput, bool) bool
	}{
		DescribeCacheClustersInput: describeCacheClustersInput,
		Fn:                         fn,
	}
	mock.lockDescribeCacheClustersPages.Lock()
	mock.calls.DescribeCacheClustersPages = append(mock.calls.DescribeCacheClustersPages, callInfo)
	mock.lockDescribeCacheClustersPages.Unlock()
	return mock.DescribeCacheClustersPagesFunc(describeCacheClustersInput, fn)
}

// DescribeCacheClustersPagesCalls gets all the calls that were made to DescribeCacheClustersPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheClustersPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheClustersPagesCalls() []struct {
	DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	Fn                         func(*elasticache.DescribeCacheClustersOutput, bool) bool
} {
	var calls []struct {
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		Fn                         func(*elasticache.DescribeCacheClustersOutput, bool) bool
	}
	mock.lockDescribeCacheClustersPages.RLock()
	calls = mock.calls.DescribeCacheClustersPages
	mock.lockDescribeCacheClustersPages.RUnlock()
	return calls
}

// DescribeCacheClustersPagesWithContext calls DescribeCacheClustersPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheClustersPagesWithContext(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, fn func(*elasticache.DescribeCacheClustersOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeCacheClustersPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheClustersPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheClustersPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		Fn                         func(*elasticache.DescribeCacheClustersOutput, bool) bool
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		DescribeCacheClustersInput: describeCacheClustersInput,
		Fn:                         fn,
		Options:                    options,
	}
	mock.lockDescribeCacheClustersPagesWithContext.Lock()
	mock.calls.DescribeCacheClustersPagesWithContext = append(mock.calls.DescribeCacheClustersPagesWithContext, callInfo)
	mock.lockDescribeCacheClustersPagesWithContext.Unlock()
	return mock.DescribeCacheClustersPagesWithContextFunc(contextMoqParam, describeCacheClustersInput, fn, options...)
}

// DescribeCacheClustersPagesWithContextCalls gets all the calls that were made to DescribeCacheClustersPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheClustersPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheClustersPagesWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	Fn                         func(*elasticache.DescribeCacheClustersOutput, bool) bool
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		Fn                         func(*elasticache.DescribeCacheClustersOutput, bool) bool
		Options                    []request.Option
	}
	mock.lockDescribeCacheClustersPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheClustersPagesWithContext
	mock.lockDescribeCacheClustersPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheClustersRequest calls DescribeCacheClustersRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheClustersRequest(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput) {
	if mock.DescribeCacheClustersRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheClustersRequestFunc: method is nil but elasticacheClient.DescribeCacheClustersRequest was just called")
	}
	callInfo := struct {
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	}{
		DescribeCacheClustersInput: describeCacheClustersInput,
	}
	mock.lockDescribeCacheClustersRequest.Lock()
	mock.calls.DescribeCacheClustersRequest = append(mock.calls.DescribeCacheClustersRequest, callInfo)
	mock.lockDescribeCacheClustersRequest.Unlock()
	return mock.DescribeCacheClustersRequestFunc(describeCacheClustersInput)
}

// DescribeCacheClustersRequestCalls gets all the calls that were made to DescribeCacheClustersRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheClustersRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheClustersRequestCalls() []struct {
	DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
} {
	var calls []struct {
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	}
	mock.lockDescribeCacheClustersRequest.RLock()
	calls = mock.calls.DescribeCacheClustersRequest
	mock.lockDescribeCacheClustersRequest.RUnlock()
	return calls
}

// DescribeCacheClustersWithContext calls DescribeCacheClustersWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheClustersWithContext(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, options ...request.Option) (*elasticache.DescribeCacheClustersOutput, error) {
	if mock.DescribeCacheClustersWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheClustersWithContextFunc: method is nil but elasticacheClient.DescribeCacheClustersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		DescribeCacheClustersInput: describeCacheClustersInput,
		Options:                    options,
	}
	mock.lockDescribeCacheClustersWithContext.Lock()
	mock.calls.DescribeCacheClustersWithContext = append(mock.calls.DescribeCacheClustersWithContext, callInfo)
	mock.lockDescribeCacheClustersWithContext.Unlock()
	return mock.DescribeCacheClustersWithContextFunc(contextMoqParam, describeCacheClustersInput, options...)
}

// DescribeCacheClustersWithContextCalls gets all the calls that were made to DescribeCacheClustersWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheClustersWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheClustersWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		Options                    []request.Option
	}
	mock.lockDescribeCacheClustersWithContext.RLock()
	calls = mock.calls.DescribeCacheClustersWithContext
	mock.lockDescribeCacheClustersWithContext.RUnlock()
	return calls
}

// DescribeCacheEngineVersions calls DescribeCacheEngineVersionsFunc.
func (mock *elasticacheClientMock) DescribeCacheEngineVersions(describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	if mock.DescribeCacheEngineVersionsFunc == nil {
		panic("elasticacheClientMock.DescribeCacheEngineVersionsFunc: method is nil but elasticacheClient.DescribeCacheEngineVersions was just called")
	}
	callInfo := struct {
		DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
	}{
		DescribeCacheEngineVersionsInput: describeCacheEngineVersionsInput,
	}
	mock.lockDescribeCacheEngineVersions.Lock()
	mock.calls.DescribeCacheEngineVersions = append(mock.calls.DescribeCacheEngineVersions, callInfo)
	mock.lockDescribeCacheEngineVersions.Unlock()
	return mock.DescribeCacheEngineVersionsFunc(describeCacheEngineVersionsInput)
}

// DescribeCacheEngineVersionsCalls gets all the calls that were made to DescribeCacheEngineVersions.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheEngineVersionsCalls())
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsCalls() []struct {
	DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
} {
	var calls []struct {
		DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
	}
	mock.lockDescribeCacheEngineVersions.RLock()
	calls = mock.calls.DescribeCacheEngineVersions
	mock.lockDescribeCacheEngineVersions.RUnlock()
	return calls
}

// DescribeCacheEngineVersionsPages calls DescribeCacheEngineVersionsPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsPages(describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput, fn func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error {
	if mock.DescribeCacheEngineVersionsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheEngineVersionsPagesFunc: method is nil but elasticacheClient.DescribeCacheEngineVersionsPages was just called")
	}
	callInfo := struct {
		DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
		Fn                               func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
	}{
		DescribeCacheEngineVersionsInput: describeCacheEngineVersionsInput,
		Fn:                               fn,
	}
	mock.lockDescribeCacheEngineVersionsPages.Lock()
	mock.calls.DescribeCacheEngineVersionsPages = append(mock.calls.DescribeCacheEngineVersionsPages, callInfo)
	mock.lockDescribeCacheEngineVersionsPages.Unlock()
	return mock.DescribeCacheEngineVersionsPagesFunc(describeCacheEngineVersionsInput, fn)
}

// DescribeCacheEngineVersionsPagesCalls gets all the calls that were made to DescribeCacheEngineVersionsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheEngineVersionsPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsPagesCalls() []struct {
	DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
	Fn                               func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
} {
	var calls []struct {
		DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
		Fn                               func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
	}
	mock.lockDescribeCacheEngineVersionsPages.RLock()
	calls = mock.calls.DescribeCacheEngineVersionsPages
	mock.lockDescribeCacheEngineVersionsPages.RUnlock()
	return calls
}

// DescribeCacheEngineVersionsPagesWithContext calls DescribeCacheEngineVersionsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsPagesWithContext(contextMoqParam context.Context, describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput, fn func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeCacheEngineVersionsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheEngineVersionsPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheEngineVersionsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
		Fn                               func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeCacheEngineVersionsInput: describeCacheEngineVersionsInput,
		Fn:                               fn,
		Options:                          options,
	}
	mock.lockDescribeCacheEngineVersionsPagesWithContext.Lock()
	mock.calls.DescribeCacheEngineVersionsPagesWithContext = append(mock.calls.DescribeCacheEngineVersionsPagesWithContext, callInfo)
	mock.lockDescribeCacheEngineVersionsPagesWithContext.Unlock()
	return mock.DescribeCacheEngineVersionsPagesWithContextFunc(contextMoqParam, describeCacheEngineVersionsInput, fn, options...)
}

// DescribeCacheEngineVersionsPagesWithContextCalls gets all the calls that were made to DescribeCacheEngineVersionsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheEngineVersionsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsPagesWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
	Fn                               func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
		Fn                               func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
		Options                          []request.Option
	}
	mock.lockDescribeCacheEngineVersionsPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheEngineVersionsPagesWithContext
	mock.lockDescribeCacheEngineVersionsPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheEngineVersionsRequest calls DescribeCacheEngineVersionsRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsRequest(describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput) {
	if mock.DescribeCacheEngineVersionsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheEngineVersionsRequestFunc: method is nil but elasticacheClient.DescribeCacheEngineVersionsRequest was just called")
	}
	callInfo := struct {
		DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
	}{
		DescribeCacheEngineVersionsInput: describeCacheEngineVersionsInput,
	}
	mock.lockDescribeCacheEngineVersionsRequest.Lock()
	mock.calls.DescribeCacheEngineVersionsRequest = append(mock.calls.DescribeCacheEngineVersionsRequest, callInfo)
	mock.lockDescribeCacheEngineVersionsRequest.Unlock()
	return mock.DescribeCacheEngineVersionsRequestFunc(describeCacheEngineVersionsInput)
}

// DescribeCacheEngineVersionsRequestCalls gets all the calls that were made to DescribeCacheEngineVersionsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheEngineVersionsRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsRequestCalls() []struct {
	DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
} {
	var calls []struct {
		DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
	}
	mock.lockDescribeCacheEngineVersionsRequest.RLock()
	calls = mock.calls.DescribeCacheEngineVersionsRequest
	mock.lockDescribeCacheEngineVersionsRequest.RUnlock()
	return calls
}

// DescribeCacheEngineVersionsWithContext calls DescribeCacheEngineVersionsWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsWithContext(contextMoqParam context.Context, describeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput, options ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	if mock.DescribeCacheEngineVersionsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheEngineVersionsWithContextFunc: method is nil but elasticacheClient.DescribeCacheEngineVersionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeCacheEngineVersionsInput: describeCacheEngineVersionsInput,
		Options:                          options,
	}
	mock.lockDescribeCacheEngineVersionsWithContext.Lock()
	mock.calls.DescribeCacheEngineVersionsWithContext = append(mock.calls.DescribeCacheEngineVersionsWithContext, callInfo)
	mock.lockDescribeCacheEngineVersionsWithContext.Unlock()
	return mock.DescribeCacheEngineVersionsWithContextFunc(contextMoqParam, describeCacheEngineVersionsInput, options...)
}

// DescribeCacheEngineVersionsWithContextCalls gets all the calls that were made to DescribeCacheEngineVersionsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheEngineVersionsWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheEngineVersionsWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeCacheEngineVersionsInput *elasticache.DescribeCacheEngineVersionsInput
		Options                          []request.Option
	}
	mock.lockDescribeCacheEngineVersionsWithContext.RLock()
	calls = mock.calls.DescribeCacheEngineVersionsWithContext
	mock.lockDescribeCacheEngineVersionsWithContext.RUnlock()
	return calls
}

// DescribeCacheParameterGroups calls DescribeCacheParameterGroupsFunc.
func (mock *elasticacheClientMock) DescribeCacheParameterGroups(describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	if mock.DescribeCacheParameterGroupsFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParameterGroupsFunc: method is nil but elasticacheClient.DescribeCacheParameterGroups was just called")
	}
	callInfo := struct {
		DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
	}{
		DescribeCacheParameterGroupsInput: describeCacheParameterGroupsInput,
	}
	mock.lockDescribeCacheParameterGroups.Lock()
	mock.calls.DescribeCacheParameterGroups = append(mock.calls.DescribeCacheParameterGroups, callInfo)
	mock.lockDescribeCacheParameterGroups.Unlock()
	return mock.DescribeCacheParameterGroupsFunc(describeCacheParameterGroupsInput)
}

// DescribeCacheParameterGroupsCalls gets all the calls that were made to DescribeCacheParameterGroups.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParameterGroupsCalls())
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsCalls() []struct {
	DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
} {
	var calls []struct {
		DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
	}
	mock.lockDescribeCacheParameterGroups.RLock()
	calls = mock.calls.DescribeCacheParameterGroups
	mock.lockDescribeCacheParameterGroups.RUnlock()
	return calls
}

// DescribeCacheParameterGroupsPages calls DescribeCacheParameterGroupsPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsPages(describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput, fn func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error {
	if mock.DescribeCacheParameterGroupsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParameterGroupsPagesFunc: method is nil but elasticacheClient.DescribeCacheParameterGroupsPages was just called")
	}
	callInfo := struct {
		DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
		Fn                                func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
	}{
		DescribeCacheParameterGroupsInput: describeCacheParameterGroupsInput,
		Fn:                                fn,
	}
	mock.lockDescribeCacheParameterGroupsPages.Lock()
	mock.calls.DescribeCacheParameterGroupsPages = append(mock.calls.DescribeCacheParameterGroupsPages, callInfo)
	mock.lockDescribeCacheParameterGroupsPages.Unlock()
	return mock.DescribeCacheParameterGroupsPagesFunc(describeCacheParameterGroupsInput, fn)
}

// DescribeCacheParameterGroupsPagesCalls gets all the calls that were made to DescribeCacheParameterGroupsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParameterGroupsPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsPagesCalls() []struct {
	DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
	Fn                                func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
		Fn                                func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
	}
	mock.lockDescribeCacheParameterGroupsPages.RLock()
	calls = mock.calls.DescribeCacheParameterGroupsPages
	mock.lockDescribeCacheParameterGroupsPages.RUnlock()
	return calls
}

// DescribeCacheParameterGroupsPagesWithContext calls DescribeCacheParameterGroupsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsPagesWithContext(contextMoqParam context.Context, describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput, fn func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeCacheParameterGroupsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParameterGroupsPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheParameterGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
		Fn                                func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		DescribeCacheParameterGroupsInput: describeCacheParameterGroupsInput,
		Fn:                                fn,
		Options:                           options,
	}
	mock.lockDescribeCacheParameterGroupsPagesWithContext.Lock()
	mock.calls.DescribeCacheParameterGroupsPagesWithContext = append(mock.calls.DescribeCacheParameterGroupsPagesWithContext, callInfo)
	mock.lockDescribeCacheParameterGroupsPagesWithContext.Unlock()
	return mock.DescribeCacheParameterGroupsPagesWithContextFunc(contextMoqParam, describeCacheParameterGroupsInput, fn, options...)
}

// DescribeCacheParameterGroupsPagesWithContextCalls gets all the calls that were made to DescribeCacheParameterGroupsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParameterGroupsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsPagesWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
	Fn                                func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
		Fn                                func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
		Options                           []request.Option
	}
	mock.lockDescribeCacheParameterGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheParameterGroupsPagesWithContext
	mock.lockDescribeCacheParameterGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheParameterGroupsRequest calls DescribeCacheParameterGroupsRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsRequest(describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput) {
	if mock.DescribeCacheParameterGroupsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParameterGroupsRequestFunc: method is nil but elasticacheClient.DescribeCacheParameterGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
	}{
		DescribeCacheParameterGroupsInput: describeCacheParameterGroupsInput,
	}
	mock.lockDescribeCacheParameterGroupsRequest.Lock()
	mock.calls.DescribeCacheParameterGroupsRequest = append(mock.calls.DescribeCacheParameterGroupsRequest, callInfo)
	mock.lockDescribeCacheParameterGroupsRequest.Unlock()
	return mock.DescribeCacheParameterGroupsRequestFunc(describeCacheParameterGroupsInput)
}

// DescribeCacheParameterGroupsRequestCalls gets all the calls that were made to DescribeCacheParameterGroupsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParameterGroupsRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsRequestCalls() []struct {
	DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
} {
	var calls []struct {
		DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
	}
	mock.lockDescribeCacheParameterGroupsRequest.RLock()
	calls = mock.calls.DescribeCacheParameterGroupsRequest
	mock.lockDescribeCacheParameterGroupsRequest.RUnlock()
	return calls
}

// DescribeCacheParameterGroupsWithContext calls DescribeCacheParameterGroupsWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsWithContext(contextMoqParam context.Context, describeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput, options ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	if mock.DescribeCacheParameterGroupsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParameterGroupsWithContextFunc: method is nil but elasticacheClient.DescribeCacheParameterGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		DescribeCacheParameterGroupsInput: describeCacheParameterGroupsInput,
		Options:                           options,
	}
	mock.lockDescribeCacheParameterGroupsWithContext.Lock()
	mock.calls.DescribeCacheParameterGroupsWithContext = append(mock.calls.DescribeCacheParameterGroupsWithContext, callInfo)
	mock.lockDescribeCacheParameterGroupsWithContext.Unlock()
	return mock.DescribeCacheParameterGroupsWithContextFunc(contextMoqParam, describeCacheParameterGroupsInput, options...)
}

// DescribeCacheParameterGroupsWithContextCalls gets all the calls that were made to DescribeCacheParameterGroupsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParameterGroupsWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheParameterGroupsWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		DescribeCacheParameterGroupsInput *elasticache.DescribeCacheParameterGroupsInput
		Options                           []request.Option
	}
	mock.lockDescribeCacheParameterGroupsWithContext.RLock()
	calls = mock.calls.DescribeCacheParameterGroupsWithContext
	mock.lockDescribeCacheParameterGroupsWithContext.RUnlock()
	return calls
}

// DescribeCacheParameters calls DescribeCacheParametersFunc.
func (mock *elasticacheClientMock) DescribeCacheParameters(describeCacheParametersInput *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error) {
	if mock.DescribeCacheParametersFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParametersFunc: method is nil but elasticacheClient.DescribeCacheParameters was just called")
	}
	callInfo := struct {
		DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
	}{
		DescribeCacheParametersInput: describeCacheParametersInput,
	}
	mock.lockDescribeCacheParameters.Lock()
	mock.calls.DescribeCacheParameters = append(mock.calls.DescribeCacheParameters, callInfo)
	mock.lockDescribeCacheParameters.Unlock()
	return mock.DescribeCacheParametersFunc(describeCacheParametersInput)
}

// DescribeCacheParametersCalls gets all the calls that were made to DescribeCacheParameters.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParametersCalls())
func (mock *elasticacheClientMock) DescribeCacheParametersCalls() []struct {
	DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
} {
	var calls []struct {
		DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
	}
	mock.lockDescribeCacheParameters.RLock()
	calls = mock.calls.DescribeCacheParameters
	mock.lockDescribeCacheParameters.RUnlock()
	return calls
}

// DescribeCacheParametersPages calls DescribeCacheParametersPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheParametersPages(describeCacheParametersInput *elasticache.DescribeCacheParametersInput, fn func(*elasticache.DescribeCacheParametersOutput, bool) bool) error {
	if mock.DescribeCacheParametersPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParametersPagesFunc: method is nil but elasticacheClient.DescribeCacheParametersPages was just called")
	}
	callInfo := struct {
		DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
		Fn                           func(*elasticache.DescribeCacheParametersOutput, bool) bool
	}{
		DescribeCacheParametersInput: describeCacheParametersInput,
		Fn:                           fn,
	}
	mock.lockDescribeCacheParametersPages.Lock()
	mock.calls.DescribeCacheParametersPages = append(mock.calls.DescribeCacheParametersPages, callInfo)
	mock.lockDescribeCacheParametersPages.Unlock()
	return mock.DescribeCacheParametersPagesFunc(describeCacheParametersInput, fn)
}

// DescribeCacheParametersPagesCalls gets all the calls that were made to DescribeCacheParametersPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParametersPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheParametersPagesCalls() []struct {
	DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
	Fn                           func(*elasticache.DescribeCacheParametersOutput, bool) bool
} {
	var calls []struct {
		DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
		Fn                           func(*elasticache.DescribeCacheParametersOutput, bool) bool
	}
	mock.lockDescribeCacheParametersPages.RLock()
	calls = mock.calls.DescribeCacheParametersPages
	mock.lockDescribeCacheParametersPages.RUnlock()
	return calls
}

// DescribeCacheParametersPagesWithContext calls DescribeCacheParametersPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheParametersPagesWithContext(contextMoqParam context.Context, describeCacheParametersInput *elasticache.DescribeCacheParametersInput, fn func(*elasticache.DescribeCacheParametersOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeCacheParametersPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParametersPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheParametersPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
		Fn                           func(*elasticache.DescribeCacheParametersOutput, bool) bool
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		DescribeCacheParametersInput: describeCacheParametersInput,
		Fn:                           fn,
		Options:                      options,
	}
	mock.lockDescribeCacheParametersPagesWithContext.Lock()
	mock.calls.DescribeCacheParametersPagesWithContext = append(mock.calls.DescribeCacheParametersPagesWithContext, callInfo)
	mock.lockDescribeCacheParametersPagesWithContext.Unlock()
	return mock.DescribeCacheParametersPagesWithContextFunc(contextMoqParam, describeCacheParametersInput, fn, options...)
}

// DescribeCacheParametersPagesWithContextCalls gets all the calls that were made to DescribeCacheParametersPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParametersPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheParametersPagesWithContextCalls() []struct {
	ContextMoqParam              context.Context
	DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
	Fn                           func(*elasticache.DescribeCacheParametersOutput, bool) bool
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
		Fn                           func(*elasticache.DescribeCacheParametersOutput, bool) bool
		Options                      []request.Option
	}
	mock.lockDescribeCacheParametersPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheParametersPagesWithContext
	mock.lockDescribeCacheParametersPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheParametersRequest calls DescribeCacheParametersRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheParametersRequest(describeCacheParametersInput *elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput) {
	if mock.DescribeCacheParametersRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParametersRequestFunc: method is nil but elasticacheClient.DescribeCacheParametersRequest was just called")
	}
	callInfo := struct {
		DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
	}{
		DescribeCacheParametersInput: describeCacheParametersInput,
	}
	mock.lockDescribeCacheParametersRequest.Lock()
	mock.calls.DescribeCacheParametersRequest = append(mock.calls.DescribeCacheParametersRequest, callInfo)
	mock.lockDescribeCacheParametersRequest.Unlock()
	return mock.DescribeCacheParametersRequestFunc(describeCacheParametersInput)
}

// DescribeCacheParametersRequestCalls gets all the calls that were made to DescribeCacheParametersRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParametersRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheParametersRequestCalls() []struct {
	DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
} {
	var calls []struct {
		DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
	}
	mock.lockDescribeCacheParametersRequest.RLock()
	calls = mock.calls.DescribeCacheParametersRequest
	mock.lockDescribeCacheParametersRequest.RUnlock()
	return calls
}

// DescribeCacheParametersWithContext calls DescribeCacheParametersWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheParametersWithContext(contextMoqParam context.Context, describeCacheParametersInput *elasticache.DescribeCacheParametersInput, options ...request.Option) (*elasticache.DescribeCacheParametersOutput, error) {
	if mock.DescribeCacheParametersWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheParametersWithContextFunc: method is nil but elasticacheClient.DescribeCacheParametersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam              context.Context
		DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
		Options                      []request.Option
	}{
		ContextMoqParam:              contextMoqParam,
		DescribeCacheParametersInput: describeCacheParametersInput,
		Options:                      options,
	}
	mock.lockDescribeCacheParametersWithContext.Lock()
	mock.calls.DescribeCacheParametersWithContext = append(mock.calls.DescribeCacheParametersWithContext, callInfo)
	mock.lockDescribeCacheParametersWithContext.Unlock()
	return mock.DescribeCacheParametersWithContextFunc(contextMoqParam, describeCacheParametersInput, options...)
}

// DescribeCacheParametersWithContextCalls gets all the calls that were made to DescribeCacheParametersWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheParametersWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheParametersWithContextCalls() []struct {
	ContextMoqParam              context.Context
	DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
	Options                      []request.Option
} {
	var calls []struct {
		ContextMoqParam              context.Context
		DescribeCacheParametersInput *elasticache.DescribeCacheParametersInput
		Options                      []request.Option
	}
	mock.lockDescribeCacheParametersWithContext.RLock()
	calls = mock.calls.DescribeCacheParametersWithContext
	mock.lockDescribeCacheParametersWithContext.RUnlock()
	return calls
}

// DescribeCacheSecurityGroups calls DescribeCacheSecurityGroupsFunc.
func (mock *elasticacheClientMock) DescribeCacheSecurityGroups(describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	if mock.DescribeCacheSecurityGroupsFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSecurityGroupsFunc: method is nil but elasticacheClient.DescribeCacheSecurityGroups was just called")
	}
	callInfo := struct {
		DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
	}{
		DescribeCacheSecurityGroupsInput: describeCacheSecurityGroupsInput,
	}
	mock.lockDescribeCacheSecurityGroups.Lock()
	mock.calls.DescribeCacheSecurityGroups = append(mock.calls.DescribeCacheSecurityGroups, callInfo)
	mock.lockDescribeCacheSecurityGroups.Unlock()
	return mock.DescribeCacheSecurityGroupsFunc(describeCacheSecurityGroupsInput)
}

// DescribeCacheSecurityGroupsCalls gets all the calls that were made to DescribeCacheSecurityGroups.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSecurityGroupsCalls())
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsCalls() []struct {
	DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
} {
	var calls []struct {
		DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
	}
	mock.lockDescribeCacheSecurityGroups.RLock()
	calls = mock.calls.DescribeCacheSecurityGroups
	mock.lockDescribeCacheSecurityGroups.RUnlock()
	return calls
}

// DescribeCacheSecurityGroupsPages calls DescribeCacheSecurityGroupsPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsPages(describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput, fn func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error {
	if mock.DescribeCacheSecurityGroupsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSecurityGroupsPagesFunc: method is nil but elasticacheClient.DescribeCacheSecurityGroupsPages was just called")
	}
	callInfo := struct {
		DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
		Fn                               func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
	}{
		DescribeCacheSecurityGroupsInput: describeCacheSecurityGroupsInput,
		Fn:                               fn,
	}
	mock.lockDescribeCacheSecurityGroupsPages.Lock()
	mock.calls.DescribeCacheSecurityGroupsPages = append(mock.calls.DescribeCacheSecurityGroupsPages, callInfo)
	mock.lockDescribeCacheSecurityGroupsPages.Unlock()
	return mock.DescribeCacheSecurityGroupsPagesFunc(describeCacheSecurityGroupsInput, fn)
}

// DescribeCacheSecurityGroupsPagesCalls gets all the calls that were made to DescribeCacheSecurityGroupsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSecurityGroupsPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsPagesCalls() []struct {
	DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
	Fn                               func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
		Fn                               func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
	}
	mock.lockDescribeCacheSecurityGroupsPages.RLock()
	calls = mock.calls.DescribeCacheSecurityGroupsPages
	mock.lockDescribeCacheSecurityGroupsPages.RUnlock()
	return calls
}

// DescribeCacheSecurityGroupsPagesWithContext calls DescribeCacheSecurityGroupsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsPagesWithContext(contextMoqParam context.Context, describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput, fn func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeCacheSecurityGroupsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSecurityGroupsPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheSecurityGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
		Fn                               func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeCacheSecurityGroupsInput: describeCacheSecurityGroupsInput,
		Fn:                               fn,
		Options:                          options,
	}
	mock.lockDescribeCacheSecurityGroupsPagesWithContext.Lock()
	mock.calls.DescribeCacheSecurityGroupsPagesWithContext = append(mock.calls.DescribeCacheSecurityGroupsPagesWithContext, callInfo)
	mock.lockDescribeCacheSecurityGroupsPagesWithContext.Unlock()
	return mock.DescribeCacheSecurityGroupsPagesWithContextFunc(contextMoqParam, describeCacheSecurityGroupsInput, fn, options...)
}

// DescribeCacheSecurityGroupsPagesWithContextCalls gets all the calls that were made to DescribeCacheSecurityGroupsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSecurityGroupsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsPagesWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
	Fn                               func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
		Fn                               func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
		Options                          []request.Option
	}
	mock.lockDescribeCacheSecurityGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheSecurityGroupsPagesWithContext
	mock.lockDescribeCacheSecurityGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheSecurityGroupsRequest calls DescribeCacheSecurityGroupsRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsRequest(describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput) {
	if mock.DescribeCacheSecurityGroupsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSecurityGroupsRequestFunc: method is nil but elasticacheClient.DescribeCacheSecurityGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
	}{
		DescribeCacheSecurityGroupsInput: describeCacheSecurityGroupsInput,
	}
	mock.lockDescribeCacheSecurityGroupsRequest.Lock()
	mock.calls.DescribeCacheSecurityGroupsRequest = append(mock.calls.DescribeCacheSecurityGroupsRequest, callInfo)
	mock.lockDescribeCacheSecurityGroupsRequest.Unlock()
	return mock.DescribeCacheSecurityGroupsRequestFunc(describeCacheSecurityGroupsInput)
}

// DescribeCacheSecurityGroupsRequestCalls gets all the calls that were made to DescribeCacheSecurityGroupsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSecurityGroupsRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsRequestCalls() []struct {
	DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
} {
	var calls []struct {
		DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
	}
	mock.lockDescribeCacheSecurityGroupsRequest.RLock()
	calls = mock.calls.DescribeCacheSecurityGroupsRequest
	mock.lockDescribeCacheSecurityGroupsRequest.RUnlock()
	return calls
}

// DescribeCacheSecurityGroupsWithContext calls DescribeCacheSecurityGroupsWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsWithContext(contextMoqParam context.Context, describeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput, options ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	if mock.DescribeCacheSecurityGroupsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSecurityGroupsWithContextFunc: method is nil but elasticacheClient.DescribeCacheSecurityGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                  context.Context
		DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
		Options                          []request.Option
	}{
		ContextMoqParam:                  contextMoqParam,
		DescribeCacheSecurityGroupsInput: describeCacheSecurityGroupsInput,
		Options:                          options,
	}
	mock.lockDescribeCacheSecurityGroupsWithContext.Lock()
	mock.calls.DescribeCacheSecurityGroupsWithContext = append(mock.calls.DescribeCacheSecurityGroupsWithContext, callInfo)
	mock.lockDescribeCacheSecurityGroupsWithContext.Unlock()
	return mock.DescribeCacheSecurityGroupsWithContextFunc(contextMoqParam, describeCacheSecurityGroupsInput, options...)
}

// DescribeCacheSecurityGroupsWithContextCalls gets all the calls that were made to DescribeCacheSecurityGroupsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSecurityGroupsWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheSecurityGroupsWithContextCalls() []struct {
	ContextMoqParam                  context.Context
	DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
	Options                          []request.Option
} {
	var calls []struct {
		ContextMoqParam                  context.Context
		DescribeCacheSecurityGroupsInput *elasticache.DescribeCacheSecurityGroupsInput
		Options                          []request.Option
	}
	mock.lockDescribeCacheSecurityGroupsWithContext.RLock()
	calls = mock.calls.DescribeCacheSecurityGroupsWithContext
	mock.lockDescribeCacheSecurityGroupsWithContext.RUnlock()
	return calls
}

// DescribeCacheSubnetGroups calls DescribeCacheSubnetGroupsFunc.
func (mock *elasticacheClientMock) DescribeCacheSubnetGroups(describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	if mock.DescribeCacheSubnetGroupsFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSubnetGroupsFunc: method is nil but elasticacheClient.DescribeCacheSubnetGroups was just called")
	}
	callInfo := struct {
		DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
	}{
		DescribeCacheSubnetGroupsInput: describeCacheSubnetGroupsInput,
	}
	mock.lockDescribeCacheSubnetGroups.Lock()
	mock.calls.DescribeCacheSubnetGroups = append(mock.calls.DescribeCacheSubnetGroups, callInfo)
	mock.lockDescribeCacheSubnetGroups.Unlock()
	return mock.DescribeCacheSubnetGroupsFunc(describeCacheSubnetGroupsInput)
}

// DescribeCacheSubnetGroupsCalls gets all the calls that were made to DescribeCacheSubnetGroups.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSubnetGroupsCalls())
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsCalls() []struct {
	DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
} {
	var calls []struct {
		DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
	}
	mock.lockDescribeCacheSubnetGroups.RLock()
	calls = mock.calls.DescribeCacheSubnetGroups
	mock.lockDescribeCacheSubnetGroups.RUnlock()
	return calls
}

// DescribeCacheSubnetGroupsPages calls DescribeCacheSubnetGroupsPagesFunc.
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsPages(describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput, fn func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error {
	if mock.DescribeCacheSubnetGroupsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSubnetGroupsPagesFunc: method is nil but elasticacheClient.DescribeCacheSubnetGroupsPages was just called")
	}
	callInfo := struct {
		DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
		Fn                             func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
	}{
		DescribeCacheSubnetGroupsInput: describeCacheSubnetGroupsInput,
		Fn:                             fn,
	}
	mock.lockDescribeCacheSubnetGroupsPages.Lock()
	mock.calls.DescribeCacheSubnetGroupsPages = append(mock.calls.DescribeCacheSubnetGroupsPages, callInfo)
	mock.lockDescribeCacheSubnetGroupsPages.Unlock()
	return mock.DescribeCacheSubnetGroupsPagesFunc(describeCacheSubnetGroupsInput, fn)
}

// DescribeCacheSubnetGroupsPagesCalls gets all the calls that were made to DescribeCacheSubnetGroupsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSubnetGroupsPagesCalls())
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsPagesCalls() []struct {
	DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
	Fn                             func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
		Fn                             func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
	}
	mock.lockDescribeCacheSubnetGroupsPages.RLock()
	calls = mock.calls.DescribeCacheSubnetGroupsPages
	mock.lockDescribeCacheSubnetGroupsPages.RUnlock()
	return calls
}

// DescribeCacheSubnetGroupsPagesWithContext calls DescribeCacheSubnetGroupsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsPagesWithContext(contextMoqParam context.Context, describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput, fn func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeCacheSubnetGroupsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSubnetGroupsPagesWithContextFunc: method is nil but elasticacheClient.DescribeCacheSubnetGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
		Fn                             func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		DescribeCacheSubnetGroupsInput: describeCacheSubnetGroupsInput,
		Fn:                             fn,
		Options:                        options,
	}
	mock.lockDescribeCacheSubnetGroupsPagesWithContext.Lock()
	mock.calls.DescribeCacheSubnetGroupsPagesWithContext = append(mock.calls.DescribeCacheSubnetGroupsPagesWithContext, callInfo)
	mock.lockDescribeCacheSubnetGroupsPagesWithContext.Unlock()
	return mock.DescribeCacheSubnetGroupsPagesWithContextFunc(contextMoqParam, describeCacheSubnetGroupsInput, fn, options...)
}

// DescribeCacheSubnetGroupsPagesWithContextCalls gets all the calls that were made to DescribeCacheSubnetGroupsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSubnetGroupsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsPagesWithContextCalls() []struct {
	ContextMoqParam                context.Context
	DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
	Fn                             func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
		Fn                             func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
		Options                        []request.Option
	}
	mock.lockDescribeCacheSubnetGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeCacheSubnetGroupsPagesWithContext
	mock.lockDescribeCacheSubnetGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeCacheSubnetGroupsRequest calls DescribeCacheSubnetGroupsRequestFunc.
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsRequest(describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput) {
	if mock.DescribeCacheSubnetGroupsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSubnetGroupsRequestFunc: method is nil but elasticacheClient.DescribeCacheSubnetGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
	}{
		DescribeCacheSubnetGroupsInput: describeCacheSubnetGroupsInput,
	}
	mock.lockDescribeCacheSubnetGroupsRequest.Lock()
	mock.calls.DescribeCacheSubnetGroupsRequest = append(mock.calls.DescribeCacheSubnetGroupsRequest, callInfo)
	mock.lockDescribeCacheSubnetGroupsRequest.Unlock()
	return mock.DescribeCacheSubnetGroupsRequestFunc(describeCacheSubnetGroupsInput)
}

// DescribeCacheSubnetGroupsRequestCalls gets all the calls that were made to DescribeCacheSubnetGroupsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSubnetGroupsRequestCalls())
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsRequestCalls() []struct {
	DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
} {
	var calls []struct {
		DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
	}
	mock.lockDescribeCacheSubnetGroupsRequest.RLock()
	calls = mock.calls.DescribeCacheSubnetGroupsRequest
	mock.lockDescribeCacheSubnetGroupsRequest.RUnlock()
	return calls
}

// DescribeCacheSubnetGroupsWithContext calls DescribeCacheSubnetGroupsWithContextFunc.
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsWithContext(contextMoqParam context.Context, describeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput, options ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	if mock.DescribeCacheSubnetGroupsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeCacheSubnetGroupsWithContextFunc: method is nil but elasticacheClient.DescribeCacheSubnetGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		DescribeCacheSubnetGroupsInput: describeCacheSubnetGroupsInput,
		Options:                        options,
	}
	mock.lockDescribeCacheSubnetGroupsWithContext.Lock()
	mock.calls.DescribeCacheSubnetGroupsWithContext = append(mock.calls.DescribeCacheSubnetGroupsWithContext, callInfo)
	mock.lockDescribeCacheSubnetGroupsWithContext.Unlock()
	return mock.DescribeCacheSubnetGroupsWithContextFunc(contextMoqParam, describeCacheSubnetGroupsInput, options...)
}

// DescribeCacheSubnetGroupsWithContextCalls gets all the calls that were made to DescribeCacheSubnetGroupsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeCacheSubnetGroupsWithContextCalls())
func (mock *elasticacheClientMock) DescribeCacheSubnetGroupsWithContextCalls() []struct {
	ContextMoqParam                context.Context
	DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		DescribeCacheSubnetGroupsInput *elasticache.DescribeCacheSubnetGroupsInput
		Options                        []request.Option
	}
	mock.lockDescribeCacheSubnetGroupsWithContext.RLock()
	calls = mock.calls.DescribeCacheSubnetGroupsWithContext
	mock.lockDescribeCacheSubnetGroupsWithContext.RUnlock()
	return calls
}

// DescribeEngineDefaultParameters calls DescribeEngineDefaultParametersFunc.
func (mock *elasticacheClientMock) DescribeEngineDefaultParameters(describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	if mock.DescribeEngineDefaultParametersFunc == nil {
		panic("elasticacheClientMock.DescribeEngineDefaultParametersFunc: method is nil but elasticacheClient.DescribeEngineDefaultParameters was just called")
	}
	callInfo := struct {
		DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
	}{
		DescribeEngineDefaultParametersInput: describeEngineDefaultParametersInput,
	}
	mock.lockDescribeEngineDefaultParameters.Lock()
	mock.calls.DescribeEngineDefaultParameters = append(mock.calls.DescribeEngineDefaultParameters, callInfo)
	mock.lockDescribeEngineDefaultParameters.Unlock()
	return mock.DescribeEngineDefaultParametersFunc(describeEngineDefaultParametersInput)
}

// DescribeEngineDefaultParametersCalls gets all the calls that were made to DescribeEngineDefaultParameters.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEngineDefaultParametersCalls())
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersCalls() []struct {
	DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
} {
	var calls []struct {
		DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
	}
	mock.lockDescribeEngineDefaultParameters.RLock()
	calls = mock.calls.DescribeEngineDefaultParameters
	mock.lockDescribeEngineDefaultParameters.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersPages calls DescribeEngineDefaultParametersPagesFunc.
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersPages(describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput, fn func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error {
	if mock.DescribeEngineDefaultParametersPagesFunc == nil {
		panic("elasticacheClientMock.DescribeEngineDefaultParametersPagesFunc: method is nil but elasticacheClient.DescribeEngineDefaultParametersPages was just called")
	}
	callInfo := struct {
		DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
		Fn                                   func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
	}{
		DescribeEngineDefaultParametersInput: describeEngineDefaultParametersInput,
		Fn:                                   fn,
	}
	mock.lockDescribeEngineDefaultParametersPages.Lock()
	mock.calls.DescribeEngineDefaultParametersPages = append(mock.calls.DescribeEngineDefaultParametersPages, callInfo)
	mock.lockDescribeEngineDefaultParametersPages.Unlock()
	return mock.DescribeEngineDefaultParametersPagesFunc(describeEngineDefaultParametersInput, fn)
}

// DescribeEngineDefaultParametersPagesCalls gets all the calls that were made to DescribeEngineDefaultParametersPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEngineDefaultParametersPagesCalls())
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersPagesCalls() []struct {
	DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
	Fn                                   func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
} {
	var calls []struct {
		DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
		Fn                                   func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
	}
	mock.lockDescribeEngineDefaultParametersPages.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersPages
	mock.lockDescribeEngineDefaultParametersPages.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersPagesWithContext calls DescribeEngineDefaultParametersPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersPagesWithContext(contextMoqParam context.Context, describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput, fn func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeEngineDefaultParametersPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeEngineDefaultParametersPagesWithContextFunc: method is nil but elasticacheClient.DescribeEngineDefaultParametersPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
		Fn                                   func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		DescribeEngineDefaultParametersInput: describeEngineDefaultParametersInput,
		Fn:                                   fn,
		Options:                              options,
	}
	mock.lockDescribeEngineDefaultParametersPagesWithContext.Lock()
	mock.calls.DescribeEngineDefaultParametersPagesWithContext = append(mock.calls.DescribeEngineDefaultParametersPagesWithContext, callInfo)
	mock.lockDescribeEngineDefaultParametersPagesWithContext.Unlock()
	return mock.DescribeEngineDefaultParametersPagesWithContextFunc(contextMoqParam, describeEngineDefaultParametersInput, fn, options...)
}

// DescribeEngineDefaultParametersPagesWithContextCalls gets all the calls that were made to DescribeEngineDefaultParametersPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEngineDefaultParametersPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersPagesWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
	Fn                                   func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
		Fn                                   func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
		Options                              []request.Option
	}
	mock.lockDescribeEngineDefaultParametersPagesWithContext.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersPagesWithContext
	mock.lockDescribeEngineDefaultParametersPagesWithContext.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersRequest calls DescribeEngineDefaultParametersRequestFunc.
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersRequest(describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput) {
	if mock.DescribeEngineDefaultParametersRequestFunc == nil {
		panic("elasticacheClientMock.DescribeEngineDefaultParametersRequestFunc: method is nil but elasticacheClient.DescribeEngineDefaultParametersRequest was just called")
	}
	callInfo := struct {
		DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
	}{
		DescribeEngineDefaultParametersInput: describeEngineDefaultParametersInput,
	}
	mock.lockDescribeEngineDefaultParametersRequest.Lock()
	mock.calls.DescribeEngineDefaultParametersRequest = append(mock.calls.DescribeEngineDefaultParametersRequest, callInfo)
	mock.lockDescribeEngineDefaultParametersRequest.Unlock()
	return mock.DescribeEngineDefaultParametersRequestFunc(describeEngineDefaultParametersInput)
}

// DescribeEngineDefaultParametersRequestCalls gets all the calls that were made to DescribeEngineDefaultParametersRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEngineDefaultParametersRequestCalls())
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersRequestCalls() []struct {
	DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
} {
	var calls []struct {
		DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
	}
	mock.lockDescribeEngineDefaultParametersRequest.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersRequest
	mock.lockDescribeEngineDefaultParametersRequest.RUnlock()
	return calls
}

// DescribeEngineDefaultParametersWithContext calls DescribeEngineDefaultParametersWithContextFunc.
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersWithContext(contextMoqParam context.Context, describeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput, options ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	if mock.DescribeEngineDefaultParametersWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeEngineDefaultParametersWithContextFunc: method is nil but elasticacheClient.DescribeEngineDefaultParametersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		DescribeEngineDefaultParametersInput: describeEngineDefaultParametersInput,
		Options:                              options,
	}
	mock.lockDescribeEngineDefaultParametersWithContext.Lock()
	mock.calls.DescribeEngineDefaultParametersWithContext = append(mock.calls.DescribeEngineDefaultParametersWithContext, callInfo)
	mock.lockDescribeEngineDefaultParametersWithContext.Unlock()
	return mock.DescribeEngineDefaultParametersWithContextFunc(contextMoqParam, describeEngineDefaultParametersInput, options...)
}

// DescribeEngineDefaultParametersWithContextCalls gets all the calls that were made to DescribeEngineDefaultParametersWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEngineDefaultParametersWithContextCalls())
func (mock *elasticacheClientMock) DescribeEngineDefaultParametersWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		DescribeEngineDefaultParametersInput *elasticache.DescribeEngineDefaultParametersInput
		Options                              []request.Option
	}
	mock.lockDescribeEngineDefaultParametersWithContext.RLock()
	calls = mock.calls.DescribeEngineDefaultParametersWithContext
	mock.lockDescribeEngineDefaultParametersWithContext.RUnlock()
	return calls
}

// DescribeEvents calls DescribeEventsFunc.
func (mock *elasticacheClientMock) DescribeEvents(describeEventsInput *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error) {
	if mock.DescribeEventsFunc == nil {
		panic("elasticacheClientMock.DescribeEventsFunc: method is nil but elasticacheClient.DescribeEvents was just called")
	}
	callInfo := struct {
		DescribeEventsInput *elasticache.DescribeEventsInput
	}{
		DescribeEventsInput: describeEventsInput,
	}
	mock.lockDescribeEvents.Lock()
	mock.calls.DescribeEvents = append(mock.calls.DescribeEvents, callInfo)
	mock.lockDescribeEvents.Unlock()
	return mock.DescribeEventsFunc(describeEventsInput)
}

// DescribeEventsCalls gets all the calls that were made to DescribeEvents.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEventsCalls())
func (mock *elasticacheClientMock) DescribeEventsCalls() []struct {
	DescribeEventsInput *elasticache.DescribeEventsInput
} {
	var calls []struct {
		DescribeEventsInput *elasticache.DescribeEventsInput
	}
	mock.lockDescribeEvents.RLock()
	calls = mock.calls.DescribeEvents
	mock.lockDescribeEvents.RUnlock()
	return calls
}

// DescribeEventsPages calls DescribeEventsPagesFunc.
func (mock *elasticacheClientMock) DescribeEventsPages(describeEventsInput *elasticache.DescribeEventsInput, fn func(*elasticache.DescribeEventsOutput, bool) bool) error {
	if mock.DescribeEventsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeEventsPagesFunc: method is nil but elasticacheClient.DescribeEventsPages was just called")
	}
	callInfo := struct {
		DescribeEventsInput *elasticache.DescribeEventsInput
		Fn                  func(*elasticache.DescribeEventsOutput, bool) bool
	}{
		DescribeEventsInput: describeEventsInput,
		Fn:                  fn,
	}
	mock.lockDescribeEventsPages.Lock()
	mock.calls.DescribeEventsPages = append(mock.calls.DescribeEventsPages, callInfo)
	mock.lockDescribeEventsPages.Unlock()
	return mock.DescribeEventsPagesFunc(describeEventsInput, fn)
}

// DescribeEventsPagesCalls gets all the calls that were made to DescribeEventsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEventsPagesCalls())
func (mock *elasticacheClientMock) DescribeEventsPagesCalls() []struct {
	DescribeEventsInput *elasticache.DescribeEventsInput
	Fn                  func(*elasticache.DescribeEventsOutput, bool) bool
} {
	var calls []struct {
		DescribeEventsInput *elasticache.DescribeEventsInput
		Fn                  func(*elasticache.DescribeEventsOutput, bool) bool
	}
	mock.lockDescribeEventsPages.RLock()
	calls = mock.calls.DescribeEventsPages
	mock.lockDescribeEventsPages.RUnlock()
	return calls
}

// DescribeEventsPagesWithContext calls DescribeEventsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeEventsPagesWithContext(contextMoqParam context.Context, describeEventsInput *elasticache.DescribeEventsInput, fn func(*elasticache.DescribeEventsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeEventsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeEventsPagesWithContextFunc: method is nil but elasticacheClient.DescribeEventsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		DescribeEventsInput *elasticache.DescribeEventsInput
		Fn                  func(*elasticache.DescribeEventsOutput, bool) bool
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		DescribeEventsInput: describeEventsInput,
		Fn:                  fn,
		Options:             options,
	}
	mock.lockDescribeEventsPagesWithContext.Lock()
	mock.calls.DescribeEventsPagesWithContext = append(mock.calls.DescribeEventsPagesWithContext, callInfo)
	mock.lockDescribeEventsPagesWithContext.Unlock()
	return mock.DescribeEventsPagesWithContextFunc(contextMoqParam, describeEventsInput, fn, options...)
}

// DescribeEventsPagesWithContextCalls gets all the calls that were made to DescribeEventsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEventsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeEventsPagesWithContextCalls() []struct {
	ContextMoqParam     context.Context
	DescribeEventsInput *elasticache.DescribeEventsInput
	Fn                  func(*elasticache.DescribeEventsOutput, bool) bool
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		DescribeEventsInput *elasticache.DescribeEventsInput
		Fn                  func(*elasticache.DescribeEventsOutput, bool) bool
		Options             []request.Option
	}
	mock.lockDescribeEventsPagesWithContext.RLock()
	calls = mock.calls.DescribeEventsPagesWithContext
	mock.lockDescribeEventsPagesWithContext.RUnlock()
	return calls
}

// DescribeEventsRequest calls DescribeEventsRequestFunc.
func (mock *elasticacheClientMock) DescribeEventsRequest(describeEventsInput *elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput) {
	if mock.DescribeEventsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeEventsRequestFunc: method is nil but elasticacheClient.DescribeEventsRequest was just called")
	}
	callInfo := struct {
		DescribeEventsInput *elasticache.DescribeEventsInput
	}{
		DescribeEventsInput: describeEventsInput,
	}
	mock.lockDescribeEventsRequest.Lock()
	mock.calls.DescribeEventsRequest = append(mock.calls.DescribeEventsRequest, callInfo)
	mock.lockDescribeEventsRequest.Unlock()
	return mock.DescribeEventsRequestFunc(describeEventsInput)
}

// DescribeEventsRequestCalls gets all the calls that were made to DescribeEventsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEventsRequestCalls())
func (mock *elasticacheClientMock) DescribeEventsRequestCalls() []struct {
	DescribeEventsInput *elasticache.DescribeEventsInput
} {
	var calls []struct {
		DescribeEventsInput *elasticache.DescribeEventsInput
	}
	mock.lockDescribeEventsRequest.RLock()
	calls = mock.calls.DescribeEventsRequest
	mock.lockDescribeEventsRequest.RUnlock()
	return calls
}

// DescribeEventsWithContext calls DescribeEventsWithContextFunc.
func (mock *elasticacheClientMock) DescribeEventsWithContext(contextMoqParam context.Context, describeEventsInput *elasticache.DescribeEventsInput, options ...request.Option) (*elasticache.DescribeEventsOutput, error) {
	if mock.DescribeEventsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeEventsWithContextFunc: method is nil but elasticacheClient.DescribeEventsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		DescribeEventsInput *elasticache.DescribeEventsInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		DescribeEventsInput: describeEventsInput,
		Options:             options,
	}
	mock.lockDescribeEventsWithContext.Lock()
	mock.calls.DescribeEventsWithContext = append(mock.calls.DescribeEventsWithContext, callInfo)
	mock.lockDescribeEventsWithContext.Unlock()
	return mock.DescribeEventsWithContextFunc(contextMoqParam, describeEventsInput, options...)
}

// DescribeEventsWithContextCalls gets all the calls that were made to DescribeEventsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeEventsWithContextCalls())
func (mock *elasticacheClientMock) DescribeEventsWithContextCalls() []struct {
	ContextMoqParam     context.Context
	DescribeEventsInput *elasticache.DescribeEventsInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		DescribeEventsInput *elasticache.DescribeEventsInput
		Options             []request.Option
	}
	mock.lockDescribeEventsWithContext.RLock()
	calls = mock.calls.DescribeEventsWithContext
	mock.lockDescribeEventsWithContext.RUnlock()
	return calls
}

// DescribeGlobalReplicationGroups calls DescribeGlobalReplicationGroupsFunc.
func (mock *elasticacheClientMock) DescribeGlobalReplicationGroups(describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
	if mock.DescribeGlobalReplicationGroupsFunc == nil {
		panic("elasticacheClientMock.DescribeGlobalReplicationGroupsFunc: method is nil but elasticacheClient.DescribeGlobalReplicationGroups was just called")
	}
	callInfo := struct {
		DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
	}{
		DescribeGlobalReplicationGroupsInput: describeGlobalReplicationGroupsInput,
	}
	mock.lockDescribeGlobalReplicationGroups.Lock()
	mock.calls.DescribeGlobalReplicationGroups = append(mock.calls.DescribeGlobalReplicationGroups, callInfo)
	mock.lockDescribeGlobalReplicationGroups.Unlock()
	return mock.DescribeGlobalReplicationGroupsFunc(describeGlobalReplicationGroupsInput)
}

// DescribeGlobalReplicationGroupsCalls gets all the calls that were made to DescribeGlobalReplicationGroups.
// Check the length with:
//     len(mockedelasticacheClient.DescribeGlobalReplicationGroupsCalls())
func (mock *elasticacheClientMock) DescribeGlobalReplicationGroupsCalls() []struct {
	DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
} {
	var calls []struct {
		DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
	}
	mock.lockDescribeGlobalReplicationGroups.RLock()
	calls = mock.calls.DescribeGlobalReplicationGroups
	mock.lockDescribeGlobalReplicationGroups.RUnlock()
	return calls
}

// DescribeGlobalReplicationGroupsPages calls DescribeGlobalReplicationGroupsPagesFunc.
func (mock *elasticacheClientMock) DescribeGlobalReplicationGroupsPages(describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput, fn func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool) error {
	if mock.DescribeGlobalReplicationGroupsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeGlobalReplicationGroupsPagesFunc: method is nil but elasticacheClient.DescribeGlobalReplicationGroupsPages was just called")
	}
	callInfo := struct {
		DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
		Fn                                   func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
	}{
		DescribeGlobalReplicationGroupsInput: describeGlobalReplicationGroupsInput,
		Fn:                                   fn,
	}
	mock.lockDescribeGlobalReplicationGroupsPages.Lock()
	mock.calls.DescribeGlobalReplicationGroupsPages = append(mock.calls.DescribeGlobalReplicationGroupsPages, callInfo)
	mock.lockDescribeGlobalReplicationGroupsPages.Unlock()
	return mock.DescribeGlobalReplicationGroupsPagesFunc(describeGlobalReplicationGroupsInput, fn)
}

// DescribeGlobalReplicationGroupsPagesCalls gets all the calls that were made to DescribeGlobalReplicationGroupsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeGlobalReplicationGroupsPagesCalls())
func (mock *elasticacheClientMock) DescribeGlobalReplicationGroupsPagesCalls() []struct {
	DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
	Fn                                   func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
		Fn                                   func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
	}
	mock.lockDescribeGlobalReplicationGroupsPages.RLock()
	calls = mock.calls.DescribeGlobalReplicationGroupsPages
	mock.lockDescribeGlobalReplicationGroupsPages.RUnlock()
	return calls
}

// DescribeGlobalReplicationGroupsPagesWithContext calls DescribeGlobalReplicationGroupsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeGlobalReplicationGroupsPagesWithContext(contextMoqParam context.Context, describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput, fn func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeGlobalReplicationGroupsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeGlobalReplicationGroupsPagesWithContextFunc: method is nil but elasticacheClient.DescribeGlobalReplicationGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
		Fn                                   func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		DescribeGlobalReplicationGroupsInput: describeGlobalReplicationGroupsInput,
		Fn:                                   fn,
		Options:                              options,
	}
	mock.lockDescribeGlobalReplicationGroupsPagesWithContext.Lock()
	mock.calls.DescribeGlobalReplicationGroupsPagesWithContext = append(mock.calls.DescribeGlobalReplicationGroupsPagesWithContext, callInfo)
	mock.lockDescribeGlobalReplicationGroupsPagesWithContext.Unlock()
	return mock.DescribeGlobalReplicationGroupsPagesWithContextFunc(contextMoqParam, describeGlobalReplicationGroupsInput, fn, options...)
}

// DescribeGlobalReplicationGroupsPagesWithContextCalls gets all the calls that were made to DescribeGlobalReplicationGroupsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeGlobalReplicationGroupsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeGlobalReplicationGroupsPagesWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
	Fn                                   func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
		Fn                                   func(*elasticache.DescribeGlobalReplicationGroupsOutput, bool) bool
		Options                              []request.Option
	}
	mock.lockDescribeGlobalReplicationGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeGlobalReplicationGroupsPagesWithContext
	mock.lockDescribeGlobalReplicationGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeGlobalReplicationGroupsRequest calls DescribeGlobalReplicationGroupsRequestFunc.
func (mock *elasticacheClientMock) DescribeGlobalReplicationGroupsRequest(describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput) (*request.Request, *elasticache.DescribeGlobalReplicationGroupsOutput) {
	if mock.DescribeGlobalReplicationGroupsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeGlobalReplicationGroupsRequestFunc: method is nil but elasticacheClient.DescribeGlobalReplicationGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
	}{
		DescribeGlobalReplicationGroupsInput: describeGlobalReplicationGroupsInput,
	}
	mock.lockDescribeGlobalReplicationGroupsRequest.Lock()
	mock.calls.DescribeGlobalReplicationGroupsRequest = append(mock.calls.DescribeGlobalReplicationGroupsRequest, callInfo)
	mock.lockDescribeGlobalReplicationGroupsRequest.Unlock()
	return mock.DescribeGlobalReplicationGroupsRequestFunc(describeGlobalReplicationGroupsInput)
}

// DescribeGlobalReplicationGroupsRequestCalls gets all the calls that were made to DescribeGlobalReplicationGroupsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeGlobalReplicationGroupsRequestCalls())
func (mock *elasticacheClientMock) DescribeGlobalReplicationGroupsRequestCalls() []struct {
	DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
} {
	var calls []struct {
		DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
	}
	mock.lockDescribeGlobalReplicationGroupsRequest.RLock()
	calls = mock.calls.DescribeGlobalReplicationGroupsRequest
	mock.lockDescribeGlobalReplicationGroupsRequest.RUnlock()
	return calls
}

// DescribeGlobalReplicationGroupsWithContext calls DescribeGlobalReplicationGroupsWithContextFunc.
func (mock *elasticacheClientMock) DescribeGlobalReplicationGroupsWithContext(contextMoqParam context.Context, describeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput, options ...request.Option) (*elasticache.DescribeGlobalReplicationGroupsOutput, error) {
	if mock.DescribeGlobalReplicationGroupsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeGlobalReplicationGroupsWithContextFunc: method is nil but elasticacheClient.DescribeGlobalReplicationGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		DescribeGlobalReplicationGroupsInput: describeGlobalReplicationGroupsInput,
		Options:                              options,
	}
	mock.lockDescribeGlobalReplicationGroupsWithContext.Lock()
	mock.calls.DescribeGlobalReplicationGroupsWithContext = append(mock.calls.DescribeGlobalReplicationGroupsWithContext, callInfo)
	mock.lockDescribeGlobalReplicationGroupsWithContext.Unlock()
	return mock.DescribeGlobalReplicationGroupsWithContextFunc(contextMoqParam, describeGlobalReplicationGroupsInput, options...)
}

// DescribeGlobalReplicationGroupsWithContextCalls gets all the calls that were made to DescribeGlobalReplicationGroupsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeGlobalReplicationGroupsWithContextCalls())
func (mock *elasticacheClientMock) DescribeGlobalReplicationGroupsWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		DescribeGlobalReplicationGroupsInput *elasticache.DescribeGlobalReplicationGroupsInput
		Options                              []request.Option
	}
	mock.lockDescribeGlobalReplicationGroupsWithContext.RLock()
	calls = mock.calls.DescribeGlobalReplicationGroupsWithContext
	mock.lockDescribeGlobalReplicationGroupsWithContext.RUnlock()
	return calls
}

// DescribeReplicationGroups calls DescribeReplicationGroupsFunc.
func (mock *elasticacheClientMock) DescribeReplicationGroups(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error) {
	if mock.DescribeReplicationGroupsFunc == nil {
		panic("elasticacheClientMock.DescribeReplicationGroupsFunc: method is nil but elasticacheClient.DescribeReplicationGroups was just called")
	}
	callInfo := struct {
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	}{
		DescribeReplicationGroupsInput: describeReplicationGroupsInput,
	}
	mock.lockDescribeReplicationGroups.Lock()
	mock.calls.DescribeReplicationGroups = append(mock.calls.DescribeReplicationGroups, callInfo)
	mock.lockDescribeReplicationGroups.Unlock()
	return mock.DescribeReplicationGroupsFunc(describeReplicationGroupsInput)
}

// DescribeReplicationGroupsCalls gets all the calls that were made to DescribeReplicationGroups.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReplicationGroupsCalls())
func (mock *elasticacheClientMock) DescribeReplicationGroupsCalls() []struct {
	DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
} {
	var calls []struct {
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	}
	mock.lockDescribeReplicationGroups.RLock()
	calls = mock.calls.DescribeReplicationGroups
	mock.lockDescribeReplicationGroups.RUnlock()
	return calls
}

// DescribeReplicationGroupsPages calls DescribeReplicationGroupsPagesFunc.
func (mock *elasticacheClientMock) DescribeReplicationGroupsPages(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, fn func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error {
	if mock.DescribeReplicationGroupsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeReplicationGroupsPagesFunc: method is nil but elasticacheClient.DescribeReplicationGroupsPages was just called")
	}
	callInfo := struct {
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		Fn                             func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
	}{
		DescribeReplicationGroupsInput: describeReplicationGroupsInput,
		Fn:                             fn,
	}
	mock.lockDescribeReplicationGroupsPages.Lock()
	mock.calls.DescribeReplicationGroupsPages = append(mock.calls.DescribeReplicationGroupsPages, callInfo)
	mock.lockDescribeReplicationGroupsPages.Unlock()
	return mock.DescribeReplicationGroupsPagesFunc(describeReplicationGroupsInput, fn)
}

// DescribeReplicationGroupsPagesCalls gets all the calls that were made to DescribeReplicationGroupsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReplicationGroupsPagesCalls())
func (mock *elasticacheClientMock) DescribeReplicationGroupsPagesCalls() []struct {
	DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	Fn                             func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		Fn                             func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
	}
	mock.lockDescribeReplicationGroupsPages.RLock()
	calls = mock.calls.DescribeReplicationGroupsPages
	mock.lockDescribeReplicationGroupsPages.RUnlock()
	return calls
}

// DescribeReplicationGroupsPagesWithContext calls DescribeReplicationGroupsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeReplicationGroupsPagesWithContext(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, fn func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeReplicationGroupsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReplicationGroupsPagesWithContextFunc: method is nil but elasticacheClient.DescribeReplicationGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		Fn                             func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		DescribeReplicationGroupsInput: describeReplicationGroupsInput,
		Fn:                             fn,
		Options:                        options,
	}
	mock.lockDescribeReplicationGroupsPagesWithContext.Lock()
	mock.calls.DescribeReplicationGroupsPagesWithContext = append(mock.calls.DescribeReplicationGroupsPagesWithContext, callInfo)
	mock.lockDescribeReplicationGroupsPagesWithContext.Unlock()
	return mock.DescribeReplicationGroupsPagesWithContextFunc(contextMoqParam, describeReplicationGroupsInput, fn, options...)
}

// DescribeReplicationGroupsPagesWithContextCalls gets all the calls that were made to DescribeReplicationGroupsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReplicationGroupsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeReplicationGroupsPagesWithContextCalls() []struct {
	ContextMoqParam                context.Context
	DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	Fn                             func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		Fn                             func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
		Options                        []request.Option
	}
	mock.lockDescribeReplicationGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeReplicationGroupsPagesWithContext
	mock.lockDescribeReplicationGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeReplicationGroupsRequest calls DescribeReplicationGroupsRequestFunc.
func (mock *elasticacheClientMock) DescribeReplicationGroupsRequest(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput) {
	if mock.DescribeReplicationGroupsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeReplicationGroupsRequestFunc: method is nil but elasticacheClient.DescribeReplicationGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	}{
		DescribeReplicationGroupsInput: describeReplicationGroupsInput,
	}
	mock.lockDescribeReplicationGroupsRequest.Lock()
	mock.calls.DescribeReplicationGroupsRequest = append(mock.calls.DescribeReplicationGroupsRequest, callInfo)
	mock.lockDescribeReplicationGroupsRequest.Unlock()
	return mock.DescribeReplicationGroupsRequestFunc(describeReplicationGroupsInput)
}

// DescribeReplicationGroupsRequestCalls gets all the calls that were made to DescribeReplicationGroupsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReplicationGroupsRequestCalls())
func (mock *elasticacheClientMock) DescribeReplicationGroupsRequestCalls() []struct {
	DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
} {
	var calls []struct {
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	}
	mock.lockDescribeReplicationGroupsRequest.RLock()
	calls = mock.calls.DescribeReplicationGroupsRequest
	mock.lockDescribeReplicationGroupsRequest.RUnlock()
	return calls
}

// DescribeReplicationGroupsWithContext calls DescribeReplicationGroupsWithContextFunc.
func (mock *elasticacheClientMock) DescribeReplicationGroupsWithContext(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, options ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error) {
	if mock.DescribeReplicationGroupsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReplicationGroupsWithContextFunc: method is nil but elasticacheClient.DescribeReplicationGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		DescribeReplicationGroupsInput: describeReplicationGroupsInput,
		Options:                        options,
	}
	mock.lockDescribeReplicationGroupsWithContext.Lock()
	mock.calls.DescribeReplicationGroupsWithContext = append(mock.calls.DescribeReplicationGroupsWithContext, callInfo)
	mock.lockDescribeReplicationGroupsWithContext.Unlock()
	return mock.DescribeReplicationGroupsWithContextFunc(contextMoqParam, describeReplicationGroupsInput, options...)
}

// DescribeReplicationGroupsWithContextCalls gets all the calls that were made to DescribeReplicationGroupsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReplicationGroupsWithContextCalls())
func (mock *elasticacheClientMock) DescribeReplicationGroupsWithContextCalls() []struct {
	ContextMoqParam                context.Context
	DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		Options                        []request.Option
	}
	mock.lockDescribeReplicationGroupsWithContext.RLock()
	calls = mock.calls.DescribeReplicationGroupsWithContext
	mock.lockDescribeReplicationGroupsWithContext.RUnlock()
	return calls
}

// DescribeReservedCacheNodes calls DescribeReservedCacheNodesFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodes(describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	if mock.DescribeReservedCacheNodesFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesFunc: method is nil but elasticacheClient.DescribeReservedCacheNodes was just called")
	}
	callInfo := struct {
		DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
	}{
		DescribeReservedCacheNodesInput: describeReservedCacheNodesInput,
	}
	mock.lockDescribeReservedCacheNodes.Lock()
	mock.calls.DescribeReservedCacheNodes = append(mock.calls.DescribeReservedCacheNodes, callInfo)
	mock.lockDescribeReservedCacheNodes.Unlock()
	return mock.DescribeReservedCacheNodesFunc(describeReservedCacheNodesInput)
}

// DescribeReservedCacheNodesCalls gets all the calls that were made to DescribeReservedCacheNodes.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesCalls() []struct {
	DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
} {
	var calls []struct {
		DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
	}
	mock.lockDescribeReservedCacheNodes.RLock()
	calls = mock.calls.DescribeReservedCacheNodes
	mock.lockDescribeReservedCacheNodes.RUnlock()
	return calls
}

// DescribeReservedCacheNodesOfferings calls DescribeReservedCacheNodesOfferingsFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferings(describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	if mock.DescribeReservedCacheNodesOfferingsFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesOfferingsFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesOfferings was just called")
	}
	callInfo := struct {
		DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
	}{
		DescribeReservedCacheNodesOfferingsInput: describeReservedCacheNodesOfferingsInput,
	}
	mock.lockDescribeReservedCacheNodesOfferings.Lock()
	mock.calls.DescribeReservedCacheNodesOfferings = append(mock.calls.DescribeReservedCacheNodesOfferings, callInfo)
	mock.lockDescribeReservedCacheNodesOfferings.Unlock()
	return mock.DescribeReservedCacheNodesOfferingsFunc(describeReservedCacheNodesOfferingsInput)
}

// DescribeReservedCacheNodesOfferingsCalls gets all the calls that were made to DescribeReservedCacheNodesOfferings.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesOfferingsCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsCalls() []struct {
	DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
} {
	var calls []struct {
		DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
	}
	mock.lockDescribeReservedCacheNodesOfferings.RLock()
	calls = mock.calls.DescribeReservedCacheNodesOfferings
	mock.lockDescribeReservedCacheNodesOfferings.RUnlock()
	return calls
}

// DescribeReservedCacheNodesOfferingsPages calls DescribeReservedCacheNodesOfferingsPagesFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsPages(describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput, fn func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error {
	if mock.DescribeReservedCacheNodesOfferingsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesOfferingsPagesFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesOfferingsPages was just called")
	}
	callInfo := struct {
		DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
		Fn                                       func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
	}{
		DescribeReservedCacheNodesOfferingsInput: describeReservedCacheNodesOfferingsInput,
		Fn:                                       fn,
	}
	mock.lockDescribeReservedCacheNodesOfferingsPages.Lock()
	mock.calls.DescribeReservedCacheNodesOfferingsPages = append(mock.calls.DescribeReservedCacheNodesOfferingsPages, callInfo)
	mock.lockDescribeReservedCacheNodesOfferingsPages.Unlock()
	return mock.DescribeReservedCacheNodesOfferingsPagesFunc(describeReservedCacheNodesOfferingsInput, fn)
}

// DescribeReservedCacheNodesOfferingsPagesCalls gets all the calls that were made to DescribeReservedCacheNodesOfferingsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesOfferingsPagesCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsPagesCalls() []struct {
	DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
	Fn                                       func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
} {
	var calls []struct {
		DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
		Fn                                       func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
	}
	mock.lockDescribeReservedCacheNodesOfferingsPages.RLock()
	calls = mock.calls.DescribeReservedCacheNodesOfferingsPages
	mock.lockDescribeReservedCacheNodesOfferingsPages.RUnlock()
	return calls
}

// DescribeReservedCacheNodesOfferingsPagesWithContext calls DescribeReservedCacheNodesOfferingsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsPagesWithContext(contextMoqParam context.Context, describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput, fn func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeReservedCacheNodesOfferingsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesOfferingsPagesWithContextFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesOfferingsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                          context.Context
		DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
		Fn                                       func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
		Options                                  []request.Option
	}{
		ContextMoqParam:                          contextMoqParam,
		DescribeReservedCacheNodesOfferingsInput: describeReservedCacheNodesOfferingsInput,
		Fn:                                       fn,
		Options:                                  options,
	}
	mock.lockDescribeReservedCacheNodesOfferingsPagesWithContext.Lock()
	mock.calls.DescribeReservedCacheNodesOfferingsPagesWithContext = append(mock.calls.DescribeReservedCacheNodesOfferingsPagesWithContext, callInfo)
	mock.lockDescribeReservedCacheNodesOfferingsPagesWithContext.Unlock()
	return mock.DescribeReservedCacheNodesOfferingsPagesWithContextFunc(contextMoqParam, describeReservedCacheNodesOfferingsInput, fn, options...)
}

// DescribeReservedCacheNodesOfferingsPagesWithContextCalls gets all the calls that were made to DescribeReservedCacheNodesOfferingsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesOfferingsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsPagesWithContextCalls() []struct {
	ContextMoqParam                          context.Context
	DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
	Fn                                       func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
	Options                                  []request.Option
} {
	var calls []struct {
		ContextMoqParam                          context.Context
		DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
		Fn                                       func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
		Options                                  []request.Option
	}
	mock.lockDescribeReservedCacheNodesOfferingsPagesWithContext.RLock()
	calls = mock.calls.DescribeReservedCacheNodesOfferingsPagesWithContext
	mock.lockDescribeReservedCacheNodesOfferingsPagesWithContext.RUnlock()
	return calls
}

// DescribeReservedCacheNodesOfferingsRequest calls DescribeReservedCacheNodesOfferingsRequestFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsRequest(describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
	if mock.DescribeReservedCacheNodesOfferingsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesOfferingsRequestFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesOfferingsRequest was just called")
	}
	callInfo := struct {
		DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
	}{
		DescribeReservedCacheNodesOfferingsInput: describeReservedCacheNodesOfferingsInput,
	}
	mock.lockDescribeReservedCacheNodesOfferingsRequest.Lock()
	mock.calls.DescribeReservedCacheNodesOfferingsRequest = append(mock.calls.DescribeReservedCacheNodesOfferingsRequest, callInfo)
	mock.lockDescribeReservedCacheNodesOfferingsRequest.Unlock()
	return mock.DescribeReservedCacheNodesOfferingsRequestFunc(describeReservedCacheNodesOfferingsInput)
}

// DescribeReservedCacheNodesOfferingsRequestCalls gets all the calls that were made to DescribeReservedCacheNodesOfferingsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesOfferingsRequestCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsRequestCalls() []struct {
	DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
} {
	var calls []struct {
		DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
	}
	mock.lockDescribeReservedCacheNodesOfferingsRequest.RLock()
	calls = mock.calls.DescribeReservedCacheNodesOfferingsRequest
	mock.lockDescribeReservedCacheNodesOfferingsRequest.RUnlock()
	return calls
}

// DescribeReservedCacheNodesOfferingsWithContext calls DescribeReservedCacheNodesOfferingsWithContextFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsWithContext(contextMoqParam context.Context, describeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput, options ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	if mock.DescribeReservedCacheNodesOfferingsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesOfferingsWithContextFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesOfferingsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                          context.Context
		DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
		Options                                  []request.Option
	}{
		ContextMoqParam:                          contextMoqParam,
		DescribeReservedCacheNodesOfferingsInput: describeReservedCacheNodesOfferingsInput,
		Options:                                  options,
	}
	mock.lockDescribeReservedCacheNodesOfferingsWithContext.Lock()
	mock.calls.DescribeReservedCacheNodesOfferingsWithContext = append(mock.calls.DescribeReservedCacheNodesOfferingsWithContext, callInfo)
	mock.lockDescribeReservedCacheNodesOfferingsWithContext.Unlock()
	return mock.DescribeReservedCacheNodesOfferingsWithContextFunc(contextMoqParam, describeReservedCacheNodesOfferingsInput, options...)
}

// DescribeReservedCacheNodesOfferingsWithContextCalls gets all the calls that were made to DescribeReservedCacheNodesOfferingsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesOfferingsWithContextCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesOfferingsWithContextCalls() []struct {
	ContextMoqParam                          context.Context
	DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
	Options                                  []request.Option
} {
	var calls []struct {
		ContextMoqParam                          context.Context
		DescribeReservedCacheNodesOfferingsInput *elasticache.DescribeReservedCacheNodesOfferingsInput
		Options                                  []request.Option
	}
	mock.lockDescribeReservedCacheNodesOfferingsWithContext.RLock()
	calls = mock.calls.DescribeReservedCacheNodesOfferingsWithContext
	mock.lockDescribeReservedCacheNodesOfferingsWithContext.RUnlock()
	return calls
}

// DescribeReservedCacheNodesPages calls DescribeReservedCacheNodesPagesFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesPages(describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput, fn func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error {
	if mock.DescribeReservedCacheNodesPagesFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesPagesFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesPages was just called")
	}
	callInfo := struct {
		DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
		Fn                              func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
	}{
		DescribeReservedCacheNodesInput: describeReservedCacheNodesInput,
		Fn:                              fn,
	}
	mock.lockDescribeReservedCacheNodesPages.Lock()
	mock.calls.DescribeReservedCacheNodesPages = append(mock.calls.DescribeReservedCacheNodesPages, callInfo)
	mock.lockDescribeReservedCacheNodesPages.Unlock()
	return mock.DescribeReservedCacheNodesPagesFunc(describeReservedCacheNodesInput, fn)
}

// DescribeReservedCacheNodesPagesCalls gets all the calls that were made to DescribeReservedCacheNodesPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesPagesCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesPagesCalls() []struct {
	DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
	Fn                              func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
} {
	var calls []struct {
		DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
		Fn                              func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
	}
	mock.lockDescribeReservedCacheNodesPages.RLock()
	calls = mock.calls.DescribeReservedCacheNodesPages
	mock.lockDescribeReservedCacheNodesPages.RUnlock()
	return calls
}

// DescribeReservedCacheNodesPagesWithContext calls DescribeReservedCacheNodesPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesPagesWithContext(contextMoqParam context.Context, describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput, fn func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeReservedCacheNodesPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesPagesWithContextFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
		Fn                              func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeReservedCacheNodesInput: describeReservedCacheNodesInput,
		Fn:                              fn,
		Options:                         options,
	}
	mock.lockDescribeReservedCacheNodesPagesWithContext.Lock()
	mock.calls.DescribeReservedCacheNodesPagesWithContext = append(mock.calls.DescribeReservedCacheNodesPagesWithContext, callInfo)
	mock.lockDescribeReservedCacheNodesPagesWithContext.Unlock()
	return mock.DescribeReservedCacheNodesPagesWithContextFunc(contextMoqParam, describeReservedCacheNodesInput, fn, options...)
}

// DescribeReservedCacheNodesPagesWithContextCalls gets all the calls that were made to DescribeReservedCacheNodesPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesPagesWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
	Fn                              func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
		Fn                              func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
		Options                         []request.Option
	}
	mock.lockDescribeReservedCacheNodesPagesWithContext.RLock()
	calls = mock.calls.DescribeReservedCacheNodesPagesWithContext
	mock.lockDescribeReservedCacheNodesPagesWithContext.RUnlock()
	return calls
}

// DescribeReservedCacheNodesRequest calls DescribeReservedCacheNodesRequestFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesRequest(describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput) {
	if mock.DescribeReservedCacheNodesRequestFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesRequestFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesRequest was just called")
	}
	callInfo := struct {
		DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
	}{
		DescribeReservedCacheNodesInput: describeReservedCacheNodesInput,
	}
	mock.lockDescribeReservedCacheNodesRequest.Lock()
	mock.calls.DescribeReservedCacheNodesRequest = append(mock.calls.DescribeReservedCacheNodesRequest, callInfo)
	mock.lockDescribeReservedCacheNodesRequest.Unlock()
	return mock.DescribeReservedCacheNodesRequestFunc(describeReservedCacheNodesInput)
}

// DescribeReservedCacheNodesRequestCalls gets all the calls that were made to DescribeReservedCacheNodesRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesRequestCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesRequestCalls() []struct {
	DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
} {
	var calls []struct {
		DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
	}
	mock.lockDescribeReservedCacheNodesRequest.RLock()
	calls = mock.calls.DescribeReservedCacheNodesRequest
	mock.lockDescribeReservedCacheNodesRequest.RUnlock()
	return calls
}

// DescribeReservedCacheNodesWithContext calls DescribeReservedCacheNodesWithContextFunc.
func (mock *elasticacheClientMock) DescribeReservedCacheNodesWithContext(contextMoqParam context.Context, describeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput, options ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	if mock.DescribeReservedCacheNodesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeReservedCacheNodesWithContextFunc: method is nil but elasticacheClient.DescribeReservedCacheNodesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                 context.Context
		DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
		Options                         []request.Option
	}{
		ContextMoqParam:                 contextMoqParam,
		DescribeReservedCacheNodesInput: describeReservedCacheNodesInput,
		Options:                         options,
	}
	mock.lockDescribeReservedCacheNodesWithContext.Lock()
	mock.calls.DescribeReservedCacheNodesWithContext = append(mock.calls.DescribeReservedCacheNodesWithContext, callInfo)
	mock.lockDescribeReservedCacheNodesWithContext.Unlock()
	return mock.DescribeReservedCacheNodesWithContextFunc(contextMoqParam, describeReservedCacheNodesInput, options...)
}

// DescribeReservedCacheNodesWithContextCalls gets all the calls that were made to DescribeReservedCacheNodesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeReservedCacheNodesWithContextCalls())
func (mock *elasticacheClientMock) DescribeReservedCacheNodesWithContextCalls() []struct {
	ContextMoqParam                 context.Context
	DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
	Options                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                 context.Context
		DescribeReservedCacheNodesInput *elasticache.DescribeReservedCacheNodesInput
		Options                         []request.Option
	}
	mock.lockDescribeReservedCacheNodesWithContext.RLock()
	calls = mock.calls.DescribeReservedCacheNodesWithContext
	mock.lockDescribeReservedCacheNodesWithContext.RUnlock()
	return calls
}

// DescribeServiceUpdates calls DescribeServiceUpdatesFunc.
func (mock *elasticacheClientMock) DescribeServiceUpdates(describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput) (*elasticache.DescribeServiceUpdatesOutput, error) {
	if mock.DescribeServiceUpdatesFunc == nil {
		panic("elasticacheClientMock.DescribeServiceUpdatesFunc: method is nil but elasticacheClient.DescribeServiceUpdates was just called")
	}
	callInfo := struct {
		DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
	}{
		DescribeServiceUpdatesInput: describeServiceUpdatesInput,
	}
	mock.lockDescribeServiceUpdates.Lock()
	mock.calls.DescribeServiceUpdates = append(mock.calls.DescribeServiceUpdates, callInfo)
	mock.lockDescribeServiceUpdates.Unlock()
	return mock.DescribeServiceUpdatesFunc(describeServiceUpdatesInput)
}

// DescribeServiceUpdatesCalls gets all the calls that were made to DescribeServiceUpdates.
// Check the length with:
//     len(mockedelasticacheClient.DescribeServiceUpdatesCalls())
func (mock *elasticacheClientMock) DescribeServiceUpdatesCalls() []struct {
	DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
} {
	var calls []struct {
		DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
	}
	mock.lockDescribeServiceUpdates.RLock()
	calls = mock.calls.DescribeServiceUpdates
	mock.lockDescribeServiceUpdates.RUnlock()
	return calls
}

// DescribeServiceUpdatesPages calls DescribeServiceUpdatesPagesFunc.
func (mock *elasticacheClientMock) DescribeServiceUpdatesPages(describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput, fn func(*elasticache.DescribeServiceUpdatesOutput, bool) bool) error {
	if mock.DescribeServiceUpdatesPagesFunc == nil {
		panic("elasticacheClientMock.DescribeServiceUpdatesPagesFunc: method is nil but elasticacheClient.DescribeServiceUpdatesPages was just called")
	}
	callInfo := struct {
		DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
		Fn                          func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
	}{
		DescribeServiceUpdatesInput: describeServiceUpdatesInput,
		Fn:                          fn,
	}
	mock.lockDescribeServiceUpdatesPages.Lock()
	mock.calls.DescribeServiceUpdatesPages = append(mock.calls.DescribeServiceUpdatesPages, callInfo)
	mock.lockDescribeServiceUpdatesPages.Unlock()
	return mock.DescribeServiceUpdatesPagesFunc(describeServiceUpdatesInput, fn)
}

// DescribeServiceUpdatesPagesCalls gets all the calls that were made to DescribeServiceUpdatesPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeServiceUpdatesPagesCalls())
func (mock *elasticacheClientMock) DescribeServiceUpdatesPagesCalls() []struct {
	DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
	Fn                          func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
} {
	var calls []struct {
		DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
		Fn                          func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
	}
	mock.lockDescribeServiceUpdatesPages.RLock()
	calls = mock.calls.DescribeServiceUpdatesPages
	mock.lockDescribeServiceUpdatesPages.RUnlock()
	return calls
}

// DescribeServiceUpdatesPagesWithContext calls DescribeServiceUpdatesPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeServiceUpdatesPagesWithContext(contextMoqParam context.Context, describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput, fn func(*elasticache.DescribeServiceUpdatesOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeServiceUpdatesPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeServiceUpdatesPagesWithContextFunc: method is nil but elasticacheClient.DescribeServiceUpdatesPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
		Fn                          func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DescribeServiceUpdatesInput: describeServiceUpdatesInput,
		Fn:                          fn,
		Options:                     options,
	}
	mock.lockDescribeServiceUpdatesPagesWithContext.Lock()
	mock.calls.DescribeServiceUpdatesPagesWithContext = append(mock.calls.DescribeServiceUpdatesPagesWithContext, callInfo)
	mock.lockDescribeServiceUpdatesPagesWithContext.Unlock()
	return mock.DescribeServiceUpdatesPagesWithContextFunc(contextMoqParam, describeServiceUpdatesInput, fn, options...)
}

// DescribeServiceUpdatesPagesWithContextCalls gets all the calls that were made to DescribeServiceUpdatesPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeServiceUpdatesPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeServiceUpdatesPagesWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
	Fn                          func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
		Fn                          func(*elasticache.DescribeServiceUpdatesOutput, bool) bool
		Options                     []request.Option
	}
	mock.lockDescribeServiceUpdatesPagesWithContext.RLock()
	calls = mock.calls.DescribeServiceUpdatesPagesWithContext
	mock.lockDescribeServiceUpdatesPagesWithContext.RUnlock()
	return calls
}

// DescribeServiceUpdatesRequest calls DescribeServiceUpdatesRequestFunc.
func (mock *elasticacheClientMock) DescribeServiceUpdatesRequest(describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput) (*request.Request, *elasticache.DescribeServiceUpdatesOutput) {
	if mock.DescribeServiceUpdatesRequestFunc == nil {
		panic("elasticacheClientMock.DescribeServiceUpdatesRequestFunc: method is nil but elasticacheClient.DescribeServiceUpdatesRequest was just called")
	}
	callInfo := struct {
		DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
	}{
		DescribeServiceUpdatesInput: describeServiceUpdatesInput,
	}
	mock.lockDescribeServiceUpdatesRequest.Lock()
	mock.calls.DescribeServiceUpdatesRequest = append(mock.calls.DescribeServiceUpdatesRequest, callInfo)
	mock.lockDescribeServiceUpdatesRequest.Unlock()
	return mock.DescribeServiceUpdatesRequestFunc(describeServiceUpdatesInput)
}

// DescribeServiceUpdatesRequestCalls gets all the calls that were made to DescribeServiceUpdatesRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeServiceUpdatesRequestCalls())
func (mock *elasticacheClientMock) DescribeServiceUpdatesRequestCalls() []struct {
	DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
} {
	var calls []struct {
		DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
	}
	mock.lockDescribeServiceUpdatesRequest.RLock()
	calls = mock.calls.DescribeServiceUpdatesRequest
	mock.lockDescribeServiceUpdatesRequest.RUnlock()
	return calls
}

// DescribeServiceUpdatesWithContext calls DescribeServiceUpdatesWithContextFunc.
func (mock *elasticacheClientMock) DescribeServiceUpdatesWithContext(contextMoqParam context.Context, describeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput, options ...request.Option) (*elasticache.DescribeServiceUpdatesOutput, error) {
	if mock.DescribeServiceUpdatesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeServiceUpdatesWithContextFunc: method is nil but elasticacheClient.DescribeServiceUpdatesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		DescribeServiceUpdatesInput: describeServiceUpdatesInput,
		Options:                     options,
	}
	mock.lockDescribeServiceUpdatesWithContext.Lock()
	mock.calls.DescribeServiceUpdatesWithContext = append(mock.calls.DescribeServiceUpdatesWithContext, callInfo)
	mock.lockDescribeServiceUpdatesWithContext.Unlock()
	return mock.DescribeServiceUpdatesWithContextFunc(contextMoqParam, describeServiceUpdatesInput, options...)
}

// DescribeServiceUpdatesWithContextCalls gets all the calls that were made to DescribeServiceUpdatesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeServiceUpdatesWithContextCalls())
func (mock *elasticacheClientMock) DescribeServiceUpdatesWithContextCalls() []struct {
	ContextMoqParam             context.Context
	DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		DescribeServiceUpdatesInput *elasticache.DescribeServiceUpdatesInput
		Options                     []request.Option
	}
	mock.lockDescribeServiceUpdatesWithContext.RLock()
	calls = mock.calls.DescribeServiceUpdatesWithContext
	mock.lockDescribeServiceUpdatesWithContext.RUnlock()
	return calls
}

// DescribeSnapshots calls DescribeSnapshotsFunc.
func (mock *elasticacheClientMock) DescribeSnapshots(describeSnapshotsInput *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error) {
	if mock.DescribeSnapshotsFunc == nil {
		panic("elasticacheClientMock.DescribeSnapshotsFunc: method is nil but elasticacheClient.DescribeSnapshots was just called")
	}
	callInfo := struct {
		DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
	}{
		DescribeSnapshotsInput: describeSnapshotsInput,
	}
	mock.lockDescribeSnapshots.Lock()
	mock.calls.DescribeSnapshots = append(mock.calls.DescribeSnapshots, callInfo)
	mock.lockDescribeSnapshots.Unlock()
	return mock.DescribeSnapshotsFunc(describeSnapshotsInput)
}

// DescribeSnapshotsCalls gets all the calls that were made to DescribeSnapshots.
// Check the length with:
//     len(mockedelasticacheClient.DescribeSnapshotsCalls())
func (mock *elasticacheClientMock) DescribeSnapshotsCalls() []struct {
	DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
} {
	var calls []struct {
		DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
	}
	mock.lockDescribeSnapshots.RLock()
	calls = mock.calls.DescribeSnapshots
	mock.lockDescribeSnapshots.RUnlock()
	return calls
}

// DescribeSnapshotsPages calls DescribeSnapshotsPagesFunc.
func (mock *elasticacheClientMock) DescribeSnapshotsPages(describeSnapshotsInput *elasticache.DescribeSnapshotsInput, fn func(*elasticache.DescribeSnapshotsOutput, bool) bool) error {
	if mock.DescribeSnapshotsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeSnapshotsPagesFunc: method is nil but elasticacheClient.DescribeSnapshotsPages was just called")
	}
	callInfo := struct {
		DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
		Fn                     func(*elasticache.DescribeSnapshotsOutput, bool) bool
	}{
		DescribeSnapshotsInput: describeSnapshotsInput,
		Fn:                     fn,
	}
	mock.lockDescribeSnapshotsPages.Lock()
	mock.calls.DescribeSnapshotsPages = append(mock.calls.DescribeSnapshotsPages, callInfo)
	mock.lockDescribeSnapshotsPages.Unlock()
	return mock.DescribeSnapshotsPagesFunc(describeSnapshotsInput, fn)
}

// DescribeSnapshotsPagesCalls gets all the calls that were made to DescribeSnapshotsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeSnapshotsPagesCalls())
func (mock *elasticacheClientMock) DescribeSnapshotsPagesCalls() []struct {
	DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
	Fn                     func(*elasticache.DescribeSnapshotsOutput, bool) bool
} {
	var calls []struct {
		DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
		Fn                     func(*elasticache.DescribeSnapshotsOutput, bool) bool
	}
	mock.lockDescribeSnapshotsPages.RLock()
	calls = mock.calls.DescribeSnapshotsPages
	mock.lockDescribeSnapshotsPages.RUnlock()
	return calls
}

// DescribeSnapshotsPagesWithContext calls DescribeSnapshotsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeSnapshotsPagesWithContext(contextMoqParam context.Context, describeSnapshotsInput *elasticache.DescribeSnapshotsInput, fn func(*elasticache.DescribeSnapshotsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeSnapshotsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeSnapshotsPagesWithContextFunc: method is nil but elasticacheClient.DescribeSnapshotsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
		Fn                     func(*elasticache.DescribeSnapshotsOutput, bool) bool
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		DescribeSnapshotsInput: describeSnapshotsInput,
		Fn:                     fn,
		Options:                options,
	}
	mock.lockDescribeSnapshotsPagesWithContext.Lock()
	mock.calls.DescribeSnapshotsPagesWithContext = append(mock.calls.DescribeSnapshotsPagesWithContext, callInfo)
	mock.lockDescribeSnapshotsPagesWithContext.Unlock()
	return mock.DescribeSnapshotsPagesWithContextFunc(contextMoqParam, describeSnapshotsInput, fn, options...)
}

// DescribeSnapshotsPagesWithContextCalls gets all the calls that were made to DescribeSnapshotsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeSnapshotsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeSnapshotsPagesWithContextCalls() []struct {
	ContextMoqParam        context.Context
	DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
	Fn                     func(*elasticache.DescribeSnapshotsOutput, bool) bool
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
		Fn                     func(*elasticache.DescribeSnapshotsOutput, bool) bool
		Options                []request.Option
	}
	mock.lockDescribeSnapshotsPagesWithContext.RLock()
	calls = mock.calls.DescribeSnapshotsPagesWithContext
	mock.lockDescribeSnapshotsPagesWithContext.RUnlock()
	return calls
}

// DescribeSnapshotsRequest calls DescribeSnapshotsRequestFunc.
func (mock *elasticacheClientMock) DescribeSnapshotsRequest(describeSnapshotsInput *elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput) {
	if mock.DescribeSnapshotsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeSnapshotsRequestFunc: method is nil but elasticacheClient.DescribeSnapshotsRequest was just called")
	}
	callInfo := struct {
		DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
	}{
		DescribeSnapshotsInput: describeSnapshotsInput,
	}
	mock.lockDescribeSnapshotsRequest.Lock()
	mock.calls.DescribeSnapshotsRequest = append(mock.calls.DescribeSnapshotsRequest, callInfo)
	mock.lockDescribeSnapshotsRequest.Unlock()
	return mock.DescribeSnapshotsRequestFunc(describeSnapshotsInput)
}

// DescribeSnapshotsRequestCalls gets all the calls that were made to DescribeSnapshotsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeSnapshotsRequestCalls())
func (mock *elasticacheClientMock) DescribeSnapshotsRequestCalls() []struct {
	DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
} {
	var calls []struct {
		DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
	}
	mock.lockDescribeSnapshotsRequest.RLock()
	calls = mock.calls.DescribeSnapshotsRequest
	mock.lockDescribeSnapshotsRequest.RUnlock()
	return calls
}

// DescribeSnapshotsWithContext calls DescribeSnapshotsWithContextFunc.
func (mock *elasticacheClientMock) DescribeSnapshotsWithContext(contextMoqParam context.Context, describeSnapshotsInput *elasticache.DescribeSnapshotsInput, options ...request.Option) (*elasticache.DescribeSnapshotsOutput, error) {
	if mock.DescribeSnapshotsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeSnapshotsWithContextFunc: method is nil but elasticacheClient.DescribeSnapshotsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		DescribeSnapshotsInput: describeSnapshotsInput,
		Options:                options,
	}
	mock.lockDescribeSnapshotsWithContext.Lock()
	mock.calls.DescribeSnapshotsWithContext = append(mock.calls.DescribeSnapshotsWithContext, callInfo)
	mock.lockDescribeSnapshotsWithContext.Unlock()
	return mock.DescribeSnapshotsWithContextFunc(contextMoqParam, describeSnapshotsInput, options...)
}

// DescribeSnapshotsWithContextCalls gets all the calls that were made to DescribeSnapshotsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeSnapshotsWithContextCalls())
func (mock *elasticacheClientMock) DescribeSnapshotsWithContextCalls() []struct {
	ContextMoqParam        context.Context
	DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		DescribeSnapshotsInput *elasticache.DescribeSnapshotsInput
		Options                []request.Option
	}
	mock.lockDescribeSnapshotsWithContext.RLock()
	calls = mock.calls.DescribeSnapshotsWithContext
	mock.lockDescribeSnapshotsWithContext.RUnlock()
	return calls
}

// DescribeUpdateActions calls DescribeUpdateActionsFunc.
func (mock *elasticacheClientMock) DescribeUpdateActions(describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput) (*elasticache.DescribeUpdateActionsOutput, error) {
	if mock.DescribeUpdateActionsFunc == nil {
		panic("elasticacheClientMock.DescribeUpdateActionsFunc: method is nil but elasticacheClient.DescribeUpdateActions was just called")
	}
	callInfo := struct {
		DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
	}{
		DescribeUpdateActionsInput: describeUpdateActionsInput,
	}
	mock.lockDescribeUpdateActions.Lock()
	mock.calls.DescribeUpdateActions = append(mock.calls.DescribeUpdateActions, callInfo)
	mock.lockDescribeUpdateActions.Unlock()
	return mock.DescribeUpdateActionsFunc(describeUpdateActionsInput)
}

// DescribeUpdateActionsCalls gets all the calls that were made to DescribeUpdateActions.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUpdateActionsCalls())
func (mock *elasticacheClientMock) DescribeUpdateActionsCalls() []struct {
	DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
} {
	var calls []struct {
		DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
	}
	mock.lockDescribeUpdateActions.RLock()
	calls = mock.calls.DescribeUpdateActions
	mock.lockDescribeUpdateActions.RUnlock()
	return calls
}

// DescribeUpdateActionsPages calls DescribeUpdateActionsPagesFunc.
func (mock *elasticacheClientMock) DescribeUpdateActionsPages(describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput, fn func(*elasticache.DescribeUpdateActionsOutput, bool) bool) error {
	if mock.DescribeUpdateActionsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeUpdateActionsPagesFunc: method is nil but elasticacheClient.DescribeUpdateActionsPages was just called")
	}
	callInfo := struct {
		DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
		Fn                         func(*elasticache.DescribeUpdateActionsOutput, bool) bool
	}{
		DescribeUpdateActionsInput: describeUpdateActionsInput,
		Fn:                         fn,
	}
	mock.lockDescribeUpdateActionsPages.Lock()
	mock.calls.DescribeUpdateActionsPages = append(mock.calls.DescribeUpdateActionsPages, callInfo)
	mock.lockDescribeUpdateActionsPages.Unlock()
	return mock.DescribeUpdateActionsPagesFunc(describeUpdateActionsInput, fn)
}

// DescribeUpdateActionsPagesCalls gets all the calls that were made to DescribeUpdateActionsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUpdateActionsPagesCalls())
func (mock *elasticacheClientMock) DescribeUpdateActionsPagesCalls() []struct {
	DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
	Fn                         func(*elasticache.DescribeUpdateActionsOutput, bool) bool
} {
	var calls []struct {
		DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
		Fn                         func(*elasticache.DescribeUpdateActionsOutput, bool) bool
	}
	mock.lockDescribeUpdateActionsPages.RLock()
	calls = mock.calls.DescribeUpdateActionsPages
	mock.lockDescribeUpdateActionsPages.RUnlock()
	return calls
}

// DescribeUpdateActionsPagesWithContext calls DescribeUpdateActionsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeUpdateActionsPagesWithContext(contextMoqParam context.Context, describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput, fn func(*elasticache.DescribeUpdateActionsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeUpdateActionsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeUpdateActionsPagesWithContextFunc: method is nil but elasticacheClient.DescribeUpdateActionsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
		Fn                         func(*elasticache.DescribeUpdateActionsOutput, bool) bool
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		DescribeUpdateActionsInput: describeUpdateActionsInput,
		Fn:                         fn,
		Options:                    options,
	}
	mock.lockDescribeUpdateActionsPagesWithContext.Lock()
	mock.calls.DescribeUpdateActionsPagesWithContext = append(mock.calls.DescribeUpdateActionsPagesWithContext, callInfo)
	mock.lockDescribeUpdateActionsPagesWithContext.Unlock()
	return mock.DescribeUpdateActionsPagesWithContextFunc(contextMoqParam, describeUpdateActionsInput, fn, options...)
}

// DescribeUpdateActionsPagesWithContextCalls gets all the calls that were made to DescribeUpdateActionsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUpdateActionsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeUpdateActionsPagesWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
	Fn                         func(*elasticache.DescribeUpdateActionsOutput, bool) bool
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
		Fn                         func(*elasticache.DescribeUpdateActionsOutput, bool) bool
		Options                    []request.Option
	}
	mock.lockDescribeUpdateActionsPagesWithContext.RLock()
	calls = mock.calls.DescribeUpdateActionsPagesWithContext
	mock.lockDescribeUpdateActionsPagesWithContext.RUnlock()
	return calls
}

// DescribeUpdateActionsRequest calls DescribeUpdateActionsRequestFunc.
func (mock *elasticacheClientMock) DescribeUpdateActionsRequest(describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput) (*request.Request, *elasticache.DescribeUpdateActionsOutput) {
	if mock.DescribeUpdateActionsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeUpdateActionsRequestFunc: method is nil but elasticacheClient.DescribeUpdateActionsRequest was just called")
	}
	callInfo := struct {
		DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
	}{
		DescribeUpdateActionsInput: describeUpdateActionsInput,
	}
	mock.lockDescribeUpdateActionsRequest.Lock()
	mock.calls.DescribeUpdateActionsRequest = append(mock.calls.DescribeUpdateActionsRequest, callInfo)
	mock.lockDescribeUpdateActionsRequest.Unlock()
	return mock.DescribeUpdateActionsRequestFunc(describeUpdateActionsInput)
}

// DescribeUpdateActionsRequestCalls gets all the calls that were made to DescribeUpdateActionsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUpdateActionsRequestCalls())
func (mock *elasticacheClientMock) DescribeUpdateActionsRequestCalls() []struct {
	DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
} {
	var calls []struct {
		DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
	}
	mock.lockDescribeUpdateActionsRequest.RLock()
	calls = mock.calls.DescribeUpdateActionsRequest
	mock.lockDescribeUpdateActionsRequest.RUnlock()
	return calls
}

// DescribeUpdateActionsWithContext calls DescribeUpdateActionsWithContextFunc.
func (mock *elasticacheClientMock) DescribeUpdateActionsWithContext(contextMoqParam context.Context, describeUpdateActionsInput *elasticache.DescribeUpdateActionsInput, options ...request.Option) (*elasticache.DescribeUpdateActionsOutput, error) {
	if mock.DescribeUpdateActionsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeUpdateActionsWithContextFunc: method is nil but elasticacheClient.DescribeUpdateActionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
		Options                    []request.Option
	}{
		ContextMoqParam:            contextMoqParam,
		DescribeUpdateActionsInput: describeUpdateActionsInput,
		Options:                    options,
	}
	mock.lockDescribeUpdateActionsWithContext.Lock()
	mock.calls.DescribeUpdateActionsWithContext = append(mock.calls.DescribeUpdateActionsWithContext, callInfo)
	mock.lockDescribeUpdateActionsWithContext.Unlock()
	return mock.DescribeUpdateActionsWithContextFunc(contextMoqParam, describeUpdateActionsInput, options...)
}

// DescribeUpdateActionsWithContextCalls gets all the calls that were made to DescribeUpdateActionsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUpdateActionsWithContextCalls())
func (mock *elasticacheClientMock) DescribeUpdateActionsWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
	Options                    []request.Option
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DescribeUpdateActionsInput *elasticache.DescribeUpdateActionsInput
		Options                    []request.Option
	}
	mock.lockDescribeUpdateActionsWithContext.RLock()
	calls = mock.calls.DescribeUpdateActionsWithContext
	mock.lockDescribeUpdateActionsWithContext.RUnlock()
	return calls
}

// DescribeUserGroups calls DescribeUserGroupsFunc.
func (mock *elasticacheClientMock) DescribeUserGroups(describeUserGroupsInput *elasticache.DescribeUserGroupsInput) (*elasticache.DescribeUserGroupsOutput, error) {
	if mock.DescribeUserGroupsFunc == nil {
		panic("elasticacheClientMock.DescribeUserGroupsFunc: method is nil but elasticacheClient.DescribeUserGroups was just called")
	}
	callInfo := struct {
		DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
	}{
		DescribeUserGroupsInput: describeUserGroupsInput,
	}
	mock.lockDescribeUserGroups.Lock()
	mock.calls.DescribeUserGroups = append(mock.calls.DescribeUserGroups, callInfo)
	mock.lockDescribeUserGroups.Unlock()
	return mock.DescribeUserGroupsFunc(describeUserGroupsInput)
}

// DescribeUserGroupsCalls gets all the calls that were made to DescribeUserGroups.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUserGroupsCalls())
func (mock *elasticacheClientMock) DescribeUserGroupsCalls() []struct {
	DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
} {
	var calls []struct {
		DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
	}
	mock.lockDescribeUserGroups.RLock()
	calls = mock.calls.DescribeUserGroups
	mock.lockDescribeUserGroups.RUnlock()
	return calls
}

// DescribeUserGroupsPages calls DescribeUserGroupsPagesFunc.
func (mock *elasticacheClientMock) DescribeUserGroupsPages(describeUserGroupsInput *elasticache.DescribeUserGroupsInput, fn func(*elasticache.DescribeUserGroupsOutput, bool) bool) error {
	if mock.DescribeUserGroupsPagesFunc == nil {
		panic("elasticacheClientMock.DescribeUserGroupsPagesFunc: method is nil but elasticacheClient.DescribeUserGroupsPages was just called")
	}
	callInfo := struct {
		DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
		Fn                      func(*elasticache.DescribeUserGroupsOutput, bool) bool
	}{
		DescribeUserGroupsInput: describeUserGroupsInput,
		Fn:                      fn,
	}
	mock.lockDescribeUserGroupsPages.Lock()
	mock.calls.DescribeUserGroupsPages = append(mock.calls.DescribeUserGroupsPages, callInfo)
	mock.lockDescribeUserGroupsPages.Unlock()
	return mock.DescribeUserGroupsPagesFunc(describeUserGroupsInput, fn)
}

// DescribeUserGroupsPagesCalls gets all the calls that were made to DescribeUserGroupsPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUserGroupsPagesCalls())
func (mock *elasticacheClientMock) DescribeUserGroupsPagesCalls() []struct {
	DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
	Fn                      func(*elasticache.DescribeUserGroupsOutput, bool) bool
} {
	var calls []struct {
		DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
		Fn                      func(*elasticache.DescribeUserGroupsOutput, bool) bool
	}
	mock.lockDescribeUserGroupsPages.RLock()
	calls = mock.calls.DescribeUserGroupsPages
	mock.lockDescribeUserGroupsPages.RUnlock()
	return calls
}

// DescribeUserGroupsPagesWithContext calls DescribeUserGroupsPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeUserGroupsPagesWithContext(contextMoqParam context.Context, describeUserGroupsInput *elasticache.DescribeUserGroupsInput, fn func(*elasticache.DescribeUserGroupsOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeUserGroupsPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeUserGroupsPagesWithContextFunc: method is nil but elasticacheClient.DescribeUserGroupsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
		Fn                      func(*elasticache.DescribeUserGroupsOutput, bool) bool
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DescribeUserGroupsInput: describeUserGroupsInput,
		Fn:                      fn,
		Options:                 options,
	}
	mock.lockDescribeUserGroupsPagesWithContext.Lock()
	mock.calls.DescribeUserGroupsPagesWithContext = append(mock.calls.DescribeUserGroupsPagesWithContext, callInfo)
	mock.lockDescribeUserGroupsPagesWithContext.Unlock()
	return mock.DescribeUserGroupsPagesWithContextFunc(contextMoqParam, describeUserGroupsInput, fn, options...)
}

// DescribeUserGroupsPagesWithContextCalls gets all the calls that were made to DescribeUserGroupsPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUserGroupsPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeUserGroupsPagesWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
	Fn                      func(*elasticache.DescribeUserGroupsOutput, bool) bool
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
		Fn                      func(*elasticache.DescribeUserGroupsOutput, bool) bool
		Options                 []request.Option
	}
	mock.lockDescribeUserGroupsPagesWithContext.RLock()
	calls = mock.calls.DescribeUserGroupsPagesWithContext
	mock.lockDescribeUserGroupsPagesWithContext.RUnlock()
	return calls
}

// DescribeUserGroupsRequest calls DescribeUserGroupsRequestFunc.
func (mock *elasticacheClientMock) DescribeUserGroupsRequest(describeUserGroupsInput *elasticache.DescribeUserGroupsInput) (*request.Request, *elasticache.DescribeUserGroupsOutput) {
	if mock.DescribeUserGroupsRequestFunc == nil {
		panic("elasticacheClientMock.DescribeUserGroupsRequestFunc: method is nil but elasticacheClient.DescribeUserGroupsRequest was just called")
	}
	callInfo := struct {
		DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
	}{
		DescribeUserGroupsInput: describeUserGroupsInput,
	}
	mock.lockDescribeUserGroupsRequest.Lock()
	mock.calls.DescribeUserGroupsRequest = append(mock.calls.DescribeUserGroupsRequest, callInfo)
	mock.lockDescribeUserGroupsRequest.Unlock()
	return mock.DescribeUserGroupsRequestFunc(describeUserGroupsInput)
}

// DescribeUserGroupsRequestCalls gets all the calls that were made to DescribeUserGroupsRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUserGroupsRequestCalls())
func (mock *elasticacheClientMock) DescribeUserGroupsRequestCalls() []struct {
	DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
} {
	var calls []struct {
		DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
	}
	mock.lockDescribeUserGroupsRequest.RLock()
	calls = mock.calls.DescribeUserGroupsRequest
	mock.lockDescribeUserGroupsRequest.RUnlock()
	return calls
}

// DescribeUserGroupsWithContext calls DescribeUserGroupsWithContextFunc.
func (mock *elasticacheClientMock) DescribeUserGroupsWithContext(contextMoqParam context.Context, describeUserGroupsInput *elasticache.DescribeUserGroupsInput, options ...request.Option) (*elasticache.DescribeUserGroupsOutput, error) {
	if mock.DescribeUserGroupsWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeUserGroupsWithContextFunc: method is nil but elasticacheClient.DescribeUserGroupsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		DescribeUserGroupsInput: describeUserGroupsInput,
		Options:                 options,
	}
	mock.lockDescribeUserGroupsWithContext.Lock()
	mock.calls.DescribeUserGroupsWithContext = append(mock.calls.DescribeUserGroupsWithContext, callInfo)
	mock.lockDescribeUserGroupsWithContext.Unlock()
	return mock.DescribeUserGroupsWithContextFunc(contextMoqParam, describeUserGroupsInput, options...)
}

// DescribeUserGroupsWithContextCalls gets all the calls that were made to DescribeUserGroupsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUserGroupsWithContextCalls())
func (mock *elasticacheClientMock) DescribeUserGroupsWithContextCalls() []struct {
	ContextMoqParam         context.Context
	DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		DescribeUserGroupsInput *elasticache.DescribeUserGroupsInput
		Options                 []request.Option
	}
	mock.lockDescribeUserGroupsWithContext.RLock()
	calls = mock.calls.DescribeUserGroupsWithContext
	mock.lockDescribeUserGroupsWithContext.RUnlock()
	return calls
}

// DescribeUsers calls DescribeUsersFunc.
func (mock *elasticacheClientMock) DescribeUsers(describeUsersInput *elasticache.DescribeUsersInput) (*elasticache.DescribeUsersOutput, error) {
	if mock.DescribeUsersFunc == nil {
		panic("elasticacheClientMock.DescribeUsersFunc: method is nil but elasticacheClient.DescribeUsers was just called")
	}
	callInfo := struct {
		DescribeUsersInput *elasticache.DescribeUsersInput
	}{
		DescribeUsersInput: describeUsersInput,
	}
	mock.lockDescribeUsers.Lock()
	mock.calls.DescribeUsers = append(mock.calls.DescribeUsers, callInfo)
	mock.lockDescribeUsers.Unlock()
	return mock.DescribeUsersFunc(describeUsersInput)
}

// DescribeUsersCalls gets all the calls that were made to DescribeUsers.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUsersCalls())
func (mock *elasticacheClientMock) DescribeUsersCalls() []struct {
	DescribeUsersInput *elasticache.DescribeUsersInput
} {
	var calls []struct {
		DescribeUsersInput *elasticache.DescribeUsersInput
	}
	mock.lockDescribeUsers.RLock()
	calls = mock.calls.DescribeUsers
	mock.lockDescribeUsers.RUnlock()
	return calls
}

// DescribeUsersPages calls DescribeUsersPagesFunc.
func (mock *elasticacheClientMock) DescribeUsersPages(describeUsersInput *elasticache.DescribeUsersInput, fn func(*elasticache.DescribeUsersOutput, bool) bool) error {
	if mock.DescribeUsersPagesFunc == nil {
		panic("elasticacheClientMock.DescribeUsersPagesFunc: method is nil but elasticacheClient.DescribeUsersPages was just called")
	}
	callInfo := struct {
		DescribeUsersInput *elasticache.DescribeUsersInput
		Fn                 func(*elasticache.DescribeUsersOutput, bool) bool
	}{
		DescribeUsersInput: describeUsersInput,
		Fn:                 fn,
	}
	mock.lockDescribeUsersPages.Lock()
	mock.calls.DescribeUsersPages = append(mock.calls.DescribeUsersPages, callInfo)
	mock.lockDescribeUsersPages.Unlock()
	return mock.DescribeUsersPagesFunc(describeUsersInput, fn)
}

// DescribeUsersPagesCalls gets all the calls that were made to DescribeUsersPages.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUsersPagesCalls())
func (mock *elasticacheClientMock) DescribeUsersPagesCalls() []struct {
	DescribeUsersInput *elasticache.DescribeUsersInput
	Fn                 func(*elasticache.DescribeUsersOutput, bool) bool
} {
	var calls []struct {
		DescribeUsersInput *elasticache.DescribeUsersInput
		Fn                 func(*elasticache.DescribeUsersOutput, bool) bool
	}
	mock.lockDescribeUsersPages.RLock()
	calls = mock.calls.DescribeUsersPages
	mock.lockDescribeUsersPages.RUnlock()
	return calls
}

// DescribeUsersPagesWithContext calls DescribeUsersPagesWithContextFunc.
func (mock *elasticacheClientMock) DescribeUsersPagesWithContext(contextMoqParam context.Context, describeUsersInput *elasticache.DescribeUsersInput, fn func(*elasticache.DescribeUsersOutput, bool) bool, options ...request.Option) error {
	if mock.DescribeUsersPagesWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeUsersPagesWithContextFunc: method is nil but elasticacheClient.DescribeUsersPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		DescribeUsersInput *elasticache.DescribeUsersInput
		Fn                 func(*elasticache.DescribeUsersOutput, bool) bool
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		DescribeUsersInput: describeUsersInput,
		Fn:                 fn,
		Options:            options,
	}
	mock.lockDescribeUsersPagesWithContext.Lock()
	mock.calls.DescribeUsersPagesWithContext = append(mock.calls.DescribeUsersPagesWithContext, callInfo)
	mock.lockDescribeUsersPagesWithContext.Unlock()
	return mock.DescribeUsersPagesWithContextFunc(contextMoqParam, describeUsersInput, fn, options...)
}

// DescribeUsersPagesWithContextCalls gets all the calls that were made to DescribeUsersPagesWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUsersPagesWithContextCalls())
func (mock *elasticacheClientMock) DescribeUsersPagesWithContextCalls() []struct {
	ContextMoqParam    context.Context
	DescribeUsersInput *elasticache.DescribeUsersInput
	Fn                 func(*elasticache.DescribeUsersOutput, bool) bool
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		DescribeUsersInput *elasticache.DescribeUsersInput
		Fn                 func(*elasticache.DescribeUsersOutput, bool) bool
		Options            []request.Option
	}
	mock.lockDescribeUsersPagesWithContext.RLock()
	calls = mock.calls.DescribeUsersPagesWithContext
	mock.lockDescribeUsersPagesWithContext.RUnlock()
	return calls
}

// DescribeUsersRequest calls DescribeUsersRequestFunc.
func (mock *elasticacheClientMock) DescribeUsersRequest(describeUsersInput *elasticache.DescribeUsersInput) (*request.Request, *elasticache.DescribeUsersOutput) {
	if mock.DescribeUsersRequestFunc == nil {
		panic("elasticacheClientMock.DescribeUsersRequestFunc: method is nil but elasticacheClient.DescribeUsersRequest was just called")
	}
	callInfo := struct {
		DescribeUsersInput *elasticache.DescribeUsersInput
	}{
		DescribeUsersInput: describeUsersInput,
	}
	mock.lockDescribeUsersRequest.Lock()
	mock.calls.DescribeUsersRequest = append(mock.calls.DescribeUsersRequest, callInfo)
	mock.lockDescribeUsersRequest.Unlock()
	return mock.DescribeUsersRequestFunc(describeUsersInput)
}

// DescribeUsersRequestCalls gets all the calls that were made to DescribeUsersRequest.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUsersRequestCalls())
func (mock *elasticacheClientMock) DescribeUsersRequestCalls() []struct {
	DescribeUsersInput *elasticache.DescribeUsersInput
} {
	var calls []struct {
		DescribeUsersInput *elasticache.DescribeUsersInput
	}
	mock.lockDescribeUsersRequest.RLock()
	calls = mock.calls.DescribeUsersRequest
	mock.lockDescribeUsersRequest.RUnlock()
	return calls
}

// DescribeUsersWithContext calls DescribeUsersWithContextFunc.
func (mock *elasticacheClientMock) DescribeUsersWithContext(contextMoqParam context.Context, describeUsersInput *elasticache.DescribeUsersInput, options ...request.Option) (*elasticache.DescribeUsersOutput, error) {
	if mock.DescribeUsersWithContextFunc == nil {
		panic("elasticacheClientMock.DescribeUsersWithContextFunc: method is nil but elasticacheClient.DescribeUsersWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		DescribeUsersInput *elasticache.DescribeUsersInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		DescribeUsersInput: describeUsersInput,
		Options:            options,
	}
	mock.lockDescribeUsersWithContext.Lock()
	mock.calls.DescribeUsersWithContext = append(mock.calls.DescribeUsersWithContext, callInfo)
	mock.lockDescribeUsersWithContext.Unlock()
	return mock.DescribeUsersWithContextFunc(contextMoqParam, describeUsersInput, options...)
}

// DescribeUsersWithContextCalls gets all the calls that were made to DescribeUsersWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DescribeUsersWithContextCalls())
func (mock *elasticacheClientMock) DescribeUsersWithContextCalls() []struct {
	ContextMoqParam    context.Context
	DescribeUsersInput *elasticache.DescribeUsersInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		DescribeUsersInput *elasticache.DescribeUsersInput
		Options            []request.Option
	}
	mock.lockDescribeUsersWithContext.RLock()
	calls = mock.calls.DescribeUsersWithContext
	mock.lockDescribeUsersWithContext.RUnlock()
	return calls
}

// DisassociateGlobalReplicationGroup calls DisassociateGlobalReplicationGroupFunc.
func (mock *elasticacheClientMock) DisassociateGlobalReplicationGroup(disassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
	if mock.DisassociateGlobalReplicationGroupFunc == nil {
		panic("elasticacheClientMock.DisassociateGlobalReplicationGroupFunc: method is nil but elasticacheClient.DisassociateGlobalReplicationGroup was just called")
	}
	callInfo := struct {
		DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
	}{
		DisassociateGlobalReplicationGroupInput: disassociateGlobalReplicationGroupInput,
	}
	mock.lockDisassociateGlobalReplicationGroup.Lock()
	mock.calls.DisassociateGlobalReplicationGroup = append(mock.calls.DisassociateGlobalReplicationGroup, callInfo)
	mock.lockDisassociateGlobalReplicationGroup.Unlock()
	return mock.DisassociateGlobalReplicationGroupFunc(disassociateGlobalReplicationGroupInput)
}

// DisassociateGlobalReplicationGroupCalls gets all the calls that were made to DisassociateGlobalReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.DisassociateGlobalReplicationGroupCalls())
func (mock *elasticacheClientMock) DisassociateGlobalReplicationGroupCalls() []struct {
	DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
} {
	var calls []struct {
		DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
	}
	mock.lockDisassociateGlobalReplicationGroup.RLock()
	calls = mock.calls.DisassociateGlobalReplicationGroup
	mock.lockDisassociateGlobalReplicationGroup.RUnlock()
	return calls
}

// DisassociateGlobalReplicationGroupRequest calls DisassociateGlobalReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) DisassociateGlobalReplicationGroupRequest(disassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput) (*request.Request, *elasticache.DisassociateGlobalReplicationGroupOutput) {
	if mock.DisassociateGlobalReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.DisassociateGlobalReplicationGroupRequestFunc: method is nil but elasticacheClient.DisassociateGlobalReplicationGroupRequest was just called")
	}
	callInfo := struct {
		DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
	}{
		DisassociateGlobalReplicationGroupInput: disassociateGlobalReplicationGroupInput,
	}
	mock.lockDisassociateGlobalReplicationGroupRequest.Lock()
	mock.calls.DisassociateGlobalReplicationGroupRequest = append(mock.calls.DisassociateGlobalReplicationGroupRequest, callInfo)
	mock.lockDisassociateGlobalReplicationGroupRequest.Unlock()
	return mock.DisassociateGlobalReplicationGroupRequestFunc(disassociateGlobalReplicationGroupInput)
}

// DisassociateGlobalReplicationGroupRequestCalls gets all the calls that were made to DisassociateGlobalReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.DisassociateGlobalReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) DisassociateGlobalReplicationGroupRequestCalls() []struct {
	DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
} {
	var calls []struct {
		DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
	}
	mock.lockDisassociateGlobalReplicationGroupRequest.RLock()
	calls = mock.calls.DisassociateGlobalReplicationGroupRequest
	mock.lockDisassociateGlobalReplicationGroupRequest.RUnlock()
	return calls
}

// DisassociateGlobalReplicationGroupWithContext calls DisassociateGlobalReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) DisassociateGlobalReplicationGroupWithContext(contextMoqParam context.Context, disassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput, options ...request.Option) (*elasticache.DisassociateGlobalReplicationGroupOutput, error) {
	if mock.DisassociateGlobalReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.DisassociateGlobalReplicationGroupWithContextFunc: method is nil but elasticacheClient.DisassociateGlobalReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		DisassociateGlobalReplicationGroupInput: disassociateGlobalReplicationGroupInput,
		Options:                                 options,
	}
	mock.lockDisassociateGlobalReplicationGroupWithContext.Lock()
	mock.calls.DisassociateGlobalReplicationGroupWithContext = append(mock.calls.DisassociateGlobalReplicationGroupWithContext, callInfo)
	mock.lockDisassociateGlobalReplicationGroupWithContext.Unlock()
	return mock.DisassociateGlobalReplicationGroupWithContextFunc(contextMoqParam, disassociateGlobalReplicationGroupInput, options...)
}

// DisassociateGlobalReplicationGroupWithContextCalls gets all the calls that were made to DisassociateGlobalReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.DisassociateGlobalReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) DisassociateGlobalReplicationGroupWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		DisassociateGlobalReplicationGroupInput *elasticache.DisassociateGlobalReplicationGroupInput
		Options                                 []request.Option
	}
	mock.lockDisassociateGlobalReplicationGroupWithContext.RLock()
	calls = mock.calls.DisassociateGlobalReplicationGroupWithContext
	mock.lockDisassociateGlobalReplicationGroupWithContext.RUnlock()
	return calls
}

// FailoverGlobalReplicationGroup calls FailoverGlobalReplicationGroupFunc.
func (mock *elasticacheClientMock) FailoverGlobalReplicationGroup(failoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
	if mock.FailoverGlobalReplicationGroupFunc == nil {
		panic("elasticacheClientMock.FailoverGlobalReplicationGroupFunc: method is nil but elasticacheClient.FailoverGlobalReplicationGroup was just called")
	}
	callInfo := struct {
		FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
	}{
		FailoverGlobalReplicationGroupInput: failoverGlobalReplicationGroupInput,
	}
	mock.lockFailoverGlobalReplicationGroup.Lock()
	mock.calls.FailoverGlobalReplicationGroup = append(mock.calls.FailoverGlobalReplicationGroup, callInfo)
	mock.lockFailoverGlobalReplicationGroup.Unlock()
	return mock.FailoverGlobalReplicationGroupFunc(failoverGlobalReplicationGroupInput)
}

// FailoverGlobalReplicationGroupCalls gets all the calls that were made to FailoverGlobalReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.FailoverGlobalReplicationGroupCalls())
func (mock *elasticacheClientMock) FailoverGlobalReplicationGroupCalls() []struct {
	FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
} {
	var calls []struct {
		FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
	}
	mock.lockFailoverGlobalReplicationGroup.RLock()
	calls = mock.calls.FailoverGlobalReplicationGroup
	mock.lockFailoverGlobalReplicationGroup.RUnlock()
	return calls
}

// FailoverGlobalReplicationGroupRequest calls FailoverGlobalReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) FailoverGlobalReplicationGroupRequest(failoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput) (*request.Request, *elasticache.FailoverGlobalReplicationGroupOutput) {
	if mock.FailoverGlobalReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.FailoverGlobalReplicationGroupRequestFunc: method is nil but elasticacheClient.FailoverGlobalReplicationGroupRequest was just called")
	}
	callInfo := struct {
		FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
	}{
		FailoverGlobalReplicationGroupInput: failoverGlobalReplicationGroupInput,
	}
	mock.lockFailoverGlobalReplicationGroupRequest.Lock()
	mock.calls.FailoverGlobalReplicationGroupRequest = append(mock.calls.FailoverGlobalReplicationGroupRequest, callInfo)
	mock.lockFailoverGlobalReplicationGroupRequest.Unlock()
	return mock.FailoverGlobalReplicationGroupRequestFunc(failoverGlobalReplicationGroupInput)
}

// FailoverGlobalReplicationGroupRequestCalls gets all the calls that were made to FailoverGlobalReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.FailoverGlobalReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) FailoverGlobalReplicationGroupRequestCalls() []struct {
	FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
} {
	var calls []struct {
		FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
	}
	mock.lockFailoverGlobalReplicationGroupRequest.RLock()
	calls = mock.calls.FailoverGlobalReplicationGroupRequest
	mock.lockFailoverGlobalReplicationGroupRequest.RUnlock()
	return calls
}

// FailoverGlobalReplicationGroupWithContext calls FailoverGlobalReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) FailoverGlobalReplicationGroupWithContext(contextMoqParam context.Context, failoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput, options ...request.Option) (*elasticache.FailoverGlobalReplicationGroupOutput, error) {
	if mock.FailoverGlobalReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.FailoverGlobalReplicationGroupWithContextFunc: method is nil but elasticacheClient.FailoverGlobalReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                     context.Context
		FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
		Options                             []request.Option
	}{
		ContextMoqParam:                     contextMoqParam,
		FailoverGlobalReplicationGroupInput: failoverGlobalReplicationGroupInput,
		Options:                             options,
	}
	mock.lockFailoverGlobalReplicationGroupWithContext.Lock()
	mock.calls.FailoverGlobalReplicationGroupWithContext = append(mock.calls.FailoverGlobalReplicationGroupWithContext, callInfo)
	mock.lockFailoverGlobalReplicationGroupWithContext.Unlock()
	return mock.FailoverGlobalReplicationGroupWithContextFunc(contextMoqParam, failoverGlobalReplicationGroupInput, options...)
}

// FailoverGlobalReplicationGroupWithContextCalls gets all the calls that were made to FailoverGlobalReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.FailoverGlobalReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) FailoverGlobalReplicationGroupWithContextCalls() []struct {
	ContextMoqParam                     context.Context
	FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
	Options                             []request.Option
} {
	var calls []struct {
		ContextMoqParam                     context.Context
		FailoverGlobalReplicationGroupInput *elasticache.FailoverGlobalReplicationGroupInput
		Options                             []request.Option
	}
	mock.lockFailoverGlobalReplicationGroupWithContext.RLock()
	calls = mock.calls.FailoverGlobalReplicationGroupWithContext
	mock.lockFailoverGlobalReplicationGroupWithContext.RUnlock()
	return calls
}

// IncreaseNodeGroupsInGlobalReplicationGroup calls IncreaseNodeGroupsInGlobalReplicationGroupFunc.
func (mock *elasticacheClientMock) IncreaseNodeGroupsInGlobalReplicationGroup(increaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	if mock.IncreaseNodeGroupsInGlobalReplicationGroupFunc == nil {
		panic("elasticacheClientMock.IncreaseNodeGroupsInGlobalReplicationGroupFunc: method is nil but elasticacheClient.IncreaseNodeGroupsInGlobalReplicationGroup was just called")
	}
	callInfo := struct {
		IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
	}{
		IncreaseNodeGroupsInGlobalReplicationGroupInput: increaseNodeGroupsInGlobalReplicationGroupInput,
	}
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroup.Lock()
	mock.calls.IncreaseNodeGroupsInGlobalReplicationGroup = append(mock.calls.IncreaseNodeGroupsInGlobalReplicationGroup, callInfo)
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroup.Unlock()
	return mock.IncreaseNodeGroupsInGlobalReplicationGroupFunc(increaseNodeGroupsInGlobalReplicationGroupInput)
}

// IncreaseNodeGroupsInGlobalReplicationGroupCalls gets all the calls that were made to IncreaseNodeGroupsInGlobalReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.IncreaseNodeGroupsInGlobalReplicationGroupCalls())
func (mock *elasticacheClientMock) IncreaseNodeGroupsInGlobalReplicationGroupCalls() []struct {
	IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
} {
	var calls []struct {
		IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
	}
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroup.RLock()
	calls = mock.calls.IncreaseNodeGroupsInGlobalReplicationGroup
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroup.RUnlock()
	return calls
}

// IncreaseNodeGroupsInGlobalReplicationGroupRequest calls IncreaseNodeGroupsInGlobalReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) IncreaseNodeGroupsInGlobalReplicationGroupRequest(increaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput) (*request.Request, *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput) {
	if mock.IncreaseNodeGroupsInGlobalReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.IncreaseNodeGroupsInGlobalReplicationGroupRequestFunc: method is nil but elasticacheClient.IncreaseNodeGroupsInGlobalReplicationGroupRequest was just called")
	}
	callInfo := struct {
		IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
	}{
		IncreaseNodeGroupsInGlobalReplicationGroupInput: increaseNodeGroupsInGlobalReplicationGroupInput,
	}
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroupRequest.Lock()
	mock.calls.IncreaseNodeGroupsInGlobalReplicationGroupRequest = append(mock.calls.IncreaseNodeGroupsInGlobalReplicationGroupRequest, callInfo)
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroupRequest.Unlock()
	return mock.IncreaseNodeGroupsInGlobalReplicationGroupRequestFunc(increaseNodeGroupsInGlobalReplicationGroupInput)
}

// IncreaseNodeGroupsInGlobalReplicationGroupRequestCalls gets all the calls that were made to IncreaseNodeGroupsInGlobalReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.IncreaseNodeGroupsInGlobalReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) IncreaseNodeGroupsInGlobalReplicationGroupRequestCalls() []struct {
	IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
} {
	var calls []struct {
		IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
	}
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroupRequest.RLock()
	calls = mock.calls.IncreaseNodeGroupsInGlobalReplicationGroupRequest
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroupRequest.RUnlock()
	return calls
}

// IncreaseNodeGroupsInGlobalReplicationGroupWithContext calls IncreaseNodeGroupsInGlobalReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) IncreaseNodeGroupsInGlobalReplicationGroupWithContext(contextMoqParam context.Context, increaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput, options ...request.Option) (*elasticache.IncreaseNodeGroupsInGlobalReplicationGroupOutput, error) {
	if mock.IncreaseNodeGroupsInGlobalReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.IncreaseNodeGroupsInGlobalReplicationGroupWithContextFunc: method is nil but elasticacheClient.IncreaseNodeGroupsInGlobalReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                                 context.Context
		IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
		Options                                         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		IncreaseNodeGroupsInGlobalReplicationGroupInput: increaseNodeGroupsInGlobalReplicationGroupInput,
		Options: options,
	}
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroupWithContext.Lock()
	mock.calls.IncreaseNodeGroupsInGlobalReplicationGroupWithContext = append(mock.calls.IncreaseNodeGroupsInGlobalReplicationGroupWithContext, callInfo)
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroupWithContext.Unlock()
	return mock.IncreaseNodeGroupsInGlobalReplicationGroupWithContextFunc(contextMoqParam, increaseNodeGroupsInGlobalReplicationGroupInput, options...)
}

// IncreaseNodeGroupsInGlobalReplicationGroupWithContextCalls gets all the calls that were made to IncreaseNodeGroupsInGlobalReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.IncreaseNodeGroupsInGlobalReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) IncreaseNodeGroupsInGlobalReplicationGroupWithContextCalls() []struct {
	ContextMoqParam                                 context.Context
	IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
	Options                                         []request.Option
} {
	var calls []struct {
		ContextMoqParam                                 context.Context
		IncreaseNodeGroupsInGlobalReplicationGroupInput *elasticache.IncreaseNodeGroupsInGlobalReplicationGroupInput
		Options                                         []request.Option
	}
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroupWithContext.RLock()
	calls = mock.calls.IncreaseNodeGroupsInGlobalReplicationGroupWithContext
	mock.lockIncreaseNodeGroupsInGlobalReplicationGroupWithContext.RUnlock()
	return calls
}

// IncreaseReplicaCount calls IncreaseReplicaCountFunc.
func (mock *elasticacheClientMock) IncreaseReplicaCount(increaseReplicaCountInput *elasticache.IncreaseReplicaCountInput) (*elasticache.IncreaseReplicaCountOutput, error) {
	if mock.IncreaseReplicaCountFunc == nil {
		panic("elasticacheClientMock.IncreaseReplicaCountFunc: method is nil but elasticacheClient.IncreaseReplicaCount was just called")
	}
	callInfo := struct {
		IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
	}{
		IncreaseReplicaCountInput: increaseReplicaCountInput,
	}
	mock.lockIncreaseReplicaCount.Lock()
	mock.calls.IncreaseReplicaCount = append(mock.calls.IncreaseReplicaCount, callInfo)
	mock.lockIncreaseReplicaCount.Unlock()
	return mock.IncreaseReplicaCountFunc(increaseReplicaCountInput)
}

// IncreaseReplicaCountCalls gets all the calls that were made to IncreaseReplicaCount.
// Check the length with:
//     len(mockedelasticacheClient.IncreaseReplicaCountCalls())
func (mock *elasticacheClientMock) IncreaseReplicaCountCalls() []struct {
	IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
} {
	var calls []struct {
		IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
	}
	mock.lockIncreaseReplicaCount.RLock()
	calls = mock.calls.IncreaseReplicaCount
	mock.lockIncreaseReplicaCount.RUnlock()
	return calls
}

// IncreaseReplicaCountRequest calls IncreaseReplicaCountRequestFunc.
func (mock *elasticacheClientMock) IncreaseReplicaCountRequest(increaseReplicaCountInput *elasticache.IncreaseReplicaCountInput) (*request.Request, *elasticache.IncreaseReplicaCountOutput) {
	if mock.IncreaseReplicaCountRequestFunc == nil {
		panic("elasticacheClientMock.IncreaseReplicaCountRequestFunc: method is nil but elasticacheClient.IncreaseReplicaCountRequest was just called")
	}
	callInfo := struct {
		IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
	}{
		IncreaseReplicaCountInput: increaseReplicaCountInput,
	}
	mock.lockIncreaseReplicaCountRequest.Lock()
	mock.calls.IncreaseReplicaCountRequest = append(mock.calls.IncreaseReplicaCountRequest, callInfo)
	mock.lockIncreaseReplicaCountRequest.Unlock()
	return mock.IncreaseReplicaCountRequestFunc(increaseReplicaCountInput)
}

// IncreaseReplicaCountRequestCalls gets all the calls that were made to IncreaseReplicaCountRequest.
// Check the length with:
//     len(mockedelasticacheClient.IncreaseReplicaCountRequestCalls())
func (mock *elasticacheClientMock) IncreaseReplicaCountRequestCalls() []struct {
	IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
} {
	var calls []struct {
		IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
	}
	mock.lockIncreaseReplicaCountRequest.RLock()
	calls = mock.calls.IncreaseReplicaCountRequest
	mock.lockIncreaseReplicaCountRequest.RUnlock()
	return calls
}

// IncreaseReplicaCountWithContext calls IncreaseReplicaCountWithContextFunc.
func (mock *elasticacheClientMock) IncreaseReplicaCountWithContext(contextMoqParam context.Context, increaseReplicaCountInput *elasticache.IncreaseReplicaCountInput, options ...request.Option) (*elasticache.IncreaseReplicaCountOutput, error) {
	if mock.IncreaseReplicaCountWithContextFunc == nil {
		panic("elasticacheClientMock.IncreaseReplicaCountWithContextFunc: method is nil but elasticacheClient.IncreaseReplicaCountWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		IncreaseReplicaCountInput: increaseReplicaCountInput,
		Options:                   options,
	}
	mock.lockIncreaseReplicaCountWithContext.Lock()
	mock.calls.IncreaseReplicaCountWithContext = append(mock.calls.IncreaseReplicaCountWithContext, callInfo)
	mock.lockIncreaseReplicaCountWithContext.Unlock()
	return mock.IncreaseReplicaCountWithContextFunc(contextMoqParam, increaseReplicaCountInput, options...)
}

// IncreaseReplicaCountWithContextCalls gets all the calls that were made to IncreaseReplicaCountWithContext.
// Check the length with:
//     len(mockedelasticacheClient.IncreaseReplicaCountWithContextCalls())
func (mock *elasticacheClientMock) IncreaseReplicaCountWithContextCalls() []struct {
	ContextMoqParam           context.Context
	IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		IncreaseReplicaCountInput *elasticache.IncreaseReplicaCountInput
		Options                   []request.Option
	}
	mock.lockIncreaseReplicaCountWithContext.RLock()
	calls = mock.calls.IncreaseReplicaCountWithContext
	mock.lockIncreaseReplicaCountWithContext.RUnlock()
	return calls
}

// ListAllowedNodeTypeModifications calls ListAllowedNodeTypeModificationsFunc.
func (mock *elasticacheClientMock) ListAllowedNodeTypeModifications(listAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	if mock.ListAllowedNodeTypeModificationsFunc == nil {
		panic("elasticacheClientMock.ListAllowedNodeTypeModificationsFunc: method is nil but elasticacheClient.ListAllowedNodeTypeModifications was just called")
	}
	callInfo := struct {
		ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
	}{
		ListAllowedNodeTypeModificationsInput: listAllowedNodeTypeModificationsInput,
	}
	mock.lockListAllowedNodeTypeModifications.Lock()
	mock.calls.ListAllowedNodeTypeModifications = append(mock.calls.ListAllowedNodeTypeModifications, callInfo)
	mock.lockListAllowedNodeTypeModifications.Unlock()
	return mock.ListAllowedNodeTypeModificationsFunc(listAllowedNodeTypeModificationsInput)
}

// ListAllowedNodeTypeModificationsCalls gets all the calls that were made to ListAllowedNodeTypeModifications.
// Check the length with:
//     len(mockedelasticacheClient.ListAllowedNodeTypeModificationsCalls())
func (mock *elasticacheClientMock) ListAllowedNodeTypeModificationsCalls() []struct {
	ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
} {
	var calls []struct {
		ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
	}
	mock.lockListAllowedNodeTypeModifications.RLock()
	calls = mock.calls.ListAllowedNodeTypeModifications
	mock.lockListAllowedNodeTypeModifications.RUnlock()
	return calls
}

// ListAllowedNodeTypeModificationsRequest calls ListAllowedNodeTypeModificationsRequestFunc.
func (mock *elasticacheClientMock) ListAllowedNodeTypeModificationsRequest(listAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput) {
	if mock.ListAllowedNodeTypeModificationsRequestFunc == nil {
		panic("elasticacheClientMock.ListAllowedNodeTypeModificationsRequestFunc: method is nil but elasticacheClient.ListAllowedNodeTypeModificationsRequest was just called")
	}
	callInfo := struct {
		ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
	}{
		ListAllowedNodeTypeModificationsInput: listAllowedNodeTypeModificationsInput,
	}
	mock.lockListAllowedNodeTypeModificationsRequest.Lock()
	mock.calls.ListAllowedNodeTypeModificationsRequest = append(mock.calls.ListAllowedNodeTypeModificationsRequest, callInfo)
	mock.lockListAllowedNodeTypeModificationsRequest.Unlock()
	return mock.ListAllowedNodeTypeModificationsRequestFunc(listAllowedNodeTypeModificationsInput)
}

// ListAllowedNodeTypeModificationsRequestCalls gets all the calls that were made to ListAllowedNodeTypeModificationsRequest.
// Check the length with:
//     len(mockedelasticacheClient.ListAllowedNodeTypeModificationsRequestCalls())
func (mock *elasticacheClientMock) ListAllowedNodeTypeModificationsRequestCalls() []struct {
	ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
} {
	var calls []struct {
		ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
	}
	mock.lockListAllowedNodeTypeModificationsRequest.RLock()
	calls = mock.calls.ListAllowedNodeTypeModificationsRequest
	mock.lockListAllowedNodeTypeModificationsRequest.RUnlock()
	return calls
}

// ListAllowedNodeTypeModificationsWithContext calls ListAllowedNodeTypeModificationsWithContextFunc.
func (mock *elasticacheClientMock) ListAllowedNodeTypeModificationsWithContext(contextMoqParam context.Context, listAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput, options ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	if mock.ListAllowedNodeTypeModificationsWithContextFunc == nil {
		panic("elasticacheClientMock.ListAllowedNodeTypeModificationsWithContextFunc: method is nil but elasticacheClient.ListAllowedNodeTypeModificationsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                       context.Context
		ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
		Options                               []request.Option
	}{
		ContextMoqParam:                       contextMoqParam,
		ListAllowedNodeTypeModificationsInput: listAllowedNodeTypeModificationsInput,
		Options:                               options,
	}
	mock.lockListAllowedNodeTypeModificationsWithContext.Lock()
	mock.calls.ListAllowedNodeTypeModificationsWithContext = append(mock.calls.ListAllowedNodeTypeModificationsWithContext, callInfo)
	mock.lockListAllowedNodeTypeModificationsWithContext.Unlock()
	return mock.ListAllowedNodeTypeModificationsWithContextFunc(contextMoqParam, listAllowedNodeTypeModificationsInput, options...)
}

// ListAllowedNodeTypeModificationsWithContextCalls gets all the calls that were made to ListAllowedNodeTypeModificationsWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ListAllowedNodeTypeModificationsWithContextCalls())
func (mock *elasticacheClientMock) ListAllowedNodeTypeModificationsWithContextCalls() []struct {
	ContextMoqParam                       context.Context
	ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
	Options                               []request.Option
} {
	var calls []struct {
		ContextMoqParam                       context.Context
		ListAllowedNodeTypeModificationsInput *elasticache.ListAllowedNodeTypeModificationsInput
		Options                               []request.Option
	}
	mock.lockListAllowedNodeTypeModificationsWithContext.RLock()
	calls = mock.calls.ListAllowedNodeTypeModificationsWithContext
	mock.lockListAllowedNodeTypeModificationsWithContext.RUnlock()
	return calls
}

// ListTagsForResource calls ListTagsForResourceFunc.
func (mock *elasticacheClientMock) ListTagsForResource(listTagsForResourceInput *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error) {
	if mock.ListTagsForResourceFunc == nil {
		panic("elasticacheClientMock.ListTagsForResourceFunc: method is nil but elasticacheClient.ListTagsForResource was just called")
	}
	callInfo := struct {
		ListTagsForResourceInput *elasticache.ListTagsForResourceInput
	}{
		ListTagsForResourceInput: listTagsForResourceInput,
	}
	mock.lockListTagsForResource.Lock()
	mock.calls.ListTagsForResource = append(mock.calls.ListTagsForResource, callInfo)
	mock.lockListTagsForResource.Unlock()
	return mock.ListTagsForResourceFunc(listTagsForResourceInput)
}

// ListTagsForResourceCalls gets all the calls that were made to ListTagsForResource.
// Check the length with:
//     len(mockedelasticacheClient.ListTagsForResourceCalls())
func (mock *elasticacheClientMock) ListTagsForResourceCalls() []struct {
	ListTagsForResourceInput *elasticache.ListTagsForResourceInput
} {
	var calls []struct {
		ListTagsForResourceInput *elasticache.ListTagsForResourceInput
	}
	mock.lockListTagsForResource.RLock()
	calls = mock.calls.ListTagsForResource
	mock.lockListTagsForResource.RUnlock()
	return calls
}

// ListTagsForResourceRequest calls ListTagsForResourceRequestFunc.
func (mock *elasticacheClientMock) ListTagsForResourceRequest(listTagsForResourceInput *elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage) {
	if mock.ListTagsForResourceRequestFunc == nil {
		panic("elasticacheClientMock.ListTagsForResourceRequestFunc: method is nil but elasticacheClient.ListTagsForResourceRequest was just called")
	}
	callInfo := struct {
		ListTagsForResourceInput *elasticache.ListTagsForResourceInput
	}{
		ListTagsForResourceInput: listTagsForResourceInput,
	}
	mock.lockListTagsForResourceRequest.Lock()
	mock.calls.ListTagsForResourceRequest = append(mock.calls.ListTagsForResourceRequest, callInfo)
	mock.lockListTagsForResourceRequest.Unlock()
	return mock.ListTagsForResourceRequestFunc(listTagsForResourceInput)
}

// ListTagsForResourceRequestCalls gets all the calls that were made to ListTagsForResourceRequest.
// Check the length with:
//     len(mockedelasticacheClient.ListTagsForResourceRequestCalls())
func (mock *elasticacheClientMock) ListTagsForResourceRequestCalls() []struct {
	ListTagsForResourceInput *elasticache.ListTagsForResourceInput
} {
	var calls []struct {
		ListTagsForResourceInput *elasticache.ListTagsForResourceInput
	}
	mock.lockListTagsForResourceRequest.RLock()
	calls = mock.calls.ListTagsForResourceRequest
	mock.lockListTagsForResourceRequest.RUnlock()
	return calls
}

// ListTagsForResourceWithContext calls ListTagsForResourceWithContextFunc.
func (mock *elasticacheClientMock) ListTagsForResourceWithContext(contextMoqParam context.Context, listTagsForResourceInput *elasticache.ListTagsForResourceInput, options ...request.Option) (*elasticache.TagListMessage, error) {
	if mock.ListTagsForResourceWithContextFunc == nil {
		panic("elasticacheClientMock.ListTagsForResourceWithContextFunc: method is nil but elasticacheClient.ListTagsForResourceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		ListTagsForResourceInput *elasticache.ListTagsForResourceInput
		Options                  []request.Option
	}{
		ContextMoqParam:          contextMoqParam,
		ListTagsForResourceInput: listTagsForResourceInput,
		Options:                  options,
	}
	mock.lockListTagsForResourceWithContext.Lock()
	mock.calls.ListTagsForResourceWithContext = append(mock.calls.ListTagsForResourceWithContext, callInfo)
	mock.lockListTagsForResourceWithContext.Unlock()
	return mock.ListTagsForResourceWithContextFunc(contextMoqParam, listTagsForResourceInput, options...)
}

// ListTagsForResourceWithContextCalls gets all the calls that were made to ListTagsForResourceWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ListTagsForResourceWithContextCalls())
func (mock *elasticacheClientMock) ListTagsForResourceWithContextCalls() []struct {
	ContextMoqParam          context.Context
	ListTagsForResourceInput *elasticache.ListTagsForResourceInput
	Options                  []request.Option
} {
	var calls []struct {
		ContextMoqParam          context.Context
		ListTagsForResourceInput *elasticache.ListTagsForResourceInput
		Options                  []request.Option
	}
	mock.lockListTagsForResourceWithContext.RLock()
	calls = mock.calls.ListTagsForResourceWithContext
	mock.lockListTagsForResourceWithContext.RUnlock()
	return calls
}

// ModifyCacheCluster calls ModifyCacheClusterFunc.
func (mock *elasticacheClientMock) ModifyCacheCluster(modifyCacheClusterInput *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error) {
	if mock.ModifyCacheClusterFunc == nil {
		panic("elasticacheClientMock.ModifyCacheClusterFunc: method is nil but elasticacheClient.ModifyCacheCluster was just called")
	}
	callInfo := struct {
		ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
	}{
		ModifyCacheClusterInput: modifyCacheClusterInput,
	}
	mock.lockModifyCacheCluster.Lock()
	mock.calls.ModifyCacheCluster = append(mock.calls.ModifyCacheCluster, callInfo)
	mock.lockModifyCacheCluster.Unlock()
	return mock.ModifyCacheClusterFunc(modifyCacheClusterInput)
}

// ModifyCacheClusterCalls gets all the calls that were made to ModifyCacheCluster.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheClusterCalls())
func (mock *elasticacheClientMock) ModifyCacheClusterCalls() []struct {
	ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
} {
	var calls []struct {
		ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
	}
	mock.lockModifyCacheCluster.RLock()
	calls = mock.calls.ModifyCacheCluster
	mock.lockModifyCacheCluster.RUnlock()
	return calls
}

// ModifyCacheClusterRequest calls ModifyCacheClusterRequestFunc.
func (mock *elasticacheClientMock) ModifyCacheClusterRequest(modifyCacheClusterInput *elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput) {
	if mock.ModifyCacheClusterRequestFunc == nil {
		panic("elasticacheClientMock.ModifyCacheClusterRequestFunc: method is nil but elasticacheClient.ModifyCacheClusterRequest was just called")
	}
	callInfo := struct {
		ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
	}{
		ModifyCacheClusterInput: modifyCacheClusterInput,
	}
	mock.lockModifyCacheClusterRequest.Lock()
	mock.calls.ModifyCacheClusterRequest = append(mock.calls.ModifyCacheClusterRequest, callInfo)
	mock.lockModifyCacheClusterRequest.Unlock()
	return mock.ModifyCacheClusterRequestFunc(modifyCacheClusterInput)
}

// ModifyCacheClusterRequestCalls gets all the calls that were made to ModifyCacheClusterRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheClusterRequestCalls())
func (mock *elasticacheClientMock) ModifyCacheClusterRequestCalls() []struct {
	ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
} {
	var calls []struct {
		ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
	}
	mock.lockModifyCacheClusterRequest.RLock()
	calls = mock.calls.ModifyCacheClusterRequest
	mock.lockModifyCacheClusterRequest.RUnlock()
	return calls
}

// ModifyCacheClusterWithContext calls ModifyCacheClusterWithContextFunc.
func (mock *elasticacheClientMock) ModifyCacheClusterWithContext(contextMoqParam context.Context, modifyCacheClusterInput *elasticache.ModifyCacheClusterInput, options ...request.Option) (*elasticache.ModifyCacheClusterOutput, error) {
	if mock.ModifyCacheClusterWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyCacheClusterWithContextFunc: method is nil but elasticacheClient.ModifyCacheClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		ModifyCacheClusterInput: modifyCacheClusterInput,
		Options:                 options,
	}
	mock.lockModifyCacheClusterWithContext.Lock()
	mock.calls.ModifyCacheClusterWithContext = append(mock.calls.ModifyCacheClusterWithContext, callInfo)
	mock.lockModifyCacheClusterWithContext.Unlock()
	return mock.ModifyCacheClusterWithContextFunc(contextMoqParam, modifyCacheClusterInput, options...)
}

// ModifyCacheClusterWithContextCalls gets all the calls that were made to ModifyCacheClusterWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheClusterWithContextCalls())
func (mock *elasticacheClientMock) ModifyCacheClusterWithContextCalls() []struct {
	ContextMoqParam         context.Context
	ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		ModifyCacheClusterInput *elasticache.ModifyCacheClusterInput
		Options                 []request.Option
	}
	mock.lockModifyCacheClusterWithContext.RLock()
	calls = mock.calls.ModifyCacheClusterWithContext
	mock.lockModifyCacheClusterWithContext.RUnlock()
	return calls
}

// ModifyCacheParameterGroup calls ModifyCacheParameterGroupFunc.
func (mock *elasticacheClientMock) ModifyCacheParameterGroup(modifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	if mock.ModifyCacheParameterGroupFunc == nil {
		panic("elasticacheClientMock.ModifyCacheParameterGroupFunc: method is nil but elasticacheClient.ModifyCacheParameterGroup was just called")
	}
	callInfo := struct {
		ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
	}{
		ModifyCacheParameterGroupInput: modifyCacheParameterGroupInput,
	}
	mock.lockModifyCacheParameterGroup.Lock()
	mock.calls.ModifyCacheParameterGroup = append(mock.calls.ModifyCacheParameterGroup, callInfo)
	mock.lockModifyCacheParameterGroup.Unlock()
	return mock.ModifyCacheParameterGroupFunc(modifyCacheParameterGroupInput)
}

// ModifyCacheParameterGroupCalls gets all the calls that were made to ModifyCacheParameterGroup.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheParameterGroupCalls())
func (mock *elasticacheClientMock) ModifyCacheParameterGroupCalls() []struct {
	ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
} {
	var calls []struct {
		ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
	}
	mock.lockModifyCacheParameterGroup.RLock()
	calls = mock.calls.ModifyCacheParameterGroup
	mock.lockModifyCacheParameterGroup.RUnlock()
	return calls
}

// ModifyCacheParameterGroupRequest calls ModifyCacheParameterGroupRequestFunc.
func (mock *elasticacheClientMock) ModifyCacheParameterGroupRequest(modifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
	if mock.ModifyCacheParameterGroupRequestFunc == nil {
		panic("elasticacheClientMock.ModifyCacheParameterGroupRequestFunc: method is nil but elasticacheClient.ModifyCacheParameterGroupRequest was just called")
	}
	callInfo := struct {
		ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
	}{
		ModifyCacheParameterGroupInput: modifyCacheParameterGroupInput,
	}
	mock.lockModifyCacheParameterGroupRequest.Lock()
	mock.calls.ModifyCacheParameterGroupRequest = append(mock.calls.ModifyCacheParameterGroupRequest, callInfo)
	mock.lockModifyCacheParameterGroupRequest.Unlock()
	return mock.ModifyCacheParameterGroupRequestFunc(modifyCacheParameterGroupInput)
}

// ModifyCacheParameterGroupRequestCalls gets all the calls that were made to ModifyCacheParameterGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheParameterGroupRequestCalls())
func (mock *elasticacheClientMock) ModifyCacheParameterGroupRequestCalls() []struct {
	ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
} {
	var calls []struct {
		ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
	}
	mock.lockModifyCacheParameterGroupRequest.RLock()
	calls = mock.calls.ModifyCacheParameterGroupRequest
	mock.lockModifyCacheParameterGroupRequest.RUnlock()
	return calls
}

// ModifyCacheParameterGroupWithContext calls ModifyCacheParameterGroupWithContextFunc.
func (mock *elasticacheClientMock) ModifyCacheParameterGroupWithContext(contextMoqParam context.Context, modifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput, options ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	if mock.ModifyCacheParameterGroupWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyCacheParameterGroupWithContextFunc: method is nil but elasticacheClient.ModifyCacheParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
		Options                        []request.Option
	}{
		ContextMoqParam:                contextMoqParam,
		ModifyCacheParameterGroupInput: modifyCacheParameterGroupInput,
		Options:                        options,
	}
	mock.lockModifyCacheParameterGroupWithContext.Lock()
	mock.calls.ModifyCacheParameterGroupWithContext = append(mock.calls.ModifyCacheParameterGroupWithContext, callInfo)
	mock.lockModifyCacheParameterGroupWithContext.Unlock()
	return mock.ModifyCacheParameterGroupWithContextFunc(contextMoqParam, modifyCacheParameterGroupInput, options...)
}

// ModifyCacheParameterGroupWithContextCalls gets all the calls that were made to ModifyCacheParameterGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheParameterGroupWithContextCalls())
func (mock *elasticacheClientMock) ModifyCacheParameterGroupWithContextCalls() []struct {
	ContextMoqParam                context.Context
	ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
	Options                        []request.Option
} {
	var calls []struct {
		ContextMoqParam                context.Context
		ModifyCacheParameterGroupInput *elasticache.ModifyCacheParameterGroupInput
		Options                        []request.Option
	}
	mock.lockModifyCacheParameterGroupWithContext.RLock()
	calls = mock.calls.ModifyCacheParameterGroupWithContext
	mock.lockModifyCacheParameterGroupWithContext.RUnlock()
	return calls
}

// ModifyCacheSubnetGroup calls ModifyCacheSubnetGroupFunc.
func (mock *elasticacheClientMock) ModifyCacheSubnetGroup(modifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	if mock.ModifyCacheSubnetGroupFunc == nil {
		panic("elasticacheClientMock.ModifyCacheSubnetGroupFunc: method is nil but elasticacheClient.ModifyCacheSubnetGroup was just called")
	}
	callInfo := struct {
		ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
	}{
		ModifyCacheSubnetGroupInput: modifyCacheSubnetGroupInput,
	}
	mock.lockModifyCacheSubnetGroup.Lock()
	mock.calls.ModifyCacheSubnetGroup = append(mock.calls.ModifyCacheSubnetGroup, callInfo)
	mock.lockModifyCacheSubnetGroup.Unlock()
	return mock.ModifyCacheSubnetGroupFunc(modifyCacheSubnetGroupInput)
}

// ModifyCacheSubnetGroupCalls gets all the calls that were made to ModifyCacheSubnetGroup.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheSubnetGroupCalls())
func (mock *elasticacheClientMock) ModifyCacheSubnetGroupCalls() []struct {
	ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
} {
	var calls []struct {
		ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
	}
	mock.lockModifyCacheSubnetGroup.RLock()
	calls = mock.calls.ModifyCacheSubnetGroup
	mock.lockModifyCacheSubnetGroup.RUnlock()
	return calls
}

// ModifyCacheSubnetGroupRequest calls ModifyCacheSubnetGroupRequestFunc.
func (mock *elasticacheClientMock) ModifyCacheSubnetGroupRequest(modifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput) {
	if mock.ModifyCacheSubnetGroupRequestFunc == nil {
		panic("elasticacheClientMock.ModifyCacheSubnetGroupRequestFunc: method is nil but elasticacheClient.ModifyCacheSubnetGroupRequest was just called")
	}
	callInfo := struct {
		ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
	}{
		ModifyCacheSubnetGroupInput: modifyCacheSubnetGroupInput,
	}
	mock.lockModifyCacheSubnetGroupRequest.Lock()
	mock.calls.ModifyCacheSubnetGroupRequest = append(mock.calls.ModifyCacheSubnetGroupRequest, callInfo)
	mock.lockModifyCacheSubnetGroupRequest.Unlock()
	return mock.ModifyCacheSubnetGroupRequestFunc(modifyCacheSubnetGroupInput)
}

// ModifyCacheSubnetGroupRequestCalls gets all the calls that were made to ModifyCacheSubnetGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheSubnetGroupRequestCalls())
func (mock *elasticacheClientMock) ModifyCacheSubnetGroupRequestCalls() []struct {
	ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
} {
	var calls []struct {
		ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
	}
	mock.lockModifyCacheSubnetGroupRequest.RLock()
	calls = mock.calls.ModifyCacheSubnetGroupRequest
	mock.lockModifyCacheSubnetGroupRequest.RUnlock()
	return calls
}

// ModifyCacheSubnetGroupWithContext calls ModifyCacheSubnetGroupWithContextFunc.
func (mock *elasticacheClientMock) ModifyCacheSubnetGroupWithContext(contextMoqParam context.Context, modifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput, options ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	if mock.ModifyCacheSubnetGroupWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyCacheSubnetGroupWithContextFunc: method is nil but elasticacheClient.ModifyCacheSubnetGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		ModifyCacheSubnetGroupInput: modifyCacheSubnetGroupInput,
		Options:                     options,
	}
	mock.lockModifyCacheSubnetGroupWithContext.Lock()
	mock.calls.ModifyCacheSubnetGroupWithContext = append(mock.calls.ModifyCacheSubnetGroupWithContext, callInfo)
	mock.lockModifyCacheSubnetGroupWithContext.Unlock()
	return mock.ModifyCacheSubnetGroupWithContextFunc(contextMoqParam, modifyCacheSubnetGroupInput, options...)
}

// ModifyCacheSubnetGroupWithContextCalls gets all the calls that were made to ModifyCacheSubnetGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyCacheSubnetGroupWithContextCalls())
func (mock *elasticacheClientMock) ModifyCacheSubnetGroupWithContextCalls() []struct {
	ContextMoqParam             context.Context
	ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		ModifyCacheSubnetGroupInput *elasticache.ModifyCacheSubnetGroupInput
		Options                     []request.Option
	}
	mock.lockModifyCacheSubnetGroupWithContext.RLock()
	calls = mock.calls.ModifyCacheSubnetGroupWithContext
	mock.lockModifyCacheSubnetGroupWithContext.RUnlock()
	return calls
}

// ModifyGlobalReplicationGroup calls ModifyGlobalReplicationGroupFunc.
func (mock *elasticacheClientMock) ModifyGlobalReplicationGroup(modifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
	if mock.ModifyGlobalReplicationGroupFunc == nil {
		panic("elasticacheClientMock.ModifyGlobalReplicationGroupFunc: method is nil but elasticacheClient.ModifyGlobalReplicationGroup was just called")
	}
	callInfo := struct {
		ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
	}{
		ModifyGlobalReplicationGroupInput: modifyGlobalReplicationGroupInput,
	}
	mock.lockModifyGlobalReplicationGroup.Lock()
	mock.calls.ModifyGlobalReplicationGroup = append(mock.calls.ModifyGlobalReplicationGroup, callInfo)
	mock.lockModifyGlobalReplicationGroup.Unlock()
	return mock.ModifyGlobalReplicationGroupFunc(modifyGlobalReplicationGroupInput)
}

// ModifyGlobalReplicationGroupCalls gets all the calls that were made to ModifyGlobalReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.ModifyGlobalReplicationGroupCalls())
func (mock *elasticacheClientMock) ModifyGlobalReplicationGroupCalls() []struct {
	ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
} {
	var calls []struct {
		ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
	}
	mock.lockModifyGlobalReplicationGroup.RLock()
	calls = mock.calls.ModifyGlobalReplicationGroup
	mock.lockModifyGlobalReplicationGroup.RUnlock()
	return calls
}

// ModifyGlobalReplicationGroupRequest calls ModifyGlobalReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) ModifyGlobalReplicationGroupRequest(modifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput) (*request.Request, *elasticache.ModifyGlobalReplicationGroupOutput) {
	if mock.ModifyGlobalReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.ModifyGlobalReplicationGroupRequestFunc: method is nil but elasticacheClient.ModifyGlobalReplicationGroupRequest was just called")
	}
	callInfo := struct {
		ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
	}{
		ModifyGlobalReplicationGroupInput: modifyGlobalReplicationGroupInput,
	}
	mock.lockModifyGlobalReplicationGroupRequest.Lock()
	mock.calls.ModifyGlobalReplicationGroupRequest = append(mock.calls.ModifyGlobalReplicationGroupRequest, callInfo)
	mock.lockModifyGlobalReplicationGroupRequest.Unlock()
	return mock.ModifyGlobalReplicationGroupRequestFunc(modifyGlobalReplicationGroupInput)
}

// ModifyGlobalReplicationGroupRequestCalls gets all the calls that were made to ModifyGlobalReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyGlobalReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) ModifyGlobalReplicationGroupRequestCalls() []struct {
	ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
} {
	var calls []struct {
		ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
	}
	mock.lockModifyGlobalReplicationGroupRequest.RLock()
	calls = mock.calls.ModifyGlobalReplicationGroupRequest
	mock.lockModifyGlobalReplicationGroupRequest.RUnlock()
	return calls
}

// ModifyGlobalReplicationGroupWithContext calls ModifyGlobalReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) ModifyGlobalReplicationGroupWithContext(contextMoqParam context.Context, modifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput, options ...request.Option) (*elasticache.ModifyGlobalReplicationGroupOutput, error) {
	if mock.ModifyGlobalReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyGlobalReplicationGroupWithContextFunc: method is nil but elasticacheClient.ModifyGlobalReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		ModifyGlobalReplicationGroupInput: modifyGlobalReplicationGroupInput,
		Options:                           options,
	}
	mock.lockModifyGlobalReplicationGroupWithContext.Lock()
	mock.calls.ModifyGlobalReplicationGroupWithContext = append(mock.calls.ModifyGlobalReplicationGroupWithContext, callInfo)
	mock.lockModifyGlobalReplicationGroupWithContext.Unlock()
	return mock.ModifyGlobalReplicationGroupWithContextFunc(contextMoqParam, modifyGlobalReplicationGroupInput, options...)
}

// ModifyGlobalReplicationGroupWithContextCalls gets all the calls that were made to ModifyGlobalReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyGlobalReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) ModifyGlobalReplicationGroupWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		ModifyGlobalReplicationGroupInput *elasticache.ModifyGlobalReplicationGroupInput
		Options                           []request.Option
	}
	mock.lockModifyGlobalReplicationGroupWithContext.RLock()
	calls = mock.calls.ModifyGlobalReplicationGroupWithContext
	mock.lockModifyGlobalReplicationGroupWithContext.RUnlock()
	return calls
}

// ModifyReplicationGroup calls ModifyReplicationGroupFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroup(modifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error) {
	if mock.ModifyReplicationGroupFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupFunc: method is nil but elasticacheClient.ModifyReplicationGroup was just called")
	}
	callInfo := struct {
		ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
	}{
		ModifyReplicationGroupInput: modifyReplicationGroupInput,
	}
	mock.lockModifyReplicationGroup.Lock()
	mock.calls.ModifyReplicationGroup = append(mock.calls.ModifyReplicationGroup, callInfo)
	mock.lockModifyReplicationGroup.Unlock()
	return mock.ModifyReplicationGroupFunc(modifyReplicationGroupInput)
}

// ModifyReplicationGroupCalls gets all the calls that were made to ModifyReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupCalls() []struct {
	ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
} {
	var calls []struct {
		ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
	}
	mock.lockModifyReplicationGroup.RLock()
	calls = mock.calls.ModifyReplicationGroup
	mock.lockModifyReplicationGroup.RUnlock()
	return calls
}

// ModifyReplicationGroupRequest calls ModifyReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroupRequest(modifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput) {
	if mock.ModifyReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupRequestFunc: method is nil but elasticacheClient.ModifyReplicationGroupRequest was just called")
	}
	callInfo := struct {
		ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
	}{
		ModifyReplicationGroupInput: modifyReplicationGroupInput,
	}
	mock.lockModifyReplicationGroupRequest.Lock()
	mock.calls.ModifyReplicationGroupRequest = append(mock.calls.ModifyReplicationGroupRequest, callInfo)
	mock.lockModifyReplicationGroupRequest.Unlock()
	return mock.ModifyReplicationGroupRequestFunc(modifyReplicationGroupInput)
}

// ModifyReplicationGroupRequestCalls gets all the calls that were made to ModifyReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupRequestCalls() []struct {
	ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
} {
	var calls []struct {
		ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
	}
	mock.lockModifyReplicationGroupRequest.RLock()
	calls = mock.calls.ModifyReplicationGroupRequest
	mock.lockModifyReplicationGroupRequest.RUnlock()
	return calls
}

// ModifyReplicationGroupShardConfiguration calls ModifyReplicationGroupShardConfigurationFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfiguration(modifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	if mock.ModifyReplicationGroupShardConfigurationFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupShardConfigurationFunc: method is nil but elasticacheClient.ModifyReplicationGroupShardConfiguration was just called")
	}
	callInfo := struct {
		ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
	}{
		ModifyReplicationGroupShardConfigurationInput: modifyReplicationGroupShardConfigurationInput,
	}
	mock.lockModifyReplicationGroupShardConfiguration.Lock()
	mock.calls.ModifyReplicationGroupShardConfiguration = append(mock.calls.ModifyReplicationGroupShardConfiguration, callInfo)
	mock.lockModifyReplicationGroupShardConfiguration.Unlock()
	return mock.ModifyReplicationGroupShardConfigurationFunc(modifyReplicationGroupShardConfigurationInput)
}

// ModifyReplicationGroupShardConfigurationCalls gets all the calls that were made to ModifyReplicationGroupShardConfiguration.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupShardConfigurationCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfigurationCalls() []struct {
	ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
} {
	var calls []struct {
		ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
	}
	mock.lockModifyReplicationGroupShardConfiguration.RLock()
	calls = mock.calls.ModifyReplicationGroupShardConfiguration
	mock.lockModifyReplicationGroupShardConfiguration.RUnlock()
	return calls
}

// ModifyReplicationGroupShardConfigurationRequest calls ModifyReplicationGroupShardConfigurationRequestFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfigurationRequest(modifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
	if mock.ModifyReplicationGroupShardConfigurationRequestFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupShardConfigurationRequestFunc: method is nil but elasticacheClient.ModifyReplicationGroupShardConfigurationRequest was just called")
	}
	callInfo := struct {
		ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
	}{
		ModifyReplicationGroupShardConfigurationInput: modifyReplicationGroupShardConfigurationInput,
	}
	mock.lockModifyReplicationGroupShardConfigurationRequest.Lock()
	mock.calls.ModifyReplicationGroupShardConfigurationRequest = append(mock.calls.ModifyReplicationGroupShardConfigurationRequest, callInfo)
	mock.lockModifyReplicationGroupShardConfigurationRequest.Unlock()
	return mock.ModifyReplicationGroupShardConfigurationRequestFunc(modifyReplicationGroupShardConfigurationInput)
}

// ModifyReplicationGroupShardConfigurationRequestCalls gets all the calls that were made to ModifyReplicationGroupShardConfigurationRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupShardConfigurationRequestCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfigurationRequestCalls() []struct {
	ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
} {
	var calls []struct {
		ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
	}
	mock.lockModifyReplicationGroupShardConfigurationRequest.RLock()
	calls = mock.calls.ModifyReplicationGroupShardConfigurationRequest
	mock.lockModifyReplicationGroupShardConfigurationRequest.RUnlock()
	return calls
}

// ModifyReplicationGroupShardConfigurationWithContext calls ModifyReplicationGroupShardConfigurationWithContextFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfigurationWithContext(contextMoqParam context.Context, modifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput, options ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	if mock.ModifyReplicationGroupShardConfigurationWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupShardConfigurationWithContextFunc: method is nil but elasticacheClient.ModifyReplicationGroupShardConfigurationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                               context.Context
		ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
		Options                                       []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ModifyReplicationGroupShardConfigurationInput: modifyReplicationGroupShardConfigurationInput,
		Options: options,
	}
	mock.lockModifyReplicationGroupShardConfigurationWithContext.Lock()
	mock.calls.ModifyReplicationGroupShardConfigurationWithContext = append(mock.calls.ModifyReplicationGroupShardConfigurationWithContext, callInfo)
	mock.lockModifyReplicationGroupShardConfigurationWithContext.Unlock()
	return mock.ModifyReplicationGroupShardConfigurationWithContextFunc(contextMoqParam, modifyReplicationGroupShardConfigurationInput, options...)
}

// ModifyReplicationGroupShardConfigurationWithContextCalls gets all the calls that were made to ModifyReplicationGroupShardConfigurationWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupShardConfigurationWithContextCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupShardConfigurationWithContextCalls() []struct {
	ContextMoqParam                               context.Context
	ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
	Options                                       []request.Option
} {
	var calls []struct {
		ContextMoqParam                               context.Context
		ModifyReplicationGroupShardConfigurationInput *elasticache.ModifyReplicationGroupShardConfigurationInput
		Options                                       []request.Option
	}
	mock.lockModifyReplicationGroupShardConfigurationWithContext.RLock()
	calls = mock.calls.ModifyReplicationGroupShardConfigurationWithContext
	mock.lockModifyReplicationGroupShardConfigurationWithContext.RUnlock()
	return calls
}

// ModifyReplicationGroupWithContext calls ModifyReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) ModifyReplicationGroupWithContext(contextMoqParam context.Context, modifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput, options ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error) {
	if mock.ModifyReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyReplicationGroupWithContextFunc: method is nil but elasticacheClient.ModifyReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		ModifyReplicationGroupInput: modifyReplicationGroupInput,
		Options:                     options,
	}
	mock.lockModifyReplicationGroupWithContext.Lock()
	mock.calls.ModifyReplicationGroupWithContext = append(mock.calls.ModifyReplicationGroupWithContext, callInfo)
	mock.lockModifyReplicationGroupWithContext.Unlock()
	return mock.ModifyReplicationGroupWithContextFunc(contextMoqParam, modifyReplicationGroupInput, options...)
}

// ModifyReplicationGroupWithContextCalls gets all the calls that were made to ModifyReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) ModifyReplicationGroupWithContextCalls() []struct {
	ContextMoqParam             context.Context
	ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		ModifyReplicationGroupInput *elasticache.ModifyReplicationGroupInput
		Options                     []request.Option
	}
	mock.lockModifyReplicationGroupWithContext.RLock()
	calls = mock.calls.ModifyReplicationGroupWithContext
	mock.lockModifyReplicationGroupWithContext.RUnlock()
	return calls
}

// ModifyUser calls ModifyUserFunc.
func (mock *elasticacheClientMock) ModifyUser(modifyUserInput *elasticache.ModifyUserInput) (*elasticache.ModifyUserOutput, error) {
	if mock.ModifyUserFunc == nil {
		panic("elasticacheClientMock.ModifyUserFunc: method is nil but elasticacheClient.ModifyUser was just called")
	}
	callInfo := struct {
		ModifyUserInput *elasticache.ModifyUserInput
	}{
		ModifyUserInput: modifyUserInput,
	}
	mock.lockModifyUser.Lock()
	mock.calls.ModifyUser = append(mock.calls.ModifyUser, callInfo)
	mock.lockModifyUser.Unlock()
	return mock.ModifyUserFunc(modifyUserInput)
}

// ModifyUserCalls gets all the calls that were made to ModifyUser.
// Check the length with:
//     len(mockedelasticacheClient.ModifyUserCalls())
func (mock *elasticacheClientMock) ModifyUserCalls() []struct {
	ModifyUserInput *elasticache.ModifyUserInput
} {
	var calls []struct {
		ModifyUserInput *elasticache.ModifyUserInput
	}
	mock.lockModifyUser.RLock()
	calls = mock.calls.ModifyUser
	mock.lockModifyUser.RUnlock()
	return calls
}

// ModifyUserGroup calls ModifyUserGroupFunc.
func (mock *elasticacheClientMock) ModifyUserGroup(modifyUserGroupInput *elasticache.ModifyUserGroupInput) (*elasticache.ModifyUserGroupOutput, error) {
	if mock.ModifyUserGroupFunc == nil {
		panic("elasticacheClientMock.ModifyUserGroupFunc: method is nil but elasticacheClient.ModifyUserGroup was just called")
	}
	callInfo := struct {
		ModifyUserGroupInput *elasticache.ModifyUserGroupInput
	}{
		ModifyUserGroupInput: modifyUserGroupInput,
	}
	mock.lockModifyUserGroup.Lock()
	mock.calls.ModifyUserGroup = append(mock.calls.ModifyUserGroup, callInfo)
	mock.lockModifyUserGroup.Unlock()
	return mock.ModifyUserGroupFunc(modifyUserGroupInput)
}

// ModifyUserGroupCalls gets all the calls that were made to ModifyUserGroup.
// Check the length with:
//     len(mockedelasticacheClient.ModifyUserGroupCalls())
func (mock *elasticacheClientMock) ModifyUserGroupCalls() []struct {
	ModifyUserGroupInput *elasticache.ModifyUserGroupInput
} {
	var calls []struct {
		ModifyUserGroupInput *elasticache.ModifyUserGroupInput
	}
	mock.lockModifyUserGroup.RLock()
	calls = mock.calls.ModifyUserGroup
	mock.lockModifyUserGroup.RUnlock()
	return calls
}

// ModifyUserGroupRequest calls ModifyUserGroupRequestFunc.
func (mock *elasticacheClientMock) ModifyUserGroupRequest(modifyUserGroupInput *elasticache.ModifyUserGroupInput) (*request.Request, *elasticache.ModifyUserGroupOutput) {
	if mock.ModifyUserGroupRequestFunc == nil {
		panic("elasticacheClientMock.ModifyUserGroupRequestFunc: method is nil but elasticacheClient.ModifyUserGroupRequest was just called")
	}
	callInfo := struct {
		ModifyUserGroupInput *elasticache.ModifyUserGroupInput
	}{
		ModifyUserGroupInput: modifyUserGroupInput,
	}
	mock.lockModifyUserGroupRequest.Lock()
	mock.calls.ModifyUserGroupRequest = append(mock.calls.ModifyUserGroupRequest, callInfo)
	mock.lockModifyUserGroupRequest.Unlock()
	return mock.ModifyUserGroupRequestFunc(modifyUserGroupInput)
}

// ModifyUserGroupRequestCalls gets all the calls that were made to ModifyUserGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyUserGroupRequestCalls())
func (mock *elasticacheClientMock) ModifyUserGroupRequestCalls() []struct {
	ModifyUserGroupInput *elasticache.ModifyUserGroupInput
} {
	var calls []struct {
		ModifyUserGroupInput *elasticache.ModifyUserGroupInput
	}
	mock.lockModifyUserGroupRequest.RLock()
	calls = mock.calls.ModifyUserGroupRequest
	mock.lockModifyUserGroupRequest.RUnlock()
	return calls
}

// ModifyUserGroupWithContext calls ModifyUserGroupWithContextFunc.
func (mock *elasticacheClientMock) ModifyUserGroupWithContext(contextMoqParam context.Context, modifyUserGroupInput *elasticache.ModifyUserGroupInput, options ...request.Option) (*elasticache.ModifyUserGroupOutput, error) {
	if mock.ModifyUserGroupWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyUserGroupWithContextFunc: method is nil but elasticacheClient.ModifyUserGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam      context.Context
		ModifyUserGroupInput *elasticache.ModifyUserGroupInput
		Options              []request.Option
	}{
		ContextMoqParam:      contextMoqParam,
		ModifyUserGroupInput: modifyUserGroupInput,
		Options:              options,
	}
	mock.lockModifyUserGroupWithContext.Lock()
	mock.calls.ModifyUserGroupWithContext = append(mock.calls.ModifyUserGroupWithContext, callInfo)
	mock.lockModifyUserGroupWithContext.Unlock()
	return mock.ModifyUserGroupWithContextFunc(contextMoqParam, modifyUserGroupInput, options...)
}

// ModifyUserGroupWithContextCalls gets all the calls that were made to ModifyUserGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyUserGroupWithContextCalls())
func (mock *elasticacheClientMock) ModifyUserGroupWithContextCalls() []struct {
	ContextMoqParam      context.Context
	ModifyUserGroupInput *elasticache.ModifyUserGroupInput
	Options              []request.Option
} {
	var calls []struct {
		ContextMoqParam      context.Context
		ModifyUserGroupInput *elasticache.ModifyUserGroupInput
		Options              []request.Option
	}
	mock.lockModifyUserGroupWithContext.RLock()
	calls = mock.calls.ModifyUserGroupWithContext
	mock.lockModifyUserGroupWithContext.RUnlock()
	return calls
}

// ModifyUserRequest calls ModifyUserRequestFunc.
func (mock *elasticacheClientMock) ModifyUserRequest(modifyUserInput *elasticache.ModifyUserInput) (*request.Request, *elasticache.ModifyUserOutput) {
	if mock.ModifyUserRequestFunc == nil {
		panic("elasticacheClientMock.ModifyUserRequestFunc: method is nil but elasticacheClient.ModifyUserRequest was just called")
	}
	callInfo := struct {
		ModifyUserInput *elasticache.ModifyUserInput
	}{
		ModifyUserInput: modifyUserInput,
	}
	mock.lockModifyUserRequest.Lock()
	mock.calls.ModifyUserRequest = append(mock.calls.ModifyUserRequest, callInfo)
	mock.lockModifyUserRequest.Unlock()
	return mock.ModifyUserRequestFunc(modifyUserInput)
}

// ModifyUserRequestCalls gets all the calls that were made to ModifyUserRequest.
// Check the length with:
//     len(mockedelasticacheClient.ModifyUserRequestCalls())
func (mock *elasticacheClientMock) ModifyUserRequestCalls() []struct {
	ModifyUserInput *elasticache.ModifyUserInput
} {
	var calls []struct {
		ModifyUserInput *elasticache.ModifyUserInput
	}
	mock.lockModifyUserRequest.RLock()
	calls = mock.calls.ModifyUserRequest
	mock.lockModifyUserRequest.RUnlock()
	return calls
}

// ModifyUserWithContext calls ModifyUserWithContextFunc.
func (mock *elasticacheClientMock) ModifyUserWithContext(contextMoqParam context.Context, modifyUserInput *elasticache.ModifyUserInput, options ...request.Option) (*elasticache.ModifyUserOutput, error) {
	if mock.ModifyUserWithContextFunc == nil {
		panic("elasticacheClientMock.ModifyUserWithContextFunc: method is nil but elasticacheClient.ModifyUserWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ModifyUserInput *elasticache.ModifyUserInput
		Options         []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		ModifyUserInput: modifyUserInput,
		Options:         options,
	}
	mock.lockModifyUserWithContext.Lock()
	mock.calls.ModifyUserWithContext = append(mock.calls.ModifyUserWithContext, callInfo)
	mock.lockModifyUserWithContext.Unlock()
	return mock.ModifyUserWithContextFunc(contextMoqParam, modifyUserInput, options...)
}

// ModifyUserWithContextCalls gets all the calls that were made to ModifyUserWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ModifyUserWithContextCalls())
func (mock *elasticacheClientMock) ModifyUserWithContextCalls() []struct {
	ContextMoqParam context.Context
	ModifyUserInput *elasticache.ModifyUserInput
	Options         []request.Option
} {
	var calls []struct {
		ContextMoqParam context.Context
		ModifyUserInput *elasticache.ModifyUserInput
		Options         []request.Option
	}
	mock.lockModifyUserWithContext.RLock()
	calls = mock.calls.ModifyUserWithContext
	mock.lockModifyUserWithContext.RUnlock()
	return calls
}

// PurchaseReservedCacheNodesOffering calls PurchaseReservedCacheNodesOfferingFunc.
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOffering(purchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	if mock.PurchaseReservedCacheNodesOfferingFunc == nil {
		panic("elasticacheClientMock.PurchaseReservedCacheNodesOfferingFunc: method is nil but elasticacheClient.PurchaseReservedCacheNodesOffering was just called")
	}
	callInfo := struct {
		PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
	}{
		PurchaseReservedCacheNodesOfferingInput: purchaseReservedCacheNodesOfferingInput,
	}
	mock.lockPurchaseReservedCacheNodesOffering.Lock()
	mock.calls.PurchaseReservedCacheNodesOffering = append(mock.calls.PurchaseReservedCacheNodesOffering, callInfo)
	mock.lockPurchaseReservedCacheNodesOffering.Unlock()
	return mock.PurchaseReservedCacheNodesOfferingFunc(purchaseReservedCacheNodesOfferingInput)
}

// PurchaseReservedCacheNodesOfferingCalls gets all the calls that were made to PurchaseReservedCacheNodesOffering.
// Check the length with:
//     len(mockedelasticacheClient.PurchaseReservedCacheNodesOfferingCalls())
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOfferingCalls() []struct {
	PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
} {
	var calls []struct {
		PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
	}
	mock.lockPurchaseReservedCacheNodesOffering.RLock()
	calls = mock.calls.PurchaseReservedCacheNodesOffering
	mock.lockPurchaseReservedCacheNodesOffering.RUnlock()
	return calls
}

// PurchaseReservedCacheNodesOfferingRequest calls PurchaseReservedCacheNodesOfferingRequestFunc.
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOfferingRequest(purchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
	if mock.PurchaseReservedCacheNodesOfferingRequestFunc == nil {
		panic("elasticacheClientMock.PurchaseReservedCacheNodesOfferingRequestFunc: method is nil but elasticacheClient.PurchaseReservedCacheNodesOfferingRequest was just called")
	}
	callInfo := struct {
		PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
	}{
		PurchaseReservedCacheNodesOfferingInput: purchaseReservedCacheNodesOfferingInput,
	}
	mock.lockPurchaseReservedCacheNodesOfferingRequest.Lock()
	mock.calls.PurchaseReservedCacheNodesOfferingRequest = append(mock.calls.PurchaseReservedCacheNodesOfferingRequest, callInfo)
	mock.lockPurchaseReservedCacheNodesOfferingRequest.Unlock()
	return mock.PurchaseReservedCacheNodesOfferingRequestFunc(purchaseReservedCacheNodesOfferingInput)
}

// PurchaseReservedCacheNodesOfferingRequestCalls gets all the calls that were made to PurchaseReservedCacheNodesOfferingRequest.
// Check the length with:
//     len(mockedelasticacheClient.PurchaseReservedCacheNodesOfferingRequestCalls())
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOfferingRequestCalls() []struct {
	PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
} {
	var calls []struct {
		PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
	}
	mock.lockPurchaseReservedCacheNodesOfferingRequest.RLock()
	calls = mock.calls.PurchaseReservedCacheNodesOfferingRequest
	mock.lockPurchaseReservedCacheNodesOfferingRequest.RUnlock()
	return calls
}

// PurchaseReservedCacheNodesOfferingWithContext calls PurchaseReservedCacheNodesOfferingWithContextFunc.
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOfferingWithContext(contextMoqParam context.Context, purchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput, options ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	if mock.PurchaseReservedCacheNodesOfferingWithContextFunc == nil {
		panic("elasticacheClientMock.PurchaseReservedCacheNodesOfferingWithContextFunc: method is nil but elasticacheClient.PurchaseReservedCacheNodesOfferingWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                         context.Context
		PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
		Options                                 []request.Option
	}{
		ContextMoqParam:                         contextMoqParam,
		PurchaseReservedCacheNodesOfferingInput: purchaseReservedCacheNodesOfferingInput,
		Options:                                 options,
	}
	mock.lockPurchaseReservedCacheNodesOfferingWithContext.Lock()
	mock.calls.PurchaseReservedCacheNodesOfferingWithContext = append(mock.calls.PurchaseReservedCacheNodesOfferingWithContext, callInfo)
	mock.lockPurchaseReservedCacheNodesOfferingWithContext.Unlock()
	return mock.PurchaseReservedCacheNodesOfferingWithContextFunc(contextMoqParam, purchaseReservedCacheNodesOfferingInput, options...)
}

// PurchaseReservedCacheNodesOfferingWithContextCalls gets all the calls that were made to PurchaseReservedCacheNodesOfferingWithContext.
// Check the length with:
//     len(mockedelasticacheClient.PurchaseReservedCacheNodesOfferingWithContextCalls())
func (mock *elasticacheClientMock) PurchaseReservedCacheNodesOfferingWithContextCalls() []struct {
	ContextMoqParam                         context.Context
	PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
	Options                                 []request.Option
} {
	var calls []struct {
		ContextMoqParam                         context.Context
		PurchaseReservedCacheNodesOfferingInput *elasticache.PurchaseReservedCacheNodesOfferingInput
		Options                                 []request.Option
	}
	mock.lockPurchaseReservedCacheNodesOfferingWithContext.RLock()
	calls = mock.calls.PurchaseReservedCacheNodesOfferingWithContext
	mock.lockPurchaseReservedCacheNodesOfferingWithContext.RUnlock()
	return calls
}

// RebalanceSlotsInGlobalReplicationGroup calls RebalanceSlotsInGlobalReplicationGroupFunc.
func (mock *elasticacheClientMock) RebalanceSlotsInGlobalReplicationGroup(rebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
	if mock.RebalanceSlotsInGlobalReplicationGroupFunc == nil {
		panic("elasticacheClientMock.RebalanceSlotsInGlobalReplicationGroupFunc: method is nil but elasticacheClient.RebalanceSlotsInGlobalReplicationGroup was just called")
	}
	callInfo := struct {
		RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
	}{
		RebalanceSlotsInGlobalReplicationGroupInput: rebalanceSlotsInGlobalReplicationGroupInput,
	}
	mock.lockRebalanceSlotsInGlobalReplicationGroup.Lock()
	mock.calls.RebalanceSlotsInGlobalReplicationGroup = append(mock.calls.RebalanceSlotsInGlobalReplicationGroup, callInfo)
	mock.lockRebalanceSlotsInGlobalReplicationGroup.Unlock()
	return mock.RebalanceSlotsInGlobalReplicationGroupFunc(rebalanceSlotsInGlobalReplicationGroupInput)
}

// RebalanceSlotsInGlobalReplicationGroupCalls gets all the calls that were made to RebalanceSlotsInGlobalReplicationGroup.
// Check the length with:
//     len(mockedelasticacheClient.RebalanceSlotsInGlobalReplicationGroupCalls())
func (mock *elasticacheClientMock) RebalanceSlotsInGlobalReplicationGroupCalls() []struct {
	RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
} {
	var calls []struct {
		RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
	}
	mock.lockRebalanceSlotsInGlobalReplicationGroup.RLock()
	calls = mock.calls.RebalanceSlotsInGlobalReplicationGroup
	mock.lockRebalanceSlotsInGlobalReplicationGroup.RUnlock()
	return calls
}

// RebalanceSlotsInGlobalReplicationGroupRequest calls RebalanceSlotsInGlobalReplicationGroupRequestFunc.
func (mock *elasticacheClientMock) RebalanceSlotsInGlobalReplicationGroupRequest(rebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput) (*request.Request, *elasticache.RebalanceSlotsInGlobalReplicationGroupOutput) {
	if mock.RebalanceSlotsInGlobalReplicationGroupRequestFunc == nil {
		panic("elasticacheClientMock.RebalanceSlotsInGlobalReplicationGroupRequestFunc: method is nil but elasticacheClient.RebalanceSlotsInGlobalReplicationGroupRequest was just called")
	}
	callInfo := struct {
		RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
	}{
		RebalanceSlotsInGlobalReplicationGroupInput: rebalanceSlotsInGlobalReplicationGroupInput,
	}
	mock.lockRebalanceSlotsInGlobalReplicationGroupRequest.Lock()
	mock.calls.RebalanceSlotsInGlobalReplicationGroupRequest = append(mock.calls.RebalanceSlotsInGlobalReplicationGroupRequest, callInfo)
	mock.lockRebalanceSlotsInGlobalReplicationGroupRequest.Unlock()
	return mock.RebalanceSlotsInGlobalReplicationGroupRequestFunc(rebalanceSlotsInGlobalReplicationGroupInput)
}

// RebalanceSlotsInGlobalReplicationGroupRequestCalls gets all the calls that were made to RebalanceSlotsInGlobalReplicationGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.RebalanceSlotsInGlobalReplicationGroupRequestCalls())
func (mock *elasticacheClientMock) RebalanceSlotsInGlobalReplicationGroupRequestCalls() []struct {
	RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
} {
	var calls []struct {
		RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
	}
	mock.lockRebalanceSlotsInGlobalReplicationGroupRequest.RLock()
	calls = mock.calls.RebalanceSlotsInGlobalReplicationGroupRequest
	mock.lockRebalanceSlotsInGlobalReplicationGroupRequest.RUnlock()
	return calls
}

// RebalanceSlotsInGlobalReplicationGroupWithContext calls RebalanceSlotsInGlobalReplicationGroupWithContextFunc.
func (mock *elasticacheClientMock) RebalanceSlotsInGlobalReplicationGroupWithContext(contextMoqParam context.Context, rebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput, options ...request.Option) (*elasticache.RebalanceSlotsInGlobalReplicationGroupOutput, error) {
	if mock.RebalanceSlotsInGlobalReplicationGroupWithContextFunc == nil {
		panic("elasticacheClientMock.RebalanceSlotsInGlobalReplicationGroupWithContextFunc: method is nil but elasticacheClient.RebalanceSlotsInGlobalReplicationGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                             context.Context
		RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
		Options                                     []request.Option
	}{
		ContextMoqParam: contextMoqParam,
		RebalanceSlotsInGlobalReplicationGroupInput: rebalanceSlotsInGlobalReplicationGroupInput,
		Options: options,
	}
	mock.lockRebalanceSlotsInGlobalReplicationGroupWithContext.Lock()
	mock.calls.RebalanceSlotsInGlobalReplicationGroupWithContext = append(mock.calls.RebalanceSlotsInGlobalReplicationGroupWithContext, callInfo)
	mock.lockRebalanceSlotsInGlobalReplicationGroupWithContext.Unlock()
	return mock.RebalanceSlotsInGlobalReplicationGroupWithContextFunc(contextMoqParam, rebalanceSlotsInGlobalReplicationGroupInput, options...)
}

// RebalanceSlotsInGlobalReplicationGroupWithContextCalls gets all the calls that were made to RebalanceSlotsInGlobalReplicationGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.RebalanceSlotsInGlobalReplicationGroupWithContextCalls())
func (mock *elasticacheClientMock) RebalanceSlotsInGlobalReplicationGroupWithContextCalls() []struct {
	ContextMoqParam                             context.Context
	RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
	Options                                     []request.Option
} {
	var calls []struct {
		ContextMoqParam                             context.Context
		RebalanceSlotsInGlobalReplicationGroupInput *elasticache.RebalanceSlotsInGlobalReplicationGroupInput
		Options                                     []request.Option
	}
	mock.lockRebalanceSlotsInGlobalReplicationGroupWithContext.RLock()
	calls = mock.calls.RebalanceSlotsInGlobalReplicationGroupWithContext
	mock.lockRebalanceSlotsInGlobalReplicationGroupWithContext.RUnlock()
	return calls
}

// RebootCacheCluster calls RebootCacheClusterFunc.
func (mock *elasticacheClientMock) RebootCacheCluster(rebootCacheClusterInput *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error) {
	if mock.RebootCacheClusterFunc == nil {
		panic("elasticacheClientMock.RebootCacheClusterFunc: method is nil but elasticacheClient.RebootCacheCluster was just called")
	}
	callInfo := struct {
		RebootCacheClusterInput *elasticache.RebootCacheClusterInput
	}{
		RebootCacheClusterInput: rebootCacheClusterInput,
	}
	mock.lockRebootCacheCluster.Lock()
	mock.calls.RebootCacheCluster = append(mock.calls.RebootCacheCluster, callInfo)
	mock.lockRebootCacheCluster.Unlock()
	return mock.RebootCacheClusterFunc(rebootCacheClusterInput)
}

// RebootCacheClusterCalls gets all the calls that were made to RebootCacheCluster.
// Check the length with:
//     len(mockedelasticacheClient.RebootCacheClusterCalls())
func (mock *elasticacheClientMock) RebootCacheClusterCalls() []struct {
	RebootCacheClusterInput *elasticache.RebootCacheClusterInput
} {
	var calls []struct {
		RebootCacheClusterInput *elasticache.RebootCacheClusterInput
	}
	mock.lockRebootCacheCluster.RLock()
	calls = mock.calls.RebootCacheCluster
	mock.lockRebootCacheCluster.RUnlock()
	return calls
}

// RebootCacheClusterRequest calls RebootCacheClusterRequestFunc.
func (mock *elasticacheClientMock) RebootCacheClusterRequest(rebootCacheClusterInput *elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput) {
	if mock.RebootCacheClusterRequestFunc == nil {
		panic("elasticacheClientMock.RebootCacheClusterRequestFunc: method is nil but elasticacheClient.RebootCacheClusterRequest was just called")
	}
	callInfo := struct {
		RebootCacheClusterInput *elasticache.RebootCacheClusterInput
	}{
		RebootCacheClusterInput: rebootCacheClusterInput,
	}
	mock.lockRebootCacheClusterRequest.Lock()
	mock.calls.RebootCacheClusterRequest = append(mock.calls.RebootCacheClusterRequest, callInfo)
	mock.lockRebootCacheClusterRequest.Unlock()
	return mock.RebootCacheClusterRequestFunc(rebootCacheClusterInput)
}

// RebootCacheClusterRequestCalls gets all the calls that were made to RebootCacheClusterRequest.
// Check the length with:
//     len(mockedelasticacheClient.RebootCacheClusterRequestCalls())
func (mock *elasticacheClientMock) RebootCacheClusterRequestCalls() []struct {
	RebootCacheClusterInput *elasticache.RebootCacheClusterInput
} {
	var calls []struct {
		RebootCacheClusterInput *elasticache.RebootCacheClusterInput
	}
	mock.lockRebootCacheClusterRequest.RLock()
	calls = mock.calls.RebootCacheClusterRequest
	mock.lockRebootCacheClusterRequest.RUnlock()
	return calls
}

// RebootCacheClusterWithContext calls RebootCacheClusterWithContextFunc.
func (mock *elasticacheClientMock) RebootCacheClusterWithContext(contextMoqParam context.Context, rebootCacheClusterInput *elasticache.RebootCacheClusterInput, options ...request.Option) (*elasticache.RebootCacheClusterOutput, error) {
	if mock.RebootCacheClusterWithContextFunc == nil {
		panic("elasticacheClientMock.RebootCacheClusterWithContextFunc: method is nil but elasticacheClient.RebootCacheClusterWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		RebootCacheClusterInput *elasticache.RebootCacheClusterInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		RebootCacheClusterInput: rebootCacheClusterInput,
		Options:                 options,
	}
	mock.lockRebootCacheClusterWithContext.Lock()
	mock.calls.RebootCacheClusterWithContext = append(mock.calls.RebootCacheClusterWithContext, callInfo)
	mock.lockRebootCacheClusterWithContext.Unlock()
	return mock.RebootCacheClusterWithContextFunc(contextMoqParam, rebootCacheClusterInput, options...)
}

// RebootCacheClusterWithContextCalls gets all the calls that were made to RebootCacheClusterWithContext.
// Check the length with:
//     len(mockedelasticacheClient.RebootCacheClusterWithContextCalls())
func (mock *elasticacheClientMock) RebootCacheClusterWithContextCalls() []struct {
	ContextMoqParam         context.Context
	RebootCacheClusterInput *elasticache.RebootCacheClusterInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		RebootCacheClusterInput *elasticache.RebootCacheClusterInput
		Options                 []request.Option
	}
	mock.lockRebootCacheClusterWithContext.RLock()
	calls = mock.calls.RebootCacheClusterWithContext
	mock.lockRebootCacheClusterWithContext.RUnlock()
	return calls
}

// RemoveTagsFromResource calls RemoveTagsFromResourceFunc.
func (mock *elasticacheClientMock) RemoveTagsFromResource(removeTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error) {
	if mock.RemoveTagsFromResourceFunc == nil {
		panic("elasticacheClientMock.RemoveTagsFromResourceFunc: method is nil but elasticacheClient.RemoveTagsFromResource was just called")
	}
	callInfo := struct {
		RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
	}{
		RemoveTagsFromResourceInput: removeTagsFromResourceInput,
	}
	mock.lockRemoveTagsFromResource.Lock()
	mock.calls.RemoveTagsFromResource = append(mock.calls.RemoveTagsFromResource, callInfo)
	mock.lockRemoveTagsFromResource.Unlock()
	return mock.RemoveTagsFromResourceFunc(removeTagsFromResourceInput)
}

// RemoveTagsFromResourceCalls gets all the calls that were made to RemoveTagsFromResource.
// Check the length with:
//     len(mockedelasticacheClient.RemoveTagsFromResourceCalls())
func (mock *elasticacheClientMock) RemoveTagsFromResourceCalls() []struct {
	RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
} {
	var calls []struct {
		RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
	}
	mock.lockRemoveTagsFromResource.RLock()
	calls = mock.calls.RemoveTagsFromResource
	mock.lockRemoveTagsFromResource.RUnlock()
	return calls
}

// RemoveTagsFromResourceRequest calls RemoveTagsFromResourceRequestFunc.
func (mock *elasticacheClientMock) RemoveTagsFromResourceRequest(removeTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage) {
	if mock.RemoveTagsFromResourceRequestFunc == nil {
		panic("elasticacheClientMock.RemoveTagsFromResourceRequestFunc: method is nil but elasticacheClient.RemoveTagsFromResourceRequest was just called")
	}
	callInfo := struct {
		RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
	}{
		RemoveTagsFromResourceInput: removeTagsFromResourceInput,
	}
	mock.lockRemoveTagsFromResourceRequest.Lock()
	mock.calls.RemoveTagsFromResourceRequest = append(mock.calls.RemoveTagsFromResourceRequest, callInfo)
	mock.lockRemoveTagsFromResourceRequest.Unlock()
	return mock.RemoveTagsFromResourceRequestFunc(removeTagsFromResourceInput)
}

// RemoveTagsFromResourceRequestCalls gets all the calls that were made to RemoveTagsFromResourceRequest.
// Check the length with:
//     len(mockedelasticacheClient.RemoveTagsFromResourceRequestCalls())
func (mock *elasticacheClientMock) RemoveTagsFromResourceRequestCalls() []struct {
	RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
} {
	var calls []struct {
		RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
	}
	mock.lockRemoveTagsFromResourceRequest.RLock()
	calls = mock.calls.RemoveTagsFromResourceRequest
	mock.lockRemoveTagsFromResourceRequest.RUnlock()
	return calls
}

// RemoveTagsFromResourceWithContext calls RemoveTagsFromResourceWithContextFunc.
func (mock *elasticacheClientMock) RemoveTagsFromResourceWithContext(contextMoqParam context.Context, removeTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput, options ...request.Option) (*elasticache.TagListMessage, error) {
	if mock.RemoveTagsFromResourceWithContextFunc == nil {
		panic("elasticacheClientMock.RemoveTagsFromResourceWithContextFunc: method is nil but elasticacheClient.RemoveTagsFromResourceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		RemoveTagsFromResourceInput: removeTagsFromResourceInput,
		Options:                     options,
	}
	mock.lockRemoveTagsFromResourceWithContext.Lock()
	mock.calls.RemoveTagsFromResourceWithContext = append(mock.calls.RemoveTagsFromResourceWithContext, callInfo)
	mock.lockRemoveTagsFromResourceWithContext.Unlock()
	return mock.RemoveTagsFromResourceWithContextFunc(contextMoqParam, removeTagsFromResourceInput, options...)
}

// RemoveTagsFromResourceWithContextCalls gets all the calls that were made to RemoveTagsFromResourceWithContext.
// Check the length with:
//     len(mockedelasticacheClient.RemoveTagsFromResourceWithContextCalls())
func (mock *elasticacheClientMock) RemoveTagsFromResourceWithContextCalls() []struct {
	ContextMoqParam             context.Context
	RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		RemoveTagsFromResourceInput *elasticache.RemoveTagsFromResourceInput
		Options                     []request.Option
	}
	mock.lockRemoveTagsFromResourceWithContext.RLock()
	calls = mock.calls.RemoveTagsFromResourceWithContext
	mock.lockRemoveTagsFromResourceWithContext.RUnlock()
	return calls
}

// ResetCacheParameterGroup calls ResetCacheParameterGroupFunc.
func (mock *elasticacheClientMock) ResetCacheParameterGroup(resetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	if mock.ResetCacheParameterGroupFunc == nil {
		panic("elasticacheClientMock.ResetCacheParameterGroupFunc: method is nil but elasticacheClient.ResetCacheParameterGroup was just called")
	}
	callInfo := struct {
		ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
	}{
		ResetCacheParameterGroupInput: resetCacheParameterGroupInput,
	}
	mock.lockResetCacheParameterGroup.Lock()
	mock.calls.ResetCacheParameterGroup = append(mock.calls.ResetCacheParameterGroup, callInfo)
	mock.lockResetCacheParameterGroup.Unlock()
	return mock.ResetCacheParameterGroupFunc(resetCacheParameterGroupInput)
}

// ResetCacheParameterGroupCalls gets all the calls that were made to ResetCacheParameterGroup.
// Check the length with:
//     len(mockedelasticacheClient.ResetCacheParameterGroupCalls())
func (mock *elasticacheClientMock) ResetCacheParameterGroupCalls() []struct {
	ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
} {
	var calls []struct {
		ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
	}
	mock.lockResetCacheParameterGroup.RLock()
	calls = mock.calls.ResetCacheParameterGroup
	mock.lockResetCacheParameterGroup.RUnlock()
	return calls
}

// ResetCacheParameterGroupRequest calls ResetCacheParameterGroupRequestFunc.
func (mock *elasticacheClientMock) ResetCacheParameterGroupRequest(resetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
	if mock.ResetCacheParameterGroupRequestFunc == nil {
		panic("elasticacheClientMock.ResetCacheParameterGroupRequestFunc: method is nil but elasticacheClient.ResetCacheParameterGroupRequest was just called")
	}
	callInfo := struct {
		ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
	}{
		ResetCacheParameterGroupInput: resetCacheParameterGroupInput,
	}
	mock.lockResetCacheParameterGroupRequest.Lock()
	mock.calls.ResetCacheParameterGroupRequest = append(mock.calls.ResetCacheParameterGroupRequest, callInfo)
	mock.lockResetCacheParameterGroupRequest.Unlock()
	return mock.ResetCacheParameterGroupRequestFunc(resetCacheParameterGroupInput)
}

// ResetCacheParameterGroupRequestCalls gets all the calls that were made to ResetCacheParameterGroupRequest.
// Check the length with:
//     len(mockedelasticacheClient.ResetCacheParameterGroupRequestCalls())
func (mock *elasticacheClientMock) ResetCacheParameterGroupRequestCalls() []struct {
	ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
} {
	var calls []struct {
		ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
	}
	mock.lockResetCacheParameterGroupRequest.RLock()
	calls = mock.calls.ResetCacheParameterGroupRequest
	mock.lockResetCacheParameterGroupRequest.RUnlock()
	return calls
}

// ResetCacheParameterGroupWithContext calls ResetCacheParameterGroupWithContextFunc.
func (mock *elasticacheClientMock) ResetCacheParameterGroupWithContext(contextMoqParam context.Context, resetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput, options ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	if mock.ResetCacheParameterGroupWithContextFunc == nil {
		panic("elasticacheClientMock.ResetCacheParameterGroupWithContextFunc: method is nil but elasticacheClient.ResetCacheParameterGroupWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		ResetCacheParameterGroupInput: resetCacheParameterGroupInput,
		Options:                       options,
	}
	mock.lockResetCacheParameterGroupWithContext.Lock()
	mock.calls.ResetCacheParameterGroupWithContext = append(mock.calls.ResetCacheParameterGroupWithContext, callInfo)
	mock.lockResetCacheParameterGroupWithContext.Unlock()
	return mock.ResetCacheParameterGroupWithContextFunc(contextMoqParam, resetCacheParameterGroupInput, options...)
}

// ResetCacheParameterGroupWithContextCalls gets all the calls that were made to ResetCacheParameterGroupWithContext.
// Check the length with:
//     len(mockedelasticacheClient.ResetCacheParameterGroupWithContextCalls())
func (mock *elasticacheClientMock) ResetCacheParameterGroupWithContextCalls() []struct {
	ContextMoqParam               context.Context
	ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		ResetCacheParameterGroupInput *elasticache.ResetCacheParameterGroupInput
		Options                       []request.Option
	}
	mock.lockResetCacheParameterGroupWithContext.RLock()
	calls = mock.calls.ResetCacheParameterGroupWithContext
	mock.lockResetCacheParameterGroupWithContext.RUnlock()
	return calls
}

// RevokeCacheSecurityGroupIngress calls RevokeCacheSecurityGroupIngressFunc.
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngress(revokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	if mock.RevokeCacheSecurityGroupIngressFunc == nil {
		panic("elasticacheClientMock.RevokeCacheSecurityGroupIngressFunc: method is nil but elasticacheClient.RevokeCacheSecurityGroupIngress was just called")
	}
	callInfo := struct {
		RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
	}{
		RevokeCacheSecurityGroupIngressInput: revokeCacheSecurityGroupIngressInput,
	}
	mock.lockRevokeCacheSecurityGroupIngress.Lock()
	mock.calls.RevokeCacheSecurityGroupIngress = append(mock.calls.RevokeCacheSecurityGroupIngress, callInfo)
	mock.lockRevokeCacheSecurityGroupIngress.Unlock()
	return mock.RevokeCacheSecurityGroupIngressFunc(revokeCacheSecurityGroupIngressInput)
}

// RevokeCacheSecurityGroupIngressCalls gets all the calls that were made to RevokeCacheSecurityGroupIngress.
// Check the length with:
//     len(mockedelasticacheClient.RevokeCacheSecurityGroupIngressCalls())
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngressCalls() []struct {
	RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
} {
	var calls []struct {
		RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
	}
	mock.lockRevokeCacheSecurityGroupIngress.RLock()
	calls = mock.calls.RevokeCacheSecurityGroupIngress
	mock.lockRevokeCacheSecurityGroupIngress.RUnlock()
	return calls
}

// RevokeCacheSecurityGroupIngressRequest calls RevokeCacheSecurityGroupIngressRequestFunc.
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngressRequest(revokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput) {
	if mock.RevokeCacheSecurityGroupIngressRequestFunc == nil {
		panic("elasticacheClientMock.RevokeCacheSecurityGroupIngressRequestFunc: method is nil but elasticacheClient.RevokeCacheSecurityGroupIngressRequest was just called")
	}
	callInfo := struct {
		RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
	}{
		RevokeCacheSecurityGroupIngressInput: revokeCacheSecurityGroupIngressInput,
	}
	mock.lockRevokeCacheSecurityGroupIngressRequest.Lock()
	mock.calls.RevokeCacheSecurityGroupIngressRequest = append(mock.calls.RevokeCacheSecurityGroupIngressRequest, callInfo)
	mock.lockRevokeCacheSecurityGroupIngressRequest.Unlock()
	return mock.RevokeCacheSecurityGroupIngressRequestFunc(revokeCacheSecurityGroupIngressInput)
}

// RevokeCacheSecurityGroupIngressRequestCalls gets all the calls that were made to RevokeCacheSecurityGroupIngressRequest.
// Check the length with:
//     len(mockedelasticacheClient.RevokeCacheSecurityGroupIngressRequestCalls())
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngressRequestCalls() []struct {
	RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
} {
	var calls []struct {
		RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
	}
	mock.lockRevokeCacheSecurityGroupIngressRequest.RLock()
	calls = mock.calls.RevokeCacheSecurityGroupIngressRequest
	mock.lockRevokeCacheSecurityGroupIngressRequest.RUnlock()
	return calls
}

// RevokeCacheSecurityGroupIngressWithContext calls RevokeCacheSecurityGroupIngressWithContextFunc.
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngressWithContext(contextMoqParam context.Context, revokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput, options ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	if mock.RevokeCacheSecurityGroupIngressWithContextFunc == nil {
		panic("elasticacheClientMock.RevokeCacheSecurityGroupIngressWithContextFunc: method is nil but elasticacheClient.RevokeCacheSecurityGroupIngressWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                      context.Context
		RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
		Options                              []request.Option
	}{
		ContextMoqParam:                      contextMoqParam,
		RevokeCacheSecurityGroupIngressInput: revokeCacheSecurityGroupIngressInput,
		Options:                              options,
	}
	mock.lockRevokeCacheSecurityGroupIngressWithContext.Lock()
	mock.calls.RevokeCacheSecurityGroupIngressWithContext = append(mock.calls.RevokeCacheSecurityGroupIngressWithContext, callInfo)
	mock.lockRevokeCacheSecurityGroupIngressWithContext.Unlock()
	return mock.RevokeCacheSecurityGroupIngressWithContextFunc(contextMoqParam, revokeCacheSecurityGroupIngressInput, options...)
}

// RevokeCacheSecurityGroupIngressWithContextCalls gets all the calls that were made to RevokeCacheSecurityGroupIngressWithContext.
// Check the length with:
//     len(mockedelasticacheClient.RevokeCacheSecurityGroupIngressWithContextCalls())
func (mock *elasticacheClientMock) RevokeCacheSecurityGroupIngressWithContextCalls() []struct {
	ContextMoqParam                      context.Context
	RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
	Options                              []request.Option
} {
	var calls []struct {
		ContextMoqParam                      context.Context
		RevokeCacheSecurityGroupIngressInput *elasticache.RevokeCacheSecurityGroupIngressInput
		Options                              []request.Option
	}
	mock.lockRevokeCacheSecurityGroupIngressWithContext.RLock()
	calls = mock.calls.RevokeCacheSecurityGroupIngressWithContext
	mock.lockRevokeCacheSecurityGroupIngressWithContext.RUnlock()
	return calls
}

// StartMigration calls StartMigrationFunc.
func (mock *elasticacheClientMock) StartMigration(startMigrationInput *elasticache.StartMigrationInput) (*elasticache.StartMigrationOutput, error) {
	if mock.StartMigrationFunc == nil {
		panic("elasticacheClientMock.StartMigrationFunc: method is nil but elasticacheClient.StartMigration was just called")
	}
	callInfo := struct {
		StartMigrationInput *elasticache.StartMigrationInput
	}{
		StartMigrationInput: startMigrationInput,
	}
	mock.lockStartMigration.Lock()
	mock.calls.StartMigration = append(mock.calls.StartMigration, callInfo)
	mock.lockStartMigration.Unlock()
	return mock.StartMigrationFunc(startMigrationInput)
}

// StartMigrationCalls gets all the calls that were made to StartMigration.
// Check the length with:
//     len(mockedelasticacheClient.StartMigrationCalls())
func (mock *elasticacheClientMock) StartMigrationCalls() []struct {
	StartMigrationInput *elasticache.StartMigrationInput
} {
	var calls []struct {
		StartMigrationInput *elasticache.StartMigrationInput
	}
	mock.lockStartMigration.RLock()
	calls = mock.calls.StartMigration
	mock.lockStartMigration.RUnlock()
	return calls
}

// StartMigrationRequest calls StartMigrationRequestFunc.
func (mock *elasticacheClientMock) StartMigrationRequest(startMigrationInput *elasticache.StartMigrationInput) (*request.Request, *elasticache.StartMigrationOutput) {
	if mock.StartMigrationRequestFunc == nil {
		panic("elasticacheClientMock.StartMigrationRequestFunc: method is nil but elasticacheClient.StartMigrationRequest was just called")
	}
	callInfo := struct {
		StartMigrationInput *elasticache.StartMigrationInput
	}{
		StartMigrationInput: startMigrationInput,
	}
	mock.lockStartMigrationRequest.Lock()
	mock.calls.StartMigrationRequest = append(mock.calls.StartMigrationRequest, callInfo)
	mock.lockStartMigrationRequest.Unlock()
	return mock.StartMigrationRequestFunc(startMigrationInput)
}

// StartMigrationRequestCalls gets all the calls that were made to StartMigrationRequest.
// Check the length with:
//     len(mockedelasticacheClient.StartMigrationRequestCalls())
func (mock *elasticacheClientMock) StartMigrationRequestCalls() []struct {
	StartMigrationInput *elasticache.StartMigrationInput
} {
	var calls []struct {
		StartMigrationInput *elasticache.StartMigrationInput
	}
	mock.lockStartMigrationRequest.RLock()
	calls = mock.calls.StartMigrationRequest
	mock.lockStartMigrationRequest.RUnlock()
	return calls
}

// StartMigrationWithContext calls StartMigrationWithContextFunc.
func (mock *elasticacheClientMock) StartMigrationWithContext(contextMoqParam context.Context, startMigrationInput *elasticache.StartMigrationInput, options ...request.Option) (*elasticache.StartMigrationOutput, error) {
	if mock.StartMigrationWithContextFunc == nil {
		panic("elasticacheClientMock.StartMigrationWithContextFunc: method is nil but elasticacheClient.StartMigrationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		StartMigrationInput *elasticache.StartMigrationInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		StartMigrationInput: startMigrationInput,
		Options:             options,
	}
	mock.lockStartMigrationWithContext.Lock()
	mock.calls.StartMigrationWithContext = append(mock.calls.StartMigrationWithContext, callInfo)
	mock.lockStartMigrationWithContext.Unlock()
	return mock.StartMigrationWithContextFunc(contextMoqParam, startMigrationInput, options...)
}

// StartMigrationWithContextCalls gets all the calls that were made to StartMigrationWithContext.
// Check the length with:
//     len(mockedelasticacheClient.StartMigrationWithContextCalls())
func (mock *elasticacheClientMock) StartMigrationWithContextCalls() []struct {
	ContextMoqParam     context.Context
	StartMigrationInput *elasticache.StartMigrationInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		StartMigrationInput *elasticache.StartMigrationInput
		Options             []request.Option
	}
	mock.lockStartMigrationWithContext.RLock()
	calls = mock.calls.StartMigrationWithContext
	mock.lockStartMigrationWithContext.RUnlock()
	return calls
}

// TestFailover calls TestFailoverFunc.
func (mock *elasticacheClientMock) TestFailover(testFailoverInput *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error) {
	if mock.TestFailoverFunc == nil {
		panic("elasticacheClientMock.TestFailoverFunc: method is nil but elasticacheClient.TestFailover was just called")
	}
	callInfo := struct {
		TestFailoverInput *elasticache.TestFailoverInput
	}{
		TestFailoverInput: testFailoverInput,
	}
	mock.lockTestFailover.Lock()
	mock.calls.TestFailover = append(mock.calls.TestFailover, callInfo)
	mock.lockTestFailover.Unlock()
	return mock.TestFailoverFunc(testFailoverInput)
}

// TestFailoverCalls gets all the calls that were made to TestFailover.
// Check the length with:
//     len(mockedelasticacheClient.TestFailoverCalls())
func (mock *elasticacheClientMock) TestFailoverCalls() []struct {
	TestFailoverInput *elasticache.TestFailoverInput
} {
	var calls []struct {
		TestFailoverInput *elasticache.TestFailoverInput
	}
	mock.lockTestFailover.RLock()
	calls = mock.calls.TestFailover
	mock.lockTestFailover.RUnlock()
	return calls
}

// TestFailoverRequest calls TestFailoverRequestFunc.
func (mock *elasticacheClientMock) TestFailoverRequest(testFailoverInput *elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput) {
	if mock.TestFailoverRequestFunc == nil {
		panic("elasticacheClientMock.TestFailoverRequestFunc: method is nil but elasticacheClient.TestFailoverRequest was just called")
	}
	callInfo := struct {
		TestFailoverInput *elasticache.TestFailoverInput
	}{
		TestFailoverInput: testFailoverInput,
	}
	mock.lockTestFailoverRequest.Lock()
	mock.calls.TestFailoverRequest = append(mock.calls.TestFailoverRequest, callInfo)
	mock.lockTestFailoverRequest.Unlock()
	return mock.TestFailoverRequestFunc(testFailoverInput)
}

// TestFailoverRequestCalls gets all the calls that were made to TestFailoverRequest.
// Check the length with:
//     len(mockedelasticacheClient.TestFailoverRequestCalls())
func (mock *elasticacheClientMock) TestFailoverRequestCalls() []struct {
	TestFailoverInput *elasticache.TestFailoverInput
} {
	var calls []struct {
		TestFailoverInput *elasticache.TestFailoverInput
	}
	mock.lockTestFailoverRequest.RLock()
	calls = mock.calls.TestFailoverRequest
	mock.lockTestFailoverRequest.RUnlock()
	return calls
}

// TestFailoverWithContext calls TestFailoverWithContextFunc.
func (mock *elasticacheClientMock) TestFailoverWithContext(contextMoqParam context.Context, testFailoverInput *elasticache.TestFailoverInput, options ...request.Option) (*elasticache.TestFailoverOutput, error) {
	if mock.TestFailoverWithContextFunc == nil {
		panic("elasticacheClientMock.TestFailoverWithContextFunc: method is nil but elasticacheClient.TestFailoverWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		TestFailoverInput *elasticache.TestFailoverInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		TestFailoverInput: testFailoverInput,
		Options:           options,
	}
	mock.lockTestFailoverWithContext.Lock()
	mock.calls.TestFailoverWithContext = append(mock.calls.TestFailoverWithContext, callInfo)
	mock.lockTestFailoverWithContext.Unlock()
	return mock.TestFailoverWithContextFunc(contextMoqParam, testFailoverInput, options...)
}

// TestFailoverWithContextCalls gets all the calls that were made to TestFailoverWithContext.
// Check the length with:
//     len(mockedelasticacheClient.TestFailoverWithContextCalls())
func (mock *elasticacheClientMock) TestFailoverWithContextCalls() []struct {
	ContextMoqParam   context.Context
	TestFailoverInput *elasticache.TestFailoverInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		TestFailoverInput *elasticache.TestFailoverInput
		Options           []request.Option
	}
	mock.lockTestFailoverWithContext.RLock()
	calls = mock.calls.TestFailoverWithContext
	mock.lockTestFailoverWithContext.RUnlock()
	return calls
}

// WaitUntilCacheClusterAvailable calls WaitUntilCacheClusterAvailableFunc.
func (mock *elasticacheClientMock) WaitUntilCacheClusterAvailable(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) error {
	if mock.WaitUntilCacheClusterAvailableFunc == nil {
		panic("elasticacheClientMock.WaitUntilCacheClusterAvailableFunc: method is nil but elasticacheClient.WaitUntilCacheClusterAvailable was just called")
	}
	callInfo := struct {
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	}{
		DescribeCacheClustersInput: describeCacheClustersInput,
	}
	mock.lockWaitUntilCacheClusterAvailable.Lock()
	mock.calls.WaitUntilCacheClusterAvailable = append(mock.calls.WaitUntilCacheClusterAvailable, callInfo)
	mock.lockWaitUntilCacheClusterAvailable.Unlock()
	return mock.WaitUntilCacheClusterAvailableFunc(describeCacheClustersInput)
}

// WaitUntilCacheClusterAvailableCalls gets all the calls that were made to WaitUntilCacheClusterAvailable.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilCacheClusterAvailableCalls())
func (mock *elasticacheClientMock) WaitUntilCacheClusterAvailableCalls() []struct {
	DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
} {
	var calls []struct {
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	}
	mock.lockWaitUntilCacheClusterAvailable.RLock()
	calls = mock.calls.WaitUntilCacheClusterAvailable
	mock.lockWaitUntilCacheClusterAvailable.RUnlock()
	return calls
}

// WaitUntilCacheClusterAvailableWithContext calls WaitUntilCacheClusterAvailableWithContextFunc.
func (mock *elasticacheClientMock) WaitUntilCacheClusterAvailableWithContext(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilCacheClusterAvailableWithContextFunc == nil {
		panic("elasticacheClientMock.WaitUntilCacheClusterAvailableWithContextFunc: method is nil but elasticacheClient.WaitUntilCacheClusterAvailableWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		WaiterOptions              []request.WaiterOption
	}{
		ContextMoqParam:            contextMoqParam,
		DescribeCacheClustersInput: describeCacheClustersInput,
		WaiterOptions:              waiterOptions,
	}
	mock.lockWaitUntilCacheClusterAvailableWithContext.Lock()
	mock.calls.WaitUntilCacheClusterAvailableWithContext = append(mock.calls.WaitUntilCacheClusterAvailableWithContext, callInfo)
	mock.lockWaitUntilCacheClusterAvailableWithContext.Unlock()
	return mock.WaitUntilCacheClusterAvailableWithContextFunc(contextMoqParam, describeCacheClustersInput, waiterOptions...)
}

// WaitUntilCacheClusterAvailableWithContextCalls gets all the calls that were made to WaitUntilCacheClusterAvailableWithContext.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilCacheClusterAvailableWithContextCalls())
func (mock *elasticacheClientMock) WaitUntilCacheClusterAvailableWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	WaiterOptions              []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		WaiterOptions              []request.WaiterOption
	}
	mock.lockWaitUntilCacheClusterAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilCacheClusterAvailableWithContext
	mock.lockWaitUntilCacheClusterAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilCacheClusterDeleted calls WaitUntilCacheClusterDeletedFunc.
func (mock *elasticacheClientMock) WaitUntilCacheClusterDeleted(describeCacheClustersInput *elasticache.DescribeCacheClustersInput) error {
	if mock.WaitUntilCacheClusterDeletedFunc == nil {
		panic("elasticacheClientMock.WaitUntilCacheClusterDeletedFunc: method is nil but elasticacheClient.WaitUntilCacheClusterDeleted was just called")
	}
	callInfo := struct {
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	}{
		DescribeCacheClustersInput: describeCacheClustersInput,
	}
	mock.lockWaitUntilCacheClusterDeleted.Lock()
	mock.calls.WaitUntilCacheClusterDeleted = append(mock.calls.WaitUntilCacheClusterDeleted, callInfo)
	mock.lockWaitUntilCacheClusterDeleted.Unlock()
	return mock.WaitUntilCacheClusterDeletedFunc(describeCacheClustersInput)
}

// WaitUntilCacheClusterDeletedCalls gets all the calls that were made to WaitUntilCacheClusterDeleted.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilCacheClusterDeletedCalls())
func (mock *elasticacheClientMock) WaitUntilCacheClusterDeletedCalls() []struct {
	DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
} {
	var calls []struct {
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	}
	mock.lockWaitUntilCacheClusterDeleted.RLock()
	calls = mock.calls.WaitUntilCacheClusterDeleted
	mock.lockWaitUntilCacheClusterDeleted.RUnlock()
	return calls
}

// WaitUntilCacheClusterDeletedWithContext calls WaitUntilCacheClusterDeletedWithContextFunc.
func (mock *elasticacheClientMock) WaitUntilCacheClusterDeletedWithContext(contextMoqParam context.Context, describeCacheClustersInput *elasticache.DescribeCacheClustersInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilCacheClusterDeletedWithContextFunc == nil {
		panic("elasticacheClientMock.WaitUntilCacheClusterDeletedWithContextFunc: method is nil but elasticacheClient.WaitUntilCacheClusterDeletedWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam            context.Context
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		WaiterOptions              []request.WaiterOption
	}{
		ContextMoqParam:            contextMoqParam,
		DescribeCacheClustersInput: describeCacheClustersInput,
		WaiterOptions:              waiterOptions,
	}
	mock.lockWaitUntilCacheClusterDeletedWithContext.Lock()
	mock.calls.WaitUntilCacheClusterDeletedWithContext = append(mock.calls.WaitUntilCacheClusterDeletedWithContext, callInfo)
	mock.lockWaitUntilCacheClusterDeletedWithContext.Unlock()
	return mock.WaitUntilCacheClusterDeletedWithContextFunc(contextMoqParam, describeCacheClustersInput, waiterOptions...)
}

// WaitUntilCacheClusterDeletedWithContextCalls gets all the calls that were made to WaitUntilCacheClusterDeletedWithContext.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilCacheClusterDeletedWithContextCalls())
func (mock *elasticacheClientMock) WaitUntilCacheClusterDeletedWithContextCalls() []struct {
	ContextMoqParam            context.Context
	DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
	WaiterOptions              []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam            context.Context
		DescribeCacheClustersInput *elasticache.DescribeCacheClustersInput
		WaiterOptions              []request.WaiterOption
	}
	mock.lockWaitUntilCacheClusterDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilCacheClusterDeletedWithContext
	mock.lockWaitUntilCacheClusterDeletedWithContext.RUnlock()
	return calls
}

// WaitUntilReplicationGroupAvailable calls WaitUntilReplicationGroupAvailableFunc.
func (mock *elasticacheClientMock) WaitUntilReplicationGroupAvailable(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) error {
	if mock.WaitUntilReplicationGroupAvailableFunc == nil {
		panic("elasticacheClientMock.WaitUntilReplicationGroupAvailableFunc: method is nil but elasticacheClient.WaitUntilReplicationGroupAvailable was just called")
	}
	callInfo := struct {
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	}{
		DescribeReplicationGroupsInput: describeReplicationGroupsInput,
	}
	mock.lockWaitUntilReplicationGroupAvailable.Lock()
	mock.calls.WaitUntilReplicationGroupAvailable = append(mock.calls.WaitUntilReplicationGroupAvailable, callInfo)
	mock.lockWaitUntilReplicationGroupAvailable.Unlock()
	return mock.WaitUntilReplicationGroupAvailableFunc(describeReplicationGroupsInput)
}

// WaitUntilReplicationGroupAvailableCalls gets all the calls that were made to WaitUntilReplicationGroupAvailable.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilReplicationGroupAvailableCalls())
func (mock *elasticacheClientMock) WaitUntilReplicationGroupAvailableCalls() []struct {
	DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
} {
	var calls []struct {
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	}
	mock.lockWaitUntilReplicationGroupAvailable.RLock()
	calls = mock.calls.WaitUntilReplicationGroupAvailable
	mock.lockWaitUntilReplicationGroupAvailable.RUnlock()
	return calls
}

// WaitUntilReplicationGroupAvailableWithContext calls WaitUntilReplicationGroupAvailableWithContextFunc.
func (mock *elasticacheClientMock) WaitUntilReplicationGroupAvailableWithContext(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilReplicationGroupAvailableWithContextFunc == nil {
		panic("elasticacheClientMock.WaitUntilReplicationGroupAvailableWithContextFunc: method is nil but elasticacheClient.WaitUntilReplicationGroupAvailableWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		WaiterOptions                  []request.WaiterOption
	}{
		ContextMoqParam:                contextMoqParam,
		DescribeReplicationGroupsInput: describeReplicationGroupsInput,
		WaiterOptions:                  waiterOptions,
	}
	mock.lockWaitUntilReplicationGroupAvailableWithContext.Lock()
	mock.calls.WaitUntilReplicationGroupAvailableWithContext = append(mock.calls.WaitUntilReplicationGroupAvailableWithContext, callInfo)
	mock.lockWaitUntilReplicationGroupAvailableWithContext.Unlock()
	return mock.WaitUntilReplicationGroupAvailableWithContextFunc(contextMoqParam, describeReplicationGroupsInput, waiterOptions...)
}

// WaitUntilReplicationGroupAvailableWithContextCalls gets all the calls that were made to WaitUntilReplicationGroupAvailableWithContext.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilReplicationGroupAvailableWithContextCalls())
func (mock *elasticacheClientMock) WaitUntilReplicationGroupAvailableWithContextCalls() []struct {
	ContextMoqParam                context.Context
	DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	WaiterOptions                  []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam                context.Context
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		WaiterOptions                  []request.WaiterOption
	}
	mock.lockWaitUntilReplicationGroupAvailableWithContext.RLock()
	calls = mock.calls.WaitUntilReplicationGroupAvailableWithContext
	mock.lockWaitUntilReplicationGroupAvailableWithContext.RUnlock()
	return calls
}

// WaitUntilReplicationGroupDeleted calls WaitUntilReplicationGroupDeletedFunc.
func (mock *elasticacheClientMock) WaitUntilReplicationGroupDeleted(describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput) error {
	if mock.WaitUntilReplicationGroupDeletedFunc == nil {
		panic("elasticacheClientMock.WaitUntilReplicationGroupDeletedFunc: method is nil but elasticacheClient.WaitUntilReplicationGroupDeleted was just called")
	}
	callInfo := struct {
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	}{
		DescribeReplicationGroupsInput: describeReplicationGroupsInput,
	}
	mock.lockWaitUntilReplicationGroupDeleted.Lock()
	mock.calls.WaitUntilReplicationGroupDeleted = append(mock.calls.WaitUntilReplicationGroupDeleted, callInfo)
	mock.lockWaitUntilReplicationGroupDeleted.Unlock()
	return mock.WaitUntilReplicationGroupDeletedFunc(describeReplicationGroupsInput)
}

// WaitUntilReplicationGroupDeletedCalls gets all the calls that were made to WaitUntilReplicationGroupDeleted.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilReplicationGroupDeletedCalls())
func (mock *elasticacheClientMock) WaitUntilReplicationGroupDeletedCalls() []struct {
	DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
} {
	var calls []struct {
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	}
	mock.lockWaitUntilReplicationGroupDeleted.RLock()
	calls = mock.calls.WaitUntilReplicationGroupDeleted
	mock.lockWaitUntilReplicationGroupDeleted.RUnlock()
	return calls
}

// WaitUntilReplicationGroupDeletedWithContext calls WaitUntilReplicationGroupDeletedWithContextFunc.
func (mock *elasticacheClientMock) WaitUntilReplicationGroupDeletedWithContext(contextMoqParam context.Context, describeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput, waiterOptions ...request.WaiterOption) error {
	if mock.WaitUntilReplicationGroupDeletedWithContextFunc == nil {
		panic("elasticacheClientMock.WaitUntilReplicationGroupDeletedWithContextFunc: method is nil but elasticacheClient.WaitUntilReplicationGroupDeletedWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                context.Context
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		WaiterOptions                  []request.WaiterOption
	}{
		ContextMoqParam:                contextMoqParam,
		DescribeReplicationGroupsInput: describeReplicationGroupsInput,
		WaiterOptions:                  waiterOptions,
	}
	mock.lockWaitUntilReplicationGroupDeletedWithContext.Lock()
	mock.calls.WaitUntilReplicationGroupDeletedWithContext = append(mock.calls.WaitUntilReplicationGroupDeletedWithContext, callInfo)
	mock.lockWaitUntilReplicationGroupDeletedWithContext.Unlock()
	return mock.WaitUntilReplicationGroupDeletedWithContextFunc(contextMoqParam, describeReplicationGroupsInput, waiterOptions...)
}

// WaitUntilReplicationGroupDeletedWithContextCalls gets all the calls that were made to WaitUntilReplicationGroupDeletedWithContext.
// Check the length with:
//     len(mockedelasticacheClient.WaitUntilReplicationGroupDeletedWithContextCalls())
func (mock *elasticacheClientMock) WaitUntilReplicationGroupDeletedWithContextCalls() []struct {
	ContextMoqParam                context.Context
	DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
	WaiterOptions                  []request.WaiterOption
} {
	var calls []struct {
		ContextMoqParam                context.Context
		DescribeReplicationGroupsInput *elasticache.DescribeReplicationGroupsInput
		WaiterOptions                  []request.WaiterOption
	}
	mock.lockWaitUntilReplicationGroupDeletedWithContext.RLock()
	calls = mock.calls.WaitUntilReplicationGroupDeletedWithContext
	mock.lockWaitUntilReplicationGroupDeletedWithContext.RUnlock()
	return calls
}
